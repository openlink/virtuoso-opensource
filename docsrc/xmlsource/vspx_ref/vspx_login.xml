<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="vspx_login">
<refmeta>
  <refentrytitle>vspx_login</refentrytitle>
  <refmiscinfo>vspx_control</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>vspx_login</refname>
  <refpurpose>controls authentication for a particular page</refpurpose>
</refnamediv>
<refsynopsisdiv>
  <funcsynopsis id="syn_vspx_login">
    <funcprototype id="proto_vspx_login">
      <funcdef>
        <function>login</function>
      </funcdef>
      <attributes>
        <attribute>name (required) </attribute>
        <attribute>annotation (optional) </attribute>
        <attribute>initial-enable (optional) </attribute>
        <attribute>realm (required) </attribute>
        <attribute>mode (required) </attribute>
        <attribute>user-password (optional) </attribute>
        <attribute>user-password-check (optional) </attribute>
      </attributes>
      <childs>
        <child>after-data-bind</child>
        <child>after-data-bind-container</child>
        <child>before-data-bind</child>
        <child>before-data-bind-container</child>
        <child>on-post</child>
        <child>on-post-container</child>
        <child>before-render</child>
        <child>before-render-container</child>
        <child>variable</child>
        <child>label</child>
        <child>url</child>
        <child>data-grid</child>
        <child>data-set</child>
        <child>data-list</child>
        <child>tab</child>
        <child>tree</child>
        <child>include</child>
        <child>error-summary</child>
        <child>radio-button</child>
        <child>button</child>
        <child>check-box</child>
        <child>select-list</child>
        <child>textarea</child>
        <child>text</child>
        <child>update-field</child>
        <child>key</child>
        <child>template</child>
        <child>login-form</child>
      </childs>
      <class>
        <screen><![CDATA[
			    
			    create type vspx_login under vspx_form
			    as (
				vl_realm varchar,  		-- realm for authentication, application specific
				vl_mode varchar,		-- url poisoning, cookie or digest mode of control
				vl_pwd_get varchar,		-- name of password verification PL function
				vl_usr_check varchar,		-- name of user verification PL function 
				vl_authenticated int default 0,	-- designate state of control
				vl_user varchar,		-- user being authenticated
				vl_sid varchar,			-- session ID
				vl_no_login_redirect varchar,	-- URL to redirect if not authenticated
				vl_logout_in_progress int default 0 -- internal use	
			       )
			    temporary self as ref
			    overriding method vc_view_state (stream any) returns any
			    ;
			    
			]]>
        </screen>
      </class>
    </funcprototype>
  </funcsynopsis>
</refsynopsisdiv>
<refsect1 id="desc_vspx_login">
  <title>Description</title>
  <para>
    <function>vspx_login</function>
The login controls authentication for a particular page.  Depending on options it may or may not be visible.
This works together with a login-form and logout-button controls.  The storage of passwords and user names is left to the application, which can specify functions called by these widgets.  
The server keeps login information in the table:

create table VSPX_SESSION (VS_REALM varchar, VS_SID varchar, VS_UID varchar, VS_STATE long varchar,
  primary key (VS_REALM, VS_SID));

This table is shared between all vspx applications, each with their login differentiated by realm.
The state is an array of name value pairs which will be accessed through connection_get and connection_set inside the page code.
</para>
</refsect1>
<refsect1 id="attrs_vspx_login">
  <title>Attributes</title>
  <refsect2>
    <title>name</title>
    <para>A unique name identifying the control.</para>
  </refsect2>
  <refsect2>
    <title>annotation</title>
    <para>A human readable comment.</para>
  </refsect2>
  <refsect2>
    <title>initial-enable</title>
    <para>Designates is control visible or not initially. Could be data-bound to an SQL expression.</para>
  </refsect2>
  <refsect2>
    <title>realm</title>
    <para>This is the authentication realm name.</para>
  </refsect2>
  <refsect2>
    <title>mode</title>
    <para>This specifies the preferred mode of keeping session and login information.
In the case of url and cookie the name and password will have to be supplied in a form submit.  The vspx:login-form control provides a convenient way of doing this.  It may be desired only to have this control on a page accessed via SSL. Many values may be separated by spaces.  This is the order of preference.  The system will use the first available depending on the user agent.</para>
  </refsect2>
  <refsect2>
    <title>user-password</title>
    <para>The name of a SQL function which will retrieve the password given a user name.  If digest authentication is to be possible, this function must be specified. Example:  
create procedure
sql_user_password (in name varchar)
{
  declare pass varchar;
  pass := NULL;
  whenever not found goto none;
  select pwd_magic_calc (U_NAME, U_PASSWORD, 1) into pass
          from SYS_USERS where U_NAME = name and U_SQL_ENABLE = 1 and U_IS_ROLE = 0;
none:
  return pass;
}
;</para>
  </refsect2>
  <refsect2>
    <title>user-password-check</title>
    <para>This is a function which takes the user name and password (unencrypted) and returns true if these match, false otherwise.

If there will be session state which will automatically be extracted from the application&#39;s user repository upon login, then either of these functions may set this using connection_set.  This will persist in the session if the login is successful and will be discarded otherwise.  An example of such information is a user privilege class, real name, email or such.  These functions may be called once or more times during the session, but no more than one call at the start is guaranteed. Example: 
create procedure
sql_user_password_check (in name varchar, in pass varchar)
{
  if (exists (select 1 from SYS_USERS where U_NAME = name and U_SQL_ENABLE = 1 and U_IS_ROLE = 0 and
        pwd_magic_calc (U_NAME, U_PASSWORD, 1) = pass))
    return 1;
  return 0;
}
;
Note: when a digest specified as a mode the login control will only call user_password and others will only call user_password_check.
</para>
  </refsect2>
</refsect1>
<refsect1 id="childs_vspx_login">
  <title>Children</title>
  <refsect2>
    <title>template</title>
    <para>The container for any optional, repeatable or otherwise grouped controls or code. The type modifier is used to specify special kind of templates (i.e. repeatable content or tree node representation)</para>
  </refsect2>
  <refsect2>
    <title>login-form</title>
    <para>
login-form is the control for getting login information.  This may only appear inside a login.
Its function will depend on the type of login being attempted.  If the type is digest, this is a button which, when submitted, will send the digest challenge.

If the url or cookie session mode is chosen, this will be a form of 2 fields with user name and password and a submit button.

if the standard form is not suitable, this can be an arbitrary form.  This must post  buttons values named &quot;username&quot; and &quot;password&quot; and a submit button named &quot;login&quot;.  No children need be specified if the default form is OK.

If the redirect attribute of template[@type=if-no-login] is not specified, 
the contents of this child are instantiated and shown in the place of the login control.  
This can be arbitrary content. 

			</para>
  </refsect2>
  <refsect2>
    <title>button</title>
    <para>Scriptable version of Submit Button of the HTML form. Depending of 
&#39;action&#39; attribute it may have variants. In some of these variants button will not have submit function (as select and browse button), so in that case they will perform special function for selecting or pop up of new window.  
</para>
  </refsect2>
</refsect1>
<refsect1 id="examples_vspx_login">
  <title>Examples</title>
  <example id="ex_vspx_login">
    <title>Simple example</title>
    <para>This example shows simple page which require login
			</para>
    <screen><![CDATA[
			    
			<html>
			<body>
			<v:page name="login_page_01" xmlns:v="http://example.com/vspx/" >
			   <v:login name="login01" realm="vspx" mode="url" 
				    user-password="sql_user_password" 
				    user-password-check="sql_user_password_check" >
			   <v:template type="if-no-login">
			     <P> You are not logged in </P>
			   </v:template> 
			  
			   <v:login-form name="login_frm01" 
					 required="1" 
					 title="Login" 
					 user-title="User Name" 
					 password-title="Password" 
					 submit-title="Login" >
			   </v:login-form> 

			   <v:template type="if-login">
			       <P> Welcome to VSPX login demo </P>
			       <P> SID: <?vsp http (self.sid); ?> </P>
			       <P> UID: <?vsp http_value (connection_get ('vspx_user')); ?> </P>
			       <v:button name="logout_button_01" action="logout" value="Logout" />
			   </v:template>
			  </v:login> 
			</v:page>
			</body>
			</html>
			    
			]]>
    </screen>
  </example>
</refsect1>
</refentry>