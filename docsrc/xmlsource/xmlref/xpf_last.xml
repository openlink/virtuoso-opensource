<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- 
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="xpf_last">
  <refmeta> 
    <refentrytitle>last</refentrytitle> 
    <refmiscinfo>XPATH</refmiscinfo>
  </refmeta> 
  <refnamediv> 
    <refname>last</refname> 
    <refpurpose>Returns the context size from expression evaluation context.</refpurpose>
  </refnamediv> 
  <refsynopsisdiv> 
    <funcsynopsis id="xpf_syn_last"> 
      <funcprototype id="xpf_proto_last">
        <funcdef>number <function>last</function></funcdef> 
	<void/>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="xpf_desc_last"><title>Description</title>
<para>
Context size is the number of nodes in the node-set where the context node comes from.
For the most popular case, when last() is used inside a predicate,
and the predicate relates to some axis of the path,
last() is the number of elements found by that axis at once;
in other words, the number of elements to be tested by predicate.

</para></refsect1>
  <refsect1 id="xpf_ret_last"><title>Return Types</title><para>Positive integer.</para></refsect1>
  <refsect1 id="xpf_examples_last"><title>Examples</title>
    <example id="xpf_ex_last"><title>Call of last() inside a predicate</title>
      <para>Find all waybills with more than one &lt;address&gt; child inside the &lt;waybill&gt; element.</para>
      <screen>//waybill/address[last()&gt;1]</screen>
    </example>
  </refsect1>
  <refsect1 id="xpf_seealso_last"><title>See Also</title>
    <para><link linkend="xpf_position">position()</link><link linkend="xpf_count">count()</link></para>
  </refsect1>
</refentry>

