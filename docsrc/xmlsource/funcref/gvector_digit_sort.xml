<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  
  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
  project.
  
  Copyright (C) 1998-2019 OpenLink Software
  
  This project is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; only version 2 of the License, dated June 1991.
  
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.
  
  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

  : template.sh,v 1.6 2009/04/14 11:39:26 source Exp $
-->
<refentry id="fn_gvector_digit_sort">
  <refmeta>
    <refentrytitle>gvector_digit_sort</refentrytitle>
    <refmiscinfo>array</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>gvector_digit_sort</refname>
    <refpurpose>Performs a stable "digit" sort of a given array.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_gvector_digit_sort">
      <funcprototype id="fproto_gvector_digit_sort">
        <funcdef><function>gvector_digit_sort</function></funcdef>
	<paramdef>inout <parameter>data</parameter> vector</paramdef>
	<paramdef>in <parameter>elements_in_group</parameter> integer</paramdef>
	<paramdef>in <parameter>key_idx_in_group</parameter> integer</paramdef>
	<paramdef>in <parameter>sort_ascending</parameter> integer</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_gvector_digit_sort">
    <title>Description</title>
    <para>The function gets an vector that consists of groups of elements.
All groups are of equal size, namely <parameter>elements_in_group</parameter>, so the total length of <parameter>data</parameter> vector
should be whole multiple of <parameter>elements_in_group</parameter>.
One element of each group is a key of sorting; it is identified by its zero-based position within the group, <parameter>key_idx_in_group</parameter>.
The sorting procedure edits <parameter>data</parameter> and reorders groups in such a way that their keys become ordered ascending or descending,
depending on <parameter>sort_ascending</parameter> flag.</para>
<para>The simplest case is plain sorting of a uniform array. In this case every element is an individual group, <parameter>elements_in_group</parameter> is 1
and <parameter>key_idx_in_group</parameter> is 0.</para>
<para>Other popular case is sorting of result of <link linkend="fn_dict_to_vector"><function>dict_to_vector</function></link>().
In this case, every item of the original dictionary is represended in the vector by a pair of elements (<parameter>elements_in_group</parameter> is 2),
so to sort items by their keys, the <parameter>key_idx_in_group</parameter> is 0 and to sort them by associated values,
the <parameter>key_idx_in_group</parameter> is 1.</para>
<para>The performed sorting is stable. It means that it will not permutate groups in vain: it will preserve the relative order of any two groups that have equal keys.
Using this property, one may sort groups by a "secondary" key and then by "primary" key.
E.g., if each group contain elements for country code and province code then it is possible to make two-field sorting by sorting first by province and then by country;
that will work even if province codes are not globally unique (say, if they're enumerated from 1 in each country).</para>
<para>This function supports only integer values of sorting keys. To sort by strings, floating-point numbers etc., use
<link linkend="fn_gvector_sort"><function>gvector_sort</function></link>().
However, out of these two similar functions, only gvector_digit_sort() is stable-sort.</para>
  </refsect1>
  <refsect1 id="params_gvector_digit_sort">
    <title>Parameters</title>
    <refsect2><title>data</title>
      <para>A group vector (gvector) to sort.</para>
    </refsect2>
    <refsect2><title>elements_in_group</title>
      <para>The number of vector elements in every group, usually 1, should be in range 1 to 1024.</para>
    </refsect2>
    <refsect2><title>key_idx_in_group</title>
      <para>Zero-based position of key element in group, should be nonnegative and less than <parameter>elements_in_group</parameter>.</para>
    </refsect2>
    <refsect2><title>sort_ascending</title>
      <para>Direction of sorting, nonzero for ascending sort, zero for descending.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_gvector_digit_sort"><title>Return Types</title>
    <para>The function returns number of groups in the <parameter>data</parameter> vector</para>.
  </refsect1>
<!--
  <refsect1 id="errors_gvector_digit_sort">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
  <refsect1 id="examples_gvector_digit_sort">
    <title>Examples</title>
    <example id="ex_gvector_digit_sort"><title></title>
      <para></para>
      <screen><![CDATA[
]]>
</screen>
    </example>
  </refsect1> -->
  <refsect1 id="seealso_gvector_digit_sort">
    <title>See Also</title>
    <para><link linkend="fn_gvector_sort"><function>gvector_sort()</function></link></para>
    <para><link linkend="fn_rowvector_digit_sort"><function>rowvector_digit_sort()</function></link></para>
<!--    <para><link linkend="fn_rowvector_sort"><function>rowvector_sort</function></link></para> -->
  </refsect1>
</refentry>
