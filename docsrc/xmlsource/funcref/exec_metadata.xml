<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  
  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
  project.
  
  Copyright (C) 1998-2019 OpenLink Software
  
  This project is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; only version 2 of the License, dated June 1991.
  
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License for more details.
  
  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

-->
<refentry id="fn_exec_metadata">
  <refmeta>
    <refentrytitle>exec_metadata</refentrytitle>
    <refmiscinfo>sql</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>exec_metadata</refname>
    <refpurpose>Compiles a SQL statement and returns the metadata</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_exec_metadata">
      <funcprototype id="fproto_exec_metadata">
        <funcdef><function>exec_metadata</function></funcdef>
	<paramdef>in <parameter>str</parameter> varchar</paramdef>
	<paramdef>out <parameter>state</parameter> varchar</paramdef>
	<paramdef>out <parameter>message</parameter> varchar</paramdef>
	<paramdef>out <parameter>metadata</parameter> vector</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_exec_metadata">
    <title>Description</title>
    <para>This function provides dynamic SQL capabilities in Virtuoso PL.
    The first argument is an arbitrary SQL statement, which may contain
    parameter placeholders. The function returns as output parameters a
    SQL state, error message, column metadata if the statement is a select.</para>
  </refsect1>
  <refsect1 id="params_exec_metadata">
    <title>Parameters</title>
    <refsect2><title><parameter>str</parameter></title>
      <para>A <type>varchar</type> containing arbitrary SQL using ?'s for parameter markers.</para>
    </refsect2>
    <refsect2><title>state</title>
      <para>An output parameter of type <type>varchar</type> set to the 5 character SQL state if the exec resulted an error. Not set if an error is not present.</para>
    </refsect2>
    <refsect2><title>message</title>
      <para>An output parameter of type <type>varchar</type> set to SQL error message associated with the error. Not set if an error is not present.</para>
    </refsect2>
    <refsect2><title>metadata</title>
      <para>An output parameter of type <type>vector</type> returning the metadata of the statement and its result.</para>
      <table><title>The stmt_meta array</title>
        <tgroup cols="3">
	  <thead><row><entry>Element</entry><entry>Name</entry><entry>Description</entry></row></thead>
	  <tbody>
	    <row>
	      <entry>0</entry>
	      <entry>COLS</entry>
	      <entry>An array containing description of each column in the result
	      set (see table below for contents)</entry>
	    </row>
	    <row>
	      <entry>1</entry>
	      <entry>STMT_SELECT</entry>
	      <entry>An <type>integer</type> 1 indicates that the statement is a
	      select, otherwise it is a DML statement.</entry>
	    </row>
	    <row>
	      <entry>2..</entry>
	      <entry>N/A</entry>
	      <entry>Trailing elements may appear, but they should not be used</entry>
	    </row>
	  </tbody>
        </tgroup>
      </table>
      <table><title>Columns array of metadata</title>
        <tgroup cols="3">
	  <thead><row><entry>Element</entry><entry>Name</entry><entry>Description</entry></row></thead>
	  <tbody>
	    <row>
	      <entry>0</entry><entry>name</entry><entry>Column name</entry>
	    </row>
	    <row>
	      <entry>1</entry>
	      <entry>type</entry>
	      <entry>Column type as an internal type code corresponding,
	      but not equal to ODBC SQL type codes.</entry>
	    </row>
	    <row>
	      <entry>2</entry>
	      <entry>scale</entry>
	      <entry>column scale</entry>
	    </row>
	    <row>
	      <entry>3</entry>
	      <entry>precision</entry>
	      <entry>column precision</entry>
	    </row>
	    <row>
	      <entry>4</entry>
	      <entry>nullable</entry>
	      <entry>indicates nullable column</entry>
	    </row>
	    <row>
	      <entry>5</entry>
	      <entry>updatable</entry>
	      <entry>indicates updatable column</entry>
	    </row>
	    <row>
	      <entry>6</entry>
	      <entry>searchable</entry>
	      <entry>indicates searchable column</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </refsect2>
  </refsect1>
  <refsect1 id="errors_exec_metadata">
    <title>Errors</title>

<!-- In case of non-function-specific errors, i.e. only common
     parameter errors are signalled, comment out the table below 
     otherwise add the unique error values as individual errorcodes -->
<para>
The function will generate a SQL 22023 error value if a supplied parameter is not of the type expected.
</para>
<tip>
<title>See Also:</title>
<para>
<link linkend="errors">List of SQL 22023 errors.</link>
</para>
</tip>
  </refsect1>
  <refsect1 id="examples_exec_metadata">
    <title>Examples</title>
    <example id="ex_exec_metadata"><title>Simple Use</title>
      <screen><![CDATA[
create procedure get_meta (in str varchar)
{
  declare state, message, mdta any;
  state := '00000';
  exec_metadata (str, state, message, mdta);
  if (state <> '00000')
    signal (state, message);
  return mdta;  
}
]]>
</screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_exec_metadata">
    <title>See Also</title>
    <para><link linkend="fn_exec"><function>exec()</function></link></para>
    <para><link linkend="fn_exec_next"><function>exec_next()</function></link></para>
    <para><link linkend="fn_exec_close"><function>exec_close()</function></link></para>
  </refsect1>
</refentry>
