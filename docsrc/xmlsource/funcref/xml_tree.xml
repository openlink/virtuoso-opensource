<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_xml_tree">
  <refmeta>
    <refentrytitle>xml_tree</refentrytitle>
    <refmiscinfo>xml</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>xml_tree</refname>
    <refpurpose>Parses an XML fragment and returns the parse tree as nested vectors.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_xml_tree">
      <funcprototype id="fproto_xml_tree">
        <funcdef><function>xml_tree</function></funcdef>
        <paramdef>in <parameter>document</parameter>  varchar</paramdef>
        <paramdef><optional>in <parameter>parser_mode</parameter> integer</optional></paramdef>
        <paramdef><optional>in <parameter>base_uri</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>content_encoding</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>content_language</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>dtd_validator_config</parameter> varchar</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_xml_tree">
    <title>Description</title>
      <para>This parses the argument, which is expected to be a well formed XML
      fragment and returns a parse tree as a structure of nested heterogeneous vectors.</para>
  </refsect1>
  <refsect1 id="params_xml_tree">
    <title>Parameters</title>
    <refsect2><title>document </title>
      <para>(mandatory) A well formed XML or HTML document</para></refsect2>
    <refsect2><title>parser_mode</title>
      <para>0, 1 or 2; 0 - XML parser mode, 1 - HTML parser mode, 2 - 'dirty HTML' mode (with quiet recovery after any syntax error)</para></refsect2>
    <refsect2><title>base_uri</title>
      <para>(optional) in HTML parser mode change all absolute references to relative from given base_uri (http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;)</para></refsect2>
    <refsect2><title>content_encoding</title>
      <para>(optional) string with content encoding type of &lt;document&gt; valid is 'ASCII', 'ISO', 'UTF8', 'ISO8859-1', 'LATIN-1'.</para></refsect2>
    <refsect2><title>content_language</title>
      <para>(optional) - string with language tag of content of &lt;document&gt;; valid names are listed in IETF RFC 1766, default is 'x-any' (it means 'mix of words from various human languages).</para></refsect2>
    <refsect2><title>dtd_validator_config</title>
      <para>configuration string for DTD validator, default is empty string meaning that DTD validator should be fully disabled.
 See <link linkend="dtd_config">Configuration Options of the DTD Validator</link> for details.</para></refsect2>
  </refsect1>
  <refsect1 id="ret_xml_tree"><title>Return Types</title><para>vector of vectors representing the parsed tree of XML.</para></refsect1>
<!--
<refsect1 id="errors_xml_tree"><title>Errors</title>
    <table><title>Errors signalled by </title>
      <tgroup cols="4">
      <thead>
	  <row><entry>SQL State</entry><entry>Error Code</entry><entry>Error Text</entry><entry>Description</entry></row>
     </thead>
	<tbody>
	  <row>
	    <entry><errorcode></errorcode></entry>
	    <entry><errorcode></errorcode></entry>
	    <entry><errorname></errorname></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
-->
  <refsect1 id="examples_xml_tree"><title>Examples</title>
    <example id="ex_xml_tree"><title>Making an XML tree</title>
      <screen>declare tree any;

tree := xml_tree (file_to_string ('doc.html'), 1,
		'http://localhost.localdomain/', 'ISO');
...
tree := xml_tree (file_to_string ('doc.xml'));
</screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_xml_tree"><title>See Also</title>
    <para><link linkend="fn_xslt"><function>xslt</function></link>,
    <link linkend="fn_xml_uri_get"><function>xml_uri_get</function></link>,
    <link linkend="fn_xml_validate_dtd"><function>xml_validate_dtd</function></link>.</para>
  </refsect1>
</refentry>

