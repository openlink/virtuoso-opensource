<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_createXML">
  <refmeta>
    <refentrytitle>createXML</refentrytitle>
    <refmiscinfo>xml</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>createXML</refname>
    <refpurpose></refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_createXML">
      <funcprototype id="fproto_createXML">
        <funcdef>XMLType <function>createXML</function></funcdef>
	<paramdef>in <parameter>src</parameter> any</paramdef>
	<paramdef><optional>in <parameter>schema_uri</parameter> any</optional></paramdef>
	<paramdef><optional>in <parameter>validated</parameter> any</optional></paramdef>
	<paramdef><optional>in <parameter>wellformed</parameter> any</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_createXML">
    <title>Description</title>
    <para>This function creates an XMLType instance. It works absolutely identically to the
<link linkend="fn_XMLType.XMLType"><function>XMLType()</function></link> constructor and
    	is provided solely for compatibility.</para>
  </refsect1>
  <refsect1 id="params_createXML">
    <title>Parameters</title>
    <refsect2><title>src</title>
      <para>An XML entity or a value that can be converted to an XML entity.</para>
    </refsect2>
    <refsect2><title>schema_uri</title>
      <para>An URI of the schema of the document. The default is NULL to make result non-schema based.</para>
    </refsect2>
    <refsect2><title>validated</title>
      <para>An integer flag that indicates if the document is already validated against the schema of the document
      	(this is to avoid redundant validations). The default is 0.</para>
    </refsect2>
    <refsect2><title>wellformed</title>
      <para>This parameter is unused and is listed solely for compatibility.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_createXML"><title>Return Types</title>
    <para>The function returns a new instance of XMLType.</para>
  </refsect1>
  <refsect1 id="examples_createXML">
    <title>Examples</title>
    <example id="ex_createXML"><title>Sample example</title>
      <screen><![CDATA[
create table XMLTYPE_TEST (I integer primary key, XMLVAL long xml)

Done. -- 00000 msec.

insert into XMLTYPE_TEST values (1, createXML('<emp><empno>221</empno><ename>John</ename></emp>'))

Done. -- 00000 msec.

insert into XMLTYPE_TEST values (2, createXML('<po><pono>331</pono><poname>PO_1</poname></po>'))

Done. -- 00000 msec.

select e.XMLVAL.extract ('//empno/text()').getNumVal() as EMPNO
  from XMLTYPE_TEST as e
  where e.XMLVAL.existsNode('/emp/empno') = 1
EMPNO
DECIMAL
_______________________________________________________________________________

221

1 Rows. -- 00000 msec. 
]]>
</screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_createXML">
    <title>See Also</title>
    <para><link linkend="fn_XMLType.XMLType"><function>XMLType()</function></link></para>
    <para><link linkend="fn_xtree_doc"><function>xtree_doc()</function></link></para>
    <para><link linkend="fn_xper_doc"><function>xper_doc()</function></link></para>
  </refsect1>
</refentry>
