<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- 
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_xml_load_mapping_schema_decl">
  <refmeta>
    <refentrytitle>xml_load_mapping_schema_decl</refentrytitle>
    <refmiscinfo>xml</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>xml_load_mapping_schema_decl</refname>
    <refpurpose>creates a xml view from mapping schema. 
    </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_xml_load_mapping_schema_decl"> 
      <funcprototype id="fproto_xml_load_mapping_schema_decl">
        <funcdef><function>xml_load_mapping_schema_decl</function></funcdef>
	<paramdef>in <parameter>base_uri</parameter> varchar</paramdef>
	<paramdef>in <parameter>mapping_schema_file</parameter> varchar</paramdef>
        <paramdef>in <parameter>content_encoding</parameter> varchar</paramdef>
        <paramdef>in <parameter>content_language</parameter> varchar</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc"><title>Description</title> <para>
    <function>xml_load_mapping_schema_decl</function> takes a file containing mapping schema and creates a xml view.
    </para>
  </refsect1>
  <refsect1 id="params"><title>Parameters</title>
    <refsect2><title>base_uri</title>
      <para>in HTML parser mode change all absolute references to relative from given base_uri (http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;)</para></refsect2>
    <refsect2><title>mapping_schema_file</title>
      <para>well formed XML document containing a mapping schema</para>
    </refsect2>
    <refsect2><title>content_encoding</title>
      <para>string with content encoding type of &lt;document&gt;; valid are 'ASCII', 'ISO', 'UTF8', 'ISO8859-1', 'LATIN-1' etc., defaults are 'UTF-8' for XML mode and 'LATIN-1' for HTML mode</para></refsect2>
    <refsect2><title>content_language</title>
      <para>string with language tag of content of &lt;document&gt;; valid names are listed in IETF RFC 1766, default is 'x-any' (it means 'mix of words from various human languages)</para></refsect2>
  </refsect1>

  <refsect1 id="examples"><title></title>
    <example id="ex_xml_load_mapping_schema_decl"><title>Creating a xml view from a mapping schema</title>
<para>The xml view created by </para>
<programlisting>
 xml_load_mapping_schema_decl (
    'http://localhost.localdomain/xmlrepository',
    'catmp.xsd', 'UTF-8', 'x-any');
</programlisting>
 <para>from the file catmp.xsd containing the following mapping schema</para>
<programlisting><![CDATA[
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:sql="urn:schemas-microsoft-com:mapping-schema">
<xsd:annotation>
  <xsd:appinfo>
    <sql:relationship name="CategoryProduct"
          parent="Demo.demo.Categories"
          parent-key="CategoryID"
          child="Demo.demo.Products"
          child-key="CategoryID" />
  </xsd:appinfo>
</xsd:annotation>

  <xsd:element name="category" sql:relation="Demo.demo.Categories" type="CategoryType" />
   <xsd:complexType name="CategoryType" >
     <xsd:sequence>
        <xsd:element name="product" 
                     sql:relation="Demo.demo.Products"
                     sql:relationship="CategoryProduct" >
           <xsd:complexType>
              <xsd:attribute name="ProductName" type="xsd:string" />
           </xsd:complexType>
        </xsd:element>
     </xsd:sequence>
        <xsd:attribute name="CategoryID"  type="xsd:integer" /> 
        <xsd:attribute name="description"  sql:field="Description"  type="xsd:string" />
    </xsd:complexType>
</xsd:schema>
]]></programlisting>
<para> is identical to xml view created by </para>
<programlisting>
create xml view "cat" as
{
  "Demo"."demo"."Categories" "C" as "category"
	("CategoryID", "Description" as "description")
    {
      "Demo"."demo"."Products" "P" as "product"  ("ProductName")
	on ("P"."CategoryID" = "C"."CategoryID")
    }
}
</programlisting>
    </example>
  </refsect1>
  <refsect1 id="seealso"><title>See Also</title>
    <para><link linkend="fn_xml_load_schema_decl"><function>xml_load_schema_decl()</function></link></para>
    <para><link linkend="fn_xml_create_tables_from_mapping_schema_decl"><function>xml_load_schema_decl()</function></link></para>
    <para><link linkend="fn_xml_view_schema"><function>xml_view_schema()</function></link></para>
  </refsect1>
</refentry>
