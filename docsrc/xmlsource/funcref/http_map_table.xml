<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_http_map_table">
  <refmeta>
    <refentrytitle>http_map_table</refentrytitle>
    <refmiscinfo>ws</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>http_map_table</refname>
    <refpurpose>Update internal HTTP mapping table</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_http_map_table">
      <funcprototype id="fproto_http_map_table">
        <funcdef><function>http_map_table</function></funcdef>
        <paramdef>in <parameter>logical_path</parameter> varchar</paramdef>
        <paramdef>in <parameter>physical_path</parameter> varchar</paramdef>
        <paramdef>in <parameter>vhost</parameter> varchar</paramdef>
        <paramdef>in <parameter>listen_host</parameter> varchar</paramdef>
        <paramdef><optional>in <parameter>stored_in_dav</parameter> integer</optional></paramdef>
        <paramdef><optional>in <parameter>is_browseable</parameter> integer</optional></paramdef>
        <paramdef><optional>in <parameter>default_page</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>security_restriction</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>authentication</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>auth_function</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>postprocess_function</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>execute_vsp_as</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>execute_soap_as</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>have_persistent_session_variables</parameter> integer</optional></paramdef>
        <paramdef><optional>in <parameter>soap_options</parameter> any</optional></paramdef>
        <paramdef><optional>in <parameter>auth_options</parameter> any</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_http_map_table"><title>Description</title>
    <para>This function requires dba privileges.</para>
    <para>This function inserts an entry defining a virtual directory into the HTTP maps table.</para>
  </refsect1>
  <refsect1 id="params_http_map_table"><title>Parameters</title>
    <refsect2><title>logical_path</title>
      <para>The absolute path string which the user agent will pass to the server in path part of URI</para></refsect2>
    <refsect2><title>physical_path</title>
      <para>The absolute path of the real content.  For directories or WebDAV collections physical_path MUST end
with a slash '/' character, otherwise the point will be treated as a file (or resource).</para></refsect2>
    <refsect2><title>vhost</title>
      <para>The host name that will be sent to the user-agent in HTTP request.  This MUST be valid
fully-qualified host name or alias and port separated with semi-column ':' character.  This parameter
accept special value '*ini*' which will be replaced with hostname and port from INI file.</para></refsect2>
    <refsect2><title>listen_host</title>
      <para>The fully-qualified host name or IP address and port which will be listened on.  Warning: This
is only used to make an in-memory mapping, and will not start listening (for starting and stopping a
listener see <link linkend="fn_http_listen_host"><function>http_listen_host</function></link>).</para></refsect2>
    <refsect2><title>stored_in_dav</title>
      <para>Determine if the physical location is a WebDAV resource or collection.  Can
      accept zero or one (1) integer values.</para>
    </refsect2>
    <refsect2><title>is_browseable</title>
      <para>Determine if directory browsing is allowed for this location.  Accepts integer
      values 0 or 1, treated as false and true respectively.  If true (1) enabled and a default
      page is not specified, a GET request of an URL pointing to this location will generate a
      directory listing as a response to the user-agent.</para>
    </refsect2>
    <refsect2><title>default_page</title>
      <para>File name of default page that will be sent to the user-agent if
      <parameter>physical_path</parameter> is a directory.</para>
    </refsect2>
    <refsect2><title>security_restriction</title>
      <para>A keyword that denotes security type controlling access to the location.  Can
      be 'Digest', 'SSL' or NULL.  This value can be used in the <function>auth_function</function>
      hook using <link linkend="fn_http_map_get"><function>http_map_get</function></link>.</para>
    </refsect2>
    <refsect2><title>authentication</title>
      <para>A string value that will be passed as a parameter to the <function>auth_function</function>
      hook</para>
    </refsect2>
    <refsect2><title>auth_function</title>
      <para>Fully qualified name of a PL procedure that will perform HTTP authentication.
      The function must accept one input parameter of type <type>VARCHAR</type> and MUST return
      integer 0 or 1 as false or true, respectively.  A zero return value from the authentication
      function will cause the HTTP request to be rejected.</para>
    </refsect2>
    <refsect2><title>postprocess_function</title>
      <para>Fully qualified name of a PL procedure that will be called every time after page processing.
      Usual purpose is to store session variables in a session table.</para>
    </refsect2>
    <refsect2><title>execute_vsp_as</title>
      <para>The name of DB user, as whom VSP pages will be executed.  If the
      user is not specified (is null), execution is forbidden.</para>
    </refsect2>
    <refsect2><title>execute_soap_as</title>
      <para>The name of DB user, as whom SOAP calls will be executed.  If null,
      execution of SOAP calls is forbidden.</para>
    </refsect2>
    <refsect2><title>have_persistent_session_variables</title>
      <para>Flag that determines if the location has persistent session variables.
      The value of this flag can be retrieved with
      <link linkend="fn_http_map_get"><function>http_map_get</function></link>.</para>
    </refsect2>
    <refsect2><title>soap_options</title>
      <para>A vector with keyword/value pairs. Currently, valid keywords are &apos;Namespace&apos;
      and &apos;ServiceName&apos;. Namespace is a string defining the namespace for the SOAP service.
      ServiceName is a string containing name of the SOAP service. See example.</para>
    </refsect2>
    <refsect2><title>auth_options</title>
      <para>The value of this parameter can be used in the authentication hook.
      In practice an array of keyword/value pairs would be the input but a single
      string could be supplied.  The user-specific authentication hook can retrieve
      the options by calling the <link linkend="fn_http_map_get"><function>http_map_get('auth_opts')</function></link>
      function.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="examples_http_map_table"><title>Examples</title>
    <example id="ex_http_map_table"><title>Inserting A Map Entry</title>
      <screen>
http_map_table ('/vdir', '/admin/', 'www.foo.com', 'host.foo.com');
</screen>
    </example>
    <example id="ex_http_map_table"><title>Create entry for a SOAP service</title>
      <screen>http_map_table ('/soapapp', '/soapapp/', 'www.foo.com', 'host.foo.com', NULL,
                 NULL, NULL, 'SSL', 'SOAP_APP', 'mysoapapp_auth_hook', 'mysoapapp_post_processor',
                 NULL, 'mysoapapp_user', 1, vector ('NameSpace', 'http://example.com/soap/v11/',
                                                  'ServiceName','soapApp'));
</screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_http_map_table"><title>See Also</title>
    <para><link linkend="fn_http_map_get"><function>http_map_get</function></link></para>
    <para><link linkend="fn_http_listen_host"><function>http_listen_host</function></link></para>
    <para><link linkend="wsauth">HTTP Authentication in main documentation</link></para>
    <para><link linkend="wssessman">HTTP Session Management</link> in main documentation</para>.
  </refsect1>
</refentry>


