<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_XMLType.createXML">
  <refmeta>
    <refentrytitle>XMLType.createXML</refentrytitle>
    <refmiscinfo>xml</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>XMLType.createXML</refname>
    <refpurpose>Creates an XML Type instance.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_XMLType.createXML">
      <funcprototype id="fproto_XMLType.createXML">
        <funcdef>static method<function>XMLType.createXML</function></funcdef>
	<paramdef>in <parameter>src</parameter> any</paramdef>
	<paramdef><optional>in <parameter>schema_uri</parameter> varchar</optional></paramdef>
	<paramdef><optional>in <parameter>validated</parameter> integer</optional></paramdef>
	<paramdef><optional>in <parameter>wellformed</parameter> any</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_XMLType.createXML">
    <title>Description</title>
    <para>The static method creates an XMLType instance from the <parameter>src</parameter> XML entity.
If the parameter <parameter>src</parameter> is not an XML entity then it is converted to it
via an internal call of <function>xtree_doc()</function> or <function>xml_tree_doc()</function>.
A schema may be associated with an XML entity by passing its URI 
as <parameter>schema_uri</parameter>; this schema can be used later to validate 
the structure of the document.</para>
  </refsect1>
  <refsect1 id="params_XMLType.createXML">
    <title>Parameters</title>
    <refsect2><title>src</title>
      <para>An XML entity or a value that can be converted to an XML entity.</para>
    </refsect2>
    <refsect2><title>schema_uri</title>
      <para>A URI of the schema of the document. The default is NULL to make result non-schema based.</para>
    </refsect2>
    <refsect2><title>validated</title>
      <para>An integer flag that indicates if the document is already validated against the
schema of the document (this is to avoid redundant validations). The default is 0.</para>
    </refsect2>
    <refsect2><title>wellformed</title>
      <para>This parameter is unused and is listed solely for compatibility.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_XMLType.createXML"><title>Return Types</title>
    <para>The method returns a new instance of XMLType.</para>
  </refsect1>
  <refsect1 id="examples_XMLType.createXML">
    <title>Examples</title>
    <example id="ex_XMLType.createXML"><title>Creating instances of XMLType</title>
      <para>The procedure creates two instances (a schema-based and a non schema-based)
and demonstrates that these instances are filled with proper data.</para>
      <screen><![CDATA[
create procedure createxml_test ()
{
  declare test1 XMLType;
  declare test2 XMLType;
  declare PROBE varchar;
  result_names (PROBE);
  test1 := createXML ('<test attr="value1"/>');
  test2 := createXML ('<test attr="value2"/>', 'http://www.example.com/test.xsd');
  result (concat (
    '"test1" is created as non schema-based, URI=',
    cast (test1.getSchemaURL() as varchar) ) );
  result (concat (
    'Sample data from "test1": value of test/@attr is ',
    test1.extract ('test/@attr') ) );
  result (concat (
    '"test2" is created as schema-based, URI=',
    test2.getSchemaURL() ) );
  result (concat (
    'Sample data from "test2": value of test/@attr is ',
    test2.extract ('test/@attr') ) );
}


createxml_test ()
PROBE
VARCHAR
_______________________________________________________________________________

"test1" is created as non schema-based, URI=
Sample data from "test1": value of test/@attr is value1
"test2" is created as schema-based, URI=http://www.example.com/test.xsd
Sample data from "test2": value of test/@attr is value2

4 Rows. -- 00000 msec.
]]></screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_XMLType.createXML">
    <title>See Also</title>
    <para><link linkend="fn_xtree_doc"><function>xtree_doc()</function></link></para>
    <para><link linkend="fn_xper_doc"><function>xper_doc()</function></link></para>
  </refsect1>
</refentry>
