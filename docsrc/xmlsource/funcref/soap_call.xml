<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_soap_call">
  <refmeta>
    <refentrytitle>soap_call</refentrytitle>
    <refmiscinfo>soap</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>soap_call</refname>
    <refpurpose>calls a function from a SOAP server and returns the result. value; deprecated, use SOAP_CLIENT () instead</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_soap_call">
      <funcprototype id="fproto_soap_call">
        <funcdef>any <function>soap_call</function></funcdef>
        <paramdef>in <parameter>host</parameter> string</paramdef>
        <paramdef>in <parameter>path</parameter> string</paramdef>
        <paramdef>in <parameter>methodURI</parameter> string</paramdef>
        <paramdef>in <parameter>methodName</parameter> string</paramdef>
        <paramdef>in <parameter>params</parameter> array of (ParamName, Value)</paramdef>
        <paramdef>in <parameter>version</parameter> integer</paramdef>
        <paramdef>in <parameter>certificate</parameter> varchar</paramdef>
        <paramdef>in <parameter>password</parameter> varchar</paramdef>
        <paramdef>in <parameter>SOAPAction</parameter> varchar</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_soap_call"><title>Description</title>
    <para>
This calls a function from a SOAP server and returns the result as a return value.
Params is an array of (Parameter name, Value) pairs representing the parameters
passed in the SOAP call. Each of these pairs become an XML sub-entity
of the procedure entity. The return value of the function is the entity
inside the SOAP body of the response. In debug mode the return value is an
array of 3 elements; the non-debug return value (if any) as element 0, the XML
text of the request as element 1 and the XML text of the server response
as element 2. This function does not use any XML types when creating the
XML. It represents types as a cast to varchar would, with one
exception - dates and times according to ISO8061.
</para>
<para>The Virtuoso SOAP client can work with complex datatypes, in which case
the parameters array must conform to the following convention:</para>
<programlisting>
vector ( vector ([name1], [type1]), value1, vector ([name2], [type2]), value2 ...)
</programlisting>
<para>This will cause type checking and validation of the values to be
encoded for SOAP request.</para></refsect1>
  <refsect1 id="params_soap_call"><title>Parameters</title>
    <refsect2><title>host</title>
      <para>DNS name or IP address of the SOAP server</para></refsect2>
    <refsect2><title>path</title>
      <para>path into the HTTP server containing the SOAP server page</para></refsect2>
    <refsect2><title>methodURI</title>
      <para>URI of the SOAP method being called</para></refsect2>
    <refsect2><title>methodName</title>
      <para>Name of the SOAP method being called</para></refsect2>
    <refsect2><title>params</title>
      <para>array of parameters to the SOAP call; array of (ParamName, Value).
      The Virtuoso SOAP client can work with complex datatypes.  In order to
      support this the parameters array must conform to the following convention:
      vector ( vector ([name1], [type1]), value1, vector ([name2], [type2]), value2 ...).
      This will cause type checking and validation of the values to be
      encoded for SOAP request.</para></refsect2>
    <refsect2><title>version</title>
      <para>the SOAP version used in call (SOAP 1.0 = 1, SOAP 1.1 = 11).  Default value = SOAP 1.0.
If the value is negated : i.e. -1 or -11 then the soap_call procedure enters "debug" mode
    </para></refsect2>
    <refsect2><title>certificate</title>
      <para>If this parameter is specified (string or null) the HTTPS operation will be performed.
      Path to the HTTPS client certificate in PKCS#12 format, if this parameter is set to NULL
      then client will do only encrypted connection.
    </para></refsect2>
    <refsect2><title>password</title>
      <para>If certificate is supplied this parameter must contain password for opening the certificate file.
    </para></refsect2>
    <refsect2><title>SOAPAction</title>
      <para>SOAPAction parameter can be used to make SOAPAction header
      value explicit.  Normally this is taken from the namespace URI and SOAP
      method name.</para></refsect2>
  </refsect1>
  <refsect1 id="examples_soap_call"><title>Examples</title>
    <example ID="VDOCS-SOAPCLIENT-01"><title>Calling a SQL procedure fishselect (in str varchar)</title>
    <programlisting>
declare ret any;
ret := soap_call (&apos;example.com&apos;, &apos;/SOAP&apos;,
	 &apos;urn:com-openlinksw-virtuoso&apos;,
	 &apos;fishselect&apos;,
	 vector (&apos;str&apos;, &apos;G&apos;));
</programlisting>
    </example>
  </refsect1>
</refentry>


