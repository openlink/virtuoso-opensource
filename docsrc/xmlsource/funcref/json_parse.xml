<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<refentry id="fn_json_parse">
  <refmeta>
    <refentrytitle>json_parse</refentrytitle>
    <refmiscinfo>ws</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>json_parse</refname>
    <refpurpose>Takes json string and returns parse tree.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_json_parse">
      <funcprototype id="fproto_json_parse">
        <funcdef>integer <function>json_parse</function></funcdef>
	<paramdef>in <parameter>txt</parameter> varchar</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_json_parse">
    <title>Description</title>
    <para>This function takes json string and returns parse tree.</para>
  </refsect1>
  <refsect1 id="params_json_parse">
    <title>Parameters</title>
    <refsect2><title>txt</title>
      <para>a json string</para></refsect2>
  </refsect1>
  <refsect1 id="ret_json_parse"><title>Return Types</title>
    <para>The function returns tree.</para>
  </refsect1>
  <refsect1 id="examples_atoi"><title>Examples</title>
    <example id="ex_atoi"><title>Simple example</title>
<programlisting><![CDATA[
SQL>create procedure json_tree_example ()
{
  declare qr, url, cnt, tree, xt, hdr any;
  cnt := '
{ "head": { "link": [], "vars": ["s", "p", "o"] },
  "results": { "distinct": false, "ordered": true, "bindings": [
    { "s": { "type": "uri", "value": "http://example.org/node" }	, "p": { "type": "uri", "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" }	, "o": { "type": "uri", "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" }},
    { "s": { "type": "uri", "value": "http://example.org/node" }	, "p": { "type": "uri", "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" }	, "o": { "type": "uri", "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" }} ] } }';
  tree := json_parse (cnt);
  tree := get_keyword ('results', tree);
  tree := get_keyword ('bindings', tree);
  return tree[0][1];
}
;

Done. 
SQL> SELECT json_tree_example();
json_tree_example
VARCHAR
 structure
No. of rows in result: 1 
]]></programlisting>    
    </example>    	
  </refsect1>  
  <refsect1 id="seealso_json_parse">
    <title>See Also</title>
    <para>
      <link linkend="fn_http"><function>http</function></link>,
      <link linkend="fn_http_value"><function>http_value</function></link>,
      <link linkend="fn_http_url"><function>http_url</function></link>,
      <link linkend="fn_string_output"><function>string_output</function></link>,
      <link linkend="fn_http_rewrite"><function>http_rewrite</function></link>,
    </para>
  </refsect1>
</refentry>
