<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_covar_pop">
  <refmeta>
    <refentrytitle>COVAR_POP</refentrytitle>
    <refmiscinfo>aggr</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>COVAR_POP</refname>
    <refpurpose>Returns the population covariance of a set of number pairs.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_covar_pop">
      <funcprototype id="fproto_covar_pop">
        <funcdef>numeric <function>COVAR_POP</function></funcdef>
        <paramdef>in <parameter>expr1</parameter> any</paramdef>
        <paramdef>in <parameter>expr2</parameter> any</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_covar_pop">
    <title>Description</title>
    <para>COVAR_POP returns the population covariance of a set of number pairs.  Both expr1 and expr2 are numeric expressions.  Virtuoso applies the function to the set of (expr1, expr2) pairs after
eliminating all pairs for which either expr1 or expr2 is null. Then Virtuoso makes the following
computation:</para>
<programlisting>(SUM(expr1 * expr2) - SUM(expr2) * SUM(expr1) / n) / n</programlisting>

<para>where n is the number of (expr1, expr2) pairs where neither expr1 nor expr2 is null.</para>
  </refsect1>
  <refsect1 id="params_covar_pop"><title>Parameters</title>
    <refsect2><title>expr1</title>
      <para>Number expression.</para></refsect2>
    <refsect2><title>expr2</title>
      <para>Number expression.</para></refsect2>
  </refsect1>
  <refsect1 id="ret_covar_pop"><title>Return Types</title>
    <para>The function returns a value of type NUMERIC. If the function is applied to an empty set, then it
returns null.</para>
  </refsect1>
<!--
  <refsect1 id="errors_covar_pop">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
-->
  <!-- refsect1 id="examples_covar_pop">
    <title>Examples</title>
    <example id="ex_"><title></title>
      <para></para>
      <screen><![CDATA[
]]>
</screen>
    </example>
  </refsect1 -->
  <refsect1 id="seealso_covar_pop">
    <title>See Also</title>
      <para><link linkend="fn_var"><function>VAR()</function></link></para>
      <para><link linkend="fn_var_samp"><function>VAR_SAMP()</function></link></para>
      <para><link linkend="fn_var_pop"><function>VAR_POP()</function></link></para>
      <para><link linkend="fn_stddev"><function>STDDEV()</function></link></para>
      <para><link linkend="fn_stddev_samp"><function>STDDEV_SAMP()</function></link></para>
      <para><link linkend="fn_stddev_pop"><function>STDDEV_POP()</function></link></para>
      <para><link linkend="fn_regr_syy"><function>REGR_SYY()</function></link></para>
      <para><link linkend="fn_regr_sxx"><function>REGR_SXX()</function></link></para>
      <para><link linkend="fn_regr_sxy"><function>REGR_SXY()</function></link></para>
      <para><link linkend="fn_regr_avgx"><function>REGR_AVGX()</function></link></para>
      <para><link linkend="fn_regr_avgy"><function>REGR_AVGY()</function></link></para>
      <para><link linkend="fn_regr_r2"><function>REGR_R2()</function></link></para>
      <para><link linkend="fn_regr_count"><function>REGR_COUNT()</function></link></para>
      <para><link linkend="fn_regr_intercept"><function>REGR_INTERCEPT()</function></link></para>
      <para><link linkend="fn_regr_slope"><function>REGR_SLOPE()</function></link></para>
      <para><link linkend="fn_covar_samp"><function>COVAR_SAMP()</function></link></para>
      <para><link linkend="fn_covar_pop"><function>COVAR_POP()</function></link></para>
      <para><link linkend="fn_corr"><function>CORR()</function></link></para>
  </refsect1>
</refentry>
   
