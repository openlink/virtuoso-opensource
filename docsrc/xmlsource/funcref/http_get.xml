<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_http_get">
  <refmeta>
    <refentrytitle>http_get</refentrytitle>
    <refmiscinfo>ws</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>http_get</refname>
    <refpurpose>returns a varchar containing the body of the request uri</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_http_get">
      <funcprototype id="fprot_http_get">
        <funcdef>varchar <function>http_get</function></funcdef>
        <paramdef>in <parameter>target_uri</parameter> varchar</paramdef>
        <paramdef><optional>out <parameter>return_header</parameter> any</optional></paramdef>
        <paramdef><optional>in <parameter>http_method</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>request_header</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>request_body</parameter> varchar</optional></paramdef>
        <paramdef><optional>in <parameter>proxy</parameter> varchar</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_http_get"><title>Description</title>
<para>http_get returns a varchar containing the body of the
requested target_uri or NULL if the body is not received.</para>
  </refsect1>
  <refsect1 id="params_http_get"><title>Parameters</title>
    <refsect2><title>target_uri</title>
<para>HTTP target in form http://&lt;target_host&gt;:&lt;target_port&gt;/&lt;path&gt;
(if &lt;target_port&gt; is not given then 80 will be used by default)</para></refsect2>
    <refsect2><title>return_header</title>
<para>This output parameter is set to the array of HTTP
response header lines from the target server, if the parameter is a  constant it will be ignored.</para></refsect2>
    <refsect2><title>http_method</title>
<para>This parameter will be used to specify the HTTP request method.
Possible values are: GET, POST, PUT, OPTIONS or see RFC2616[5.1.1] for
details. </para></refsect2>
    <refsect2><title>request_header</title>
<para>This string will be sent to the target server together with other
header fields. If more than one header field should be sent then header fields must be separated
with CR/LF pair. (Warning: this string must not be terminated with CR/LF pair!).</para></refsect2>
    <refsect2><title>request_body</title>
<para>This string will be sent to the target server as the request body.
The  &quot;Content-Length&quot; header field is set to the length of this string.</para></refsect2>
    <refsect2><title>proxy</title>
<para>If this parameter is supplied  the request will be passed through this HTTP proxy. The format is  &lt;proxy_host&gt;:&lt;proxy_port&gt; .</para>
      <para>Supports:</para>
<programlisting><![CDATA[
http://[user:pass@]host:port - user & pass are optional
]]></programlisting>
<programlisting><![CDATA[
socks4://[user:pass@]host:port - user & pass are optional
]]></programlisting>
<programlisting><![CDATA[
socks5://[user:pass@]host:port - user & pass are optional
]]></programlisting>
<programlisting><![CDATA[
socks5-host://[user:pass@]host:port - user & pass are optional
]]></programlisting>
      <para>In the INI file, in section HTTPServer should be set:</para>
<programlisting><![CDATA[
HTTPProxyServer       = proxytest:3128
HTTPProxyExceptions   = localhost:8890, 127.0.0.1:8890
]]></programlisting>
      <para>Exception could be also 127.0.0.* i.e. there could have also wildcard.</para>

</refsect2>
  </refsect1>
  <refsect1 id="errors_http_get"><title>Errors</title>
    <table><title>Errors signalled by</title>
      <tgroup cols="4">
       <thead><row><entry>SQLState</entry><entry>Error Code</entry><entry>Error Text</entry><entry>Description</entry></row></thead>
	<tbody>
	  <row>
	    <entry><errorcode></errorcode></entry>
	    <entry><errorcode>HT001 </errorcode></entry>
	    <entry><errorname>Not valid host name or host IP address</errorname></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry><errorcode></errorcode></entry>
	    <entry><errorcode>HT002 </errorcode></entry>
	    <entry><errorname>Target host is unreachable</errorname></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
  <refsect1 id="examples_http_get"><title>Examples</title>
  <example id="ex_http_get"><title>Using http_get()</title>
<programlisting>
declare header any;
page := http_get ('http://www.openlinksw.com/');
...
page := http_get ('http://www.openlinksw.com/',
		header, 'GET', 'If-Modified-Since: Fri, 21 Jul 2000 11:19:45 GMT');
...
page := http_get ('http://example.com/some_link.html',
		header, 'POST', '', 'a=1&amp;b=2');
...
page := http_get ('http://www.openlinksw.com/',
		NULL, 'GET', '', '', 'proxy.server.com:8080');
</programlisting>
</example>
  </refsect1>
</refentry>


