<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_encode_base64">
  <refmeta>
    <refentrytitle>encode_base64</refentrytitle>
    <refmiscinfo>encoding</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>encode_base64</refname>
    <refname>decode_base64</refname>
    <refpurpose>base64-encode/decode a string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
  <funcsynopsis id="fsyn_encode_base64">
    <funcprototype id="fproto_encode_base64">
      <funcdef><function>encode_base64</function></funcdef>
      <paramdef>in <parameter>str</parameter> varchar</paramdef>
    </funcprototype>
  </funcsynopsis>
  <funcsynopsis id="fsyn_decode_base64">
    <funcprototype id="fproto_decode_base64">
      <funcdef><function>decode_base64</function></funcdef>
      <paramdef>in <parameter>str</parameter> varchar</paramdef>
    </funcprototype>
  </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_encode_base64"><title>Description</title>
      <para>These functions convert strings from/to base64-encoding.</para>
  </refsect1>
  <refsect1 id="params_encode_base64"><title>Parameters</title>
    <refsect2><title><parameter>str</parameter></title>
      <para>A <type>varchar</type> value.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_encode_base64"><title>Return Values</title>
    <para><function>encode_base64</function> returns a <type>varchar</type>
    containing base64-encoded data. <function>decode_base64</function> returns
    a <type>varchar</type> containing the result of the base64-decoding.</para>
  </refsect1>
  <refsect1 id="examples_encode_base64"><title>Examples</title>
    <example id="ex_encode_base64_1"><title>Simple Example</title>
      <para>Base64-encode a string</para>
      <screen>SQL> select encode_base64('Rutabaga');
callret
VARCHAR
_______________________________________________________________________________

UnV0YWJhZ2E=

1 Rows. -- 25 msec.
</screen>
    </example>
    <example id="ex_encode_base64"><title>Web example</title>
      <para>Using encode-base64 with serialize to persist complex data</para>
      <screen>declare n any; n := vector ('a', 3.14157, 4711, 'Hic Iacet Corpus.');
http (sprintf ('&lt;input type="hidden" name="saved" value="%s"&gt;', encode_base64 (serialize (n))));
</screen>
      <para>To retrieve this data in VSP context when handling a form submit:</para>
      <screen>declare n any; n := deserialize (decode_base64 (get_keyword ('saved', params, '')));
</screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_encode_base64"><title>See Also</title>
    <para>
      <link linkend="fn_serialize"><function>serialize</function></link>
    </para>
  </refsect1>
</refentry>


