<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_xml_auto_schema">
  <refmeta>
    <refentrytitle>xml_auto_schema</refentrytitle>
    <refmiscinfo>xml</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>xml_auto_schema</refname>
    <refpurpose>returns an XML schema for the result of an SQL query with a FOR XML clause</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_xml_auto_schema">
      <funcprototype id="fproto_xml_auto_schema">
        <funcdef>varchar <function>xml_auto_schema</function></funcdef>
        <paramdef>in <parameter>query</parameter> varchar</paramdef>
        <paramdef>in <parameter>root_element</parameter> varchar</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_xml_auto_schema"><title>Description</title>
<para>
This function returns an XML schema for the results of an SQL query
with a FOR XML clause.  The returned schema will apply to the output
generated by <function>xml_auto()</function> with the query in
question after wrapping it in the specified root element.
</para>
  </refsect1>
  <refsect1 id="params_xml_auto_schema"><title>Parameters</title>
    <refsect2><title>query</title>
      <para>SQL query</para></refsect2>
    <refsect2><title>root_element</title>
      <para>name of root element container</para></refsect2>
  </refsect1>
  <refsect1 id="ret_xml_auto_schema"><title>Return Types</title><para>varchar result containing the
schema of the XML document.</para></refsect1>

  <refsect1 id="errors_xml_auto_schema"><title>Errors</title>
	    <para>If the <parameter>query</parameter> argument is not a valid SQL statement, i.e. SQL compiler signals an error message, 
                   the function resignals the error.
            </para>
  </refsect1>

  <refsect1 id="examples_xml_auto_schema"><title>Examples</title>
    <example id="ex_xml_auto_achema"><title>Simple Schema Generation</title>
<programlisting>
SQL&gt; select xml_auto_schema ('  select &quot;category&quot;.&quot;CategoryID&quot;, &quot;CategoryName&quot;,
		&quot;ProductName&quot;, &quot;ProductID&quot;
	from &quot;Demo&quot;..&quot;Categories&quot; &quot;category&quot;, &quot;Demo&quot;..&quot;Products&quot; as &quot;product&quot;
	where &quot;product&quot;.&quot;CategoryID&quot; = &quot;category&quot;.&quot;CategoryID&quot;
	for xml auto element', 'root');
 callret
VARCHAR
_______________________________________________________________________________

&lt;xsd:schema xmlns:xsd=&quot;http://www.w3.org/1999/XMLSchema&quot;&gt;

 &lt;xsd:annotation&gt;
  &lt;xsd:documentation&gt;
   Schema for output of the following SQL statement:
   &lt;[CDATA[  select &quot;category&quot;.&quot;CategoryID&quot;,
     &quot;CategoryName&quot;, &quot;ProductName&quot;, &quot;ProductID&quot;
     from &quot;Demo&quot;..&quot;Categories&quot; &quot;category&quot;,
     &quot;Demo&quot;..&quot;Products&quot; as &quot;product&quot;
     where &quot;product&quot;.&quot;CategoryID&quot; = &quot;category&quot;.&quot;CategoryID&quot;
     for xml auto element]]&gt;
  &lt;/xsd:documentation&gt;
 &lt;/xsd:annotation&gt;

 &lt;xsd:element name=&quot;root&quot; type=&quot;root__Type&quot;/&gt;

 &lt;xsd:complexType name=&quot;root__Type&quot;&gt;
  &lt;xsd:element name=&quot;category&quot; type=&quot;category_Type&quot;
  minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;/&gt;
 &lt;/xsd:complexType&gt;

 &lt;xsd:complexType name=&quot;category_Type&quot;&gt;
  &lt;xsd:element name=&quot;CategoryID&quot; type=&quot;xsd:int&quot; precision=&quot;10&quot;/&gt;
  &lt;xsd:element name=&quot;CategoryName&quot; type=&quot;xsd:string&quot; maxLength=&quot;15&quot;/&gt;
  &lt;xsd:element name=&quot;product&quot; type=&quot;product_Type&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;/&gt;
 &lt;/xsd:complexType&gt;

 &lt;xsd:complexType name=&quot;product_Type&quot;&gt;
  &lt;xsd:element name=&quot;ProductName&quot; type=&quot;xsd:string&quot; maxLength=&quot;40&quot;/&gt;
  &lt;xsd:element name=&quot;ProductID&quot; type=&quot;xsd:int&quot; precision=&quot;10&quot;/&gt;
 &lt;/xsd:complexType&gt;

&lt;/xsd:schema&gt;

1 Rows. -- 5 msec.
</programlisting>
    </example>
  </refsect1>
  <refsect1 id="seealso_xml_auto_schema"><title>See Also</title>
    <para><link linkend="fn_xml_auto"><function>xml_auto()</function></link></para>
    <para><link linkend="fn_xml_auto_dtd"><function>xml_auto_dtd()</function></link></para>
  </refsect1>
</refentry>


