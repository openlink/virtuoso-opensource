<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_position">
  <refmeta>
    <refentrytitle>position</refentrytitle>
    <refmiscinfo>array</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>position</refname>
    <refpurpose>returns the index of an element within an array or string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_position">
      <funcprototype id="fproto_position">
        <funcdef><function>position</function></funcdef>
        <paramdef><parameter>element</parameter> any</paramdef>
        <paramdef><parameter>array</parameter> any</paramdef>
        <paramdef><parameter>start_index</parameter> integer (optional, default 1)</paramdef>
        <paramdef><parameter>step</parameter> integer (optional, default 1)</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_position"><title>Description</title>
    <para>position returns the one-based index for the first occurrence of element within an 
    <type>array</type> or <type>string</type>, beginning from offset start_index and iterating with step. 
    If the second argument is a <type>string</type>, the first argument must be a string with a single character.
    If the second argument is an array of <type>any</type>, then depending of type of it's elements 
    same type is expected as the first argument.</para>
  </refsect1>
  <refsect1 id="params_position"><title>Parameters</title>
    <refsect2><title><parameter>element</parameter></title>
      <para>
        <type>any</type>, <type>depends of type of elements in second argument</type>.
      </para>
    </refsect2>
    <refsect2><title><parameter>array</parameter></title>
      <para>
        <type>array</type>, <type>vector</type> or <type>string</type>.
      </para>
    </refsect2>
    <refsect2><title><parameter>start_index</parameter></title>
      <para><type>integer</type> index beginning from 1; from where to start search.</para>
    </refsect2>
    <refsect2><title><parameter>step</parameter></title>
      <para><type>integer</type> the step between elements to be tested; default is 1 (every element)</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_position"><title>Return Values</title>
    <para>An <type>integer</type> index in array starting from 1; if not found returns zero.</para>
  </refsect1>
  <refsect1 id="errors_position"><title>Errors</title>
    <table><title>Errors signalled by position</title>
      <tgroup cols="4">
       <thead><row><entry>SQLState</entry><entry>Error Code</entry><entry>Error Text</entry><entry>Description</entry></row></thead>
	<tbody>
	  <row>
	    <entry><errorcode>22003</errorcode></entry>
	    <entry><errorcode>SR061</errorcode></entry>
	    <entry><errorname>position: expects a vector whose length is divisible by [step], not of length [actual len].</errorname></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry><errorcode>22023</errorcode></entry>
	    <entry><errorcode>SR000</errorcode></entry>
	    <entry><errorname>position expects an array or vector, not an arg of type %d.</errorname></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
  <refsect1 id="examples_position"><title>Examples</title>
    <example id="ex_position_1"><title>Simple examples</title>
      <screen>
SQL> select position ('b', 'Abacus');
callret
VARCHAR
_______________________________________________________________________________

2

1 Rows. -- 3 msec.
SQL> select position (2, vector ('Primero', null, 2, 3.333));
callret
VARCHAR
_______________________________________________________________________________

3

1 Rows. -- 4 msec.

SQL> select position ('a', 'babaab', 1, 2);
                                ^--- matches 5-th as other 'a' are skipped as step is 2 chars
callret
INTEGER
_______________________________________________________________________________

5

1 Rows. -- 4 msec.
      </screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_position"><title>See Also</title>
    <para>
      <link linkend="fn_vector"><function>vector</function></link>
      <link linkend="fn_aset"><function>aset</function></link>
      <link linkend="fn_aref"><function>aref</function></link>
      <link linkend="fn_ascii"><function>ascii</function></link>
    </para>
  </refsect1>
</refentry>

