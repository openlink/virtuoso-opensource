<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_http_kill">
  <refmeta>
    <refentrytitle>http_kill</refentrytitle>
    <refmiscinfo>ws</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>http_kill</refname>
    <refpurpose>Kill VSP process whose details match parameter inputs</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_http_kill">
      <funcprototype id="fproto_http_kill">
        <funcdef><function>http_kill</function></funcdef>
        <paramdef>in <parameter>client_IP_address</parameter> varchar</paramdef>
        <paramdef>in <parameter>URL</parameter> varchar</paramdef>
        <paramdef><optional>in <parameter>process_request_id</parameter> integer</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_http_kill"><title>Description</title>
    <para>This function requires dba privileges.</para>
    <para>
This function is used to kill the process whose details match that of the
input parameters.  If Client's IP and URL are specified, then it will try
to kill all matching pending HTTP requests for that peer requesting
that URL.  If all three parameters are given, then it will try to
kill only that pending HTTP request.
</para>
  </refsect1>
  <refsect1 id="params_http_kill"><title>Parameters</title>
    <refsect2><title>client_IP_address</title>
      <para>Client's IP as per the output of
          <function>http_pending_req()</function></para>
    </refsect2>
    <refsect2><title>URL</title>
      <para>Process' URL as per the output of
            <function>http_pending_req()</function></para>
    </refsect2>
    <refsect2><title>process_request_id</title>
      <para>The task ID of the request.</para>
    </refsect2>
  </refsect1>
   <refsect1 id="errors_http_kill"><title>Errors</title>
    <table><title>Errors signalled by <function>http_kill</function></title>
      <tgroup cols="4">
	<thead>
	  <row>
	    <entry>SQLState</entry><entry>Error Code</entry><entry>Error Text</entry><entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><errorcode>42000</errorcode></entry>
	    <entry><errorcode>SR159</errorcode></entry>
	    <entry><errorname>Function http_kill restricted to dba
	    group</errorname></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry><errorcode>22023</errorcode></entry>
	    <entry><errorcode>SR014</errorcode></entry>
	    <entry><errorname>Function http_kill needs a string as
	    argument 1, not an arg of type %s</errorname></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry><errorcode>22023</errorcode></entry>
	    <entry><errorcode>SR014</errorcode></entry>
	    <entry><errorname>Function http_kill needs a string as
            argument 2, not an arg of type %s</errorname></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry><errorcode>22023</errorcode></entry>
	    <entry><errorcode>SR014</errorcode></entry>
	    <entry><errorname>Function http_kill needs a string as
            argument 3, not an arg of type %s</errorname></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
  <refsect1 id="examples_http_kill"><title>Examples</title>
  <example id="ex_http_kill"><title>Retrieving a list of VSP processes</title>
  <programlisting>
declare ps any;

ps := http_pending_req ();

-- the ps value is (('127.0.0.1', '/long.vsp', 1234567), ('192.168.1.1', '/long.vsp', 345678))

http_kill ('192.168.1.1', '/long.vsp', 345678);
</programlisting>
  <para>
after this and calling http_pending_req() again we get (('127.0.0.1', '/long.vsp', 1234567)) only.
</para>
  </example>
  </refsect1>
  <refsect1 id="seealso_http_kill"><title>See Also</title>
    <para><link linkend="fn_http_pending_req"><function>http_pending_req</function></link></para>
    <para><link linkend="fn_http"><function>http</function></link></para>
  </refsect1>
</refentry>


