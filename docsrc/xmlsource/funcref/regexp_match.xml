<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_regexp_match">
  <refmeta>
    <refentrytitle>regexp_match</refentrytitle>
    <refmiscinfo>string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>regexp_match</refname>
    <refpurpose>returns a substring matching the regular expression to the supplied string</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_regexp_match">
      <funcprototype id="fproto_regexp_match">
        <funcdef>varchar <function>regexp_match</function></funcdef>
        <paramdef>in <parameter>pattern</parameter> any</paramdef>
        <paramdef>inout <parameter>str</parameter> any</paramdef>
        <paramdef><optional>in <parameter>change_the_str</parameter> integer</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_regexp_match"><title>Description</title>
<para>
The regexp_match function returns a copy of substring of string
<parameter>str</parameter> which matches the regular expression pattern.</para>
<para>Previous behavior of this function would cut the first characters of <parameter>str</parameter>
until the end of regular expression matched substring.  In this way
<parameter>str</parameter> could be passed to this function again to find
the next occurrence of substring that matches the regular expression.  By
default this behavior is not adopted by this function, but can be enabled for
pre 3.2 compatibility by supplying the optional third parameter.</para>
<para>If either the <parameter>pattern</parameter> or <parameter>str</parameter>
parameter contain wide characters this function will operate in wide mode,
first converting any narrow characters to wide and returning a wide character
response.  Otherwise this function operates in narrow mode by default.</para>
</refsect1>
  <refsect1 id="params_regexp_match"><title>Parameters</title>
    <refsect2><title>pattern</title>
      <para>The regular expression to match.</para></refsect2>
    <refsect2><title>str</title>
      <para>The string to be searched.  In compatibility mode (change_the_str =1)
	  this string in modified, removing the matched substring.</para></refsect2>
    <refsect2><title>change_the_str</title>
      <para>This new parameter allows this function to operate in pre 3.2
	  compatibility mode which modified the original string.  By default
	  this parameter is set to "0" so that the original string is never altered.</para></refsect2>
  </refsect1>
  <refsect1 id="ret_regexp_match"><title>Returns</title>
  <para>This function returns the a substring matching the regular expression.</para>
  </refsect1>
 <refsect1 id="examples_regexp_like"><title>Examples</title>
    <example id="ex_regexp_match">
<title>Examples</title>
<programlisting>
CREATE PROCEDURE all_tokens(IN pattern VARCHAR, IN str VARCHAR)
{
	DECLARE wrd VARCHAR;
	DECLARE ans VARCHAR;
	DECLARE str_i VARCHAR;

	ans:='';
	str_i := str;
	wrd := regexp_match(pattern,str_i);
	WHILE (wrd IS NOT NULL)
	{
		ans := concat(ans,',',wrd);
		wrd := regexp_match(pattern, str_i, 1);
	};
	RETURN ans;
};
</programlisting>
</example>
</refsect1>
  <refsect1 id="seealso_regexp_match"><title>See Also</title>
    <para><link linkend="fn_regexp_parse"><function>regexp_parse()</function></link></para>
    <para><link linkend="fn_regexp_like"><function>regexp_like()</function></link></para>
    <para><link linkend="fn_regexp_instr"><function>regexp_instr()</function></link></para>
    <para><link linkend="fn_regexp_replace"><function>regexp_replace()</function></link></para>
    <para><link linkend="fn_regexp_substr"><function>regexp_substr()</function></link></para>
  </refsect1>
</refentry>


