<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<refentry id="fn_XQ_SEQUENCE_AGG">
  <refmeta>
    <refentrytitle>DB.DBA.XQ_SEQUENCE_AGG</refentrytitle>
    <refmiscinfo>aggr</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>DB.DBA.XQ_SEQUENCE_AGG</refname>
    <refpurpose>Creates an XQuery sequence object that consists of all values passed the the aggregate.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_XQ_SEQUENCE_AGG">
      <funcprototype id="fproto_XQ_SEQUENCE_AGG">
        <funcdef>vector <function>DB.DBA.XQ_SEQUENCE_AGG</function></funcdef>
        <paramdef><parameter>value_expression</parameter> any</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_XQ_SEQUENCE_AGG"><title>Description</title>
    <para><function>DB.DBA.XQ_SEQUENCE_AGG</function> creates an XQuery sequence object that consists of all values
    passed the aggregate.
    </para>
  </refsect1>
  <refsect1 id="params_XQ_SEQUENCE_AGG"><title>Parameters</title>
    <refsect2><title>value_expression</title>
    <para>Values are "flatten" before being added to the sequence. It means that --- NULLs are not added at all.</para>
    <para>If an XQuery sequence object is passed to the aggregate then all items of sequence are appended to the
    end of the accumulated result, one after other. Thus the aggregate of a sequence ('A', 'B'), a string 'C' and
    a sequence ('D', 'E', 'F') is a sequence ('A', 'B', 'C', 'D', 'E', 'F'), not something like (('A', 'B'), 'C', ('D', 'E', 'F')).
    </para>
    <para>If an SQL vector is passed to the aggregate then every item of the vector is appended to result separately, and if an
    item is in turn a nested vector or a nested XQuery sequence then every sub-item is appended separately, in a
    recursive manner. So SQL vectors are "flattened" recursively.
    </para>
    <para>If the argument of DB.DBA.XQ_SEQUENCE_AGG () is a narrow string or a wide string it is converted to UTF-8
    before being added to the sequence. If an SQL vector contains a narrow or wide string then it is also converted
    to UTF-8. However if a narrow string is an item of an XQuery sequence then it is treated as UTF-8 and not
    subject to encoding.
    </para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_XQ_SEQUENCE_AGG"><title>Return Types</title>
    <para>Any
    </para>
  </refsect1>
  <refsect1 id="seealso_XQ_SEQUENCE_AGG"><title>See Also</title>
    <para><link linkend="fn_xquery_eval"><function>xquery_eval()</function></link></para>
    <para><link linkend="fn_VECTOR_AGG"><function>DB.DBA.VECTOR_AGG()</function></link></para>
    <para><link linkend="fn_VECTOR_OF_NONNULLS_AGG"><function>DB.DBA.VECTOR_OF_NONNULLS_AGG()</function></link></para>
    <para><link linkend="fn_VECTOR_OR_NULL_AGG"><function>DB.DBA.VECTOR_OR_NULL_AGG()</function></link></para>
    <para><link linkend="fn_VECTOR_OF_NONNULLS_OR_NULL_AGG"><function>DB.DBA.VECTOR_OF_NONNULLS_OR_NULL_AGG()</function></link></para>
    <para><link linkend="fn_VECTOR_CONCAT_AGG"><function>DB.DBA.VECTOR_CONCAT_AGG()</function></link></para>
    <para><link linkend="fn_BAG_AGG"><function>DB.DBA.BAG_AGG()</function></link></para>
    <para><link linkend="fn_BAG_OF_NONNULLS_AGG"><function>DB.DBA.BAG_OF_NONNULLS_AGG()</function></link></para>
    <para><link linkend="fn_BAG_OR_NULL_AGG"><function>DB.DBA.BAG_OR_NULL_AGG()</function></link></para>
    <para><link linkend="fn_BAG_OF_NONNULLS_OR_NULL_AGG"><function>DB.DBA.BAG_OF_NONNULLS_OR_NULL_AGG()</function></link></para>
    <para><link linkend="fn_BAG_CONCAT_AGG"><function>DB.DBA.BAG_CONCAT_AGG()</function></link></para>
    <para><link linkend="fn_GROUP_CONCAT"><function>DB.DBA.GROUP_CONCAT()</function></link></para>
    <para><link linkend="fn_GROUP_CONCAT_DISTINCT"><function>DB.DBA.GROUP_CONCAT_DISTINCT()</function></link></para>
    <para><link linkend="fn_GROUP_DIGEST"><function>DB.DBA.GROUP_DIGEST()</function></link></para>
    <para><link linkend="fn_SAMPLE"><function>DB.DBA.SAMPLE()</function></link></para>
  </refsect1>
</refentry>

