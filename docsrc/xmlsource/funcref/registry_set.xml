<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_registry_set">
  <refmeta>
    <refentrytitle>registry_set</refentrytitle>
    <refmiscinfo>sql</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>registry_set</refname>
    <refpurpose>Associates a value to the name in the Database registry</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_registry_set">
      <funcprototype id="fproto_registry_set">
        <funcdef><function>registry_set</function></funcdef>
	<paramdef>in <parameter>name</parameter> varchar</paramdef>
	<paramdef>in <parameter>value</parameter> varchar</paramdef>
	<paramdef><optional>in <parameter>force</parameter> integer</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_registry_set"><title>Description</title>
    <para>This associates a value to the name in the Database 
    registry. The name should be a string and the value must be also string.
    </para>
    <para>Registry settings are kept in Database, therefore they are persistent.
</para>
    <para>Some registry variables are used solely by internal server routines so they should not be set by any application.
Some of these &quot;protected&quot; variables can be updated by DBA only (in built-in Virtuoso/PL routines)
whereas some can not be updated by any Virtuoso/PL routine at all.
If the function is called by DBA then a third argument can be specified to indicate how the function should try to update such a variable,
but you will probably never use this feature.
</para>
  </refsect1>
  <refsect1 id="params_registry_set"><title>Parameters</title>
    <refsect2><title>name</title>
      <para><type>VARCHAR</type> name to associate the value with.</para>
    </refsect2>
    <refsect2><title>value</title>
      <para><parameter>value</parameter> to be stored. Must be of <type>VARCHAR</type> type. Also if needs to be stored some other datatype it needs to be serialized (see serialize and deserialize functions).</para>
    </refsect2>
    <refsect2><title>force</title>
      <para>Flag to indicate how the function should try to update protected variables.
The value 0 is to signal an error on such an attempt, 1 is to try to update and signal an error if failed, 2 is to try to update and
silently return 0 if failed.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_registry_set"><title>Return Values</title>
    <para>The function returns 1 if success, 0 if a (protected) variable value cannot be changed.</para>
  </refsect1>
  <refsect1 id="errors_registry_set"><title>Errors</title>
    <table><title>Errors signalled by registry_set</title>
      <tgroup cols="4">
       <thead><row><entry>SQLState</entry><entry>Error Code</entry><entry>Error Text</entry><entry>Description</entry></row></thead>
	<tbody>
	  <row>
	    <entry><errorcode>22023</errorcode></entry>
	    <entry><errorcode>SR014</errorcode></entry>
	    <entry><errorname>Function registry_set needs a string as argument 2, not an arg of [datatype]</errorname></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry><errorcode>42000</errorcode></entry>
	    <entry><errorcode>SR483</errorcode></entry>
	    <entry><errorname>Function registry_set needs nonzero third argument to modify registry variable [name].</errorname></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry><errorcode>42000</errorcode></entry>
	    <entry><errorcode>SR484</errorcode></entry>
	    <entry><errorname>Function registry_set can not modify protected registry variable [name].</errorname></entry>
	    <entry></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>
  <refsect1><title>Examples</title>
    <example id="ex_registry_set"><title>Setting and Retrieving Registry Setting</title>
<para>
From SQL
</para>
<screen>
SQL> select registry_get('var_demo');
callret
VARCHAR
__________________________________________________________________

NULL

SQL> registry_set('var_demo', 'some arb data');

SQL> select registry_get('var_demo');
callret
VARCHAR
__________________________________________________________________

some arb data
</screen>
    </example></refsect1>
  <refsect1 id="seealso_registry_set"><title>See Also</title>
    <para><link linkend="fn_registry_get"><function>registry_get</function></link></para>
    <para><link linkend="fn_registry_name_is_protected"><function>registry_name_is_protected</function></link></para>
    <para><link linkend="fn_registry_get_all"><function>registry_get_all</function></link></para>
    <para><link linkend="fn_registry_remove"><function>registry_remove</function></link></para>
    <para><link linkend="fn_sequence_get_all"><function>sequence_get_all</function></link></para>
    <para><link linkend="fn_sequence_next"><function>sequence_next</function></link></para>
    <para><link linkend="fn_sequence_set"><function>sequence_set</function></link></para>
    <para><link linkend="fn_sequence_remove"><function>sequence_remove</function></link></para>
  </refsect1>
</refentry>

