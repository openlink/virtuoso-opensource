<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_XMLType.schemaValidate">
  <refmeta>
    <refentrytitle>XMLType.schemaValidate</refentrytitle>
    <refmiscinfo>xml</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>XMLType.schemaValidate</refname>
    <refpurpose>Validates the schema based XMLType instance against its schema and signals an error in case of failed validation.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_XMLType.schemaValidate">
      <funcprototype id="fproto_XMLType.schemaValidate">
        <funcdef><function>XMLType.schemaValidate</function></funcdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_XMLType.schemaValidate">
    <title>Description</title>
    <para>The member function signals an error if called for a non-schema based instance.
If an instance is schema-based but the validation has already been done, the call has no effect.
Otherwise, a schema-based instance is validated against its schema.
If the validation fails, an error is signalled.
If the validation is successful then a special internal &quot;validated&quot;flag is set.</para>
  </refsect1>
  <refsect1 id="ret_XMLType.schemaValidate"><title>Return Types</title>
    <para>The function returns a string that contains a validation log if an instance 
	has not been validated before, otherwise it returns null or signals an error.
</para>
  </refsect1>
<!-- 
  <refsect1 id="errors_XMLType.schemaValidate">
    <title>Errors</title>

In case of non-function-specific errors, i.e. only common
     parameter errors are signalled, comment out the table below 
     otherwise add the unique error values as individual errorcodes

    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1> -->
  <refsect1 id="examples_XMLType.schemaValidate">
    <title>Examples</title>
    <example id="ex_XMLType.schemaValidate"><title>Failed schema validation</title>
      <para>The example creates an XMLType instance that is a document with a single element node&quot;bad&quot;
and declared schema &quot;file://xmlschema/test0001/clean.xsd&quot; that does not match actual content of the document.
The call of <function>schemaValidate()</function> signals an error.
</para>
      <screen><![CDATA[
select XMLType('<bad />', 'file://xmlschema/test0001/clean.xsd').schemaValidate();

*** Error 42000: [Virtuoso Driver][Virtuoso Server]Top-level element name <q> is unknown
at line 76 of load 'XmlType.sql':
select XMLType('<bad />', 'file://xmlschema/test0001/clean.xsd').schemaValidate() 
]]>
</screen>
    </example>
  </refsect1>
  <refsect1 id="seealso_XMLType.schemaValidate">
    <title>See Also</title>
    <para><link linkend="fn_XMLType.isSchemaValidated"><function>XMLType.isSchemaValidated()</function></link></para>
    <para><link linkend="fn_XMLType.setSchemaValidated"><function>XMLType.setSchemaValidated()</function></link></para>
    <para><link linkend="fn_XMLType.isSchemaValid"><function>XMLType.isSchemaValid()</function></link></para>
  </refsect1>
</refentry>
