<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_regexp_like">
  <refmeta>
    <refentrytitle>regexp_like</refentrytitle>
    <refmiscinfo>string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>regexp_like</refname>
    <refpurpose>Allows a like comparison using regular-expression.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_regexp_like">
      <funcprototype id="fproto_regexp_like">
        <funcdef>integer <function>regexp_like</function></funcdef>
        <paramdef>in <parameter>source_string</parameter> any</paramdef>
        <paramdef>in <parameter>pattern</parameter> any</paramdef>
        <paramdef><optional>in <parameter>match_parameter</parameter> integer</optional></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_regexp_like"><title>Description</title>
<para>The source_string supports character datatypes (CHAR, VARCHAR2, CLOB,
NCHAR, NVARCHAR2, and NCLOB but not LONG).  The pattern parameter is another
name for the regular expression.  match_parameter allows optional parameters such
as handling the newline character, retaining multiline formatting, and providing
control over case-sensitivity. </para>
</refsect1>
  <refsect1 id="params_regexp_like"><title>Parameters</title>
    <refsect2><title>source_string</title>
      <para>Source string</para>
    </refsect2>
    <refsect2><title>pattern</title>
      <para>The regular expression to match.  The following special classes are supported:</para>
	  <simplelist>
	    <member>[:alpha:] Alphabetic characters</member>
	    <member>[:lower:] Lowercase alphabetic characters</member>
	    <member>[:upper:] Uppercase alphabetic characters</member>
	    <member>[:digit:] Numeric digits</member>
	    <member>[:alnum:] Alphanumeric characters</member>
	    <member>[:space:] Space characters (nonprinting), such as carriage return, newline, vertical tab, and form feed</member>
	    <member>[:punct:] Punctuation characters</member>
	    <member>[:cntrl:] Control characters (nonprinting)</member>
	    <member>[:print:] Printable characters</member>
	  </simplelist>
</refsect2>
    <refsect2><title>match_parameter</title>
      <para>This is null by default.</para></refsect2>
  </refsect1>
 <refsect1 id="examples_regexp_like"><title>Examples</title>
    <example id="ex_regexp_like">
<title>Simple Use</title>
<para>The following SQL query's WHERE clause shows the REGEXP_LIKE operator,
which searches the ZIP column for a pattern that satisfies the regular expression
[^[:digit:]]. It will retrieve those rows in the ZIPCODE table for which the ZIP
column values contain any character that is not a numeric digit.</para>

<programlisting><![CDATA[
SELECT postalcode FROM demo.demo.customers
 WHERE REGEXP_LIKE(postalcode, '[^[:digit:]]')

PostalCode
==========
 WA1 1DP
 S-958 22
 T2F 8M4
 EC2 5NT
 05432-043
.
.
]]></programlisting>
</example>
</refsect1>
  <refsect1 id="seealso_regexp_like"><title>See Also</title>
    <para><link linkend="fn_regexp_match"><function>regexp_match()</function></link></para>
    <para><link linkend="fn_regexp_parse"><function>regexp_parse()</function></link></para>
    <para><link linkend="fn_regexp_instr"><function>regexp_instr()</function></link></para>
    <para><link linkend="fn_regexp_replace"><function>regexp_replace()</function></link></para>
    <para><link linkend="fn_regexp_substr"><function>regexp_substr()</function></link></para>
  </refsect1>
</refentry>


