<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="fn_jvm_ref_import">
  <refmeta>
    <refentrytitle>jvm_ref_import</refentrytitle>
    <refmiscinfo>type</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>jvm_ref_import</refname>
    <refpurpose>Creates XML description of Java class</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis id="fsyn_jvm_ref_import">
      <funcprototype id="fproto_jvm_ref_import">
        <funcdef>varchar <function>jvm_ref_import</function></funcdef>
	<paramdef>in <parameter>files</parameter> any</paramdef>
	<paramdef>in <parameter>classes</parameter> any</paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>
  <refsect1 id="desc_jvm_ref_import">
    <title>Description</title>
    <para>This function will returns an XML description of the selected classes 
    from the source files.</para>
    <para>The XML produced by the JVM_REF_IMPORT can be supplied to the 
    predefined XSL style sheet <computeroutput>__javavm_type</computeroutput> 
    to produce the CREATE TYPE statements:</para>
    <programlisting><![CDATA[
select xslt ('__javavm_type', xml_tree_doc (JVM_REF_IMPORT (files, classes)));
]]></programlisting>
    <para>This can also be achieve directly using a single call to:</para>
    <programlisting>
IMPORT_JAR (in files any, in classes any)
</programlisting>
  </refsect1>
  <refsect1 id="params_jvm_ref_import">
    <title>Parameters</title>
    <refsect2><title>files</title>
      <para>Null, string or vector of strings.  This can contain one or many 
      Java .class files, .zip or .jar files to pick classes from.  Null means 
      only the classes specified in the classes argument regardless of their 
      physical location.</para>
    </refsect2>
    <refsect2><title>classes</title>
      <para>Wildcard string or a vector of strings specifying which classes to 
      describe in the resulting XML.</para>
    </refsect2>
  </refsect1>
  <refsect1 id="ret_jvm_ref_import"><title>Return Types</title>
    <para>A varchar of XML that describes the selected Java classes.</para>
  </refsect1>
  <!--
  <refsect1 id="errors_jvm_ref_import">
    <title>Errors</title>
    <para>This function can generate the following errors:</para>
    <errorcode></errorcode>
  </refsect1>
  -->
  <refsect1 id="examples_jvm_ref_import">
    <title>Examples</title>
    <example id="ex_jvm_ref_import"><title>Simple Use</title>
      <screen><![CDATA[
JVM_REF_IMPORT (NULL, vector ('java.lang.Object', 'java.lang.System'));
]]></screen>
    <para>This will return an XML describing the Java classes java.lang.Object 
    and java.lang.System.  Because the java.lang.System class is a subclass 
    of java.lang.Object the XML description for java.lang.System will contain 
    a reference to java.lang.Object and only the methods/members defined in 
    java.lang.System (because the methods/members of java.lang.Object will 
    be inherited).</para>
      <screen><![CDATA[
JVM_REF_IMPORT (NULL, 'java.lang.System');
]]></screen>
    <para>As opposed to the above example this will create an XML description 
    only for the java.lang.System class, but will also add the inherited 
    methods/members (from java.lang.Object) as if they were methods/members of 
    the java.lang.System class.</para>
    </example>
  </refsect1>
  <refsect1 id="seealso_jvm_ref_import">
    <title>See Also</title>
    <para><link linkend="fn_import_jar"><function>import_jar()</function></link></para>
  </refsect1>
</refentry>
