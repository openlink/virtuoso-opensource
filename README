Virtuoso Open-Source Edition: Building
======================================

Copyright (C) 1998-2022 OpenLink Software <vos.admin@openlinksw.com>


Table of Contents
-----------------

* Building Virtuoso Open-Source Edition
 * .. Introduction
 * .. Package Dependencies
 * .. Diskspace Requirements
 * .. Make FAQ
 * .... Generic build environment
 * .... AIX 4.x 32-bit
 * .... AIX 4.x 64-bit
 * .... AIX 5.x 32-bit
 * .... AIX 5.x 32-bit
 * .... Digital Unix/OSF1 V5.0 64-bit
 * .... HP/UX 11.00 32-bit
 * .... HP/UX 11.00 64-bit
 * .... HP/UX 11.23 Itanium 32-bit
 * .... HP/UX 11.23 Itanium 64-bit
 * .... Linux 32-bit
 * .... Linux 64-bit
 * .... Mac OS X 10.2 and 10.3 PPC 32-bit
 * .... Mac OS X 10.4 PPC 32-bit
 * .... Mac OS X 10.4 PPC 64-bit
 * .... Mac OS X 10.4 Universal 32-bit
 * .... Mac OS X 10.5 32-bit
 * .... Mac OS X 10.5 64-bit
 * .... Mac OS X 10.5 Universal
 * .... Mac OS X 10.6 32-bit
 * .... Mac OS X 10.6 64-bit
 * .... Mac OS X 10.6 Universal
 * .... Mac OS X 10.7 32-bit
 * .... Mac OS X 10.7 64-bit
 * .... Mac OS X 10.7 Universal
 * .... Solaris 2.x i386 32-bit
 * .... Solaris 2.10 Opteron 32-bit
 * .... Solaris 2.10 Opteron 64-bit
 * .... Solaris 2.8 and above SPARC 32-bit
 * .... Solaris 2.8 and above SPARC 32-bit
 * .. Installation
 * .... Test Suite
 * .. Getting Started
 * .... VAD Packages


Introduction
============

This document explains steps to take after obtaining a Virtuoso source
snapshot or git clone.

These sections explain how to compile, test, and install; what components
are produced by the make process; and how one can interact with them.


Package Dependencies
====================

To generate the configure script and all other build files necessary,
please make sure the following packages and recommended versions are
installed on your system.

| Package   | Minimum | Maximum | From                                  |
| --------- | ------- | ------- | ------------------------------------- |
| autoconf  | 2.57    | 2.69    | http://www.gnu.org/software/autoconf/ |
| automake  | 1.9     | 1.16.1  | http://www.gnu.org/software/automake/ |
| libtool   | 1.5     | 2.4.6   | http://www.gnu.org/software/libtool/  |
| flex      | 2.5.33  | 2.6.4   | http://flex.sourceforge.net/          |
| bison     | 2.3     | 3.5.1   | http://www.gnu.org/software/bison/    |
| gperf     | 3.0.1   | 3.1     | http://www.gnu.org/software/gperf/    |
| gawk      | 3.1.1   | 5.0.1   | http://www.gnu.org/software/gawk/     |
| m4        | 1.4.1   | 1.4.18  | http://www.gnu.org/software/m4/       |
| make      | 3.79.1  | 4.2.1   | http://www.gnu.org/software/make/     |
| OpenSSL   | 0.9.8e  | 1.1.1   | http://www.openssl.org/               |

and any GNU packages required by these. The autogen.sh and configure
scripts check for the presence and right version of some of the required
components.

The `Minimum` column contains the oldest known versions of these
packages capable of building Virtuoso. Older versions of these
packages can sometimes be used, but could cause build problems.

The `Maximum` column contains the most recently tested version of 
these packages.

To check the version number of the tools installed on your system,
use one of the following commands:

  * autoconf --version
  * automake --version
  * libtoolize --version
  * flex --version
  * bison --version
  * gperf --version
  * gawk --version
  * m4 --version
  * make --version
  * openssl version

If you have an `automake` version older than 1.9, you can edit the
`configure.ac` script around line 47 using the examples provided for
each version.

Note that current operating systems (particularly all Linux distibutions)
split some of these packages into runtime and development packages, so, 
users of these platforms may need to run one of the following commands 
to get development headers & libraries for, for instance, OpenSSL,
even if OpenSSL runtime components are already present:

    apt-get install libssl-dev

-- or --

    yum install openssl-devel

**NOTE** OpenSSL 1.1 cannot currently be used to build Virtuoso, due to
significant changes relative to prior versions.  The necessary commands
to get the OpenSSL 1.0 development tools vary with the specific Linux
distribution and package manager.  For instance --

* apt (common on Debian) --

    sudo apt install libssl1.0-dev

  -- or --

    sudo apt-get install libssl1.0-dev

* yum (common on older versions of Fedora)

    yum install openssl-devel

* dnf (common on recent versions of Fedora) --

  - before building Virtuoso --

       sudo dnf install compat-openssl10-devel --allowerasing

  - after building Virtuoso, before building anything else that
    requires OpenSSL 1.1 --

       sudo dnf install openssl-devel --allowerasing


Diskspace Requirements
======================

The complete build produces a demo database and Virtuoso application
packages that are quite large. At least 800 MB of free space should be
available in the build file system.

When running `make install`, the target file system should have about
460 MB free. By default, the install target directories are under
`/usr/local/`, but you can specify something different with --

    ./configure --prefix=/path/to/dir

The minimum working configuration consists of the server executable
(generally only a few MB, depending on platform and options) and
config files plus database.


Make FAQ
========

In the root directory of the checkout, perform the following commands
to produce the default binaries, VAD packages, and demo database:

    ./autogen.sh        # should only be needed in git clone
    ./configure
    make

This will take some time, principally due to building and filling the
demo database, rendering the XML documentation into several target
formats, and composing various Virtuoso application packages. It takes
about 30 minutes on a 2GHz machine.

The default `configure` does not enable most of the runtime-hosting and
extension features. See the building page for instructions on how to
enable these and for notes about what additional software is required.

Some builds require additional `C` compiler and other environment flags
to be set before running the configure command, especially when building
64-bit versions of the server. If your system is not in the list below,
try running the `configure` command without any environment settings.

Warning: Some packages may fail to build, especially on 64-bit Linux
platforms, when using excessive optimization.  `CFLAGS="-O2"` is known
to work, but there are reports of `CFLAGS="-O3"` failing.

If your system requires additional flags not listed below, please
contact us at <vos.admin@openlinksw.com>.

Generic build environment
-------------------------
    CC=cc
    CFLAGS="-O"
    export CFLAGS CC
    ./configure
    make
    make install

AIX 4.x 32-bit
--------------
    CC=cc_r7
    CFLAGS="-O -q32"
    LDFLAGS="-brtl"
    OBJECT_MODE=32
    export CC CFLAGS LDFLAGS OBJECT_MODE
    ./configure ...

AIX 4.x 64-bit
--------------
    CC=cc_r7
    CFLAGS="-O -q64"
    LDFLAGS="-brtl"
    OBJECT_MODE=64
    export CC CFLAGS LDFLAGS OBJECT_MODE
    ./configure ...

AIX 5.x 32-bit
--------------
    CC=cc_r
    CFLAGS="-O -q32"
    LDFLAGS="-brtl"
    OBJECT_MODE=32
    export CC CFLAGS LDFLAGS OBJECT_MODE
    ./configure ...

AIX 5.x 32-bit
--------------
    CC=cc_r
    CFLAGS="-O -q64"
    LDFLAGS="-brtl"
    OBJECT_MODE=64
    export CC CFLAGS LDFLAGS OBJECT_MODE
    ./configure ...

Digital Unix/OSF1 V5.0 64-bit
-----------------------------
    CFLAGS="-O"
    export CFLAGS
    ./configure ...

HP/UX 11.00 32-bit
------------------
    CFLAGS="-O -Ae +DA1.1"
    export CFLAGS
    ./configure ...

HP/UX 11.00 64-bit
------------------
    CFLAGS="-O -Ae +DA2.0W"
    export CFLAGS
    ./configure ...

HP/UX 11.23 Itanium 32-bit
--------------------------
    CFLAGS="-O -Ae +DD32"
    export CFLAGS
    ./configure ...

HP/UX 11.23 Itanium 64-bit
--------------------------
    CFLAGS="-O -Ae +DD64"
    export CFLAGS
    ./configure ...

Linux 32-bit
------------
    CFLAGS="-O2"
    export CFLAGS
    ./configure ...

Linux 64-bit
------------
    CFLAGS="-O2 -m64"
    export CFLAGS
    ./configure ...

Mac OS X 10.2 and 10.3 PPC 32-bit
---------------------------------
    CFLAGS="-O -m32 -mmacosx-version-min=10.4"
    export CFLAGS
    ./configure ...

Mac OS X 10.4 PPC 32-bit
------------------------
    CFLAGS="-O -m32 -mmacosx-version-min=10.4"
    export CFLAGS
    ./configure ...

Mac OS X 10.4 PPC 64-bit
------------------------
    CFLAGS="-O -m64 -mmacosx-version-min=10.4"
    export CFLAGS
    ./configure ...

Mac OS X 10.4 Universal 32-bit
------------------------------
    CFLAGS="-O -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch ppc -arch i386 -mmacosx-version-min=10.4"
    export CFLAGS
    ./configure --disable-dependency-tracking ...

Mac OS X 10.5 32-bit
--------------------
    CFLAGS="-O -m32 -mmacosx-version-min=10.5"
    export CFLAGS
    ./configure ...

Mac OS X 10.5 64-bit
--------------------
    CFLAGS="-O -m64 -mmacosx-version-min=10.5"
    export CFLAGS
    ./configure ...

Mac OS X 10.5 Universal 
-----------------------
    CFLAGS="-O -isysroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386 -arch ppc64 -arch x86_64 -mmacosx-version-min=10.5"
    export CFLAGS
    ./configure --disable-dependency-tracking ...

Mac OS X 10.6 32-bit
--------------------
    CFLAGS="-O -m32 -mmacosx-version-min=10.6"
    export CFLAGS
    ./configure ...

Mac OS X 10.6 64-bit
--------------------
    CFLAGS="-O -m64 -mmacosx-version-min=10.6"
    export CFLAGS
    ./configure ...

Mac OS X 10.6 Universal 
-----------------------
    CFLAGS="-O -isysroot /Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64 -mmacosx-version-min=10.6"
    export CFLAGS
    ./configure --disable-dependency-tracking ...

Mac OS X 10.7 32-bit
--------------------
    CFLAGS="-O -m32 -mmacosx-version-min=10.7"
    export CFLAGS
    ./configure ...

Mac OS X 10.7 64-bit
--------------------
    CFLAGS="-O -m64 -mmacosx-version-min=10.7"
    export CFLAGS
    ./configure ...

Mac OS X 10.7 Universal 
-----------------------
    CFLAGS="-O -arch i386 -arch x86_64 -mmacosx-version-min=10.7"
    export CFLAGS
    ./configure --disable-dependency-tracking ...

Solaris 2.x i386 32-bit
-----------------------
Note: on Solaris or Open Solaris we recommend you use gmake version
3.80 or better, from /usr/sfw/bin/ or installed from sunfreeware.

    CC=cc
    CFLAGS="-O"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Solaris 2.10 Opteron 32-bit
---------------------------
    CC=cc
    CFLAGS="-O -xtarget=opteron"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Solaris 2.10 Opteron 64-bit
---------------------------
    CC=cc
    CFLAGS="-O -xtarget=opteron -xarch=amd64"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Solaris 2.8 and above SPARC 32-bit
----------------------------------
    CC=cc
    CFLAGS="-O"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Solaris 2.8 and above SPARC 32-bit
----------------------------------
    CC=cc
    CFLAGS="-O -xtarget=ultra -xarch=v9"
    PATH=/opt/SUNWspro/bin:/usr/ccs/bin:$PATH
    export CFLAGS CC PATH
    ./configure ...

Installation
============

After running `configure` and `make`, running the following command at
the root of the build tree copies the files to the location specified by
the `--prefix` option to `configure`:

    make install

You can override the `--prefix` set with `configure` (including the
default, `/usr/local/`) for the `make install` with a command like --

    make install prefix=/home/virtuoso

Several subdirectories are created and/or populated below the specified
prefix (whether `/usr/local/`, `/home/virtuoso/`, or otherwise), with
contents as noted:

 * share/virtuoso/doc/html
 * share/virtuoso/doc/pdf
 * share/virtuoso/vad - VAD packages including BPEL, Conductor, tutorials,
   and documentation
 * var/lib/virtuoso/db - Empty database
 * var/lib/virtuoso/demo - Demo database; obsolete as of version 5.0.3
 * bin/ - Primarily executables such as virtuoso-t, isql, isqlw, virt_mail,
   virtuoso-sample-t, and inifile
 * lib/ - libvirtuoso-t.a, libvirtuoso-t.la, virtodbc32.a, virtodbc32.la,
   virtodbc32_r.a, virtodbc32_r.la, virtodbc_r.so, and wikiv.so, plus any
   plugins that may be enabled.
 * lib/virtuoso - hosting_sample.a, hosting_sample.la, hosting_sample.so,
   plugin_sample.a, plugin_sample.so

Note: As of version 5.0.2, the `./configure` script supports different
subdirectory structures which may be specified with the `--with-layout=`
parameter. If you've specified a layout other than the default, the above
will differ accordingly.

Note: As of version 5.0.3, the demo database is delivered as a VAD package,
not a separate directory.


Test Suite
==========

Optionally, you can run the following at the root of the build tree to
start the automated test suite:

    make check

This requires approximately 1 GB of free disk space and takes about an
hour on a 2GHz machine.


Getting Started
===============

Run the following to start the server in the background (albeit in
foreground mode):

    cd var/lib/virtuoso/db 
    virtuoso-t -f &

It will not detach from the shell, so you will see the startup messages.

By default (i.e., when no `-c` parameter is specified), Virtuoso will use
the `virtuoso.ini` config file in the present working directory.  A default
config file is generated in the `{prefix}/var/lib/virtuoso/db` directory as
part of `make install`.

The first time Virtuoso is run (no special commands are required), it will
create an empty database and install the Conductor VAD package. You can then
access <http://localhost:8890/> and/or <http://localhost:8890/conductor/>
and use the `System Administration` -> `Packages` page to install more VAD
packages such as the Demo catalog/database, or the ODS application suite
(addressbook, weblog, feeds manager, etc.).

The default username is `dba` with a password of `dba` for the Conductor
and iSQL. For DAV functions, the default username is `dav` with a password
of `dav`.

You will see a `checkpoint` in the terminal for each package you install:

    15:33:54 INFO: Checkpoint made, log reused

To connect with the command line iSQL tool (i.e., to get a `SQL>` prompt),
run --

    isql 1111 dba dba

If you've installed the `demo` VAD containing the Microsoft Northwind
sample tables, you can type the following at the `SQL>` prompt to switch
to the demo database:

    use Demo;

The simple `help` command in iSQL will get further instructions.

To use the HTTP browser-based admin interface, point your browser to --

    http://localhost:8890/conductor

To read the local documentation, visit --

    http://localhost:8890/doc/html

To experiment with online tutorials, you can use the Conductor to install
the Tutorial VAD package, then point your browser to --

    http://localhost:8890/tutorial


VAD Packages
============

Any VAD package accessible in the filesystem (and contained within the
list of `DirsAllowed` specified in the `[Parameters]` section of the
config file) can be installed via iSQL using the following command form
at the `SQL>` prompt:

    vad_install ('file/system/path/package-name.vad', 0);

Alternatively, you can copy VAD packages into Virtuoso's DAV repository,
and then execute the following command (also at the `SQL>` prompt):

    vad_install ('DAV/webdav/path/package-name.vad', 1);
