<?vsp
  declare upgrade, host, x, connection, content, sec_websocket_key, service_name, sec_websocket_version, origin, sec_websocket_protocol, s any;
  declare sec_websocket_extensions any;
  declare sec_websocket_accept, header any;
  declare ses any;
  declare sid int;

  host := http_request_header (lines, 'Host', null, null);
  upgrade := http_request_header (lines, 'Upgrade', null, null);
  connection := http_request_header (lines, 'Connection', null, null);
  sec_websocket_key := http_request_header (lines, 'Sec-WebSocket-Key', null, null);
  sec_websocket_version := http_request_header (lines, 'Sec-WebSocket-Version', null, null);
  sec_websocket_extensions := http_request_header (lines, 'Sec-WebSocket-Extensions', null, null);
  origin := http_request_header (lines, 'Origin', null, null);
  sec_websocket_protocol := http_request_header (lines, 'Sec-WebSocket-Protocol', null, null);
  sid := atoi(get_keyword ('sid', params, '1'));

  if (http_client_session_cached (sid))
    {
      http_status_set (400);
      return;
    }

  if (upgrade = 'websocket' and sec_websocket_version = '13')
   {
     -- set callback for recv
     http_on_message (null, 'WSOCK.DBA.WEBSOCKET_ONMESSAGE_CALLBACK', vector ('WSOCK.DBA.WEBSOCKET_ECHO', sid));
     -- cache session and send http status
     http_keep_session (null, sid, 0);

     sec_websocket_accept := sha1_digest (concat (sec_websocket_key, '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'));
     header := sprintf ('Upgrade: %s\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: %s\r\n', upgrade, sec_websocket_accept);
     if (sec_websocket_protocol is not null)
       header := sprintf ('%sSec-WebSocket-Protocol: %s\r\n', header, sec_websocket_protocol);

     http_status_set (101);
     http_header (header);
   }
  else
   {
     http_status_set (400);
   }
 return;
?>
