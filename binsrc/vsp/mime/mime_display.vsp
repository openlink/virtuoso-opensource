<?vsp 
--
--  $Id$
--  
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--  
--  Copyright (C) 1998-2019 OpenLink Software
--  
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--  
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--  
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--  
--  

 adm_pre_page(lines);

--no_c_escapes-
  declare msgid, _u_id integer;
  declare own, _type varchar;
  declare msg, parsed_message varchar;
  declare inx integer;
  declare ses, download_path varchar;
  declare subject, sender, _back varchar;
  declare v_id, v_message varchar;
  declare v_submit integer;
  declare mm_b_id integer;

  _u_id := WS.WS.check_auth (lines);
  if (_u_id < 1)
    {
      http_request_status ('HTTP/1.1 401 Unauthorized');
      http ( concat ('<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">',
            '<HTML><HEAD>',
            '<TITLE>401 Unauthorized</TITLE>',
            '</HEAD><BODY><H1>Unauthorized</H1>',
            'Access to page is forbidden.</BODY></HTML>'));
      return (0);
    }
  else
    select U_NAME into own from WS.WS.SYS_DAV_USER where U_ID = _u_id;

  ses := null;
  _type := get_keyword_ucase ('type', params);

  if (_type = 'news')
    msgid :=  (get_keyword ('mail_no', params, '0'));
  else
    msgid := get_keyword ('msg', params);

  subject := '';
  sender := '';
  if (msgid = '')
    msgid := null;

  download_path := get_keyword ('downloadpath', params);

  if (download_path = '')
    download_path := null;

  v_id := get_keyword_ucase ('id', params);
  v_message := get_keyword_ucase ('message', params);
  v_submit := atoi (get_keyword_ucase ('delete', params));
  mm_b_id := get_keyword ('mail_no', params, '0');
  _back := get_keyword ('back', params, '0');

  if (download_path is not null)
    {
      declare path_part, body, parts, attrs varchar;

      if (msgid is null)
	return;

        msgid := (get_keyword ('msg', params));

      if (_type = 'news')
        msg := coalesce ((select blob_to_string (NM_BODY) from DB.DBA.NEWS_MSG
	  where NM_ID = msgid), NULL);
      else
        select blob_to_string(MM_BODY) into msg
	  from MAIL_MESSAGE where MM_ID = atoi (msgid) and MM_OWN = own;

    if (isnull(msg))
        {
	  signal ('.....', concat ('No message with the id=', msgid));
	  return;
        }
      parsed_message := mime_tree (msg);

      while (not length (download_path) = 0)
        {
	  body := aref (parsed_message, 1);
	  parts := aref (parsed_message, 2);
	  attrs := aref (parsed_message, 0);
	  if (isarray (attrs))
	    if (not isnull(get_keyword_ucase ('Subject', attrs)))
	      subject := get_keyword_ucase ('Subject', attrs);
	  if (isarray (attrs))
	    if (not isnull(get_keyword_ucase ('From', attrs)))
	      sender := get_keyword_ucase ('From', attrs);
          inx := 1;
          while (inx > 0)
            {
	      inx := strstr (download_path, '/');
	      if (inx is null)
		{
		  path_part := download_path;
		  download_path := '';
		}
	      else
		{
		  path_part := subseq (download_path, 0, inx);
		  download_path := subseq (download_path, inx + 1, length (download_path));
		}
	      if (length (path_part) > 0)
		inx := 0;
	      else
		inx := 1;
	    }
	  if (path_part = 'b')
	    {
	      if (not isarray (body))
		{
		  signal ('.....', 'No message inside the body');
		  return;
		}
	      parsed_message := aref (body, 2);
	    }
	  else if (path_part = 'd')
	    {
	      declare http_hdr, attr, val, lcase_attr, chrset, fname varchar;
	      declare decode integer;

	      inx := 0;
	      if (sender is not null)
		{
		  http_hdr := concat ('From: ', sender, '\r\n');
		}
	      else
		{
		  http_hdr := '';
		}

              chrset := get_keyword_ucase ('charset', attrs);
	      fname := get_keyword_ucase ('filename', attrs);

              decode := 0;
	      while (inx < length (attrs))
		{
		  attr := aref (attrs, inx);
		  val := aref (attrs, inx + 1);
		  if (lcase (attr) =  'content-transfer-encoding')
		    {
		      attr := 'Content-Encoding';
		      if (val = 'base64')
                         decode := 1;
		    }
		  lcase_attr :=  lcase (attr);
		  if (lcase_attr = 'content-type')
		    {
		      if (chrset is not null)
			val := concat (val, ' ; charset=', chrset);
		    }
		  if (lcase_attr = 'content-disposition' and fname is not null)
		    val := concat (val, ' ; filename=', fname);
		  if (lcase_attr = 'from' or subseq (lcase_attr, 0, 7) = 'content' or lcase_attr = 'from')
		    {
		      http_hdr := concat (http_hdr, attr, ': ', val, '\r\n');
		    }
		  inx := inx + 2;
	        }
	      http_rewrite ();
	      http_header (http_hdr);
	      if (decode = 1)
	        http (decode_base64 (substring (msg, aref (body, 0) + 1,  aref (body, 1) - aref (body, 0))));
	      else
	        http (substring (msg, aref (body, 0) + 1,  aref (body, 1) - aref (body, 0)));
	      return;
	    }
	    else
	      {
		declare multi_part integer;
		multi_part := atoi (path_part);
		if (isnull(multi_part) or isnull (parts))
		  {
		    signal ('.....', sprintf ('No message at multipart position %d', multi_part));
		    return;
		  }
		parsed_message := aref (parts, multi_part);
	      }
	    if (not isarray(parsed_message))
	      {
		signal ('.....', 'Selected message is empty');
		return;
	      }
	  }
      return;
    }
?>

<html>
<head>
<link rel="stylesheet" type="text/css" href="<?=adm_what_css()?>" />
<meta name="AUTHOR" content="OpenLink Software">
<meta name="DESCRIPTION" content="Parsing MIME with Virtuoso VSP">
</head>
<?vsp
declare _title varchar;
    if (_type = 'news')
      _title := 'News Message ';
    else
      _title := concat ('Message ', cast (msgid as varchar), '');
?>
<?vsp adm_page_header(_title, NULL); ?>

<?vsp

    if (_type = 'news')
      msg := coalesce ((select blob_to_string (NM_BODY) from DB.DBA.NEWS_MSG
	where NM_ID = mm_b_id), NULL);
    else
      select blob_to_string (MM_BODY) into msg from MAIL_MESSAGE where MM_ID = atoi (msgid) and MM_OWN = own;

    if (msg is not null)
      {
	parsed_message := mime_tree (msg);
	display_mime (msgid, ses, parsed_message, msg, '', http_path(), _type);
      }
    else
      http ('<strong>EMPTY MESSAGE</strong>');

    if (_back <> '0')
      {
        if (_type is null)
  	  update DB.DBA.MAIL_MESSAGE set MM_IS_READED = 1
	    where MM_ID = atoi (msgid) and MM_OWN = own;
?>
<FORM method="POST"  name="mail_view" action="<?=_back?>">
  <INPUT type="submit" name="back" value="Back">
</FORM>
<?vsp
      }
?>
<?vsp adm_page_footer(); ?>
</html>
