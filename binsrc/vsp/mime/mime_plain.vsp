<?vsp 
--
--  $Id$
--  
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--  
--  Copyright (C) 1998-2019 OpenLink Software
--  
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--  
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--  
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--  
--  
 adm_pre_page(lines);

  declare _u_id, _id integer;
  declare own varchar;
  declare msg, parsed_message varchar;
  declare subject, sender varchar;
  declare v_id, v_message, sid varchar;
  declare seen_before integer;
  declare _err, _ok, _spam varchar;
  declare _sdate datetime;
  declare _msg_body, _ret any;
  declare ix, ln, mid integer;

  sid := adm_get_sesid (params);
  _u_id := DB.DBA.adm_dav_check_auth (lines, 1);
  seen_before := adm_get_ses_var (sid, 'seen_before', 0);
  if (_u_id > 0 and seen_before and '' <> get_keyword ('new_login', params, ''))
    {
      _u_id := 0;
      adm_set_ses_var (sid, 'seen_before', 0);
    }
  if (_u_id < 1)
    {
      http_request_status ('HTTP/1.1 401 Unauthorized');
      DB.DBA.vsp_auth_get ('virtuoso_dav_admin', '/mime',
		md5 (datestring (now ())),
		md5 ('FloppyBootStompedOntoTheGround'),
		'false', lines, 1);

      http ( concat ('<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">',
            '<HTML><HEAD>',
            '<TITLE>401 Unauthorized</TITLE>',
            '</HEAD><BODY><H1>Unauthorized</H1>',
            'Access to page is forbidden.</BODY></HTML>'));
      return (0);
    }
  else
    select U_NAME into own from WS.WS.SYS_DAV_USER where U_ID = _u_id;

  _err := ''; _ok := '';
  ix := 0;
  _id := atoi ({?'id'});

  adm_set_ses_var (sid, 'seen_before', _u_id);
  v_message := get_keyword_ucase ('message', params);

   if ({?'del_sel'} is not null)
     {
       while (mid := adm_next_checkbox ('CB_', params, ix))
	 delete from DB.DBA.MAIL_MESSAGE where MM_ID = atoi (mid) and MM_OWN = own;
     }

   if ({?'add_spam'} is not null)
     {
       while (mid := adm_next_checkbox ('CB_', params, ix))
         {
	    filter_add_message (atoi (mid), _u_id, 1);
	 }
       ix := 0;
       while (mid := adm_next_checkbox ('CB_', params, ix))
         {
	    filter_classify_message (atoi (mid));
	 }
     }

   if ({?'add_ham'} is not null)
     {
       while (mid := adm_next_checkbox ('CB_', params, ix))
         {
	    filter_add_message (atoi (mid), _u_id, 0);
	 }
       ix := 0;
       while (mid := adm_next_checkbox ('CB_', params, ix))
         {
	    filter_classify_message (atoi (mid));
	 }
     }

   if ({?'check_messages'} is not null)
     {
       while (mid := adm_next_checkbox ('CB_', params, ix))
	 filter_classify_message (atoi (mid));
     }

   if ({?'classify'} is not null)
      filter_classify_message (_id);

   if ({?'spam'} is not null)
    {
      filter_add_message (_id, _u_id, 1);
      filter_classify_message (_id);
    }

   if ({?'del_spam'} is not null)
    {
      filter_remove_message (_id, _u_id, 1);
      filter_classify_message (_id);
    }

   if ({?'ham'} is not null)
    {
      filter_add_message (_id, _u_id, 0);
      filter_classify_message (_id);
    }

   if ({?'del_ham'} is not null)
    {
      filter_remove_message (_id, _u_id, 0);
      filter_classify_message (_id);
    }
?>
<html>
<head>
<link rel="stylesheet" type="text/css" HREF="<?=adm_what_css()?>" />
<meta name="AUTHOR" content="OpenLink Software">
<meta name="DESCRIPTION" content="Parsing MIME with Virtuoso VSP">
<script language="javascript" src="../admin/admin_utils.js"></script>
<title>Messages list</title>
</head>
<?vsp adm_page_header(concat('Messages List of ', own), NULL); ?>

<?vsp

    if (_err <> '') http (_err);
    if (_ok <> '') http (_ok);

?>

<FORM method="post" action="mime_plain.vsp" enctype="multipart/form-data">
<input type="hidden" name="sid" value="<?=sid?>">
<TABLE CLASS="genlist" BORDER="0" CELLPADDING="0">
<TR><TD CLASS="stathead" COLSPAN="12">Messages</TD></TR>
<TR CLASS="AdmBorders"><TD COLSPAN="12"><IMG SRC="../admin/images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>
    <tr><td CLASS="genlistheadt">
    <input type="checkbox" name="selectall" value="Select All" onClick="selectAllCheckboxes(this.form, this)">
    </td><td CLASS="genlistheadt">ID</td><td CLASS="genlistheadt">Sender</td><td CLASS="genlistheadt" colspan=2>Subject</td>
    <td CLASS="genlistheadt" colspan=6>Spam test</td></tr>
    <?vsp
          declare exis, pos integer;
          exis := 0;
          for select MM_ID, MM_FROM, MM_SUBJ, MM_REC_DATE, MM_SND_TIME, MM_BODY_ID, MM_BODY
	  	from MAIL_MESSAGE where MM_OWN = own do
            {
              exis := exis + 1;
	      if (isstring (MM_SND_TIME) and length (MM_SND_TIME) > 0)
                _sdate := MM_SND_TIME;
	      else
		_sdate := MM_REC_DATE;

	      _spam := substring (mail_header (cast (MM_BODY as varchar), 'X-VirtuosoSPAMFilter'), 1, 512);

	      if (_spam = '')
   		_spam := 'Not tested';
    ?>
       <tr>
           <td CLASS="genlistheadt"><input type="checkbox" name="CB_<?=MM_ID?>"></td>
	   <td CLASS="gendata">
	      <?vsp http (concat ('<A class="tablelistaction" href=mime_display.vsp?msg=', cast (MM_ID as varchar), '>')); ?>
              <?= MM_ID ?>
              </A>
	   </td>
	   <td CLASS="gendata" ><?vsp http (DB.DBA.adm_mailaddr_pretty (MM_FROM));?></td>
	   <td CLASS="gendata" colspan=2><small><?= MM_SUBJ ?></small></td>
	   <td CLASS="gendata" nowrap><small><?= _spam  ?></small></td>
	   <td CLASS="gendata" nowrap><small><A class="tablelistaction" href=mime_plain.vsp?classify=1&id=<?=MM_ID?>>Classify</A></small></td>
	   <td CLASS="gendata" nowrap><small><A class="tablelistaction" href=mime_plain.vsp?spam=1&id=<?=MM_ID?>>Spam</A></small></td>
	   <td CLASS="gendata" nowrap><small><A class="tablelistaction" href=mime_plain.vsp?del_spam=1&id=<?=MM_ID?>>-</A></small></td>
	   <td CLASS="gendata" nowrap><small><A class="tablelistaction" href=mime_plain.vsp?ham=1&id=<?=MM_ID?>>Ham</A></small></td>
	   <td CLASS="gendata" nowrap><small><A class="tablelistaction" href=mime_plain.vsp?del_ham=1&id=<?=MM_ID?>>-</A></small></td>
       </tr>
    <?vsp
	    }

	   if (not exis)
             {
    ?>
	   <tr><td colspan="12" CLASS="gendata" >
	   Mail box is empty
	   </td></tr>
    <?vsp
	     }
	   else
            {
    ?>
	   <tr><td colspan="12" CLASS="genlistheadt" >
	   <table>
	   <tr><td CLASS="genlistheadt" >
	   <input type="submit" name="check_messages" value="Classify selected.">
	   </td>
	   <td CLASS="genlistheadt" >
	   <input type="submit" name="add_spam" value="Add to SPAM">
	   </td>
	   <td CLASS="genlistheadt" >
	   <input type="submit" name="add_ham" value="Add to HAM">
	   </td>
	   <td CLASS="genlistheadt" >
	   <input type="submit" name="del_sel" value="Delete Selected">
	   </td></tr>
	   </table>
	   </td></tr>
    <?vsp
	    }
    ?>
</TABLE>

<div align="right" style="margin-right: 70pt;">
<b>If "<?=own?>" is not your ID, click here </b><INPUT type=submit name="new_login" value="Re-login">
</div>
</FORM>

<div align="right" style="margin-right: 70pt;">
<FORM method="post" action="mime_spam_filter_setup.vsp" enctype="multipart/form-data">
<INPUT type=submit name="setup" value="Spam Filter Setup">
</FORM>
</div>
<?vsp adm_page_footer(); ?>
</html>
