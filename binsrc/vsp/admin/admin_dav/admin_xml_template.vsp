<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2019 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
--
 adm_pre_page(lines);
--no_c_escapes-
  if (1 <> adm_dav_check_auth (lines)) {adm_tell_unauth_dav(lines); return (0);}

  declare _current_uri, _show_browser, _disp_result, _sys, _mod, _file, _sty, _docontext varchar;
  declare _ur, _iw, _ux, _gr, _gw, _gx, _or, _ow, _ox, _qtype, _scope, _defsty varchar;
  declare stat, err, caller_uri, sid, _desc varchar;
  declare do_replace integer;
  declare _dav_result any;
  declare _p_stat any;

  stat := '00000'; err := ''; _desc := '';
  _show_browser := null;
  _dav_result := null;
  _current_uri := 'admin_xml_template.vsp';
  _disp_result := 'yes';
  do_replace := 0;

  if ('' <> get_keyword ('load_template', params, ''))
      {
	declare caller, what varchar;
        what := get_keyword ('load_template', params, 'query');
        caller := get_keyword ('caller_uri', params, '');
?>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="<?=adm_what_css()?>">
    <title>Save Query in a XML template</title>
  </head>
<?vsp adm_page_header('Load Query as a XML Template', NULL); ?>
  <!-- here it goes  -->

  <input type="hidden" name="stmt" value="">
  <input type="hidden" name="qtype" value="">
  <TABLE CLASS="statlist" BORDER="0" CELLPADDING="0">
   <tr>
    <th CLASS="genhead" colspan="3">Select Template</th>
    <TR><TD CLASS="AdmBorders" COLSPAN="3"><IMG SRC="images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>
   </tr>
   <tr>
     <th CLASS="genlistheadt">Resource</th>
   </tr>
<?vsp
   declare stmt_id varchar;

   for select cast  (p as varchar ) as stmt, xpath_eval ('@scope', p, 1) as scope,
     xpath_eval ('@context', p, 1) as _docontext, res_full_path, RES_ID
     from ws..sys_dav_res, ws..sys_dav_prop where prop_name = 'xml-template' and PROP_TYPE = 'R'
	 and RES_ID = PROP_PARENT_ID and xpath_contains (res_content, sprintf ('//%s', what) , p) do
      {
	if (scope is not null)
	  {
	    scope := cast (scope as varchar);
            scope := sprintf ('&q_scope=%U', scope);
	  }
	else
	  scope := '';

	if (_docontext is not null)
	  {
	    _docontext := cast (_docontext as varchar);
            _docontext := sprintf ('&docontext=%U', _docontext);
	  }
	else
	  _docontext := '';

        stmt_id := '';
	if (what = 'xquery')
	  {
            stmt := '';
            stmt_id := sprintf ('&stmt_id=%d', RES_ID);
	  }

?>
      <tr>
       <td CLASS="statdata"><A HREF="<?=caller?>&stmt=<?/stmt?><?vsp http(scope); ?><?vsp http(_docontext); ?><?=stmt_id?>&saved_file=<?/RES_FULL_PATH?>" TARGET=""><?=RES_FULL_PATH?></A></td>
      </tr>
<?vsp
      }
?>
   </table>
<?vsp adm_page_footer(); ?>
</html>
<?vsp
        return;
      }

  if ('' <> get_keyword ('dav_resource', params, '')
      or '' <> get_keyword ('dav_sty', params, ''))
    {
      _show_browser := 'yes';
      _disp_result := 'no';
    }
?>
<?include admin_dav_browse.vsp?>
<?vsp
  if (_show_browser is null)
    {
      declare _root, _stmt varchar;

      caller_uri := get_keyword ('caller_uri', params, '');
      _qtype := get_keyword ('qtype', params, 'SQL');

      _defsty := get_keyword ('defsty', params, '');
      if (_defsty <> '')
        _defsty := 'checked';

      if (_dav_result is not null and '' <> get_keyword ('dav_sty', params, ''))
         _sty := _dav_result;
      else
         _sty := get_keyword ('sty', params, '');

      if (_dav_result is not null and '' <> get_keyword ('dav_resource', params, ''))
	 _file := _dav_result;
      else
	 _file := get_keyword ('res', params, '');

      if (_file = '')
	_file := get_keyword ('saved_file', params, '');

      _root := get_keyword ('root', params, 'ROOT');
      _stmt := get_keyword ('stmt', params, '');
      _scope := get_keyword ('q_scope', params, '');

      _desc := get_keyword ('desc', params, '');

--dbg_obj_print ('admin_xml_template.vsp: ', params);

      if ('' <> get_keyword ('execute', params, ''))
	{
	    declare sty_attr, ses, perms, own, grp, el, res_name, qnode, restri varchar;
	    declare rc, iown, igrp, i, res_id integer;
	    declare namearr any;

	    if (_defsty <> '')
	      sty_attr := sprintf ('sql:xsl="%s"', '__xml_template_default');

	    if (_sty <> '')
	      sty_attr := sprintf ('sql:xsl="%s"', _sty);
	    else if (_defsty = '')
	      sty_attr := '';

            qnode := 'query'; restri := '';
            if (_qtype = 'XPATH')
	      {
                qnode := 'xpath';
		if (_scope <> '')
                  restri := sprintf (' sql:scope="%s"', _scope);
	      }
            else if (_qtype = 'freetext')
              qnode := 'text';

            if (_qtype = 'xquery')
	      {
                 qnode := 'xquery';
                 restri := sprintf (' sql:context="%s"', _scope);
	      }

	    if (_root = '' or not isstring (_root))
	      _root := 'root';
	    ses := sprintf (
		     '<%s xmlns:sql="urn:schemas-openlink-com:xml-sql" %s>\n<sql:%s%s><![CDATA[%s]]></sql:%s>\n</%s>',
			      _root, sty_attr, qnode, restri, _stmt, qnode, _root);

	    own := get_keyword ('own', params, '');
	    grp := get_keyword ('grp', params, '');

            iown := coalesce ((select U_ID from WS.WS.SYS_DAV_USER where U_NAME = own), NULL);
            igrp := coalesce ((select top 1 G_ID from WS.WS.SYS_DAV_GROUP where G_NAME = grp), NULL);

            perms := ''; i := 0;
            while (i < 9)
	      {
	        el := get_keyword (sprintf ('p%d', i), params, NULL);
		if (el is not null)
		  perms := concat (perms, '1');
	        else
		  perms := concat (perms, '0');

                i := i + 1;
	      }
           el := get_keyword ('p9', params, NULL);
	   if (el is not null)
	     perms := concat (perms, 'R');
	   else
	     perms := concat (perms, 'N');

	   if (_file = '')
	     {
	       err := 'Target file is not specified';
	       goto err_end;

	     }

           namearr := WS.WS.HREF_TO_ARRAY (_file, '');
--         dbg_obj_print (_file, perms, iown, igrp, namearr);
           res_name := namearr [length (namearr)-1];

           if (strrchr (res_name, '.') is null)
	     {
	       _file := concat (_file,'.xml');
	       namearr := WS.WS.HREF_TO_ARRAY (_file, '');
	       res_name := namearr [length (namearr)-1];
	     }

           res_id := -1;
           if (0 > (rc := DB.DBA.DAV_SEARCH_ID (_file, 'r')))
	     {
		if (0 > (rc := DB.DBA.DAV_SEARCH_ID (_file, 'p')))
		  {
                    err := 'Invalid WebDAV resource path';
		    goto err_end;
		  }
		else
		  {
		    -- insert
		    res_id := WS.WS.GETID('R');
		    insert into WS.WS.SYS_DAV_RES
		    (RES_ID, RES_NAME, RES_FULL_PATH, RES_CONTENT, RES_TYPE,
		     RES_MOD_TIME, RES_CR_TIME, RES_OWNER, RES_GROUP, RES_COL, RES_PERMS) values
		    (res_id, res_name, _file, ses, 'text/xml',
		     now(), now(), iown, igrp, rc, perms);
		  }
	      }
	    else
	      {
		-- update XXX: must ask
--		 err := 'The target file already exists, drop it first';
		 if ( {?'Del2'} is NULL)
		   {
		     do_replace := 1;
	             goto err_end;
		   }
		 if ({?'proceed_r'} is not NULL)
		   {
		      update WS.WS.SYS_DAV_RES set RES_CONTENT = ses, RES_TYPE = 'text/xml',
	                   RES_MOD_TIME = now(), RES_OWNER = iown, RES_GROUP = igrp, RES_PERMS = perms
			   where RES_ID = rc;
	              res_id := rc;
		   }
	      }
	    if (res_id > 0)
	      {
		insert soft WS.WS.SYS_DAV_PROP (PROP_NAME, PROP_TYPE, PROP_PARENT_ID, PROP_VALUE, PROP_ID)
		    values ('xml-template', 'R', res_id, 'execute', WS.WS.GETID ('P'));
		insert replacing WS.WS.SYS_DAV_PROP (PROP_NAME, PROP_TYPE, PROP_PARENT_ID, PROP_VALUE, PROP_ID)
		    values ('xml-sql', 'R', res_id, _stmt, WS.WS.GETID ('P'));
		insert replacing WS.WS.SYS_DAV_PROP (PROP_NAME, PROP_TYPE, PROP_PARENT_ID, PROP_VALUE, PROP_ID)
		    values ('xml-sql-root', 'R', res_id, _root, WS.WS.GETID ('P'));
		if ('' <> get_keyword ('desc', params, ''))
		  {
		    insert replacing WS.WS.SYS_DAV_PROP (PROP_NAME, PROP_TYPE, PROP_PARENT_ID, PROP_VALUE, PROP_ID)
			values ('xml-sql-description', 'R', res_id, {?'desc'}, WS.WS.GETID ('P'));
		  }
	      }
	  if (get_keyword ('caller_uri', params, '') <> '')
	    {
	      declare new_location varchar;

              new_location := get_keyword ('caller_uri', params, '');
	      new_location := sprintf ('%s&stmt=%U&docontext=%U', new_location, _stmt, _scope);
	      http_rewrite();
	      http_request_status ('HTTP/1.1 302 Found');
	      http_header (sprintf ('Location: %s\r\n', new_location));
	      return;
	    }
	}
      if ('' <> get_keyword ('saved_file', params, ''))
	{
	  _file := get_keyword ('saved_file', params, '');
          _root := coalesce ((select blob_to_string (PROP_VALUE) from WS.WS.SYS_DAV_PROP, WS.WS.SYS_DAV_RES
		       where RES_FULL_PATH = _file and PROP_PARENT_ID = RES_ID and PROP_TYPE = 'R'
		       and PROP_NAME = 'xml-sql-root'
		       ), 'ROOT');
          _sty := coalesce ((select blob_to_string (PROP_VALUE) from WS.WS.SYS_DAV_PROP, WS.WS.SYS_DAV_RES
		       where RES_FULL_PATH = _file and PROP_PARENT_ID = RES_ID and PROP_TYPE = 'R'
		       and PROP_NAME = 'xml-stylesheet'
		       ), '');

          if (_sty = '__xml_template_default')
	    {
	      _sty := '';
	      _defsty := 'checked';
	    }
          _desc := coalesce ((select blob_to_string (PROP_VALUE) from WS.WS.SYS_DAV_PROP, WS.WS.SYS_DAV_RES
		       where RES_FULL_PATH = _file and PROP_PARENT_ID = RES_ID and PROP_TYPE = 'R'
		       and PROP_NAME = 'xml-sql-description'
		       ), '');
	}
err_end:;

?>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="<?=adm_what_css()?>">
    <title>Save Query in a XML template</title>
  </head>
<?vsp adm_page_header('Save Query as a XML Template', NULL);

  if (err <> '')
    {
?>
    	   <TABLE CLASS="genlist" BORDER="0" CELLPADDING="0" align=middle WIDTH="60%">
	   <tbody>
	   <TR><TD CLASS="errorhead" COLSPAN="2">Error</TD></TR>
	   <TR><TD CLASS="genlisthead">Error Message</TD><TD CLASS="gendata"><?=err?></TD></TR>
	   </tbody>
	   </TABLE>
           </TR></TD>
	   <TR CLASS="CtrlMain" ><TD COLSPAN=2 align=MIDDLE>
<?vsp
    }
  if (do_replace <> 0)
    {
?>
	 <table border="0" width="60%">
	 <form method="POST" action="admin_xml_template.vsp" name="replace_res">
	   <tr><td class="genlistheadt">You are about to replace the resource <?= _file ?>. This replace cannot be undone. Do you wish to continue?</td></tr>
	   <tr>
	   <td align="center">
	      <input type="submit" name="proceed_r" value="Replace">&nbsp;
         <input type="submit" name="proceed" value="Cancel"></td>
         <input type="hidden" name="Del2" value="1">
<?vsp
    declare idx2, len2 integer;
    idx2 := 0; len2 := length (params);
    while (idx2 < len2)
      {
?>
         <input type="hidden" name="<?=params[idx2]?>" value="<?=params[idx2+1]?>">
<?vsp
	 idx2 := idx2 + 2;
      }
?>

         </tr>
         </form>
         </table>
	 </TD></TR>
	 <TR><TD CLASS="ctrlmain" COLSPAN="2"><IMG SRC="images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>
<?vsp    adm_page_footer(); ?>
	 </html>
<?vsp

         return;

    }
?>

<form method="post" action="admin_xml_template.vsp" name="xslt">
<input type="hidden" name="caller_uri" value="<?=caller_uri?>" />
<input type="hidden" name="sid" value="<?=sid?>" />
<input type="hidden" name="qtype" value="<?=_qtype?>" />
<input type="hidden" name="q_scope" value="<?=_scope?>" />
<table border="0" cellpadding="5" cellspacing="0">
<tbody>
<tr>
 <td colspan="2">
  <table border="0" class="statlist" cellpadding="0" cellspacing="2">
    <tbody><tr><td class="statlistheadt">SQL Statement</td></tr>
     <tr><td class="AdmBorders"><img src="admin_dav_xslt.vsp_files/1x1.gif" width="1" height="2" alt=""></td></tr>

     <tr><td><textarea rows="5" name="stmt" cols="80"><?=_stmt?></textarea></td></tr>

    </tbody>
  </table>
 </td>
</tr>
<tr>
 <td align="left" valign="top">
   <table border="0" class="statlist" cellpadding="0" cellspacing="2">
     <tbody>
       <tr>
         <td class="statlistheadt" colspan="3">Creation</td>
       </tr>
       <tr><td class="AdmBorders" colspan="3"><img src="admin_dav_xslt.vsp_files/1x1.gif" width="1" height="2" alt=""></td></tr>
       <tr>
         <td nowrap="" class="statlisthead">Root Element</td>
         <td><input type="text" name="root" size="20" value="<?=_root?>"></td>
         <td></td>
       </tr>
       <tr>
         <td nowrap="" class="statlisthead">File of XML template</td>
         <td><input type="text" name="res" size="20" value="<?=_file?>"></td>
         <td><input type="submit" value="Browse" name="dav_resource"></td>
       </tr>
       <tr>
         <td nowrap="" class="statlisthead">Stylesheet for XSLT<br><small>(optional)</small></td>
         <td><input type="text" name="sty" value="<?=_sty?>" size="20"></td>
         <td><input type="submit" value="Browse" name="dav_sty"></td>
       </tr>
<?vsp if (_qtype = 'XPATH' or _qtype = 'freetext') { ?>
       <tr>
         <td nowrap="" class="statlisthead">Use Default Stylesheet<br><small>(optional)</small></td>
         <td><input type="checkbox" name="defsty" <?=_defsty?>></td>
         <td>&nbsp;</td>
       </tr>
<?vsp } ?>
       <tr>
         <td nowrap="" class="statlisthead">Description<br><small>(optional)</small></td>
         <td colspan=2><input type="text" name="desc" value="<?=_desc?>" ></td>
       </tr>
       </tbody>
      </table>
</td>
<td align="left" valign="top">
              <table border="0" class="statlist" cellpadding="0" cellspacing="2">
                <tbody><tr><td class="statlistheadt" colspan="10">Permissions</td></tr>
                <tr><td class="AdmBorders" colspan="10"><img src="admin_dav_xslt.vsp_files/1x1.gif" width="1" height="2" alt=""></td></tr>
                <tr>
                  <td nowrap="" class="statlisthead" colspan="6">WebDAV Owner</td>
                  <td colspan="4">
                    <select name="own">
		    <option value="nobody">&lt;none&gt;</option>
		    <?vsp
		      for select U_NAME, U_ID from WS.WS.SYS_DAV_USER order by U_ID do
		         {
			   if (U_ID = 1)
 			     http (sprintf ('<option value="%s" selected>%s</option>', U_NAME, U_NAME));
			   else
 			     http (sprintf ('<option value="%s">%s</option>', U_NAME, U_NAME));
			 }
		    ?>
		    </select>
		  </td>
                </tr>
                <tr>
                  <td nowrap="" class="statlisthead" colspan="6">WebDAV Group</td>
                  <td colspan="4">
                    <select name="grp">
		    <option value="nogroup">&lt;none&gt;</option>
		    <?vsp
		      for select G_NAME from WS.WS.SYS_DAV_GROUP order by G_ID do
		         {
			   http (sprintf ('<option value="%s">%s</option>', G_NAME, G_NAME));
			 }
		    ?>
		    </select>
                  </td>
                </tr>
                <tr>
                  <td class="statlistheadt" colspan="3">Owner</td>
                  <td class="statlistheadt" colspan="3">Group</td>
                  <td class="statlistheadt" colspan="3">Other</td>
                  <td class="statlistheadt">Idx</td>
                </tr>
                <tr>
                  <td class="statlistheadt">r</td>
                  <td class="statlistheadt">w</td>
                  <td class="statlistheadt">x</td>
                  <td class="statlistheadt">r</td>
                  <td class="statlistheadt">w</td>
                  <td class="statlistheadt">x</td>
                  <td class="statlistheadt">r</td>
                  <td class="statlistheadt">w</td>
                  <td class="statlistheadt">x</td>
                  <td class="statlistheadt">t</td>
                </tr>
                <tr>
                  <td><input type="checkbox" name="p0" checked="checked"></td>
                  <td><input type="checkbox" name="p1" checked="checked"></td>
                  <td><input type="checkbox" name="p2" checked="checked"></td>
                  <td><input type="checkbox" name="p3" checked="checked"></td>
                  <td><input type="checkbox" name="p4"></td>
                  <td><input type="checkbox" name="p5" checked="checked"></td>
                  <td><input type="checkbox" name="p6" checked="checked"></td>
                  <td><input type="checkbox" name="p7"></td>
                  <td><input type="checkbox" name="p8" checked="checked"></td>
                  <td><input type="checkbox" name="p9"></td>
                </tr>
              </tbody></table>
</td></tr>
<tr><td align="left" valign="top" colspan="2">
              <table width="100%" 0="" class="statlist">
              <tbody><tr><td align="center">
                  <input size="12" type="reset" name="clear" value="Reset">
                  <input type="submit" name="execute" value="Save">
              </td></tr></tbody></table>
</td></tr></tbody></table>
  </form>

<?vsp adm_page_footer(); ?>
</html>
<?vsp } ?>
