<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2019 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
--

  declare _page, _site, _new, _lpath, _ppath, _host, _lhost, _text varchar;
  declare _def_page, _brow, _vsp, _soap, _security, _realm, _auth_func, _xmlt varchar;
  declare _after_func, _ses_vars, _listen, _action, _from, _err_fill varchar;
  declare idx, pos, _map, _is_dav, _upd, _step, _pos, _work integer;
  declare _new_l, st, msg, _del_host, _mode, _browse_sheet varchar;
  declare _host_in, _lpath_in, _listen_in, _ses_vars_in, _port varchar;
  declare _soap_opt, _auth_opt, _global_opts varchar;
  declare __head, _hs, _hs_cert, _hs_key, _hs_vrfy, _hs_depth, _hs_ca varchar;
  declare ses any;
  declare _u_id, _is_default, must_have_dba, _executable integer;
  declare agent, fieldsize, _lhost1, _lhost2, _lhost3, _lhost4, pdup varchar;
  declare def_ssl varchar;

  -- This parameters is needed for WebDAV browser
  declare _current_uri, _show_browser, _trf_doc, _q_scope, _sty_to_ent, _sid_id, _sys, _mod varchar;
  declare _dav_result any;
  declare _errors any;
  must_have_dba := 0;

  declare _err_pages_saved_params any;
  declare _err_pages_return_opts any;

  _err_pages_saved_params := {?'err_pages_saved_params_ret'};
  _err_pages_return_opts := {?'error_pages_return_opts'};
  --dbg_obj_print ('admin_virt_dir.vsp: _err_pages_return_opts on page top', _err_pages_return_opts);
  if (isstring (_err_pages_saved_params))
   {
     declare _params_to_be any;
     _params_to_be := deserialize (decode_base64 (_err_pages_saved_params));
     DB.DBA.ADM_KEYWORD_VALUE_SET (_params_to_be, 'error_pages_return_opts', _err_pages_return_opts);
     params := _params_to_be;
   }


  agent := vsp_ua_match_hdr (lines, '%[Uu]ser-[Aa]gent: %');
  fieldsize := '40';
  if (strstr(agent, 'MSIE') > 0)
    agent := 'IE';
  else if (strstr(agent, 'Mozilla') >= 0)
  {
    agent := 'NS';
    fieldsize := '22';
  }
  else
    agent := 'UN';

  _u_id := DB.DBA.adm_dav_check_auth (lines);
  if (_u_id <> 1)
    {
      adm_tell_unauth_dav (lines);
      return (0);
    }

  def_ssl := ':' || server_https_port();

  _show_browser := null;
  _dav_result := null;
  _current_uri := 'admin_virt_dir.vsp';

  pdup := vector ();

--  dbg_obj_print (http_path(), ': ', params);

  if ({?'publish'} = 'Publish' or {?'publish_tmp'} = 'Publish')
    {
      declare _mode_p, gu_id integer;

      _mode_p := 0;

      if ({?'publish_tmp'} = 'Publish')
	_mode_p := 1;

      -- publish the procedures to a user.
      declare j, c_soap, pos integer;
      declare p_name, g_user, qual varchar;
      g_user := {?'soap'};
      if (g_user is null or g_user = '__none')
        {
	  select max(U_ID) into c_soap from DB.DBA.SYS_USERS;
          c_soap := c_soap + 1;
          g_user := sprintf ('SOAP_%d', c_soap);
          st := '00000';
	  USER_CREATE (g_user, md5 (datestring (now())), vector ('DISABLED', 1));
	  sec_user_enable (g_user, 0);
	  USER_SET_QUALIFIER (g_user, g_user);
          pos := position ('soap', params);
          if (pos > 0)
	    aset (params, pos, g_user);
          else
            params := vector_concat (params, vector ('soap', g_user));
	}
      gu_id := coalesce ((select U_ID from DB.DBA.SYS_USERS where U_NAME = g_user), -1);
      j := 0;
      if (_mode_p)
	{
	  j := 0;
	   while (p_name := adm_next_checkbox ('SEL_TM_', params, j))
	     {
	       declare n_name, proc_text, c_id, tp_name varchar;
	       declare e_stat, e_msg, ext_type varchar;
	       declare res_id, _res_id1 integer;
	       declare res_cnt varchar;
	       declare descr varchar;


               n_name := get_keyword (concat ('name', p_name), params);
               c_id := get_keyword (concat ('_id_r', p_name), params);
	       res_id := atoi(c_id);
               ext_type := '';

               if (strchr (n_name, '.') is null)
	         tp_name := concat ('"XT"."', g_user, '"."', n_name, '"');
	       else
		 tp_name := n_name;

               _res_id1 := res_id;
	       if (exists (select 1 from WS.WS.SYS_DAV_RES where RES_ID = _res_id1 and xpath_contains (RES_CONTENT, '//xpath|//text|//xquery')))
		   {
		     must_have_dba := must_have_dba + 1;
		   }
                declare xm any;
		xm := (select xpath_eval ('local-name (/*[1])', xml_tree_doc (RES_CONTENT)) from WS.WS.SYS_DAV_RES where RES_ID = _res_id1);
		xm := cast (xm as varchar);
		ext_type := sprintf (' returns xmltype __soap_options (__soap_type:=\'__VOID__\',PartName:=\'%s\')', xm);

	       descr := coalesce ((select blob_to_string (PROP_VALUE) from WS.WS.SYS_DAV_PROP where PROP_NAME = 'xml-sql-description' and PROP_TYPE= 'R' and PROP_PARENT_ID = _res_id1), '');

               if (descr <> '')
		 {
		   descr := concat ('\n--##', descr, '\n');
		 }


	       proc_text := sprintf ('CREATE PROCEDURE %s () %s \n{', tp_name, ext_type);
               proc_text := concat (proc_text, descr, 'declare temp, content any;\n temp := string_output ();\n');
               proc_text := concat (proc_text, '\n if (exists (select 1 from WS.WS.SYS_DAV_RES where RES_ID = ',
		 c_id ,'))\n   select RES_CONTENT into content from WS.WS.SYS_DAV_RES ',
	         'where RES_ID = ', c_id, ';\n  else \n  return NULL;\n xml_template (xml_tree_doc (content),',
		 'vector (), temp); \n',
	         'return xml_tree_doc (string_output_string (temp)); }\n\n');

--	       dbg_obj_print ('proc_text = ', proc_text);

	       e_stat := '00000';
	       declare exist_pr varchar;
	       exist_pr := coalesce ((select blob_to_string (PROP_VALUE) from WS.WS.SYS_DAV_PROP where PROP_NAME = 'xml-soap-method' and PROP_TYPE = 'R'
		     and PROP_PARENT_ID = res_id), NULL);
               --dbg_obj_print (exist_pr);
	       if (exist_pr is null or __proc_exists (exist_pr) is null)
		 {
		   declare prop_v varchar;
		   if (strchr (n_name, '.') is null)
		     prop_v := sprintf ('XT.%s.%s',g_user,n_name);
		   else
		     prop_v := n_name;
	           exec (proc_text, e_stat, e_msg);
		   if (exist_pr is null)
		   insert into WS.WS.SYS_DAV_PROP (PROP_ID, PROP_TYPE, PROP_NAME, PROP_VALUE, PROP_PARENT_ID) values
		     (WS.WS.GETID('P'), 'R', 'xml-soap-method', prop_v, atoi(c_id));
		 }
	       else
		 tp_name := sprintf ('"%I"."%I"."%I"',name_part (exist_pr,0), name_part(exist_pr,1), name_part (exist_pr, 2));
               exec (sprintf ('grant execute on %s to "%s"', tp_name, g_user));
	     }
	   j := 0;
	   while (p_name := adm_next_checkbox ('PROC1_', params, j))
	     {
                declare pl_name varchar;
		pl_name := substring (p_name, length(name_part(p_name,0))+length(name_part(p_name,1))+3, length (p_name));
	        if (not exists (
		      select 1 from DB.DBA.SYS_GRANTS where G_OP = 32 and G_USER = gu_id
		      and G_OBJECT like '%.%.'||pl_name
		      ))
		  {
	            exec (sprintf ('grant execute on "%I"."%I"."%I" to "%s"',
		        name_part (p_name,0), name_part (p_name,1), pl_name, g_user), st, msg);
		  }
		else
		  {
                    pdup := vector_concat (pdup, vector (p_name));
		  }

	     }
	   j := 0;
	   while (p_name := adm_next_checkbox ('METH1_', params, j))
	     {
                declare pl_name varchar;
		declare vho, lho, lp varchar;
		vho := {?'host'}; lho := {?'lhost'}; lp := {?'lpath'};
	        if (not exists (
		      select 1 from DB.DBA.SYS_SOAP_UDT_PUB where
			SUP_CLASS = p_name and SUP_HOST = vho and SUP_LHOST = lho and SUP_END_POINT = lp
		      ))
		  {
		     insert into DB.DBA.SYS_SOAP_UDT_PUB (SUP_CLASS,SUP_HOST,SUP_LHOST,SUP_END_POINT)
			values (p_name, vho, lho, lp);
	             exec (sprintf ('grant execute on "%I"."%I"."%I" to "%s"',
		        name_part (p_name,0), name_part (p_name,1), name_part (p_name, 2), g_user), st, msg);
		  }
		else
		  {
                    pdup := vector_concat (pdup, vector (p_name));
		  }

	     }
	}
      else
	{
	   while (p_name := adm_next_checkbox ('PROC1_', params, j))
	     {
                declare pl_name varchar;
		pl_name := substring (p_name, length(name_part(p_name,0))+length(name_part(p_name,1))+3, length (p_name));
	        exec (sprintf ('grant execute on "%I"."%I"."%I" to "%s"',
		     name_part (p_name,0), name_part (p_name,1), pl_name, g_user), st, msg);
	     }
	}
    }
  else if ({?'unpublish'} = 'unPublish')
    {
       declare j integer;
       declare p_name, g_user varchar;
       g_user := {?'soap'};
       j := 0;
       while (p_name := adm_next_checkbox ('PROC_', params, j))
	 {
	   declare pl_name varchar;
	   pl_name := substring (p_name, length(name_part(p_name,0))+length(name_part(p_name,1))+3, length (p_name));
	    exec (sprintf ('revoke execute on "%I"."%I"."%I" from %s',
		name_part (p_name,0), name_part (p_name,1), pl_name, g_user), st, msg);
	 }
       j := 0;
       while (p_name := adm_next_checkbox ('METH_', params, j))
	 {
           delete from SYS_SOAP_UDT_PUB where SUP_CLASS = p_name and
		SUP_LHOST = {?'lhost'} and  SUP_HOST = {?'host'} and SUP_END_POINT = {?'lpath'};
	 }
     }

-- XXX: the default HTTPS listener should be listed when it's enabled
--  _hs := cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'SSLPort');
--  if (_hs)
--    {
--      _hs_cert := cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'SSLCertificate');
--      _hs_key :=  cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'SSLPrivateKey');
--      _hs_vrfy :=  cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'X509ClientVerify');
--      _hs_depth :=  cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'X509ClientVerifyDepth');
--      _hs_ca :=  cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'X509ClientVerifyCAFile');
--    }

  if ('' <> get_keyword ('ppath_bw', params, '')
     or '' <> get_keyword ('def_bw', params, '')
     or '' <> get_keyword ('def_sh', params, ''))
    {
      _show_browser := 'yes';
    }

?>
<?include admin_dav_browse.vsp?>
<?vsp

  if (_show_browser is null)
   {

  _page := atoi (get_keyword ('page', params, '1'));

  if (get_keyword ('delete', params) <> '')
    {

      _del_host := get_keyword ('del_host', params, '');

      if (_del_host = '')
	{
	   _host := get_keyword ('host', params, '');
	   _lhost := get_keyword ('lhost', params, '');
	   _lpath := get_keyword ('lpath', params, '');
	   _ses_vars := atoi (get_keyword ('ses_vars', params, '0'));

	   VHOST_REMOVE (_host, _lhost, _lpath, 0);
	   if (not exists (select 1 from DB.DBA.HTTP_PATH where HP_HOST = _host and HP_LISTEN_HOST = _lhost))
	     {
	       http_rewrite ();
	       http_request_status ('HTTP/1.1 302 Found');
	       http_header ('Location: admin_virt_dir.vsp?page=1\r\n');
	       return (0);
	     }
	}
      else
	{
	  for (select HP_HOST, HP_LISTEN_HOST, HP_LPATH, HP_PERSIST_SES_VARS
	    from DB.DBA.HTTP_PATH where HP_HOST=_del_host) do
	      VHOST_REMOVE (HP_HOST, HP_LISTEN_HOST, HP_LPATH, 0);
	}
    }

  idx := 0;

  _action := get_keyword ('action', params, '');
  _listen := get_keyword ('lhost', params, '');

  if (_action = 'start')
    {
      declare ssl_opts any;
      declare lcr cursor for select deserialize (HP_AUTH_OPTIONS) from DB.DBA.HTTP_PATH
	  where HP_LISTEN_HOST = _listen and length (HP_AUTH_OPTIONS) > 10;
      declare exit handler for not found { ssl_opts := null;};
      open lcr;
       {
	 fetch lcr into ssl_opts;
       }
      close lcr;
      http_listen_host (_listen, 0, ssl_opts);
    }

  if (_action = 'stop')
    {
      http_listen_host (_listen, 1);
    }
?>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">


<?vsp if (_page = 1) { ?>
<html>
  <head>
  <link rel="stylesheet" type="text/css" href="../admin_style.css">
    <script language="javascript" src="../admin_utils.js"></script>
    <title>Virtual Web Directories</title>
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="Virtual Web Directories">
  </head>
<!-- page 1 page 1 page 1 page 1 page 1 page 1 page 1 page 1 page 1 -->
<?vsp adm_page_header('Virtual Web Directories', ''); ?>
<?include ../adm_js_check.vsp ?>

<DIV STYLE="width:80%; text-align: left;">
<small>
<ul>
  <li>To define new Web site (virtual host or setup new interface to listen) press [Add new site] button.</li>
  <li>To change setup for existing Web site, click on [host name].</li>
  <li>To stop or start Web site click on [Start|Stop] link.</li>
  <li>To add|edit|delete virtual directory mappings associated to the Web site click on [Edit URL mappings] link</li>
  <li>To delete an Web site and associated mappings click on [Delete] link.</li>
</ul>
  <DIV>Important notes: Changing the setup (port &amp; interface to listen) of
  the default Web site must be done by editing the INI file. <br />
   The Delete and Stop actions are not allowed for default Web site, so these
   links are not defined for it. <br /> Caution: Disabling the default Web
   site in INI file will stop all Web services.</DIV>
</small>
</DIV>

<BR />

<FORM method="POST" name="news_form" action="admin_virt_dir.vsp">
<TABLE CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">
<?vsp
  for (select distinct HP_HOST, HP_LISTEN_HOST,
       (case HP_LISTEN_HOST
	     when '*ini*' then 0
	     when '*sslini*' then 0
	     when def_ssl then 0
	     else 1 end) as HP_NO_EDIT
    from DB.DBA.HTTP_PATH order by HP_HOST) do
      {
      if (idx = 0)
	{
          idx := idx + 1;
  ?>
    <TR><TD CLASS="genhead" COLSPAN="5">Current Web Site(s)</TD></TR>
    <TR><TD CLASS="AdmBorders" COLSPAN="5"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>
    <TR>
      <TH CLASS="genlistheadt">Host</TH>
      <TH CLASS="genlistheadt">Listen Host</TH>
      <TH CLASS="genlistheadt" COLSPAN="3">Action</TH>
    </TR>
  <?vsp
	}

      pos := strstr (HP_HOST, ':');

      _new := HP_HOST;
      if (not pos is NULL and pos > 0)
	_new := "LEFT" (HP_HOST, pos);

      _new_l := HP_LISTEN_HOST;

      if (HP_HOST = '*ini*')
	{
	  --_new := server_http_port ();
	  --_new_l := server_http_port ();
	  _new := '{Default Web Site}';
	  _new_l := '{Default Web Site}';
	}
      else if (HP_HOST = '*sslini*')
	{
	  --_new := server_http_port ();
	  --_new_l := server_http_port ();
	  _new := '{Default SSL Web Site}';
	  _new_l := '{Default SSL Web Site}';
	}

      if (atoi (_new_l) > 0 and strstr (_new_l, '.') is null)
	_new_l := concat (':', _new_l);

      if (_new = '')
	_new := HP_HOST;

      _work := http_listen_host (HP_LISTEN_HOST, 2);

      idx := idx + 1;
?>
<!-- page 1 page 1 page 1 page 1 page 1 page 1 page 1 page 1 -->
    <TR>
<?vsp
       if (0 = HP_NO_EDIT)
	 {
	   http (sprintf ('<TD CLASS="gendata">%V</TD>', _new));
	 }
       else
        {
?>
      <!--TD CLASS="gendata">&nbsp;<IMG SRC="../images/listen<?=abs(_work-2)?>.gif" ALT=""></TD-->
      <TD CLASS="gendata" TITLE="Edit"><a href="admin_virt_dir.vsp?page=5&host=<?=HP_HOST?>&lhost=<?=HP_LISTEN_HOST?>&upd=1"><?=_new?></a></TD>
<?vsp   } ?>
      <TD CLASS="gendata"><?=_new_l?></TD>
      <TD CLASS="gendata" TITLE="Map Site"><a class="tablelistaction" href="admin_virt_dir.vsp?page=3&host=<?=HP_HOST?>&lhost=<?=HP_LISTEN_HOST?>">Edit URL mappings</a></TD>
<?vsp
     if (0 = HP_NO_EDIT)
       {
	 http ('<TD CLASS="gendata">&nbsp;</TD>');
	 http ('<TD CLASS="gendata">&nbsp;</TD>');
       }
     else
       {
	 declare _color varchar;
	 if (not _work)
	   _color := 'red';
	 else
	   _color := 'green';
?>
      <TD CLASS="gendata"><a class="tablelistaction" href="admin_virt_dir.vsp?page=1&lhost=<?=_new_l?><?vsp http (case when _work then '&action=stop' else '&action=start' end); ?>"><?vsp http (case when _work then 'Stop' else 'Start' end); ?></a></TD>
      <TD CLASS="gendata"><a class="tablelistaction" href="admin_virt_dir.vsp?page=2&del_host=<?=HP_HOST?>&text=<?=HP_HOST?>">Delete</a></TD>
<?vsp  } ?>
    </TR>
<?vsp next:; } ?>
    <TR>
      <TD COLSPAN="5" ALIGN="right">
        <INPUT type="hidden" name="page" value="5">
        <INPUT type="hidden" name="step" value="0">
        <INPUT type="submit" name="_add_s" value="Add New Site">
      </TD>
    </TR>
  </TABLE>
</FORM>

<!-- page 1 page 1 page 1 page 1 page 1 page 1 page 1 page 1 -->

<BR />

<?vsp adm_page_footer();?>
</HTML>

<?vsp } else if (_page = 2) {

	_text := get_keyword ('text', params, '');
	_del_host := get_keyword ('del_host', params, '');
	_host := get_keyword ('host', params, '');
	_lhost := get_keyword ('lhost', params, '');
	_lpath := get_keyword ('lpath', params, '');
	_ses_vars := get_keyword ('ses_vars', params, 0);
?>

<HTML>
  <HEAD>
  <link rel="stylesheet" type="text/css" href="../admin_style.css">
    <script language="javascript" src="../admin_utils.js"></script>
    <title>Delete Virtual Web Directories</title>
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="Delete Virtual Web Directories">
  </HEAD>
<?vsp adm_page_header(concat ('Delete Virtual Web Directories' , _text), ''); ?>
<?include ../adm_js_check.vsp ?>
  <FORM method="POST"  name="del_form" action="admin_virt_dir.vsp">
<!-- page 2 page 2 page 2 page 2 page 2 page 2 page 2 page 2 2222 -->
    <TR>
      <TD COLSPAN=2 CLASS="ctrlmain">
        <b>You are about to delete the virtual directory <?=_text?>. This deletion cannot be undone. <BR /> Do you wish to continue?</b>
      </TD>
    </TR>
    <TR><TD CLASS="ctrlmain" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>
    <TR>
      <TD COLSPAN=2 CLASS="ctrlmain">
	<INPUT type="hidden" name="host" value="<?=_host?>">
	<INPUT type="hidden" name="lhost" value="<?=_lhost?>">
	<INPUT type="hidden" name="lpath" value="<?=_lpath?>">
	<INPUT type="hidden" name="del_host" value="<?=_del_host?>">
	<INPUT type="hidden" name="ses_vars" value="<?=_ses_vars?>">
<?vsp
      if (_del_host = '')
	http ('<INPUT type="hidden" name="page" value="3">');
      else
	http ('<INPUT type="hidden" name="page" value="1">');
?>
        <INPUT type="submit" name="delete" value="Delete">
        <INPUT type="submit" name="cancel" value="Cancel">
      </TD>
    </TR>
    </TD></TR>
  </FORM>
<!-- page 2 page 2 page 2 page 2 page 2 page 2 page 2 page 2 2222 -->
<TR><TD CLASS="ctrlmain" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>
</TD></TR>
<?vsp adm_page_footer();?>
</HTML>

<?vsp } else if (_page = 3) {

    idx := 0;
    _host := get_keyword ('host', params, '');
    _lhost := get_keyword ('lhost', params, '');

?>

<html>
  <head>
  <link rel="stylesheet" type="text/css" href="../admin_style.css">
    <script language="javascript" src="../admin_utils.js"></script>
    <title>Virtual Dir Map</title>
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="Delete Virtual Web Directories">
  </head>
<?vsp adm_page_header('Virtual Dir Map', ''); ?>
<?include ../adm_js_check.vsp ?>
<table border="0">
<tr><td>
<ul>
  <li>To change preferences of an existing Web directory click on [Edit] link.</li>
  <li>To remove an existing Web directory click on [Delete] link.</li>
  <li>To add new one press [Add virtual directory] button.</li>
  <p><small>Note: The URL location(s) for file system based mapping starts from HTTPRoot setting in the INI file.<br />
  The URL location(s) mapped to the WebDAV repository always starts from /DAV path.
  </small></p>
</ul>
</td></tr>
</table>
  <FORM method="POST"  name="del_form" action="admin_virt_dir.vsp">
  <TABLE CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">

<?vsp
    declare xec, fty varchar;
    xec := 'Not Allowed'; fty := '';
    for (select HP_HOST, HP_LPATH, HP_LISTEN_HOST, HP_PPATH, HP_RUN_VSP_AS, HP_RUN_SOAP_AS
	from DB.DBA.HTTP_PATH where HP_HOST=_host and HP_LISTEN_HOST = _lhost order by HP_HOST) do
      {
        if (idx = 0)
         {
           idx := idx + 1;

	   http ('<TR><TD CLASS="genhead" COLSPAN="5">URL Mapping(s) for Web site:&nbsp;<b>');

	   if (_host='*ini*')
	     {
	       --http (sprintf ('%s', server_http_port ()));
	       http ('{Default Web Site}');
	     }
	   else if (_host='*sslini*')
	     {
	       --http (sprintf ('%s', server_http_port ()));
	       http ('{Default SSL Web Site}');
	     }
	   else
	     http (sprintf ('%s', _host));
?>
    </TD></TR>
    <TR><TD CLASS="AdmBorders" COLSPAN="5"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>
     <TR>
     <TH CLASS="genlistheadt">Logical path</TH>
     <TH CLASS="genlistheadt">Type</TH>
     <TH CLASS="genlistheadt">Executes as</TH>
     <TH CLASS="genlistheadt" COLSPAN="2">Actions</TH>
     </TR>
<?vsp
   	 }
        xec := 'Not Allowed'; fty := '';
	if (HP_PPATH like '/DAV/%')
	  fty := 'DAV';
	else if (HP_PPATH like '/SOAP/%')
	  fty := 'SOAP';
	else if (HP_PPATH like '/INLINEFILE/%')
	  fty := 'INL';
	else
	  fty := 'FS';

	if (length (HP_RUN_VSP_AS) > 0 and (fty = 'DAV' or fty = 'FS' or fty = 'INL'))
	  xec := HP_RUN_VSP_AS;
	if (length (HP_RUN_SOAP_AS) > 0 and fty = 'SOAP')
	  xec := HP_RUN_SOAP_AS;

	if (xec = 'dba')
	  xec := 'DBA';

?>
     <TR>
     <TD CLASS="gendata"><?=HP_LPATH?></TD>
     <TD CLASS="gendata"><?=fty?></TD>
     <TD CLASS="gendata"><?=xec?>&nbsp;</TD>
     <TD CLASS="gendata"><a class="tablelistaction" href="admin_virt_dir.vsp?page=2&lpath=<?/HP_LPATH?>&host=<?/_host?>&lhost=<?/_lhost?>&text=<?/HP_LPATH?>">Delete</a></TD>
     <TD CLASS="gendata"><a class="tablelistaction" href="admin_virt_dir.vsp?page=4&lpath_in=<?/HP_LPATH?>&host_in=<?/_host?>&lhost_in=<?/_lhost?>&upd=1">Edit</a></TD>
     </TR>
<?vsp
      }
?>
       <TR><TD COLSPAN="5" ALIGN="center">
         <INPUT type="hidden" name="page" value="6">
         <INPUT type="hidden" name="host" value="<?=_host?>">
         <INPUT type="hidden" name="lhost" value="<?=_lhost?>">
         <INPUT type="submit" name="_add_v" value="Add Virtual Directory">
	 <INPUT type="submit" value="Back" name="cancel_1">
         </TD>
       </TR>

  </TABLE>
  </FORM>
<!-- page 3 page 3 page 3 page 3 page 3 page 3 page 3 page 3 3333 -->
<TR><TD CLASS="ctrlmain" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>
</TD></TR>
<?vsp adm_page_footer();?>
</HTML>

<?vsp } else if (_page = 5) {

  _site := get_keyword ('host', params, '');
  _lhost := get_keyword ('lhost', params, '');
  _upd := atoi (get_keyword ('upd', params, '0'));
  _errors := vector ();

  declare _lhostarr any;
  _lhostarr := split_and_decode (_lhost, 0, '.=.');
  if (length (_lhostarr) > 3)
    {
       _lhost1 := _lhostarr[0];
       _lhost2 := _lhostarr[1];
       _lhost3 := _lhostarr[2];
       _lhost4 := _lhostarr[3];

       if (strstr (_lhost4, ':') is not null)
	 {
	   declare colon integer;
           colon := strstr (_lhost4, ':');
           _lhost4 := substring (_lhost4, 1, colon);
	 }

	declare _lhost_t, _lhost_t1 varchar;
        _lhost_t := sprintf ('%s.%s.%s.%s', _lhost1,_lhost2,_lhost3,_lhost4);
        _lhost_t1 := sprintf ('%s.%s.%s.%s', _lhost1,_lhost2,_lhost3,_lhost4);
        _lhost_t := coalesce (regexp_match ('[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+', _lhost_t), '');
       if (_lhost_t <> _lhost_t1)
	 {
	   _lhost1 := _lhost2 := _lhost3 := _lhost4 := '0';
	 }

    }

  pos := strstr (_site, ':');
  if (not pos is NULL)
    {
       _port := "RIGHT" (_site, length (_site) - pos - 1);
       if (pos > 0)
         _site := "LEFT" (_site, pos);
       else
	 _site := '';
    }

  pos := strstr (_lhost, ':');
  if (not pos is NULL and pos > 0)
    _lhost := "LEFT" (_lhost, pos);
  else
    _lhost := '';

  if (_port = 0)
    _port := '';

  if ('' <> get_keyword ('add_s', params, ''))
    {
       _site := get_keyword ('s_name', params, '');
       --_lhost := get_keyword ('l_host_n', params, '');

       _lhost1 := get_keyword ('l_host_n1', params, '');
       _lhost2 := get_keyword ('l_host_n2', params, '');
       _lhost3 := get_keyword ('l_host_n3', params, '');
       _lhost4 := get_keyword ('l_host_n4', params, '');

--      if (atoi (_lhost1) < 1 or atoi (_lhost2) < 1 or atoi (_lhost3) < 1 or atoi (_lhost4) < 1)
--	_lhost1 := _lhost2 := _lhost3 := _lhost4 := '0';

       _lhost := sprintf ('%s.%s.%s.%s', _lhost1, _lhost2, _lhost3, _lhost4);

	declare _lhost_t varchar;
        _lhost_t := _lhost;
        _lhost_t := coalesce (regexp_match ('[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+', _lhost_t), '');
       if (_lhost_t <> _lhost)
	 {
	   _lhost := '0.0.0.0';
	 }

       if (length (split_and_decode (_lhost,0,'.=.')) <> 4)
	 _lhost := '0.0.0.0';

       _port := get_keyword ('l_host_p', params, '80');

       if (_port = '')
         {
	    _port := '80';
          }

       pos := strstr (_port, ':');
       if (pos is NULL)
         _port := concat (':', _port);

       _site := concat (_site, _port);

    _lhost := concat (_lhost, _port);
?>
     <script language="JavaScript">
       location.replace ('admin_virt_dir.vsp?page=6&host=<?=_site?>&lhost=<?=_lhost?>');
     </script>
<?vsp
    }

  if ('' <> get_keyword ('upd_s', params, ''))
    {
       declare _site_o,_lhost_o, _port_o, _copy varchar;

       _site := get_keyword ('s_name', params, '');
       --_lhost := get_keyword ('l_host_n', params, '');

       _lhost1 := get_keyword ('l_host_n1', params, '');
       _lhost2 := get_keyword ('l_host_n2', params, '');
       _lhost3 := get_keyword ('l_host_n3', params, '');
       _lhost4 := get_keyword ('l_host_n4', params, '');

--      if (atoi (_lhost1) < 1 or atoi (_lhost2) < 1 or atoi (_lhost3) < 1 or atoi (_lhost4) < 1)
--	_lhost1 := _lhost2 := _lhost3 := _lhost4 := '0';

       _lhost := sprintf ('%s.%s.%s.%s', _lhost1, _lhost2, _lhost3, _lhost4);

	declare _lhost_t varchar;
        _lhost_t := _lhost;
        _lhost_t := coalesce (regexp_match ('[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+', _lhost_t), '');
       if (_lhost_t <> _lhost)
	 {
	   _lhost := '0.0.0.0';
	 }

       if (length (split_and_decode (_lhost,0,'.=.')) <> 4)
	 _lhost := '0.0.0.0';

       _port := get_keyword ('l_host_p', params, '80');
       _site_o := get_keyword ('s_name_o', params, '');
       _lhost_o := get_keyword ('l_host_o', params, '');
       _port_o := get_keyword ('port_o', params, '');
       _copy := get_keyword ('_copy', params, '');

       if (_site <> '')
         {
	    if (_port = '' or _port is NULL)
	      _port := '80';

	    _site := concat (_site, ':', _port);
	    _lhost := concat (_lhost, ':', _port);
	    _site_o := concat (_site_o, ':', _port_o);
	    _lhost_o := concat (_lhost_o, ':', _port_o);

	    if ((_site = _site_o) and (_lhost = _lhost_o))
	     goto end_upd;


	   for (select
	       HP_HOST, HP_LISTEN_HOST, HP_PPATH, HP_LPATH,
	       HP_AUTH_FUNC, HP_AUTH_OPTIONS, HP_DEFAULT, HP_STORE_AS_DAV,
	       HP_DIR_BROWSEABLE, HP_PERSIST_SES_VARS, HP_POSTPROCESS_FUNC,
	       HP_REALM, HP_RUN_SOAP_AS, HP_RUN_VSP_AS, HP_SECURITY, HP_SOAP_OPTIONS,
	       HP_OPTIONS, HP_IS_DEFAULT_HOST
	       from DB.DBA.HTTP_PATH where HP_HOST = _site_o and HP_LISTEN_HOST = _lhost_o) do
	     {
      	        st := '00000';
	        msg := '';
		if (_copy <> 'on')
	          VHOST_REMOVE (_site_o, _lhost_o, HP_LPATH, 0);
		exec('VHOST_DEFINE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', st, msg,
		     vector ( _site, _lhost, HP_LPATH, HP_PPATH, HP_STORE_AS_DAV, HP_DIR_BROWSEABLE,
		             HP_DEFAULT, HP_AUTH_FUNC, HP_REALM, HP_POSTPROCESS_FUNC, HP_RUN_VSP_AS,
			     HP_RUN_SOAP_AS, HP_SECURITY, HP_PERSIST_SES_VARS,
			     deserialize (HP_SOAP_OPTIONS),
			     deserialize (HP_AUTH_OPTIONS), deserialize(HP_OPTIONS), HP_IS_DEFAULT_HOST));

		if (msg <> '')
		  _errors := vector_concat (_errors, vector (vector (msg, HP_LPATH)));
	     }

end_upd:;

	 if (length (_errors) = 0)
	   {
	     http_request_status ('HTTP/1.1 302 Found');
	     http_header ('Location: admin_virt_dir.vsp\r\n');
	     return (0);
	   }
	 }
       _upd := 1;
       _site := _site_o;
       _lhost := _lhost_o;
       _port := _port_o;
    }
?>
<html>
  <head>
  <link rel="stylesheet" type="text/css" href="../admin_style.css">
    <script language="javascript" src="../admin_utils.js"></script>
    <title>Web Site creation</title>
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="<?=either(_upd, 'Edit', 'Add New')?> Web Site">
  </head>
<?vsp

  __head := either(_upd, 'Edit', 'Add New');

  adm_page_header(concat (__head, ' Site'), '');
?>
<?include ../adm_js_check.vsp ?>
  <FORM method="POST"  name="add_site_form" action="admin_virt_dir.vsp">
<?vsp if (length (_errors) = 0)
	{
?>
<table border="0">
<tr><td>
<ol>
  <li>Enter the data into the form</li>
  <li>Press [Add site] button to define the Web site or [Cancel] for escape</li>
  <p><small>
  Note: To make service to accept HTTP connections from all interfaces leave host name or address empty.<br />
  To allow connections to this Web server for all qualified domain names and aliases leave the qualified host name
  field empty. <br></small>
  <b>Warning:</b> You should define at least one virtual directory mapping for this Web site. <br /> The virtual directory mapping wizard will be shown automatically after pressing the [Add site] button.
  </p>
<p><small>
Each Web site must have a unique combination of identification characteristics.
Therefore, while multiple Web sites can share two of their three identification characteristics,
(domain or host header name, IP address, and port), they must have one characteristic that is different.
</small>
</p>
</ol>
</td></tr>
</table>
<BR />
  <TABLE WIDTH="50%" CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">
    <TR><TD CLASS="genhead" COLSPAN="2"><?=either(_upd, 'Current', 'New')?> Site:</TD></TR>
    <TR><TD CLASS="AdmBorders" COLSPAN="2">
    <IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>
    <TR>
        <TD TITLE="Host Name" CLASS="genlisthead" NOWRAP>Host &amp; Domain Name</TD>
	<TD ALIGN="left" CLASS="geninput"><INPUT type="text" name="s_name" SIZE="30" value="<?=_site?>"></TD>
	<!-- TD NOWRAP><P>Fully qualified host/domain name (Virtual host)</P></TD -->
      </TR>
      <TR TITLE="Empty for all interfaces">
        <TD class="genlisthead" nowrap>Listening Interface</TD>
	<!--TD ALIGN="left"><INPUT type="text" name="l_host_n" value="<?=_lhost?>"></TD-->
	<TD ALIGN="left" NOWRAP><!-- put on one line to avoid spacing -->
	  <INPUT type="text" name="l_host_n1" size="3" MAXLENGTH="3" value="<?=_lhost1?>">.<INPUT type="text" name="l_host_n2" size="3" MAXLENGTH="3" value="<?=_lhost2?>">.<INPUT type="text" name="l_host_n3" size="3" MAXLENGTH="3" value="<?=_lhost3?>">.<INPUT type="text" name="l_host_n4" size="3" MAXLENGTH="3" value="<?=_lhost4?>"></TD>
	<!-- TD nowrap><small>&nbsp;IP address of the listen interface</small></TD -->
      </TR>
      <TR TITLE="Default 80"><TD class="genlisthead" nowrap>TCP Port</TD>
	<TD ALIGN="left"><INPUT type="text" name="l_host_p" value="<?vsp if (_port = '') {http('80');} else {http(coalesce(_port, '80'));}?>" size="5"></TD>
	<!-- TD><small>&nbsp;TCP port number to listen</small></TD -->
      </TR>
<?vsp if (_upd) { ?>
      <TR TITLE="Copy site structure"><TD class="genlisthead">Copy</TD>
      <TD ALIGN="left"><INPUT type="checkbox" name="_copy"></TD></TR>
<?vsp } ?>
      <TR><TD COLSPAN="2" ALIGN="right">
      <INPUT type="hidden" name="page" value="5">
      <INPUT type="hidden" name="s_name_o" value="<?=_site?>">
      <INPUT type="hidden" name="l_host_o" value="<?=_lhost?>">
      <INPUT type="hidden" name="port_o" value="<?=_port?>">
      <INPUT type="button" value="Cancel" name="cancel" onclick="location.replace ('admin_virt_dir.vsp');">
<?vsp if (_upd)
        http ('<INPUT type="submit" name="upd_s" value="Update site">');
      else
        http ('<INPUT type="submit" name="add_s" value="Add site">');
?>
      </TD>
    </TR>
  </TABLE>
<?vsp  } else {

		idx := 0;
		while (idx < length (_errors))
		  {
		     msg := aref(aref (_errors, idx), 0);
		     if (msg = 'Non . . . ')
		       msg := 'Duplicate ... ';

		http ('<TR><TD COLSPAN="2">');
		     http ('<TABLE CLASS="gen_list" BORDER="0" CELLPADDING="0">');
		     http (sprintf ('<TR><TD CLASS="errorhead" COLSPAN="2">Updating directory %V failed:</TD>
			    </TR>', aref(aref (_errors, idx), 1)));
		     http ('<TR><TD CLASS="AdmBorders" COLSPAN="2">
			  <IMG SRC="images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>');
		     http (sprintf ('<TR><TD CLASS="gen_listhead">Error Message</TD>
			    <TD CLASS="gendata">%s</TD></TR>', coalesce (msg, '')));
		     http ('</TABLE>');
		http ('</TD></TR>');
		     http ('<TR><TD CLASS="ctrlmain" COLSPAN="2">
			 <IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>');
		     idx := idx + 1;
		  }
		http ('<TR><TD COLSPAN="2">');
		http ('<INPUT type="button" value="  OK  " name="_ok" onclick="location.replace (\'admin_virt_dir.vsp\');"');
		http ('</TD></TR>');

       } ?>
  </FORM>
<!-- page 5 page 5 page 5 page 5 page 5 page 5 page 5 page 5 5555 -->
<TR><TD CLASS="ctrlmain" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>
</TD></TR>
<?vsp adm_page_footer();?>
</HTML>

<?vsp } else if (_page = 6) {

  if ({?'cancel_1'} <> '' )
    {
       http_request_status ('HTTP/1.1 302 Found');
       http_header ('Location: admin_virt_dir.vsp?page=1\r\n');
       return (0);
    }

  idx := 0;
  _host := get_keyword ('host', params, '');
  _lhost := get_keyword ('lhost', params, '');

?>

<HTML>
  <HEAD>
  <link rel="stylesheet" type="text/css" href="../admin_style.css">
    <script language="javascript" src="../admin_utils.js"></script>
    <title>Virtual Dir Map</title>
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="Virtual Web Directories">
  </HEAD>
<?vsp adm_page_header('Virtual Directory Mappings', ''); ?>
<?include ../adm_js_check.vsp ?>
  <FORM method="POST"  name="del_form" action="admin_virt_dir.vsp">

<table border="0">
<tr><td>
<ul>
  <li>Select template to fill standard options into next form</li>
  <li>Or click [New] to fill empty form</li>
  <li>If there is an existing directory mapping, then you can optionally copy the options from it (instead of template)</li>
  <p><small>
  </small></p>
</ul>
</td></tr>
</table>

<TABLE WIDTH="20%" CLASS="ctrlmain" BORDER="0" CELLPADDING="0" CELLSPACING="2">

  <TR><TD CLASS="genhead" TITLE="Templates">Templates:</TD></TR>
  <TR><TD CLASS="AdmBorders"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>

  <TR><TD CLASS="gendata" ALIGN="left">
    <a class="tablelistaction" href="admin_virt_dir.vsp?page=4&host=<?=_host?>&lhost=<?=_lhost?>&mode=__1">File system</a>
  </TD></TR>

  <TR><TD CLASS="gendata" ALIGN="left">
    <a class="tablelistaction" href="admin_virt_dir.vsp?page=4&host=<?=_host?>&lhost=<?=_lhost?>&mode=__2">Dav domain</a>
  </TD></TR>

  <TR><TD CLASS="gendata" ALIGN="left">
    <a class="tablelistaction" href="admin_virt_dir.vsp?page=4&host=<?=_host?>&lhost=<?=_lhost?>&mode=__3">Proxy server</a>
  </TD></TR>

  <TR><TD CLASS="gendata" ALIGN="left">
    <a class="tablelistaction" href="admin_virt_dir.vsp?page=4&host=<?=_host?>&lhost=<?=_lhost?>&mode=__4">SOAP</a>
  </TD></TR>
  <TR><TD CLASS="gendata" ALIGN="left">
    <a class="tablelistaction" href="admin_virt_dir.vsp?page=4&host=<?=_host?>&lhost=<?=_lhost?>&mode=__5">XML-RPC</a>
  </TD></TR>

<?vsp if (exists (select 1 from DB.DBA.HTTP_PATH where HP_HOST=_host and HP_LISTEN_HOST = _lhost)) { ?>

  <TR><TD>&nbsp;</TD></TR>

  <TR><TD CLASS="genhead" TITLE="Copy options from existing directory">Copy options from:</TD></TR>
  <TR><TD><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>

<?vsp
   for (select HP_LPATH from DB.DBA.HTTP_PATH where
       HP_HOST=_host and HP_LISTEN_HOST = _lhost order by HP_LPATH) do
     {
       http ('<TR><TD CLASS="gendata" ALIGN="left">');
       http (sprintf ('<a class="tablelistaction" href="admin_virt_dir.vsp?page=4&host=%V&lhost=%V&mode=%V">%V</a>', _host, _lhost, HP_LPATH, HP_LPATH));
       http ('</TD></TR>');
     }
}
?>

  <TR><TD>&nbsp;</TD></TR>

  <TR><TD CLASS="gendata" TITLE="Empty blank">
    <a class="tablelistaction" href="admin_virt_dir.vsp?page=4&host=<?=_host?>&lhost=<?=_lhost?>&mode=__new">New</a>
  </TD></TR>
</TABLE>

  </FORM>
<!-- page 6 page 6 page 6 page 6 page 6 page 6 page 6 page 6 6666 -->
<TR><TD CLASS="ctrlmain" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>
</TD></TR>
<?vsp adm_page_footer();?>
</HTML>


<?vsp } else if (_page = 4) {
        declare blog_api, _uid int;
        declare bapi any;
        _err_pages_return_opts := {?'error_pages_return_opts'};
        --dbg_obj_print ('admin_virt_dir.vsp: _err_pages_return_opts from params', _err_pages_return_opts);
        if (isstring (_err_pages_return_opts))
	  {
	    _err_pages_return_opts := deserialize (decode_base64 (_err_pages_return_opts));
	  }
	else
	  _err_pages_return_opts := null;
        --dbg_obj_print ('admin_virt_dir.vsp: _err_pages_return_opts after deser ', _err_pages_return_opts);
	_upd := atoi (get_keyword ('upd', params, '0'));
	_step := atoi (get_keyword ('step', params, '1'));
	_err_fill := '';
	_lpath_in := get_keyword ('lpath_in', params, '');
	_ses_vars_in := get_keyword ('ses_vars_in', params, '');
	_mode := get_keyword ('mode', params, '');

        blog_api := '';

	if (_mode <> '' and _mode <> '__new')
	  {
            _host := get_keyword ('host', params, '');
	    _lhost := get_keyword ('lhost', params, '');

	    if (_mode = '__1')
	      {
		 _ppath := '/';
		 _def_page := 'index.html';
		 _brow  := 0;
                 _xmlt  := 0;
		 _vsp  := 'dba';
		 _security := 'none';
		 _realm := '';
		 _auth_func := '';
		 _after_func := '';
		 _ses_vars := 0;
		 _is_dav := 0;
		 _lpath := '';
		 _soap_opt := '';
		 _auth_opt := '';
	      }
	    else if (_mode = '__2')
	      {
		 _ppath := '/DAV/';
		 _def_page := '';
		 _brow  := 0;
                 _xmlt  := 0;
		 _vsp  := 'dba';
		 _realm := '';
		 _auth_func := '';
		 _after_func := '';
		 _is_dav := 1;
		 _lpath := '';
	      }
	    else if (_mode = '__3')
	      {
		 _ppath := 'http://';
		 _def_page := '';
		 _brow  := 0;
                 _xmlt  := 0;
		 _vsp  := '';
		 _soap := '';
		 _security := '';
		 _realm := '';
		 _auth_func := '';
		 _after_func := '';
		 _ses_vars := 0;
		 _is_dav := 0;
		 _lpath := '';
		 _soap_opt := '';
		 _auth_opt := '';
	      }
	    else if (_mode = '__4')
	      {
		 _ppath := '/SOAP/';
		 _def_page := '';
		 _brow  := 0;
                 _xmlt  := 0;
		 _vsp  := '';
		 _soap := '';
		 _security := '';
		 _realm := '';
		 _auth_func := '';
		 _after_func := '';
		 _ses_vars := 0;
		 _is_dav := 0;
		 _lpath := '';
                 _soap_opt :=
				vector (
				    'ServiceName','<SERVICE_NAME>',
				    'Namespace','http://openlinksw.com/virtuoso/soap/schema',
				    'MethodInSoapAction','yes',
				    'HeaderNS','http://openlinksw.com/virtuoso/soap/schema',
				    'FaultNS','http://openlinksw.com/virtuoso/soap/schema',
				    'CR-escape','no',
				    'elementFormDefault','unqualified',
				    'DIME-ENC','no',
				    'WS-SEC','no',
				    'WSS-KEY','<KEY_NAME>',
				    'WSS-Validate-Signature','2',
				    'WS-RP','no',
				    'wsrp-from','some@example.domain'
				    );
		 _auth_opt := '';
	      }
	    else if (_mode = '__5')
	      {
		 _ppath := '/SOAP/';
		 _def_page := '';
		 _brow  := 0;
                 _xmlt  := 0;
		 _vsp  := '';
		 _soap := 'RPC2';
		 _security := '';
		 _realm := '';
		 _auth_func := '';
		 _after_func := '';
		 _ses_vars := 0;
		 _is_dav := 0;
		 _lpath := '/RPC2';
                 _soap_opt :=
				vector (
				    'XML-RPC', 'yes'
				    );
		 _auth_opt := '';
	      }
	    else
	      {

	         select HP_PPATH, HP_DEFAULT, HP_DIR_BROWSEABLE, HP_RUN_VSP_AS, HP_RUN_SOAP_AS,
		   HP_SECURITY, HP_REALM, HP_AUTH_FUNC, HP_POSTPROCESS_FUNC, HP_PERSIST_SES_VARS,
	           HP_STORE_AS_DAV, HP_LISTEN_HOST, HP_HOST, deserialize (HP_SOAP_OPTIONS),
		   deserialize (HP_AUTH_OPTIONS), deserialize (HP_OPTIONS)
		   into _ppath, _def_page, _brow, _vsp, _soap, _security, _realm, _auth_func,
	           _after_func, _ses_vars, _is_dav, _lhost, _host, _soap_opt, _auth_opt, _global_opts
		   from DB.DBA.HTTP_PATH
		   where HP_HOST = _host and HP_LPATH = _mode and HP_LISTEN_HOST = _lhost;
		   --dbg_obj_print ('admin_virt_dir.vsp: _global_opts after sel1 ', _global_opts);

		 _lpath := '/';

	      }
	    if (_lhost <> '*ini*' and _lhost <> '*sslini*'
		and not exists (select 1 from DB.DBA.HTTP_PATH
		  where HP_LISTEN_HOST = replace (_lhost, '0.0.0.0', '') and HP_IS_DEFAULT_HOST = 1))
	      _is_default := 1;


	  }
	else
	  {
	    bapi := '';

	    if (_upd = 1)
	      {
                 _host_in := get_keyword ('host_in', params, '');
	         _listen_in := get_keyword ('lhost_in', params, 0);

	         select HP_PPATH, HP_DEFAULT, HP_DIR_BROWSEABLE, HP_RUN_VSP_AS, HP_RUN_SOAP_AS,
		   HP_SECURITY, HP_REALM, HP_AUTH_FUNC, HP_POSTPROCESS_FUNC, HP_PERSIST_SES_VARS,
	           HP_STORE_AS_DAV, HP_LISTEN_HOST, HP_HOST, HP_LPATH,deserialize (HP_SOAP_OPTIONS),
		   deserialize (HP_AUTH_OPTIONS), HP_IS_DEFAULT_HOST, deserialize(HP_OPTIONS)
		   into _ppath, _def_page, _brow, _vsp, _soap, _security, _realm, _auth_func,
	           _after_func, _ses_vars, _is_dav, _lhost, _host, _lpath, _soap_opt, _auth_opt,
		   _is_default, _global_opts
		   from DB.DBA.HTTP_PATH
		   where HP_HOST = _host_in and HP_LPATH = _lpath_in and HP_LISTEN_HOST = _listen_in;

		   --dbg_obj_print ('admin_virt_dir.vsp: _global_opts after sel2 ', _global_opts);
		 _ses_vars_in := _ses_vars;
		 _upd := _upd + 1;

		 blog_api := 0;
		 for select G_OBJECT from SYS_GRANTS, SYS_USERS
		   where G_OP = 32 and G_USER = U_ID and U_NAME = _soap do
		    {
		      declare q, o, n varchar;
		      G_OBJECT := complete_proc_name (G_OBJECT, 1);
		      q := name_part (G_OBJECT, 0);
		      o := name_part (G_OBJECT, 1);
		      n := substring (G_OBJECT, length(q)+length(o)+3, length (G_OBJECT));
		      if (position (n, bapi))
		        blog_api := blog_api + 1;
		    }

		 if (blog_api >= length (bapi))
		   blog_api := 'checked';
		 else
		   blog_api := '';
	      }
	    else
	      {
		 _host := get_keyword ('host', params, '');
		 _lhost := get_keyword ('lhost', params, '');

		 _lpath := get_keyword ('lpath', params, '');
		 if ("LEFT" (_lpath, 1) <> '/')
		   _lpath := concat ('/', _lpath);
		 if (_lpath = '')
		   _lpath := '/';

		 if (_dav_result is not null and '' <> get_keyword ('ppath_bw', params, ''))
		   {
		      _ppath := _dav_result;

		      if ((length (_ppath) > length (http_root ())) and (_sys = 'file'))
			  _ppath := subseq (_ppath, length (http_root ()));
		   }
		 else
		   {
		      _ppath := get_keyword ('ppath', params, '/');
		   }

		 if (_dav_result is not null and '' <> get_keyword ('def_bw', params, ''))
		   {
		     declare sl integer;
		      _def_page := _dav_result;
                     sl := strrchr (_def_page , '/');
                     if (sl is not null)
                       _def_page := substring (_def_page, sl + 2, length (_def_page));
		   }
		 else
		   {
		      _def_page := get_keyword ('def_page', params, 'index.html');
		   }

		 if ("RIGHT" (_ppath, 1) <> '/')
		   _ppath := concat (_ppath, '/');

		 if (_ppath = '')
	   	   _err_fill := 'Physical path required';

	         _is_dav := get_keyword ('is_dav', params, 0);
		 if (_is_dav = 'on')
		   _is_dav := 1;

		 _brow := get_keyword ('brow', params, 0);
		 if (_brow = 'on')
		   _brow := 1;

		 _vsp := get_keyword ('vsp_c', params, '');
		 if (_vsp = '__none' or _vsp = '')
		   _vsp := NULL;

		 _soap := get_keyword ('soap', params, NULL);
		 if (_soap = '__none' or _soap = '')
		   _soap := NULL;

		 _security := get_keyword ('security', params, NULL);
		 if ( _security = 'none')
		   _security := NULL;

		 _realm := get_keyword ('realm', params, NULL);
		 if (_realm = '')
		   _realm := NULL;

		 _auth_func := get_keyword ('auth_func', params, NULL);
		 if (_auth_func = '')
		   _auth_func := NULL;

		 _after_func := get_keyword ('post_func', params, NULL);
		 if (_after_func = '')
		   _after_func := NULL;

		 _ses_vars := get_keyword ('ses_vars', params, 0);
		 if (_ses_vars = 'on')
		   _ses_vars := 1;

		 _is_default := get_keyword ('is_default', params, 0);
		 if (_is_default = 'on')
		   _is_default := 1;

		 _soap_opt := get_keyword ('soap_opt', params, 0);
		 if (_soap_opt = '' or _soap_opt = 0)
		    _soap_opt := NULL;
		 else if (isstring (_soap_opt))
		   {
		     declare spath any;
                     spath := WS.WS.HREF_TO_ARRAY (_lpath,'');
                     if (length (spath) < 1)
                       spath := vector ('SOAP');
		      _soap_opt := replace (_soap_opt, '\r', '');
		      _soap_opt := replace (_soap_opt, '\n', '');
		      _soap_opt := trim (_soap_opt);
		      _soap_opt := replace (_soap_opt, ';', '&');

		      if ("RIGHT" (_soap_opt, 1) = '&')
			_soap_opt := "LEFT" (_soap_opt, length (_soap_opt) - 1);

                      _soap_opt := replace (_soap_opt, '<SERVICE_NAME>', spath[0]);
		      _soap_opt := split_and_decode (_soap_opt);
		   }

	         _xmlt := get_keyword ('xmlt', params, '');
                 if (_xmlt = '' and isarray (_global_opts) and not mod (length (_global_opts),2))
		   _xmlt := get_keyword ('xml_templates', _global_opts, '');

	         _executable := get_keyword ('executable', params, '');
                 if (_executable = '' and isarray (_global_opts) and not mod (length (_global_opts),2))
		   _executable := get_keyword ('executable', _global_opts, '');

  		 if (_brow)
		   {
		     _browse_sheet :=  get_keyword ('browse_sheet', params, '');
		     if (_browse_sheet = '' and isarray (_global_opts) and not mod (length (_global_opts),2))
		       _browse_sheet := get_keyword ('browse_sheet', _global_opts, '');
		     if (_dav_result is not null and '' <> get_keyword ('def_sh', params, ''))
		       {
			  _browse_sheet := _dav_result;

			  if ((length (_browse_sheet) > length (http_root ())) and (_sys = 'file'))
			      _browse_sheet := subseq (_browse_sheet, length (http_root ()));
		       }
		   }

		 _auth_opt := get_keyword ('auth_opt', params, 0);
		 if (_auth_opt = '' or _auth_opt = 0)
		    _auth_opt := NULL;
		 else if (isstring (_auth_opt))
		   {
		      _auth_opt := replace (_auth_opt, '\r', '');
		      _auth_opt := replace (_auth_opt, '\n', '');
		      _auth_opt := trim (_auth_opt);
		      _auth_opt := replace (_auth_opt, ';', '&');

		      if ("RIGHT" (_auth_opt, 1) = '&')
			_auth_opt := "LEFT" (_auth_opt, length (_auth_opt) - 1);

		      _auth_opt := split_and_decode (_auth_opt);
		   }

  		 if (get_keyword ('_add', params) <> ''
		     or get_keyword ('__upd', params) <> '')
		   {
		      declare udt_grants any;
 		      udt_grants := vector ();
      		      if (get_keyword ('__upd', params) <> '')
			{
			   for select SUP_CLASS from SYS_SOAP_UDT_PUB
				where SUP_HOST = _host and SUP_LHOST = _lhost
				and SUP_END_POINT = _lpath_in do
				{
				  udt_grants := vector_concat (udt_grants, vector (SUP_CLASS));
				}
			   VHOST_REMOVE (_host, _lhost, _lpath_in, 0);
		      	}

		      st := '00000';
		      msg := '';
                      --dbg_obj_print ('_add');
		      if (exists (select 1 from DB.DBA.HTTP_PATH where HP_HOST = _host and HP_LISTEN_HOST = _lhost and HP_LPATH = _lpath))
			{
			  declare _ssl_port varchar;
			  _ssl_port := server_https_port();
			  if (__tag (_ssl_port) = 183)
			    _ssl_port := cast (_ssl_port as varchar);
		          _err_fill := sprintf ('The virtual directory for host: "%s" and logical path "%s" already defined. You may edit the existing entry or delete and then add the new one.', case when _host = '*ini*' then server_http_port() when _host = '*sslini*' then _ssl_port else _host end , _lpath);
			  msg := _err_fill;
			}
		      else
			{
			  declare i, l int;
			  if (_xmlt <> '')
			    _global_opts := vector ('xml_templates', 'yes');
			  else
			    _global_opts := NULL;

			  if (_executable <> '')
			    _global_opts := vector_concat (
				coalesce (_global_opts, vector()),
				vector('executable', 'yes'));

			  if (_browse_sheet <> '')
			    _global_opts := vector_concat (
				coalesce (_global_opts, vector()),
				vector('browse_sheet', _browse_sheet));

                          --dbg_obj_print ('admin_virt_dir.vsp: _err_pages_return_opts before update ', _err_pages_return_opts);
			  if (_err_pages_return_opts is not null)
			    {
			      declare _inx integer;
                              if (isarray (_global_opts))
				{
				  declare _new_gopts any;
			          _inx := 0;
                                  _new_gopts := null;
                                  while (_inx < length (_global_opts))
				    {
				      if (_global_opts[_inx] not like '____page')
					{
					  _new_gopts := vector_concat (
					    coalesce (_new_gopts, vector()),
					    vector (_global_opts[_inx], _global_opts[_inx + 1]));
					}
				      _inx := _inx + 2;
				    }
				  _global_opts := _new_gopts;
				}
			      _inx := 0;
                              while (_inx < length (_err_pages_return_opts))
				{
				  if (_err_pages_return_opts[_inx] like '____page')
				    _global_opts := vector_concat (
					coalesce (_global_opts, vector()),
					vector (_err_pages_return_opts[_inx], _err_pages_return_opts[_inx + 1]));
				  _inx := _inx + 2;
				}
			      _err_pages_return_opts := null;
			    }
			  --dbg_obj_print ('admin_virt_dir.vsp: _global_opts before vhost_define ', _global_opts);

			  exec('VHOST_DEFINE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', st, msg,
			      vector ( _host, _lhost, _lpath, _ppath, _is_dav, _brow,
				_def_page, _auth_func, _realm, _after_func, _vsp, _soap,
				_security, _ses_vars, _soap_opt, _auth_opt, _global_opts, _is_default));

			  foreach (varchar udt_pub in udt_grants) do
			      {
				insert into DB.DBA.SYS_SOAP_UDT_PUB (SUP_CLASS,SUP_HOST,SUP_LHOST,SUP_END_POINT)
				    values (udt_pub, _host, _lhost, _lpath);
			      }

			  if (_ppath = '/SOAP/')
			    {
			      declare i, l int;
			      declare grant_stmt, gst, gmsg varchar;

			      blog_api := 0;
			      for select G_OBJECT from SYS_GRANTS, SYS_USERS
			        where G_OP = 32 and G_USER = U_ID and U_NAME = _soap do
			 	 {
				   declare q, o, n varchar;
				   G_OBJECT := complete_proc_name (G_OBJECT, 1);
				   q := name_part (G_OBJECT, 0);
				   o := name_part (G_OBJECT, 1);
				   n := substring (G_OBJECT, length(q)+length(o)+3, length (G_OBJECT));
				   if (position (n, bapi))
				     blog_api := blog_api + 1;
				 }

			      if (blog_api >= length (bapi))
			        blog_api := 'checked';
			      else
			        blog_api := '';

			      i := 0; l := length (bapi);
			      while (i < l)
				{
				  grant_stmt := '';
				  if ({?'blogger'} = 'on' and blog_api = '')
				    {
				      grant_stmt := 'grant execute on BLOG.."'||bapi[i]||'" to "'||_soap||'"';
				    }
				  else if (blog_api = 'checked' and is_empty_or_null ({?'blogger'}))
				    {
				      grant_stmt := 'revoke execute on BLOG.."'||bapi[i]||'" from "'||_soap||'"';
				    }
				  if (grant_stmt <> '')
				    {
				      exec (grant_stmt, gst, gmsg);
				    }
				  i := i + 1;
				}
			    }
			}

		    if (_err_fill = '' and msg = '')
		      {
			http_request_status ('HTTP/1.1 302 Found');
			http_header (sprintf ('Location: admin_virt_dir.vsp?page=3&host=%V&lhost=%V\r\n',
			      _host, _lhost));
			return (0);

     		      }
		    else
		      {
			_err_fill := msg;
		      }
		   }
	      }
          }
?>

<html>
  <head>
  <link rel="stylesheet" type="text/css" href="../admin_style.css">
    <title><?=either(_upd, 'Edit', 'Add')?> Virtual Web Directories></title>
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="<?=either(_upd, 'Edit', 'Add')?> Virtual Web Directories">
  </head>
<!-- page 4 page 4 page 4 page 4 page 4 page 4 page 4 page 4 -->
<SCRIPT LANGUAGE="JavaScript">
<!--
function defineOpts (val)
  {
    if ('ssl' == val.options[val.selectedIndex].value)
      {
	//alert (document.add_f.auth_opt.value);
        if (document.add_f.auth_opt.value == '')
	  {
	    document.add_f.auth_opt.value = 'https_cert=[file_with_certificate].pem;\nhttps_key=[file_with_private_key].pem;';
	  }
      }
  }

function is_dav_func(bx1)
  {
     if (bx1.checked == true)
       {
         document.add_f.system.value = 'dav';
       }
     else
       {
         document.add_f.system.value = 'file';
       }
  }

function enable_st(bx1)
  {
     if (bx1.checked == true)
       {
	 document.getElementById('el1').style.visibility = 'visible';
	 document.getElementById('el2').style.visibility = 'visible';
	 document.getElementById('el3').style.visibility = 'visible';
       }
     else
       {
	 document.getElementById('el1').style.visibility = 'hidden';
	 document.getElementById('el2').style.visibility = 'hidden';
	 document.getElementById('el3').style.visibility = 'hidden';
       }
  }

function getPublished ()
  {
    document.add_f.action='admin_proc_list.vsp';
    document.add_f.submit();
  }

function getunPublished ()
  {
    document.add_f.action='admin_soap_list.vsp';
    document.add_f.submit();
  }

function goSetErrorPages ()
  {
    document.add_f.action='error_pages.vspx';
    document.add_f.submit();
  }

// -->
</SCRIPT>
<?vsp

  __head := either(_upd, 'Edit', 'Add');

  adm_page_header(concat (__head, ' Virtual Web Directories'), '');
?>
<?include ../adm_js_check.vsp ?>
<FORM method="POST"  name="add_f" action="admin_virt_dir.vsp">
<input type=hidden name="error_pages_return_opts" value="<?= encode_base64 (serialize (_err_pages_return_opts)) ?>">
<DIV style="width: 80%; text-align: left;">
  <P><small><B>Note:</B> Fields marked with '*' are optional.</small></P>
<?vsp
  if (must_have_dba)
    {
?>
  <P style="color: red">
Warning: <small>Some template(s) published as Web Services need to have DBA privileges granted to the SQL account for SOAP execution, as these grants are not performed automatically for security reasons.</small>
  </P>
<?vsp
    }
  if (length (pdup) > 0)
    {
      declare x,z integer;
      x := 0; z := length (pdup);
?>
  <P style="color: red">
Error: <small>The following procedures can't be published as they have the same name as already published as a Web Services.</small>
  </P>
  <table CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">

<?vsp
      while (x < z)
        {
	  http ('<tr><td CLASS="gendata"><small>');
	  http (pdup[x]);
	  http ('</small><td></tr>');
          x := x + 1;
	}
      http ('</table>');
    }
?>

  </DIV>
<!--
      Important: Security method and Persistent Session Variables are only flags, <br /> to enforce
      any of these the PL function hooks for Authentication and Post-Processing must be
      specified. <br />
      See also: Virtuoso documentation - HTTP Session Management, Web server tutorial pages.
-->
<BR />
<?vsp
    declare warn varchar;
    warn := '';
    if (_err_fill <> '' and _step)
      {
        http (sprintf ('<P class="errorhead">%s</P>', _err_fill));
      }
    if ('SSL' = coalesce ((select top 1 upper(HP_SECURITY) from DB.DBA.HTTP_PATH where HP_HOST = _host and HP_LISTEN_HOST = _lhost), '') and (_security <> 'SSL' or _security <> 'ssl' or _security is null))
      {
	-- we have a HTTPS listener so MUST copy the options from other
         select HP_SECURITY, deserialize (HP_AUTH_OPTIONS)
	   into _security, _auth_opt
	   from DB.DBA.HTTP_PATH
	   where HP_HOST = _host and HP_LISTEN_HOST = _lhost;
        warn := 'Warning: Do not remove these settings, because we have already defined HTTPS listener.';
      }
    if (_lhost = def_ssl)
      {
        _security := 'SSL';
        _hs_cert := cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'SSLCertificate');
        _hs_key :=  cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'SSLPrivateKey');
        _hs_vrfy :=  cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'X509ClientVerify');
        _hs_depth :=  cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'X509ClientVerifyDepth');
        _hs_ca :=  cfg_item_value (virtuoso_ini_path (), 'HTTPServer', 'X509ClientVerifyCAFile');
        if (_hs_vrfy is not null)
          _auth_opt := vector ('https_cert',_hs_cert,'https_key',_hs_key,
	      'https_cv_depth',_hs_depth,'https_cv',_hs_ca);
	else
          _auth_opt := vector ('https_cert',_hs_cert,'https_key',_hs_key);
      }
?>

<TABLE style="width: 95%; text-align: left;">
<TR><TD>
  <TABLE CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">
  <TR><TD CLASS="genlistheadt" COLSPAN="2">Listener Details</TD></TR>
  <TR><TD CLASS="AdmBorders" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT="" /></TD></TR>

  <TR><TD class="genlisthead">Host Name</TD>
    <TD CLASS="gendata">
<?vsp
    if (_host = '*ini*')
      {
        -- http (sprintf ('%s', server_http_port ()));
	http ('{Default Web Site}');
      }
    else if (_host = '*sslini*')
      {
        -- http (sprintf ('%s', server_http_port ()));
	http ('{Default SSL Web Site}');
      }
    else
      http (sprintf ('%s', _host));
?>
      </TD></TR><INPUT type="hidden" name="host" value="<?=_host?>">

    <TR><TD class="genlisthead">Interface</TD>
      <TD CLASS="gendata">
<?vsp
    if (_host = '*ini*')
      {
        -- http (sprintf (':%s', server_http_port ()));
	http ('{Default Web Site}');
      }
    else if (_host = '*sslini*')
      {
        -- http (sprintf ('%s', server_http_port ()));
	http ('{Default SSL Web Site}');
      }
    else
      http (sprintf ('%s', _lhost));

     if ((not _browse_sheet or _browse_sheet is null) and isarray (_global_opts) and not mod (length (_global_opts),2))
       _browse_sheet := get_keyword ('browse_sheet', _global_opts, NULL);

?>
      </TD></TR><INPUT type="hidden" name="lhost" value="<?=_lhost?>">

    <TR><TD class="genlisthead" NOWRAP>Default Directory</TD>
      <TD CLASS="geninput">
        <INPUT type="checkbox" name="is_default"  <?vsp if (_is_default) { http ('CHECKED');} ?>></TD></TR>

    <TR><TD class="genlisthead" NOWRAP>Logical Path</TD>
      <TD><INPUT type="text" name="lpath" value="<?=_lpath?>" size="<?=fieldsize?>"></TD></TR>

<?vsp  if (strstr(_ppath, 'SOAP') is not NULL) {  ?>
    <TR><TD ROWSPAN="1" class="genlisthead" NOWRAP>Physical Path or URL</TD>
      <TD NOWRAP><?=_ppath?>
        <INPUT type="hidden" name="ppath" value="<?=_ppath?>" size="<?=fieldsize?>">
      </TD></TR>
<?vsp if (isstring (file_stat (concat (http_root(), '/SOAP')))) { ?>
    <TR><TD class="genlisthead" NOWRAP>Default Page</TD>
      <TD NOWRAP><INPUT type="text" name="def_page" value="<?=_def_page?>" size="<?=fieldsize?>">
      <INPUT type=submit name="def_bw" value="Browse ...">
      <INPUT type="hidden" name="system" value='os'>
      <INPUT type="hidden" name="cur_dir" value='<?= http_root() ?>/SOAP/'>
      </TD></TR>
<?vsp } ?>
<?vsp } else { ?>
    <TR><TD ROWSPAN="2" class="genlisthead" NOWRAP>Physical Path or URL</TD>
      <TD NOWRAP><INPUT type="text" name="ppath" value="<?=_ppath?>" size="<?=fieldsize?>">
      <INPUT type=submit name="ppath_bw" value="Browse ..."></TD></TR>
    <TR><TD><SPAN CLASS="genlisthead" NOWRAP>WebDAV Source</SPAN>
        <INPUT type="checkbox" name="is_dav" onclick="is_dav_func(this);" <?vsp if (_is_dav) { http ('CHECKED');} ?>>
	</TD>
      <TD></TD></TR>
      <INPUT type="hidden" name="system" value=<?vsp if (_is_dav) http ('dav'); else http ('file'); ?>>

    <TR><TD class="genlisthead" NOWRAP>Default Page</TD>
      <TD NOWRAP><INPUT type="text" name="def_page" value="<?=_def_page?>" size="<?=fieldsize?>">
      <INPUT type=submit name="def_bw" value="Browse ..."></TD></TR>

    <TR><TD  style="visibility:<?vsp if (_brow) {http ('visible');} else {http ('hidden');} ?>" id="el1" class="genlisthead" NOWRAP>Style Sheet for browsing</TD>
      <TD NOWRAP><INPUT  style="visibility:<?vsp if (_brow) {http ('visible');} else {http ('hidden');} ?>" id="el2" type="text" name="browse_sheet" value="<?vsp if (_browse_sheet) http (_browse_sheet); else http (''); ?>" size="<?=fieldsize?>">
      <INPUT style="visibility:<?vsp if (_brow) {http ('visible');} else {http ('hidden');} ?>" id="el3" type=submit name="def_sh" value="Browse ..."></TD></TR>
    </TR>
<?vsp } ?>

    </TABLE>

</TD>
<TD>

      <P><SMALL>The default directory will be returned to clients contacting the interface
      without using a hostname (When Virtuoso is unable to match a virtual hostname)</SMALL></P>

</TD></TR></TABLE>

<BR />

<TABLE style="width: 95%; text-align: left;">
<TR><TD>
  <TABLE CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">
  <TR><TD CLASS="genlistheadt" COLSPAN="3">Permissions</TD></TR>
  <TR><TD CLASS="AdmBorders" COLSPAN="3"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT="" /></TD></TR>

    <TR><TD class="genlisthead" NOWRAP>Allow Directory Browsing</TD>
      <TD CLASS="geninput" COLSPAN="2">
        <INPUT type="checkbox" name="brow" onclick="enable_st(this);" <?vsp if (_brow) { http ('CHECKED');} ?>></TD>
    </TR>
<?vsp
     if ((not _xmlt or _xmlt is null) and isarray (_global_opts) and not mod (length (_global_opts),2))
       _xmlt := get_keyword ('xml_templates', _global_opts, 0);

     if ((not _executable or _executable is null) and isarray (_global_opts) and not mod (length (_global_opts),2))
       _executable := get_keyword ('executable', _global_opts, 0);

?>
    <TR><TD class="genlisthead" NOWRAP>Allow XML Template Execution</TD>
      <TD CLASS="geninput" COLSPAN="2">
        <INPUT type="checkbox" name="xmlt" <?vsp if (_xmlt and _xmlt <> '') { http ('CHECKED');} ?>></TD>
    </TR>

    <TR><TD class="genlisthead" NOWRAP>Override execution permissions in WebDAV</TD>
      <TD CLASS="geninput" COLSPAN="2">
        <INPUT type="checkbox" name="executable" <?vsp if (_executable and _executable <> '') { http ('CHECKED');} ?>></TD>
    </TR>

    <TR><TD class="genlisthead">Allow Persistent Session Variables</TD>
      <TD CLASS="geninput">
<?vsp if (_ses_vars) { ?>
    <INPUT type="checkbox" name="ses_vars" CHECKED>
<?vsp } else { ?>
    <INPUT type="checkbox" name="ses_vars">
<?vsp } ?>
      </TD>
    </TR>

  <TR><TD class="genlisthead" NOWRAP>VSP Execution</TD>
  <TD CLASS="geninput">
<?vsp if (_upd and 0)
	{
?>
    <INPUT type="text" name="vsp_c" value="<?=_vsp?>" size="15">
<?vsp   }
      else
	{
           http ('<SELECT NAME="vsp_c">');
	   http ('<OPTION VALUE=__none>none</OPTION>');
	   for (select U_NAME from DB.DBA.SYS_USERS where U_SQL_ENABLE = 1) do
--	     if (U_NAME = 'dba')
	     if (U_NAME = _vsp)
	       http (sprintf ('<OPTION VALUE=%s SELECTED>%s</OPTION>', U_NAME, U_NAME));
	     else
	       http (sprintf ('<OPTION VALUE=%s>%s</OPTION>', U_NAME, U_NAME));
           http ('</SELECT>');
	}
?>
    </TD></TR>

  <TR><TD class="genlisthead">SOAP Execution</TD>
    <TD CLASS="geninput">
<?vsp if (_upd and 0)
  	{
?>
    <INPUT type="text" name="soap" value="<?=_soap?>" size="15">
<?vsp   }
      else
	{
           http ('<SELECT NAME="soap">');
	   http ('<OPTION VALUE=__none>none</OPTION>');
	   for (select U_NAME from DB.DBA.SYS_USERS where U_SQL_ENABLE = 1) do {
	     if (U_NAME = _soap)
	       http (sprintf ('<OPTION VALUE=%s SELECTED>%s</OPTION>', U_NAME, U_NAME));
	     else
	       http (sprintf ('<OPTION VALUE=%s>%s</OPTION>', U_NAME, U_NAME)); }
           http ('</SELECT>');
	}
?>
    </TD>
  </TR>
  </TABLE>

</TD>
<TD>

<P><SMALL>These drop-down lists let you choose the
    user that will be used to execute VSP/SOAP resources.  Specify None to
    deny execution for these types.</SMALL></P>
</TD>
</TR></TABLE>

<BR />

<TABLE style="width: 95%; text-align: left;">
<TR><TD>

  <TABLE CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">
  <TR><TD CLASS="genlistheadt" COLSPAN="2">SOAP Options</TD></TR>
  <TR><TD CLASS="AdmBorders" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT="" /></TD></TR>

    <TR><TD class="genlisthead">*Procedures/Templates</TD>
      <TD>
        <input type="button" name="sel_proc" value="Publish" onClick="getPublished();">
        <input type="button" name="desel_proc" value="UnPublish" onClick="getunPublished();">
      </TD>
    </TR>

    <TR><TD class="genlisthead">*blogger API</TD>
      <TD>
        <input type="checkbox" name="blogger" <?=blog_api?>><small>&nbsp;applicable for XML-RPC endpoint only</small>
      </TD>
    </TR>

    <script type="text/javascript">
     function popup_opts (ctr)
       {
          var frm = ctr.form;
          window.soap_opts=frm.soap_opt;
          window.open ('adm_soap_opts.vsp?opts='+escape (frm.soap_opt.value), 'cmb_window',
	  'resizable=yes, status=no, menubar=no, scrollbars=no, width=700, height=640');
       }
    </script>

    <TR><TD class="genlisthead">*SOAP Options</TD>
      <TD>
      <TEXTAREA WRAP="off" NAME="soap_opt" COLS="40" ROWS="5"><?vsp
      if (isarray (_soap_opt))
	{
	  idx := 0;
	  while (idx < length (_soap_opt))
	    {
	      http (sprintf ('%s=%s;\r\n', cast (_soap_opt[idx] as varchar), cast (_soap_opt[idx+1] as varchar)));
	      idx := idx + 2;
	    }
	}
?></TEXTAREA><BR/>
	<input type="button" name="soap_opt_popup" onclick="javascript: popup_opts (this)" value="Browse ..." />
      </TD></TR>
  </TABLE>

<BR />

  <TABLE CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">
  <TR><TD CLASS="genlistheadt" COLSPAN="2">Authentication Options</TD></TR>
  <TR><TD CLASS="AdmBorders" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT="" /></TD></TR>

  <TR><TD class="genlisthead">*Method</TD>
    <TD CLASS="geninput">
      <SELECT NAME="security" onChange="defineOpts(this);">
      <?vsp
        if (_lhost <> def_ssl)
	  {
       ?>
      <OPTION VALUE="none"<?vsp if (_security in (NULL, 0)) { http (' SELECTED'); } ?>>None</OPTION>
      <OPTION VALUE="basic"<?vsp if (isstring (_security) and lower(_security) = 'basic') { http (' SELECTED'); } ?>>basic</OPTION>
      <OPTION VALUE="digest"<?vsp if (isstring (_security) and lower(_security) = 'digest') { http (' SELECTED'); } ?>>digest</OPTION>
        <?vsp
	  }
        ?>
      <OPTION VALUE="ssl"<?vsp if (isstring (_security) and lower(_security) = 'ssl') { http (' SELECTED'); } ?>>SSL</OPTION>
      </SELECT>
    </TD></TR>

  <TR><TD class="genlisthead">*Realm</TD>
    <TD CLASS="geninput"><INPUT type="text" name="realm" value="<?=_realm?>" size="<?=fieldsize?>"></TD>
  </TR>

  <TR><TD class="genlisthead">*Authentication Function</TD>
    <TD CLASS="genlist"><input type="text" name="auth_func" size="<?=fieldsize?>" value="<?=_auth_func?>">
    <INPUT type=button name="DAV" value="Select..." onclick="window.res = document.add_f.auth_func; window.open ('admin_select_proc.vsp', 'window', 'scrollbars=yes, menubar=no, height=430, width=480')"></TD>
  </TR>

    <TR><TD class="genlisthead" TITLE="parameter = value;">*Authentication Options</TD>
    <TD ALIGN=left colspan="2">
      <TEXTAREA WRAP="off" NAME="auth_opt" COLS="40" ROWS="5"><?vsp
      if (isarray (_auth_opt))
	{
	  idx := 0;
	  while (idx < length (_auth_opt))
	    {
	      http (sprintf ('%s=%s;\r\n', cast (_auth_opt[idx] as varchar), cast (_auth_opt[idx+1] as varchar)));
	      idx := idx + 2;
	    }
	}
      ?></TEXTAREA>
    </TD>
    <td><b><small><?=warn?></small></b></td>
    </TR>

  <TR><TD class="genlisthead" TITLE="Function call after request">*Post-Processing Function</TD>
    <TD CLASS="genlist"><INPUT type="text" name="post_func" value="<?=_after_func?>" size="<?=fieldsize?>">
    <INPUT type=button name="DAV" value="Select..." onclick="window.res = document.add_f.post_func; window.open ('admin_select_proc.vsp', 'window', 'scrollbars=yes, menubar=no, height=430, width=480')"></TD>
  </TR>
  </TABLE>

  <BR />
  <TABLE CLASS="genlist" BORDER="0" CELLPADDING="0" CELLSPACING="2">
  <TR><TD CLASS="genlistheadt" COLSPAN="2">Other Options</TD></TR>
  <TR><TD CLASS="AdmBorders" COLSPAN="2"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT="" /></TD></TR>

    <TR><TD class="genlisthead" TITLE="parameter = value;">*Custom Error Pages</TD>
    <TD ALIGN=left>
    <?vsp
	      --dbg_obj_print ('admin_virt_dir.vsp: _global_opts before ta draw ', _global_opts);
	      --dbg_obj_print ('admin_virt_dir.vsp: _err_pages_return_opts before ta draw ', _err_pages_return_opts);
 	      if (not isarray (_global_opts))
		_global_opts := null;
	      if (_err_pages_return_opts is not null)
		{
		  declare _inx integer;
		  if (isarray (_global_opts))
		    {
		      declare _new_gopts any;
		      _inx := 0;
		      _new_gopts := null;
		      while (_inx < length (_global_opts))
			{
			  if (_global_opts[_inx] not like '____page')
			    {
			      _new_gopts := vector_concat (
				coalesce (_new_gopts, vector()),
				vector (_global_opts[_inx], _global_opts[_inx + 1]));
			    }
			  _inx := _inx + 2;
			}
		      _global_opts := _new_gopts;
		    }
		  _inx := 0;
		  while (_inx < length (_err_pages_return_opts))
		    {
		      if (_err_pages_return_opts[_inx] like '____page')
			_global_opts := vector_concat (
			    coalesce (_global_opts, vector()),
			    vector (_err_pages_return_opts[_inx], _err_pages_return_opts[_inx + 1]));
		      _inx := _inx + 2;
		    }
		  _err_pages_return_opts := null;
		}
	      --dbg_obj_print ('admin_virt_dir.vsp: _global_opts after ta draw ', _global_opts);
    ?>
      <INPUT type=hidden name="err_pages_saved_params" value="<?= encode_base64 (serialize (params)) ?>">
      <INPUT type=hidden name="err_pages_opts_in" value="<?= encode_base64 (serialize (_global_opts)) ?>">
      <INPUT type=button name="err_pages_btn" value="Define..." onclick="goSetErrorPages()"></TD>
    </TD></TR>
    <TR><TD class="genlisthead" TITLE="parameter = value;">*Other Options</TD>
    <TD ALIGN=left>
      <TEXTAREA readonly WRAP="off" NAME="global_opt" COLS="40" ROWS="5"><?vsp
      if (isarray (_global_opts))
	{
	  idx := 0;
	  while (idx < length (_global_opts))
	    {
	      http (trim (sprintf ('%s=%s;\r\n', cast (_global_opts[idx] as varchar), cast (_global_opts[idx+1] as varchar))));
	      idx := idx + 2;
	    }
	}
      --dbg_obj_print ('admin_virt_dir.vsp: _err_pages_return_opts on draw', _err_pages_return_opts);
      ?></TEXTAREA>
    </TD>
    </TR>

  </TABLE>
</TD></TR>
</TABLE>

<DIV STYLE="WIDTH: 95%; text-align:left;">
  <SPAN><small><B>Caution:</B> Specifying an inappropriate PL Authentication Function will
  deny all access to the associated logical path by default.</small></SPAN>
</DIV>
<BR />

<DIV STYLE="WIDTH: 95%;" CLASS="genlist">

    <INPUT type="hidden" name="upd" value="<?=_upd?>">
<?vsp if (_upd) { ?>
    <INPUT type="submit" name="__upd", value="Update">
<?vsp } else { ?>
    <INPUT type="submit" name="_add", value="Add">
<?vsp } ?>
<?vsp if (_mode <> '') { ?>
    <INPUT type="button" value="Cancel" name="cancel" onclick="location.replace ('admin_virt_dir.vsp');">
<?vsp } else { ?>
    <INPUT type="button" value="Cancel" name="cancel" onclick="location.replace ('admin_virt_dir.vsp?page=3&host=<?=_host?>&lhost=<?=_lhost?>');">
<?vsp } ?>
<?vsp if (_upd) { ?>
    <INPUT type="hidden" name="page" value="4">
<?vsp } else { ?>
    <INPUT type="hidden" name="page" value="4">
<?vsp } ?>
    <INPUT type="hidden" name="template">
    <INPUT type="hidden" name="site" value="<?=_site?>">
    <INPUT type="hidden" name="lpath_in" value="<?=_lpath_in?>">
    <INPUT type="hidden" name="ses_vars_in" value="<?=_ses_vars_in?>">
</DIV>

</FORM>
<!-- page 4 page 4 page 4 page 4 page 4 page 4 page 4 page 4 -->

<BR />

<?vsp adm_page_footer();?>
</HTML>

<?vsp }
   } ?>
