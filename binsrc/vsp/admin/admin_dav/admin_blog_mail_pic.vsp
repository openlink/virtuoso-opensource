<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2019 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
--
?>
<?vsp

  declare msgid, _u_id integer;
  declare own varchar;
  declare msg, parsed_message varchar;
  declare inx integer;
  declare ses, download_path varchar;
  declare sender varchar;
  declare mm_b_id integer;
  declare jpg_body any;
  declare fname any;
  declare blog_file_name any;
  declare path_part, body, parts, attrs, disp_part varchar;
  declare _do_update integer;

  _u_id := WS.WS.check_auth (lines);
  if (_u_id < 1)
    {
      http_request_status ('HTTP/1.1 401 Unauthorized');
      http ( concat ('<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">',
            '<HTML><HEAD>',
            '<TITLE>401 Unauthorized</TITLE>',
            '</HEAD><BODY><H1>Unauthorized</H1>',
            'Access to page is forbidden.</BODY></HTML>'));
      return (0);
    }
  else
    select U_NAME into own from WS.WS.SYS_DAV_USER where U_ID = _u_id;

  ses := null;
  jpg_body := NULL;
  fname := get_keyword_ucase ('filename', params, '');
  disp_part := get_keyword_ucase ('part', params, '');
  _do_update := get_keyword_ucase ('do_update', params, '');

  if (get_keyword ('VSP', params) is NULL)
    return;

  msgid := get_keyword ('msg', params);

  sender := '';
  if (msgid = '')
    msgid := null;

  download_path := get_keyword ('downloadpath', params);

  if (download_path = '')
    download_path := null;

      if (msgid is null)
	return;

        msgid := (get_keyword ('msg', params));

       select blob_to_string(MM_BODY) into msg
	  from MAIL_MESSAGE where MM_ID = atoi (msgid) and MM_OWN = own;

      parsed_message := mime_tree (msg);

      while (not length (download_path) = 0)
        {
	  body := aref (parsed_message, 1);
	  parts := aref (parsed_message, 2);
	  attrs := aref (parsed_message, 0);
          inx := 1;
          while (inx > 0)
            {
	      inx := strstr (download_path, '/');
	      if (inx is null)
		{
		  path_part := download_path;
		  download_path := '';
		}
	      else
		{
		  path_part := subseq (download_path, 0, inx);
		  download_path := subseq (download_path, inx + 1, length (download_path));
		}
	      if (length (path_part) > 0)
		inx := 0;
	      else
		inx := 1;
	    }
	  if (path_part = 'd')
	    {
	      declare http_hdr, attr, val, lcase_attr, chrset varchar;
	      declare decode integer;

	      inx := 0;
	      if (sender is not null)
		{
		  http_hdr := concat ('From: ', sender, '\r\n');
		}
	      else
		{
		  http_hdr := '';
		}

              chrset := get_keyword_ucase ('charset', attrs);
	      fname := get_keyword_ucase ('filename', attrs);

              decode := 0;
	      while (inx < length (attrs))
		{
		  attr := aref (attrs, inx);
		  val := aref (attrs, inx + 1);
		  if (lcase (attr) =  'content-transfer-encoding')
		    {
		      attr := 'Content-Encoding';
		      if (val = 'base64')
                         decode := 1;
		    }
		  lcase_attr :=  lcase (attr);
		  if (lcase_attr = 'content-type')
		    {
		      if (chrset is not null)
			val := concat (val, ' ; charset=', chrset);
		    }
		  if (lcase_attr = 'content-disposition' and fname is not null)
		    val := concat (val, ' ; filename=', fname);
		  if (lcase_attr = 'from' or subseq (lcase_attr, 0, 7) = 'content' or lcase_attr = 'from')
		    {
		      http_hdr := concat (http_hdr, attr, ': ', val, '\r\n');
		    }
		  inx := inx + 2;
	        }
	      http_rewrite ();
	      http_header (http_hdr);
	      if (decode = 1)
		{
		  jpg_body := decode_base64 (substring (msg, aref (body, 0) + 1,  aref (body, 1) - aref (body, 0)));
		  if (_do_update = '1')
		    {
		      declare res any;
		      res := BLOG_UPDATE_IMAGES_TO_USER_DIR (_u_id, jpg_body, fname);
		      BLOG_INSERT_MESSAGE (_u_id, params, res);
		    }
		  http (jpg_body);
		}
	      return;
	    }
	    else
	      {
		declare multi_part integer;
		multi_part := atoi (path_part);
		parsed_message := aref (parts, multi_part);
	      }
	  }
      return;
?>
