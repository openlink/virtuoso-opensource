<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2019 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
--

  adm_pre_page(lines);

  declare _have, _u_id, _access, ord, hide_main integer;
  declare filt, dest, obj, mod, post_rate varchar;
  declare _vec, _vec_o any;
  declare alist varchar;

  --dbg_obj_print ('params=', params);

if (1 <> (_u_id := adm_dav_check_auth (lines)))
  {
    http_request_status ('HTTP/1.1 401 Unauthorized');
    http ( concat ('<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">',
	  '<HTML><HEAD>',
	  '<TITLE>401 Unauthorized</TITLE>',
	  '</HEAD><BODY><H1>Unauthorized</H1>',
          'Access to page is forbidden.</BODY></HTML>'));
    return (0);
  }

  filt := get_keyword ('filt', params, '*');
  dest := get_keyword ('dest', params, '*');
  obj := atoi (get_keyword ('obj', params, '-1'));
  mod := atoi (get_keyword ('mod', params, '-1'));
  post_rate := atof (get_keyword ('post_rate', params, '1'));

  alist :=  get_keyword ('edit', params, '');
  hide_main :=  atoi(get_keyword ('hide_main', params, '0'));

  if (alist = '' or {?'cncl'} = 'Cancel')
    {
      if (hide_main)
	signal ('22023', 'Bad request');
      else
	{
	  http_rewrite ();
	  http_request_status ('HTTP/1.1 302 Found');
	  http_header ('Location: adm_acl_main.vsp\r\n');
	}
    }

  _access := get_keyword ('access', params, '');

  if (_access = '_a')
    _access := 0;
  else
    _access := 1;

  if (get_keyword ('add_f', params, '') = '1' and get_keyword ('_add', params, '') <> '')
    {
      if (obj = -1 and alist = 'NEWS')
	signal ('22023', 'News groups are not defined');
      --insert
      --dbg_obj_print ('insert: ', params);
      ord := coalesce ((select max (HA_ORDER) from DB.DBA.HTTP_ACL where upper(HA_LIST) = upper(alist)), 0);
      ord := ord + 1;
      insert into HTTP_ACL (HA_LIST, HA_ORDER, HA_CLIENT_IP, HA_FLAG, HA_DEST_IP, HA_OBJECT, HA_RW, HA_RATE)
	  values (alist, ord, filt, _access, dest, obj, mod, post_rate);
    }

  if (get_keyword ('_upd', params, '') <> '')
    {
       _vec_o :=  deserialize (decode_base64 (get_keyword ('vec_o', params, '')));
      --update
      --dbg_obj_print ('update: ', _vec_o);
      --dbg_obj_print ('params: ', params);

      update HTTP_ACL set
	   	HA_LIST = alist,
      	  	HA_FLAG = _access,
      		HA_OBJECT = obj,
      	 	HA_CLIENT_IP = filt,
		HA_DEST_IP = dest,
		HA_RW = mod,
		HA_RATE = post_rate
      	  where HA_LIST = _vec_o[0] and HA_CLIENT_IP = _vec_o[3] and HA_ORDER = _vec_o[1] and HA_FLAG = _vec_o[4];
    }

  if (get_keyword ('DEL', params, '') <> '')
    {
       _vec :=  deserialize (decode_base64 (get_keyword ('DEL', params, '')));

       --delete
      --dbg_obj_print ('delete: ', _vec);
      ord := _vec[1];
      obj := _vec [2];
      filt := _vec[3];
      _access := _vec[4];
      mod := _vec [5];
      dest := _vec[6];
      delete from HTTP_ACL where HA_LIST = alist and HA_CLIENT_IP = filt and HA_ORDER = ord and HA_FLAG = _access;
    }

  if (get_keyword ('EDIT', params, '') <> '')
    {
       _vec_o := get_keyword ('EDIT', params, '');
       _vec :=  deserialize (decode_base64 (_vec_o));
      --dbg_obj_print ('edit: ', _vec);

      if (alist <> _vec[0])
	signal ('22023', 'Invalid ACL name supplied');

      ord := _vec[1];
      obj := _vec [2];
      filt := _vec[3];
      _access := _vec[4];
      mod := _vec [5];
      dest := _vec[6];
      post_rate := _vec[7];

    }

  if (get_keyword ('move', params, '') in ('top', 'up', 'bottom', 'down'))
    {
      declare action varchar;
      declare point, pos int;
      declare upd, upd1, fla, acc any;
      declare cr cursor for select HA_ORDER, HA_CLIENT_IP, HA_FLAG from HTTP_ACL where upper (HA_LIST) = alist and HA_ORDER <> ord and HA_CLIENT_IP <> filt;
      action := lower(get_keyword ('move', params));
       _vec :=  deserialize (decode_base64 (get_keyword ('vec', params, '')));

       --for
      --dbg_obj_print ('move: ', _vec);
      alist := _vec[0];
      ord := _vec[1];
      filt := _vec[3];
      _access := _vec[4];

      if (action = 'top')
	{
          point := 1;
	}
      else if (action = 'up')
	{
          point := coalesce ((select top 1 HA_ORDER from HTTP_ACL where upper (HA_LIST) = alist and HA_ORDER < ord order by HA_ORDER desc), -1);
          if (point < 0)
            goto endscroll;
	}
      else if (action = 'down')
	{
          point := coalesce ((select top 1 HA_ORDER from HTTP_ACL where upper (HA_LIST) = alist and HA_ORDER > ord order by HA_ORDER asc), -1);
          if (point < 0)
            goto endscroll;
	  point := point + 1;
	}
      else if (action = 'bottom')
	{
          point := coalesce ((select max (HA_ORDER) from HTTP_ACL where upper (HA_LIST) = alist) + 1, 1);
	}
      --dbg_obj_print ('point=', point, ' ord=', ord);
      upd := vector ();
      upd1 := vector ();
      whenever not found goto nf;
      open cr (prefetch 1);
      while (1)
	{
	  fetch cr into pos, fla, acc;
	  if (pos <> ord and pos >= point)
	    {
              upd := vector_concat (upd, vector (pos));
              upd1 := vector_concat (upd1, vector (vector (fla, acc)));
	    }
	}
nf:
      close cr;
      --dbg_obj_print (upd, upd1);
      {
	declare l int;
        l := length (upd) - 1;
	while (l >= 0)
	  {
	    --dbg_obj_print ('updating at pos=', upd[l], ' set=', upd[l] + 1);
	    update HTTP_ACL set HA_ORDER = upd[l] + 1 where HA_ORDER = upd[l] and upper (HA_LIST) = alist
		and HA_FLAG = upd1[l][1] and HA_CLIENT_IP = upd1[l][0];
	    if (row_count () = 0)
	      signal ('42000', 'Problem with row update');
            l := l - 1;
	  }
      }

      update HTTP_ACL set HA_ORDER = point where upper (HA_LIST) = alist and HA_ORDER = ord and HA_CLIENT_IP = filt and HA_FLAG = _access;
endscroll:;
    }

?>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="<?=adm_what_css()?>">
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="Access Control List Page, Virtuoso HTTP Server">
    <title>Virtuoso HTTP Server ACL</title>
  </head>
<?vsp adm_page_header(case alist when 'NEWS' then 'NNTP' else alist end ||' Access Control List Manager', ''); ?>

    <TABLE CLASS="genlist" BORDER="0" CELLPADDING="0">
    <FORM name="main_form" method="POST" action="<?=http_path ()?>">
     <input type="hidden" name="edit" value="<?=alist?>" />
     <input type="hidden" name="hide_main" value="<?=hide_main?>" />
     <TR><TD COLSPAN="8" CLASS="genhead">Access Control List for "<b><?=alist?></b>"</TD></TR>
     <TR><TD CLASS="AdmBorders" COLSPAN="8"><IMG SRC="../admin/images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>
	<TR>
	   <TD CLASS="genlistheadt">Filter</TD>
	   <TD CLASS="genlistheadt">Access</TD>
	   <TD CLASS="genlistheadt">Destination</TD>
	   <TD CLASS="genlistheadt">Object</TD>
	   <TD CLASS="genlistheadt">Mode</TD>
	   <TD CLASS="genlistheadt">Rate</TD>
	   <TD CLASS="genlistheadt" COLSPAN="1">Action</TD>
	   <TD CLASS="genlistheadt" COLSPAN="1">Move</TD>
	</TR>
<?vsp
	_have := 0;

	for (select * from DB.DBA.HTTP_ACL where upper(HA_LIST) = alist order by HA_ORDER)  do
	  {
	    declare _gr_name varchar;
	     _vec := encode_base64 (serialize (vector (HA_LIST, HA_ORDER, HA_OBJECT, HA_CLIENT_IP, HA_FLAG, HA_RW, HA_DEST_IP, HA_RATE)));

	    if (alist = 'NEWS')
	      select NG_NAME into _gr_name from DB.DBA.NEWS_GROUPS where NG_GROUP = HA_OBJECT;

	     _have := _have + 1;

	     ?><TR><TD class="statdata"><?=HA_CLIENT_IP?></TD><?vsp
             ?><TD class="statdata"><?vsp

	     if (HA_FLAG)
	       {
	         ?><b><font color=ff0020>deny</font></b><?vsp
	       }
	     else
	       {
	         ?><b><font color="green">allow</font></b><?vsp
	       }

	     ?></TD><?vsp
 	     ?><TD class="statdata"><?=case when alist = 'PROXY' then HA_DEST_IP else 'N/A' end?></TD>
 	    <TD CLASS="statdata"><?=case when alist = 'NEWS' then _gr_name else 'N/A' end?></TD>
            <TD CLASS="statdata"><?=case when alist = 'NEWS' then (case HA_RW when 1 then 'post' else 'read' end) else 'N/A' end?></TD>
            <TD CLASS="statdata"><?=case when alist = 'NEWS' then (cast (HA_RATE as varchar)) else 'N/A' end?></TD>
          <TD CLASS="statdata"><a CLASS="tablelistaction" href="adm_http_acl.vsp?DEL=<?/_vec?>&edit=<?=alist?>">remove</a>
          <a CLASS="tablelistaction" href="adm_http_acl.vsp?EDIT=<?/_vec?>&edit=<?=alist?>">edit</a></TD>
	  <TD CLASS="statdata">
          <a CLASS="tablelistaction" href="adm_http_acl.vsp?move=top&vec=<?/_vec?>&edit=<?=alist?>">top</a>
          <a CLASS="tablelistaction" href="adm_http_acl.vsp?move=up&vec=<?/_vec?>&edit=<?=alist?>">up</a>
          <a CLASS="tablelistaction" href="adm_http_acl.vsp?move=down&vec=<?/_vec?>&edit=<?=alist?>">down</a>
          <a CLASS="tablelistaction" href="adm_http_acl.vsp?move=bottom&vec=<?/_vec?>&edit=<?=alist?>">bottom</a></TD>
 	</TR>
<?vsp
	  }

	if (_have = 0)
    	   http ('<TR><TD  CLASS="gendata" COLSPAN="8"><sTRong>Empty access list</sTRong><br /> click \'Add\' to new restriction</TD></TR>');

	if (get_keyword ('_add', params, '') <> '' or
	    get_keyword ('EDIT', params, '') <> '')
	  {
?>
	<TR><TD COLSPAN="6">
	<input type="hidden" name="add_f" value="1" />
	<TABLE BORDER="0" WIDTH="100%">
	   <TR><TD COLSPAN="2"><IMG SRC="../admin/images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>
           <TR><TD CLASS="genlisthead">Filter</TD><TD>
	       <INPUT type="text" name="filt" value="<?=filt?>" size="15">
	     </TD></TR>
	     <TR><TD CLASS="genlisthead">Access</TD>
	     <TD>
	       <SELECT NAME="access">
	         <OPTION VALUE="_d" <?vsp if (_access) http ('SELECTED'); ?>>Deny</OPTION>
	         <OPTION VALUE="_a" <?vsp if (not _access) http ('SELECTED'); ?>>Allow</OPTION>
	       </SELECT>
	     </TD></TR>
	   <?vsp
	     if (alist not in ('HTTP', 'NEWS'))
	       {
	   ?>
           <TR><TD CLASS="genlisthead">Destination</TD><TD>
	       <INPUT type="text" name="dest" value="<?=dest?>" size="15">
	     </TD></TR>
	    <?vsp
	       }

	     if (alist not in ('HTTP', 'PROXY', 'NEWS'))
	       {
	   ?>
           <TR><TD CLASS="genlisthead">Object</TD><TD>
	       <INPUT type="text" name="obj" value="<?=obj?>" size="15">
	     </TD></TR>
           <TR><TD CLASS="genlisthead">Mode</TD><TD>
	       <INPUT type="text" name="mod" value="<?=mod?>" size="15">
	     </TD></TR>
	    <?vsp   }
	     if (alist in ('NEWS'))
	       {
	    ?>
           <TR><TD CLASS="genlisthead">Group</TD><TD>
	       <SELECT name="obj" >
<?vsp
		for (select NG_NAME, NG_GROUP from NEWS_GROUPS) do
		  {
		    if (obj = NG_GROUP)
		      http (sprintf ('<OPTION VALUE="%i" SELECTED>%s</OPTION>', NG_GROUP, NG_NAME));
		    else
		      http (sprintf ('<OPTION VALUE="%i">%s</OPTION>', NG_GROUP, NG_NAME));
		  }
?>
	       </SELECT>
	     </TD></TR>
           <TR><TD CLASS="genlisthead">Mode</TD><TD>
	       <SELECT NAME="mod">
	         <OPTION VALUE="1" <?vsp if (mod) http ('SELECTED'); ?>>Post</OPTION>
	         <OPTION VALUE="0" <?vsp if (not mod) http ('SELECTED'); ?>>Read</OPTION>
	       </SELECT>
	     </TD></TR>
           <TR><TD CLASS="genlisthead">Post Rate</TD><TD>
	       <INPUT type="text" name="post_rate" value="<?=post_rate?>" size="15">
	     </TD></TR>
	    <?vsp   } ?>
       </TABLE>
<?vsp
	  }
?>
	<TR><TD ALIGN="right" COLSPAN="8">

	<?vsp if (not hide_main) { ?>
	 <input type=submit name="cncl" value="Cancel">
<?vsp
	}
	 if (get_keyword ('EDIT', params, '') <> '')
	   {
	     http ('<INPUT TYPE="submit" NAME="_upd" VALUE="Update">');
	     http (sprintf ('<INPUT TYPE="hidden" NAME="vec_o" VALUE="%s">', _vec_o));
	   }
	 else
	   http ('<INPUT TYPE="submit" NAME="_add" VALUE="Add">');
?>
	</TD></TR>
    </TABLE>

<?vsp adm_page_footer(); ?>
</html>

