<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2019 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
--
 adm_pre_page(lines);

declare _u_id, _tt_id integer;
declare _u_name, _comment, _query, err, stat, _email, _owneml, _sid_id, _xp, _qt, _xp_enabled varchar;
set isolation='uncommitted';
stat := null;
err := '';
_u_id := DB.DBA.adm_dav_check_auth (lines, 1);
if ( _u_id < 1)
  {
    http_request_status ('HTTP/1.1 401 Unauthorized');
    http ( concat ('<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">',
	  '<HTML><HEAD>',
	  '<TITLE>401 Unauthorized</TITLE>',
	  '</HEAD><BODY><H1>Unauthorized</H1>',
	  'Access to page is forbidden.</BODY></HTML>'));
    return (0);
  }

_sid_id := adm_get_sesid (params);

if ('' <> get_keyword ('del', params, '')) goto conf_page;

select U_E_MAIL into _owneml from WS.WS.SYS_DAV_USER where U_ID = _u_id;
_email := get_keyword ('email', params);
if (_email is null)
  _email := _owneml;

if (exists (select 1 from DB.DBA.SYS_PROCEDURES where P_NAME = 'WS.WS.TT_XPATH_QUERY_SYS_DAV_RES'))
  _xp_enabled := 1;
else
  _xp_enabled := 0;

_comment := ''; _query := ''; _qt := 'TEXT';
_tt_id := atoi (get_keyword ('tt_id', params, '0'));
if ('' <> get_keyword ('edit', params, ''))
  {
    if (_tt_id > 0)
      {
	select TT_COMMENT, TT_QUERY, TT_XPATH into _comment, _query, _xp from
	    WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY where TT_ID = _tt_id;
        _email := coalesce ((select TTU_NOTIFY from WS.WS.SYS_DAV_RES_RES_CONTENT_USER where
		      TTU_T_ID = _tt_id and TTU_U_ID = _u_id), '');
      }
    else
      {
        err := 'Query ID is not valid';
	goto erret;
      }
    if (_xp is not null)
      {
        _query := _xp;
        _qt := 'XPATH';
      }
    else
      _qt := 'TEXT';
  }
else if ('' <> get_keyword ('DEL2', params, '') and get_keyword ('proceed', params, '') = 'Delete')
  {
    if (_tt_id > 0)
      {
        delete from WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY where TT_ID = _tt_id;
	delete from WS.WS.SYS_DAV_RES_RES_CONTENT_USER where TTU_T_ID = _tt_id;
	delete from WS.WS.SYS_DAV_RES_RES_CONTENT_HIT where TTH_T_ID = _tt_id;
      }
    else
      {
        err := 'Query ID is not valid';
	goto erret;
      }
  }
else if ('' <> get_keyword ('add', params, ''))
  {
    _query := get_keyword ('query', params, '');
    _comment := get_keyword ('comment', params, '');
    _qt := get_keyword ('qt', params, 'TEXT');
    if (_query = '')
      {
        err := 'Query text cannot be empty string';
	goto erret;
      }

    stat := '00000';
    if (_qt <> 'XPATH')
      exec ('vt_parse (?)', stat, err, vector (_query));
    else
      exec ('xpath_text (?)', stat, err, vector (_query));
    if (stat <> '00000')
      goto erret;
    else
      stat := null;
    if (_qt <> 'XPATH')
      WS.WS."TT_QUERY_SYS_DAV_RES" (_query, _u_id, _comment, _email);
    else
      WS.WS."TT_XPATH_QUERY_SYS_DAV_RES" (_query, _u_id, _comment, _email);
    if (get_keyword ('rebuild', params, '') = 'yes')
      {
	declare _qt_id integer;
        _qt_id := coalesce ((select top 1 TTU_T_ID from WS.WS.SYS_DAV_RES_RES_CONTENT_USER where TTU_U_ID = _u_id order by TTU_T_ID desc), 1);
        if (_qt <> 'XPATH')
	  {
	    for select RES_ID from WS.WS.SYS_DAV_RES where contains (RES_CONTENT, _query) do
	      {
		insert soft WS.WS.SYS_DAV_RES_RES_CONTENT_HIT (TTH_U_ID, TTH_T_ID, TTH_D_ID, TTH_NOTIFY)
		    values (_u_id, _qt_id, RES_ID, _email);
	      }
	  }
	else
	  {
	    for select RES_ID from WS.WS.SYS_DAV_RES where xpath_contains (RES_CONTENT, _query) do
	      {
		insert soft WS.WS.SYS_DAV_RES_RES_CONTENT_HIT (TTH_U_ID, TTH_T_ID, TTH_D_ID, TTH_NOTIFY)
		    values (_u_id, _qt_id, RES_ID, _email);
	      }
	  }
      }
  }
else if ('' <> get_keyword ('upd', params, ''))
  {
    _query := get_keyword ('query', params, '');
    _comment := get_keyword ('comment', params, '');
    if (_query = '')
      {
        err := 'Query text cannot be empty string';
	goto erret;
      }
    stat := '00000';
    _qt := get_keyword ('qt', params, 'TEXT');
    if (_qt <> 'XPATH')
      exec ('vt_parse (?)', stat, err, vector (_query));
    else
      exec ('xpath_text (?)', stat, err, vector (_query));
    if (stat <> '00000')
      goto erret;
    else
      stat := null;
    if (_tt_id > 0)
      {
	declare _old_query varchar;
	if (_qt <> 'XPATH')
          _old_query := coalesce ((select distinct TT_QUERY from WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY
			  where TT_ID = _tt_id) , '');
	else
          _old_query := coalesce ((select distinct TT_XPATH from WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY
			  where TT_ID = _tt_id) , '');
        if (_old_query <> _query)
	  {
	    delete from WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY where TT_ID = _tt_id;
	    delete from WS.WS.SYS_DAV_RES_RES_CONTENT_USER where TTU_T_ID = _tt_id;
	    delete from WS.WS.SYS_DAV_RES_RES_CONTENT_HIT where TTH_T_ID = _tt_id;
	    if (_qt <> 'XPATH')
	      WS.WS."TT_QUERY_SYS_DAV_RES" (_query, _u_id, _comment, _email);
	    else
              WS.WS."TT_XPATH_QUERY_SYS_DAV_RES" (_query, _u_id, _comment, _email);
	  }
	else
	  {
	    update WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY set TT_COMMENT = _comment where TT_ID = _tt_id;
	    update WS.WS.SYS_DAV_RES_RES_CONTENT_USER
		set TTU_NOTIFY = _email where TTU_T_ID = _tt_id and TTU_U_ID = _u_id;
	  }
      }
    else
      {
        err := 'Query ID is not valid';
	goto erret;
      }
  }

  if (_email = 'somebody@example.domain')
    _email := '';

erret:
?>


<SCRIPT LANGUAGE="JavaScript">
<!--
function queryTest()
  {
    document.query_test_form.stmt.value = document.query_form.query.value;
    if (document.query_form.qt.options[document.query_form.qt.selectedIndex].value == 'XPATH')
      document.query_test_form.qtype.value = 'XPATH';
    document.query_test_form.submit();
  }
// -->
</SCRIPT>



<html>
<head>
    <link rel="stylesheet" type="text/css" href="<?=adm_what_css()?>">
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="Text triggers">
<title>WebDAV text triggers</title>
</head>
<?vsp adm_page_header('Query Definition', 'freetexttriggers');
  if (err <> '')
    {
?>
<TABLE CLASS="genlist" BORDER="0" CELLPADDING="0">
<TR><TD CLASS="errorhead" COLSPAN="2">ERROR</TD></TR>
<?vsp if (isstring (stat) and stat is not null and stat <> '00000') { ?>
<TR><TD CLASS="genlisthead">SQL state</TD><TD CLASS="gendata"><?=stat?></TD></TR>
<?vsp } ?>
<TR><TD CLASS="genlisthead">Message</TD><TD CLASS="gendata"><?=err?></TD></TR>
</TABLE>
<?vsp
    }
?>
<?include ../adm_js_check.vsp ?>
<form method=POST action="ftt_query.vsp" name="query_form">
<input type="hidden" name="tt_id" value="<?=_tt_id?>">
<input type="hidden" name="sid" value="<?=_sid_id?>">
<TABLE CLASS="genlist" BORDER="0" CELLPADDING="0">
<TR><TD CLASS="genhead" COLSPAN="3">Query Definition</TD></TR>
<TR><TD CLASS="AdmBorders" COLSPAN="3"><IMG SRC="../images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>

<tr><td CLASS="genlisthead">Comment</td><td CLASS="geninput"><input type="text" name="comment" size="50" value="<?=_comment?>"> </td><td>&nbsp;</td></tr>
<?vsp if (_xp_enabled = 1) { ?>
<tr><td CLASS="genlisthead">Query type</td><td CLASS="geninput"><select name=qt><option value="TEXT" <?=select_if (_qt, 'TEXT')?>>TEXT</option><option value="XPATH" <?=select_if (_qt, 'XPATH')?>>XPATH</option></select></td><td>&nbsp;</td></tr>

<?vsp } else { ?>
  <input type=hidden name=qt value="TEXT">
<?vsp } ?>
<tr><td CLASS="genlisthead">Query text</td><td CLASS="geninput"><input type="text" name="query" size="50" value="<?=_query?>"> </td><td>&nbsp;</td></tr>
<tr><td CLASS="genlisthead">Notify by e-mail</td><td CLASS="geninput"><input type="text" name="email" size="50" value="<?=_email?>"> </td><td>&nbsp;</td></tr>
<tr><td CLASS="genlisthead">Initialize hits</td>
<!--<td CLASS="geninput"><input type="checkbox" name="init_hits" size="60"> </td>  -->
  <td CLASS="geninput"><input type="radio" value="yes" name="rebuild">Yes
      <input type="radio" value="no" name="rebuild">No</td>
  <td>&nbsp;</td></tr>
<tr>
	<td align="center" colspan="2">
<?vsp if ('' <> get_keyword ('edit', params, '')) { ?>
		<input type="submit" name="upd" value="Update">
<?vsp } else { ?>
		<input type="submit" name="add" value="Add">
<?vsp } ?>
		<input type="submit" name="clr" value="Clear">
		<input type="button" name="tst" value="Test" onClick="queryTest();">
	</td>
</tr>

</table>
</form>

<form action="admin_dav_document_search.vsp" method=POST name="query_test_form">
<input type=hidden name="stmt" value="">
<input type=hidden name=qtype value="freetext">
<input type=hidden name="sid" value="<?=_sid_id?>">
<input type=hidden name="maxres" value="500">
<input type=hidden name="xecute" value="Execute query">
</form>

<table CLASS="genlist" BORDER="0" CELLPADDING="0">
<tr><td CLASS="stathead" colspan="3">Current Triggers</td></tr>
<tr>
  <th CLASS="genlistheadt">Comment</th>
  <th CLASS="genlistheadt">Query</th>
  <th CLASS="genlistheadt" colspan="2">Actions</th>
</tr>
<?vsp declare _is integer;
      declare _qry_txt varchar;
      _is := 0;
  for select distinct TT_XPATH, TT_QUERY, TT_COMMENT, TT_ID from WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY,
                                           WS.WS.SYS_DAV_RES_RES_CONTENT_USER
				      where TTU_U_ID = _u_id and TTU_T_ID = TT_ID
				      order by TT_ID do {  _is := 1;
				      if (TT_XPATH is null)
				        _qry_txt := TT_QUERY;
			              else
			                _qry_txt := TT_XPATH;
?>
  <tr>
      <td CLASS="gendata"><?=TT_COMMENT?></td>
      <td CLASS="gendata"><a href="ftt_query.vsp?tt_id=<?=TT_ID?>&edit=1"><?=_qry_txt?></a></td>
      <td CLASS="gendata"><a class="tablelistaction" href="ftt_query.vsp?tt_id=<?=TT_ID?>&edit=1">Edit</a></td>
      <td CLASS="gendata"><a class="tablelistaction" href="ftt_query.vsp?tt_id=<?=TT_ID?>&del=1">Remove</a></td>
  </tr>
<?vsp  } if (_is = 0) http ('<td colspan=3 CLASS="gendata" align=center>*** No triggers defined ***</td>'); ?>
</table>
<?vsp adm_page_footer(); ?>
</html>

<?vsp
return;
conf_page:;

  declare _del, _name varchar;
  _name := '';

  _del := get_keyword ('tt_id', params, '');
  select TT_COMMENT into _name from WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY where TT_ID = atoi (_del);
  if (trim (_name) ='')
    select TT_QUERY into _name from WS.WS.SYS_DAV_RES_RES_CONTENT_QUERY where TT_ID = atoi (_del);

?>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="<?=adm_what_css()?>">
    <title>Confirmation</title>
    <meta name="AUTHOR" content="OpenLink Software">
    <meta name="DESCRIPTION" content="Deleting MIME Type">
  </head>
  <BODY>
<?vsp adm_page_header(concat ('Deleting Text Trigger ', _name), NULL); ?>
    <form method="POST" action="ftt_query.vsp" name="delete_trig">
    <table border="0" width="60%">
      <tr><td class="genlistheadt">You are about to delete the Text Trigger <?= _name ?>. This deletion cannot be undone. Do you wish to continue?</td></tr>
      <input type="hidden" name="DEL2" value="<?= _del ?>">
      <input type="hidden" name="tt_id" value="<?= _del ?>">
      <tr>
      <td align="center">
         <input type="submit" name="proceed" value="Delete">&nbsp;
	 <input type="submit" name="no_proceed" value="Cancel"></td>
      </tr>
    </form>
    </table>
</TD></TR>
<TR><TD CLASS="ctrlmain" COLSPAN="2"><IMG SRC="images/1x1.gif" WIDTH="1" HEIGHT="15" ALT=""></TD></TR>
</TABLE>
<?include ../admin_footer.vsp ?>
  </body>
</html>

