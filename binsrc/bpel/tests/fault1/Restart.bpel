<?xml version="1.0"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<process xmlns:tns="http://samples.cxdn.com" xmlns:bpelv="http://www.openlinksw.com/virtuoso/bpel" xmlns:services="http://services.cxdn.com" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" name="Restart" targetNamespace="http://samples.cxdn.com" suppressJoinFailure="yes">
<!--
    This process represents restart ability after crashes
    -->
  <partnerLinks>
    <partnerLink name="client" partnerLinkType="tns:Rest" myRole="RestProvider" partnerRole="RestRequester"/>
    <partnerLink name="IncrementService" partnerLinkType="services:IncrementService" partnerRole="IncrementServiceProvider"/>
  </partnerLinks>
  <variables>
    <variable name="input" messageType="tns:RestRequestMessage"/>
    <variable name="output" messageType="tns:RestResultMessage"/>
    <variable name="request" messageType="services:processRequest"/>
    <variable name="response" messageType="services:processResponse"/>
  </variables>
  <sequence>
<!-- receive input from requestor -->
    <receive name="receiveInput" partnerLink="client" portType="tns:Rest" operation="initiate" variable="input" createInstance="yes"/>
    <assign>
      <copy>
        <from expression="0"/>
	<to variable="request" part="value" query="/value"/>
      </copy>
    </assign>
<!-- repeat the async invoke, until get a initial value -->
    <while condition="getVariableData('input', 'payload', '/value') &gt;= getVariableData('request', 'value')">
      <sequence>
<!--  initiate the remote process -->
        <invoke name="invoke" partnerLink="IncrementService" portType="services:IncrementService" operation="process" inputVariable="request" outputVariable="response"/>
        <assign>
          <copy>
	      <from variable="response" part="result" query="/result"/>
	      <to variable="request" part="value" query="/value"/>
          </copy>
        </assign>
	<switch>
	  <case condition="getVariableData ('request', 'value') = 3">
	    <sequence>
	      <bpelv:exec binding="SQL"><![CDATA[
	        if (not exists (select * from DB.DBA.restart_test))
		  {
		    insert into DB.DBA.restart_test values ('FAILED:');
		    commit work;
		    raw_exit();
		  }
		else
		  {
		    update DB.DBA.restart_test set val = 'PASSED:';
		  }
	      ]]>
	      </bpelv:exec>
	    </sequence>
	  </case>
	</switch>
      </sequence>     
    </while>
    <assign>
      <copy>
	  <from variable="response" part="result" query="/result"/>
          <to variable="output" part="payload" query="/result"/>
      </copy>
    </assign>
<!-- respond output to requestor -->
    <invoke name="replyOutput" partnerLink="client" portType="tns:RestCallback" operation="onResult" inputVariable="output"/>
  </sequence>
</process>
