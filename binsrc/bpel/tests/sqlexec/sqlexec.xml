<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<refentry id="sqlexec">
  <refmeta>
    <refentrytitle>BPEL</refentrytitle>
    <refmiscinfo>tutorial</refmiscinfo>
  </refmeta>
  <refnamediv>
      <refname>Inventory Service</refname>
      <refpurpose>Using SQL binding and SQLX to generate requests process</refpurpose>
  </refnamediv>

  <refsect1 id="sqlexec-a">
      <title>Example</title>
      <para>
	  The demo is a service which is invoked on time
	  basis in order to update an inventory. This
	  demo using the Northwind demo Database as an
	  inventory.
      </para>
      <para>
	  The client generates a list of items that
	  are under 10 units using SQLX. This XML
	  document is sent to the inventory process
	  and will make new process instance.
      </para>
      <programlisting><![CDATA[
create procedure DB..update_inventory ()
{
  declare req any;
  whenever not found goto nf;
  -- the following statement generates an XML document using SQLX
  --
  -- the result would like :
  -- <Items xmlns="http://temp.org"><Product><ProductID>5</ProductID><Quantity>10</Quantity></Product>...</Items>
  --
  select xmlelement(Items,
  		xmlattributes ('http://temp.org' as xmlns),
		xmlagg (
		  xmlelement (item,
		    xmlelement (ProductID, ProductID),
		    xmlelement (Quantity, UnitsInStock + 10)
		    ))) into req
      from Demo..Products where UnitsInStock < 10 and Discontinued = 0;

  -- call the process with generated XML document as a input parameter
  soap_client (	url=>'http://host:port/InventorySvc',
      		operation=>'initiate',
		parameters=>vector ('par0', req),
		soap_action=>'initiate',
		style=>1
      );

  nf:
  return;
}
	  ]]></programlisting>
      <para>
	  The process will loop over all items in input
	  and for each will ask for quote.
	  Also the quote service will return a list of
	  wholesalers and their prices. Then the process will
	  choose the best price and will make an order using specific
	  partner URL (this is simulated by appending a
	  URL parameter to the service URL).
	  When an order confirmation is received, the process
	  will update the inventory.
      </para>
      <para>
	  At the end of process it will sent an e-mail
	  to the pre-configured operator address.
      </para>
      <para>
	  The following code is a pseudo-code which describes the process flow:
      </para>
      <programlisting><![CDATA[
{
  declare i, l int;
  declare j, k, oid int;
  declare in, out, ord any;

  in = receive ();

  l = length (in);
  for (i = 0; i < l; i++)
    {
      declare q, best any;
      q = getQuote (in[i]);
      k = length (q);
      for (j := 0; j < k; j++)
        {
          if (q.price < best.price)
            best = q;
        }
      oid = newOrder (best.url, in[i].item, in[i].quantity, best.price);
      update Demo.demo.Products set UnitsOnStock = UnitsOnStock + in[i].quantity where
           ProductID = in[i].ProductID;
    }
   sendMail ('Inventory have been updated');
}
	  ]]></programlisting>
      <para>
	  To run the example follow the steps bellow:
      </para>
<itemizedlist mark="bullet">
    <listitem>Load the initial setup file: 'store.sql'</listitem>
    <listitem>Login into the BPEL UI via http://host:port/BPELGUI.</listitem>
    <listitem>From the 'Home' tab page go to section 'Tasks' and click 'Upload Process' link.
              Another way is to choose 'Processes' tab and go to the 'Process Upload' sub-tab.
    </listitem>
    <listitem>In the "Load Deployment Descriptor URI" field type 'http://host:port/BPELDemo/sqlexec/bpel.xml'.</listitem>
    <listitem>Choose the 'Import Process' button.</listitem>
    <listitem>Choose the 'Compile process' button.</listitem>
    <listitem>If compilation succeeds, will go to the 'Processes' page where the process will be in the given processes list.</listitem>
    <listitem>Run via ISQL the DB..update_inventory () procedure.</listitem>
    <listitem>Also the update_inventory procedure can be used as a scheduled task (see 'Virtuoso scheduler' section in the documentation for details).
    </listitem>
</itemizedlist>
</refsect1>
</refentry>
