<!--
 -  
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -  
 -  Copyright (C) 1998-2019 OpenLink Software
 -  
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -  
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -  
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -  
 -  
-->
<process name="cmpflow" 
    targetNamespace="urn:echo:echoService"
    xmlns:tns="urn:echo:echoService"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:bpelv="http://www.openlinksw.com/virtuoso/bpel" 
    xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/">

    <partnerLinks>
	<partnerLink name="caller" partnerLinkType="tns:echoSLT"/>
        <partnerLink name="svc" partnerLinkType="svc:TimeSvc" 
		myRole="TimeSvcRequester"
		partnerRole="TimeSvcProvider"
		/>
    </partnerLinks>

    <variables>
	<variable name="req"   messageType="tns:StringMessageType"/>
	<variable name="res"   messageType="tns:StringMessageType"/>
	<variable name="t1inp" messageType="svc:tWaitRequest"/>
	<variable name="t1out" messageType="svc:tWaitResponse"/>
	<variable name="t2inp" messageType="svc:tWaitRequest"/>
	<variable name="t2out" messageType="svc:tWaitResponse"/>
	<variable name="cinp"  messageType="svc:tCancelWaitRequest"/>
	<variable name="cout"  messageType="svc:tCancelWaitResponse"/>
    </variables>

    <sequence>
	<receive partnerLink="caller" portType="tns:echoPT" operation="echo" variable="req"
	    createInstance="yes" name="EchoReceive"/>
	<assign>
		<copy>
		   <from expression="0"/>
		   <to variable="t1inp" part="Interval" query="/Interval"/>
		</copy>
		<copy>
		   <from expression="3"/>
		   <to variable="t2inp" part="Interval" query="/Interval"/>
		</copy>
		<copy>
		   <from expression="0"/>
		   <to variable="cinp" part="CancelInterval" query="/CancelInterval"/>
		</copy>
	</assign>
	<flow>
	  <scope>
	     <faultHandlers>	
	       <catchAll>
		    <bpelv:exec binding="SQL">
		        insert into cmpflow_test (dt) values ('catch');
			dbg_obj_print ('catched');
		    </bpelv:exec>
		    <compensate/>
	       </catchAll>
	     </faultHandlers>		
	     <scope>	
	       <compensationHandler>
		    <bpelv:exec binding="SQL">
			dbg_obj_print ('compensating');
			insert into cmpflow_test (dt) values ('comp');
		    </bpelv:exec>
		    <invoke partnerLink="svc" portType="svc:TimeSvcPortType" operation="tCancelWait" inputVariable="cinp" />
		    <receive partnerLink="svc" portType="svc:onResultPortType" operation="onCancelWait" variable="cout"/>
		    <bpelv:exec binding="SQL">
			dbg_obj_print ('finished compensating');
			insert into cmpflow_test (dt) values ('comp end');
		    </bpelv:exec>
	       </compensationHandler>
	       <empty/>	  
	     </scope> 	
	     <invoke partnerLink="svc" portType="svc:TimeSvcPortType" operation="tWait" inputVariable="t1inp" />
	     <receive partnerLink="svc" portType="svc:onResultPortType" operation="onWait" variable="t1out"/>
	  </scope>
	  <scope>
	     <bpelv:exec binding="SQL">
	     dbg_obj_print ('second branch started');
	     </bpelv:exec>
	     <invoke partnerLink="svc" portType="svc:TimeSvcPortType" operation="tWait" inputVariable="t2inp" />
	     <receive partnerLink="svc" portType="svc:onResultPortType" operation="onWait" variable="t2out"/>
	     <bpelv:exec binding="SQL">
	     dbg_obj_print ('finished second branch');
	     insert into cmpflow_test (dt) values ('flow end');
	     </bpelv:exec>
	  </scope>
	</flow>

	<reply partnerLink="caller" portType="tns:echoPT" operation="echo" variable="req" name="EchoReply"/>
    </sequence>

</process>
