#  
#  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
#  project.
#  
#  Copyright (C) 1998-2019 OpenLink Software
#  
#  This project is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; only version 2 of the License, dated June 1991.
#  
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#  

@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix virtrdf: <http://www.openlinksw.com/schemas/virtrdf#> .
@prefix rdfdf: <http://www.openlinksw.com/virtrdf-data-formats#> .
@prefix bif: <bif:> .
@prefix sql: <sql:> .

virtrdf:loadAs virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:loadAs virtrdf:item virtrdf:jsoTriple .
virtrdf:isSubclassOf virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:version virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:isSpecialPredicate virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:isGcResistantType virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:isEndpointOfService virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:dialect virtrdf:loadAs virtrdf:jsoTriple .
virtrdf:dialect-exceptions virtrdf:loadAs virtrdf:jsoTriple .

bif:contains virtrdf:isSpecialPredicate bif:contains .
bif:xcontains virtrdf:isSpecialPredicate bif:xcontains .
bif:xpath_contains virtrdf:isSpecialPredicate bif:xpath_contains .
bif:xquery_contains virtrdf:isSpecialPredicate bif:xquery_contains .
bif:spatial_contains virtrdf:isSpecialPredicate bif:spatial_contains .

virtrdf:QuadMapFormat virtrdf:isGcResistantType "2" .
virtrdf:QuadStorage virtrdf:isGcResistantType "2" .

# Don't forget to change version, both here and in DB.DBA.SPARQL_RELOAD_QM_GRAPH, to force reload.
<http://www.openlinksw.com/sparql/virtrdf-data-formats.ttl>
  virtrdf:version '2017-03-22 0001v7' ;
  virtrdf:item
    rdfdf:default-iid ,				rdfdf:default-iid-nullable ,
    rdfdf:default-iid-nonblank ,		rdfdf:default-iid-nonblank-nullable ,
    rdfdf:default ,				rdfdf:default-nullable ,
    rdfdf:sql-varchar ,				rdfdf:sql-varchar-nullable ,
    rdfdf:sql-varchar-dt ,			rdfdf:sql-varchar-dt-nullable ,
    rdfdf:sql-varchar-lang ,			rdfdf:sql-varchar-lang-nullable ,
    rdfdf:sql-varchar-fixedlang-x-any ,		rdfdf:sql-varchar-fixedlang-x-any-nullable ,
    rdfdf:sql-varchar-uri ,			rdfdf:sql-varchar-uri-nullable ,
    rdfdf:sql-varchar-literal ,			rdfdf:sql-varchar-literal-nullable ,
    rdfdf:sql-longvarchar ,			rdfdf:sql-longvarchar-nullable ,
    rdfdf:sql-longvarchar-dt ,			rdfdf:sql-longvarchar-dt-nullable ,
    rdfdf:sql-longvarchar-lang ,		rdfdf:sql-longvarchar-lang-nullable ,
    rdfdf:sql-longvarchar-fixedlang-x-any ,	rdfdf:sql-longvarchar-fixedlang-x-any-nullable ,
    rdfdf:sql-nvarchar ,			rdfdf:sql-nvarchar-nullable ,
    rdfdf:sql-nvarchar-dt ,			rdfdf:sql-nvarchar-dt-nullable ,
    rdfdf:sql-nvarchar-lang ,			rdfdf:sql-nvarchar-lang-nullable ,
    rdfdf:sql-nvarchar-fixedlang-x-any ,		rdfdf:sql-nvarchar-fixedlang-x-any-nullable ,
    rdfdf:sql-nvarchar-uri ,			rdfdf:sql-nvarchar-uri-nullable ,
    rdfdf:sql-nvarchar-literal ,			rdfdf:sql-nvarchar-literal-nullable ,
    rdfdf:sql-longnvarchar ,			rdfdf:sql-longnvarchar-nullable ,
    rdfdf:sql-longnvarchar-dt ,			rdfdf:sql-longnvarchar-dt-nullable ,
    rdfdf:sql-longnvarchar-lang ,		rdfdf:sql-longnvarchar-lang-nullable ,
    rdfdf:sql-longnvarchar-fixedlang-x-any ,	rdfdf:sql-longnvarchar-fixedlang-x-any-nullable ,
    rdfdf:sql-longvarbinary ,			rdfdf:sql-longvarbinary-nullable ,
    rdfdf:sql-integer ,				rdfdf:sql-integer-nullable ,
    rdfdf:sql-integer-uri ,			rdfdf:sql-integer-uri-nullable ,
    rdfdf:sql-integer-literal ,			rdfdf:sql-integer-literal-nullable ,
    rdfdf:sql-numeric ,				rdfdf:sql-numeric-nullable ,
    rdfdf:sql-numeric-uri ,			rdfdf:sql-numeric-uri-nullable ,
    rdfdf:sql-numeric-literal ,			rdfdf:sql-numeric-literal-nullable ,
    rdfdf:sql-doubleprecision ,			rdfdf:sql-doubleprecision-nullable ,
    rdfdf:sql-doubleprecision-literal ,		rdfdf:sql-doubleprecision-literal-nullable ,
    rdfdf:sql-date ,				rdfdf:sql-date-nullable ,
    rdfdf:sql-date-literal ,			rdfdf:sql-date-literal-nullable ,
    rdfdf:sql-time ,				rdfdf:sql-time-nullable ,
    rdfdf:sql-time-literal ,			rdfdf:sql-time-literal-nullable ,
    rdfdf:sql-datetime ,			rdfdf:sql-datetime-nullable ,
    rdfdf:sql-datetime-literal ,			rdfdf:sql-datetime-literal-nullable ,
    rdfdf:multipart-uri ,			rdfdf:multipart-uri-nullable ,
    rdfdf:multipart-literal ,			rdfdf:multipart-literal-nullable ,
    rdfdf:multipart-uri-fn-nullable ,
    rdfdf:multipart-literal-fn-nullable ,
    rdfdf:zeropart-uri ,			rdfdf:zeropart-uri-nullable ,
    rdfdf:zeropart-literal ,			rdfdf:zeropart-literal-nullable ,
    rdfdf:zeropart-uri-fn-nullable ,
    rdfdf:zeropart-literal-fn-nullable ,
    rdfdf:singlepart-uri-fn-nullable ,
    rdfdf:singlepart-literal-fn-nullable ,
    rdfdf:sql-varchar-uri-fn ,			rdfdf:sql-varchar-uri-fn-nullable ,
    rdfdf:sql-nvarchar-uri-fn ,			rdfdf:sql-nvarchar-uri-fn-nullable ,
    rdfdf:sql-integer-uri-fn ,			rdfdf:sql-integer-uri-fn-nullable ,
    rdfdf:sql-numeric-uri-fn ,			rdfdf:sql-numeric-uri-fn-nullable ,
    rdfdf:sql-doubleprecision-uri-fn ,		rdfdf:sql-doubleprecision-uri-fn-nullable ,
    rdfdf:sql-date-uri-fn ,			rdfdf:sql-date-uri-fn-nullable ,
    rdfdf:sql-time-uri-fn ,			rdfdf:sql-time-uri-fn-nullable ,
    rdfdf:sql-datetime-uri-fn ,			rdfdf:sql-datetime-uri-fn-nullable ,
    rdfdf:sql-varchar-literal-fn ,		rdfdf:sql-varchar-literal-fn-nullable ,
    rdfdf:sql-nvarchar-literal-fn ,		rdfdf:sql-nvarchar-literal-fn-nullable ,
    rdfdf:sql-integer-literal-fn ,		rdfdf:sql-integer-literal-fn-nullable ,
    rdfdf:sql-numeric-literal-fn ,		rdfdf:sql-numeric-literal-fn-nullable ,
    rdfdf:sql-doubleprecision-literal-fn ,	rdfdf:sql-doubleprecision-literal-fn-nullable ,
    rdfdf:sql-date-literal-fn ,			rdfdf:sql-date-literal-fn-nullable ,
    rdfdf:sql-time-literal-fn ,			rdfdf:sql-time-literal-fn-nullable ,
    rdfdf:sql-datetime-literal-fn ,		rdfdf:sql-datetime-literal-fn-nullable ,
    virtrdf:DefaultQuadStorage ,		virtrdf:DefaultQuadStorage-UserMaps ,
    virtrdf:DefaultQuadMap,
    rdfdf:sinv-iid ,				rdfdf:sinv-iid-nullable ,
    rdfdf:sinv-iid-nonblank ,			rdfdf:sinv-iid-nonblank-nullable ,
    rdfdf:sinv ,				rdfdf:sinv-nullable ,
    virtrdf:DefaultServiceStorage ,		virtrdf:DefaultServiceStorage-UserMaps ,
    virtrdf:DefaultServiceMap
.

rdfdf:default-iid
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "default-iid";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __id2in (^{alias-dot}^^{column}^)";			# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " (^{tree}^ < min_bnode_iri_id ())";			# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " (^{tree}^ >= min_bnode_iri_id ())";			# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
# Templates of 0/1 that tell whether the short is of some sort:
  virtrdf:qmf01uriOfShortTmpl " is_named_iri_id (^{tree}^)";			# STRING REQUIRED ... whether the short is uri, returns 0 or 1
  virtrdf:qmf01blankOfShortTmpl " is_bnode_iri_id (^{tree}^)";			# STRING REQUIRED ... whether the short is blank node ref, returns 0 or 1
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^ ";					# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __id2in (^{tree}^)";				# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#anyURI'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " ^{tree}^";
  virtrdf:qmfUriOfShortTmpl " __id2in (^{tree}^)";				# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __bft (__id2in (^{tree}^), 2)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " __i2idn (^{sqlval-of-tree}^)";			# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " __i2idn (^{tree}^)";			# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# BOOLEAN OPTIONAL Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfIsSubformatOfLongWhenRef 1;					# BOOLEAN OPTIONAL Nonzero if the format is subformat of LONG valmode for values that are IRIs or blank nodes
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_IID_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl "NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl "NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:default-iid-SuperFormats
.

rdfdf:default-iid-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-iid-nullable;
      rdf:_2 rdfdf:default;
  rdf:_3 rdfdf:default-nullable
.

rdfdf:default-iid-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:default-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF;
  virtrdf:qmfName "default-iid-nullable";
  virtrdf:qmfSuperFormats rdfdf:default-iid-nullable-SuperFormats
.

rdfdf:default-iid-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:default-nullable
.

rdfdf:default-iid-nonblank
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:default-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_NOT_NULL;
  virtrdf:qmfName "default-iid-nonblank";
  virtrdf:qmfSuperFormats rdfdf:default-iid-nonblank-SuperFormats
.

rdfdf:default-iid-nonblank-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-iid-nonblank-nullable;
      rdf:_2 rdfdf:default-iid;
      rdf:_3 rdfdf:default-iid-nullable;
      rdf:_4 rdfdf:default;
  rdf:_5 rdfdf:default-nullable
.

rdfdf:default-iid-nonblank-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:default-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "default-iid-nonblank-nullable";
  virtrdf:qmfSuperFormats rdfdf:default-iid-nonblank-nullable-SuperFormats
.

rdfdf:default-iid-nonblank-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:default-iid-nullable;
  rdf:_2 rdfdf:default-nullable
.

rdfdf:default
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "default";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __ro2lo (^{alias-dot}^^{column}^)";		# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __ro2sq (^{alias-dot}^^{column}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " sparql_ebv_int_of_obj (__ro2sq (^{alias-dot}^^{column}^))";		# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (__ro2sq (^{alias-dot}^^{column}^))";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isiri_id (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " is_named_iri_id (^{tree}^)";			# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " is_bnode_iri_id (^{tree}^)";			# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " (1 - isiri_id (^{tree}^))";			# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __ro2lo (^{tree}^)";			# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __ro2sq (^{tree}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " DB.DBA.RDF_DATATYPE_OF_OBJ (__ro2sq (^{tree}^))";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " DB.DBA.RDF_LANGUAGE_OF_OBJ (__ro2sq (^{tree}^))";	# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " sparql_ebv_int_of_obj (__ro2sq (^{tree}^))";		# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_obj (__ro2sq (^{tree}^))";
  virtrdf:qmfIidOfShortTmpl " DB.DBA.RDF_MAKE_IID_OF_LONG (__ro2lo (^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __id2in (^{tree}^)";				# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __rdf_strsqlval (^{tree}^, 0)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " DB.DBA.RDF_MAKE_OBJ_OF_TYPEDSQLVAL (^{sqlval-of-tree}^, __i2id(^{datatype-of-tree}^), ^{language-of-tree}^)";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " DB.DBA.RDF_OBJ_OF_SQLVAL (^{sqlval-of-tree}^)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " DB.DBA.RDF_OBJ_OF_LONG (^{tree}^)";		# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " __i2idn (^{tree}^)";	# STRING REQUIRED ... makes short by uri
# Templates of expressions that find existing short values from other representations
  virtrdf:qmfExistingShortOfTypedsqlvalTmpl " DB.DBA.RDF_MAKE_OBJ_OF_TYPEDSQLVAL (^{sqlval-of-tree}^, __i2id(^{datatype-of-tree}^), ^{language-of-tree}^)";	# ... finds existing obj by SQL value with specified type and/or language
  virtrdf:qmfExistingShortOfSqlvalTmpl " DB.DBA.RDF_OBJ_OF_SQLVAL (^{tree}^)";	# STRING OPTIONAL ... finds existing obj by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfExistingShortOfLongTmpl " DB.DBA.RDF_OBJ_OF_LONG (^{tree}^)";	# STRING OPTIONAL ... finds existing obj by long
  virtrdf:qmfExistingShortOfUriTmpl " __i2idn (^{tree}^)";		# STRING OPTIONAL ... finds existing obj by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLongWhenEqToSql 1;
  virtrdf:qmfIsSubformatOfLongWhenRef 1;
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " DB.DBA.RDF_TYPEMIN_OF_OBJ (^{tree}^)";		# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " DB.DBA.RDF_TYPEMAX_OF_OBJ (^{tree}^)";		# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfWrapDistinct 1;
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 1;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSubFormatForRefs rdfdf:default-iid;
  virtrdf:qmfSuperFormats rdfdf:default-SuperFormats
.

rdfdf:default-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:default-nullable
.

rdfdf:default-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:default;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions, virtrdf:qmfSubFormatForRefs;
#  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
#    no restructions ATM;
  virtrdf:qmfName "default-nullable";
  virtrdf:qmfSubFormatForRefs rdfdf:default-iid-nullable;
  virtrdf:qmfSuperFormats rdfdf:default-nullable-SuperFormats
.

rdfdf:default-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-varchar
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{tree}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " NULL";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree}^)";
  virtrdf:qmfIidOfShortTmpl " __i2id (^{tree}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (coalesce (^{datatype-of-tree}^, 'http://www.w3.org/2001/XMLSchema#string')) when 'http://www.w3.org/2001/XMLSchema#string' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (isstring (^{sqlval-of-tree}^)) when 0 then NULL else (^{sqlval-of-tree}^) end)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " __rdf_strsqlval (^{tree}^)" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
  virtrdf:qmfShortOfNiceSqlvalTmpl " ^{tree}^" ;	# STRING OPTIONAL
  virtrdf:qmfDtpOfNiceSqlval 182 ;
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_STRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-SuperFormats
.

rdfdf:sql-varchar-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-varchar-nullable
.

rdfdf:sql-varchar-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-varchar-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-nullable-SuperFormats
.

rdfdf:sql-varchar-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-varchar-dt
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-dt";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column-0}^^{as-name-0}^^{comma-cut}^^{alias-dot}^^{column-1}^^{as-name-1}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{alias-dot}^^{column-0}^, __i2idn (^{alias-dot}^^{column-1}^), null)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column-0}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfDatatypeTmpl " ^{alias-dot}^^{column-1}^";
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column-0}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column-0}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{tree-0}^, __i2idn (^{tree-1}^), null)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree-0}^";					# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " ^{tree-1}^";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree-0}^) when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree-0}^)";
  virtrdf:qmfIidOfShortTmpl " __i2id (^{tree-0}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree-0}^";				# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " ^{sqlval-of-tree}^^{as-name-0}^^{comma-cut}^(^{datatype-of-tree}^)^{as-name-1}^";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "  ^{sqlval-of-tree}^^{as-name-0}^^{comma-cut}^NULL^{as-name-1}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " __rdf_strsqlval (^{tree}^)^{as-name}^^{comma-cut}^DB.DBA.RDF_DATATYPE_OF_LONG (^{tree}^)^{as-name-1}^" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_STRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 2;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-dt-SuperFormats
.

rdfdf:sql-varchar-dt-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-varchar-dt-nullable
.

rdfdf:sql-varchar-dt-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-dt;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-varchar-dt-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-dt-nullable-SuperFormats
.

rdfdf:sql-varchar-dt-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-varchar-lang
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-lang";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column-0}^^{as-name-0}^^{comma-cut}^^{alias-dot}^^{column-1}^^{as-name-1}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{alias-dot}^^{column-0}^, null, ^{alias-dot}^^{column-1}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column-0}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLanguageTmpl " ^{alias-dot}^^{column-1}^";
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column-0}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column-0}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree-0}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{tree-0}^, null, ^{tree-1}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree-0}^";					# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " NULL";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " ^{tree-1}^";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree-0}^) when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree}^)";
  virtrdf:qmfIidOfShortTmpl " __i2id (^{tree-0}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree-0}^";				# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " ^{sqlval-of-tree}^^{as-name-0}^^{comma-cut}^(^{language-of-tree}^)^{as-name-1}^";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (isstring (^{sqlval-of-tree}^)) when 0 then NULL else (^{sqlval-of-tree}^) end)^{as-name-0}^^{comma-cut}^(^{language-of-tree}^)^{as-name-1}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " __rdf_strsqlval (^{sqlval-of-tree}^)^{as-name-0}^^{comma-cut}^(^{language-of-tree}^)^{as-name-1}^" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
  virtrdf:qmfShortOfNiceSqlvalTmpl " ^{tree}^^{as-name-0}^^{comma-cut}^NULL^{as-name-1}^" ;				# STRING OPTIONAL
  virtrdf:qmfDtpOfNiceSqlval 182 ;
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_STRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 2;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-lang-SuperFormats
.

rdfdf:sql-varchar-lang-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-varchar-lang-nullable
.

rdfdf:sql-varchar-lang-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-lang;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-varchar-lang-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-lang-nullable-SuperFormats
.

rdfdf:sql-varchar-lang-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longvarchar
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longvarchar";
  virtrdf:inheritFrom rdfdf:sql-varchar;
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as varchar)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as varchar)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " (case (length (^{tree}^)) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (length (^{tree}^)) when 0 then 0 else 1 end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{tree}^ as varchar))";
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-SuperFormats
.

rdfdf:sql-longvarchar-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longvarchar-nullable
.

rdfdf:sql-longvarchar-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longvarchar;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longvarchar-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-nullable-SuperFormats
.

rdfdf:sql-longvarchar-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longvarchar-dt
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longvarchar-dt";
  virtrdf:inheritFrom rdfdf:sql-varchar-dt;
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as varchar)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as varchar)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " (case (length (^{tree}^)) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (length (^{tree}^)) when 0 then 0 else 1 end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{tree}^ as varchar))";
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-dt-SuperFormats
.

rdfdf:sql-longvarchar-dt-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longvarchar-dt-nullable
.

rdfdf:sql-longvarchar-dt-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longvarchar-dt;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longvarchar-dt-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-dt-nullable-SuperFormats
.

rdfdf:sql-longvarchar-dt-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longvarchar-lang
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longvarchar-lang";
  virtrdf:inheritFrom rdfdf:sql-varchar-lang;
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as varchar)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as varchar)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " (case (length (^{tree}^)) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (length (^{tree}^)) when 0 then 0 else 1 end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{tree}^ as varchar))";
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-lang-SuperFormats
.

rdfdf:sql-longvarchar-lang-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longvarchar-lang-nullable
.

rdfdf:sql-longvarchar-lang-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longvarchar-lang;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longvarchar-lang-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-lang-nullable-SuperFormats
.

rdfdf:sql-longvarchar-lang-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-nvarchar
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-nvarchar";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{tree}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " NULL";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree}^)";
  virtrdf:qmfIidOfShortTmpl " __i2id (^{tree}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (coalesce (^{datatype-of-tree}^, 'http://www.w3.org/2001/XMLSchema#string')) when 'http://www.w3.org/2001/XMLSchema#string' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (isstring (^{sqlval-of-tree}^)) when 0 then NULL else (^{sqlval-of-tree}^) end)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " DB.DBA.RDF_WIDESTRSQLVAL_OF_LONG (^{tree}^)" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
  virtrdf:qmfShortOfNiceSqlvalTmpl " ^{tree}^" ;				# STRING OPTIONAL
  virtrdf:qmfDtpOfNiceSqlval 182 ;
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_WIDESTRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-SuperFormats
.

rdfdf:sql-nvarchar-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-nvarchar-nullable
.

rdfdf:sql-nvarchar-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-nvarchar;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-nvarchar-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-nullable-SuperFormats
.

rdfdf:sql-nvarchar-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-nvarchar-dt
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-nvarchar-dt";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column-0}^^{as-name-0}^^{comma-cut}^^{alias-dot}^^{column-1}^^{as-name-1}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{alias-dot}^^{column-0}^, __i2idn (^{alias-dot}^^{column-1}^), null)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column-0}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfDatatypeTmpl " ^{alias-dot}^^{column-1}^";
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column-0}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column-0}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{tree-0}^, __i2idn (^{tree-1}^), null)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree-0}^";					# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " ^{tree-1}^";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree-0}^) when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree}^)";
  virtrdf:qmfIidOfShortTmpl " __i2id (^{tree-0}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree-0}^";				# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " ^{sqlval-of-tree}^^{as-name-0}^^{comma-cut}^(^{datatype-of-tree}^)^{as-name-1}^";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "  ^{sqlval-of-tree}^^{as-name-0}^^{comma-cut}^NULL^{as-name-1}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " DB.DBA.RDF_WIDESTRSQLVAL_OF_LONG (^{tree}^)^{as-name}^^{comma-cut}^DB.DBA.RDF_DATATYPE_OF_LONG (^{tree}^)^{as-name-1}^" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_WIDESTRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 2;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-dt-SuperFormats
.

rdfdf:sql-nvarchar-dt-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-nvarchar-dt-nullable
.

rdfdf:sql-nvarchar-dt-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-nvarchar-dt;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-nvarchar-dt-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-dt-nullable-SuperFormats
.

rdfdf:sql-nvarchar-dt-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-nvarchar-lang
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-nvarchar-lang";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column-0}^^{as-name-0}^^{comma-cut}^^{alias-dot}^^{column-1}^^{as-name-1}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{alias-dot}^^{column-0}^, null, ^{alias-dot}^^{column-1}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column-0}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLanguageTmpl " ^{alias-dot}^^{column-1}^";
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column-0}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column-0}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{tree-0}^, null, ^{tree-1}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree-0}^";					# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " NULL";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " ^{tree-1}^";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree-0}^) when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree}^)";
  virtrdf:qmfIidOfShortTmpl " __i2id (^{tree-0}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree-0}^";				# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " ^{sqlval-of-tree}^^{as-name-0}^^{comma-cut}^(^{language-of-tree}^)^{as-name-1}^";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (isstring (^{sqlval-of-tree}^)) when 0 then NULL else (^{sqlval-of-tree}^) end)^{as-name-0}^^{comma-cut}^(^{language-of-tree}^)^{as-name-1}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " __rdf_strsqlval (^{tree}^)^{as-name-0}^^{comma-cut}^(^{language-of-tree}^)^{as-name-1}^" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
  virtrdf:qmfShortOfNiceSqlvalTmpl " ^{tree}^^{as-name-0}^^{comma-cut}^NULL^{as-name-1}^" ;				# STRING OPTIONAL
  virtrdf:qmfDtpOfNiceSqlval 182 ;
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_WIDESTRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 2;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-lang-SuperFormats
.

rdfdf:sql-nvarchar-lang-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-nvarchar-lang-nullable
.

rdfdf:sql-nvarchar-lang-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-nvarchar-lang;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-nvarchar-lang-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-lang-nullable-SuperFormats
.

rdfdf:sql-nvarchar-lang-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longnvarchar
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longnvarchar";
  virtrdf:inheritFrom rdfdf:sql-nvarchar;
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as nvarchar)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as nvarchar)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " (case (length (^{tree}^)) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (length (^{tree}^)) when 0 then 0 else 1 end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{tree}^ as nvarchar))";
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as nvarchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-longnvarchar-SuperFormats
.

rdfdf:sql-longnvarchar-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longnvarchar-nullable
.

rdfdf:sql-longnvarchar-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longnvarchar;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longnvarchar-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longnvarchar-nullable-SuperFormats
.

rdfdf:sql-longnvarchar-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longnvarchar-dt
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longnvarchar-dt";
  virtrdf:inheritFrom rdfdf:sql-nvarchar-dt;
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as nvarchar)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as nvarchar)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " (case (length (^{tree}^)) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (length (^{tree}^)) when 0 then 0 else 1 end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{tree}^ as nvarchar))";
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as nvarchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-longnvarchar-dt-SuperFormats
.

rdfdf:sql-longnvarchar-dt-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longnvarchar-dt-nullable
.

rdfdf:sql-longnvarchar-dt-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longnvarchar-dt;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longnvarchar-dt-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longnvarchar-dt-nullable-SuperFormats
.

rdfdf:sql-longnvarchar-dt-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longnvarchar-lang
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longnvarchar-lang";
  virtrdf:inheritFrom rdfdf:sql-nvarchar-lang;
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as nvarchar)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as nvarchar)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " (case (length (^{tree}^)) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (length (^{tree}^)) when 0 then 0 else 1 end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{tree}^ as nvarchar))";
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as nvarchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-longnvarchar-lang-SuperFormats
.

rdfdf:sql-longnvarchar-lang-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longnvarchar-lang-nullable
.

rdfdf:sql-longnvarchar-lang-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longnvarchar-lang;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longnvarchar-lang-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longnvarchar-lang-nullable-SuperFormats
.

rdfdf:sql-longnvarchar-lang-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longvarbinary
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longvarbinary";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as varbinary)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " isnotnull (^{alias-dot}^^{column}^)";					# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_sqlval (isnotnull (^{alias-dot}^^{column}^))";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as varbinary)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#octetStream'";  # STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (isnotnull (^{tree}^))";
virtrdf:qmfIidOfShortTmpl " NULL";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^) when 'http://www.w3.org/2001/XMLSchema#octetStream' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (__tag (^{sqlval-of-tree}^)) when 131 then (^{sqlval-of-tree}^) else NULL end)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " (case (__tag (^{tree}^)) when 131 then (^{tree}^) else NULL end)";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VARBINARY_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#octetStream";	# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-longvarbinary-SuperFormats
.

rdfdf:sql-longvarbinary-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longvarbinary-nullable
.

rdfdf:sql-longvarbinary-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longvarbinary;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED;
  virtrdf:qmfName "sql-longvarbinary-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longvarbinary-nullable-SuperFormats
.

rdfdf:sql-longvarbinary-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-varchar-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-uri";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __i2id (__spfi (^{custom-string-1}^, ^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfi (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfi (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfi (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfi (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " __spfinv (^{sqlval-of-tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[0]";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " __spfinv (__id2in (^{tree}^), ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[0]";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " __spfinv (^{tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[0]";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfCustomString1 "local://%s";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-uri-SuperFormats
.

rdfdf:sql-varchar-uri-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-varchar-uri-nullable
.

rdfdf:sql-varchar-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfLongTmpl " __i2id (__spfin (^{custom-string-1}^, ^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfin (^{custom-string-1}^, ^{alias-dot}^^{column}^)";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "sql-varchar-uri-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-uri-nullable-SuperFormats
.

rdfdf:sql-varchar-uri-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-varchar-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-literal";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __spf (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spf (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl "case __spf (^{custom-string-1}^, ^{alias-dot}^^{column}^) when '' then 0 else 1 end";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_sqlval (__spf (^{custom-string-1}^, ^{alias-dot}^^{column}^))";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __spf (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spf (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfi (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spf (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " __spfinv (^{sqlval-of-tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[0]";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " __spfinv (__id2in (^{tree}^), ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[0]";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " __spfinv (^{tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[0]";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_LIT;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfCustomString1 "%s";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-literal-SuperFormats
.

rdfdf:sql-varchar-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-varchar-literal-nullable
.

rdfdf:sql-varchar-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-varchar-literal-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-literal-nullable-SuperFormats
.

rdfdf:sql-varchar-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-nvarchar-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri;
  virtrdf:qmfName "sql-nvarchar-uri";
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-uri-SuperFormats
.

rdfdf:sql-nvarchar-uri-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-nvarchar-uri-nullable
.

rdfdf:sql-nvarchar-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri-nullable;
  virtrdf:qmfName "sql-nvarchar-uri-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-uri-nullable-SuperFormats
.

rdfdf:sql-nvarchar-uri-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-nvarchar-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal;
  virtrdf:qmfName "sql-nvarchar-literal";
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-literal-SuperFormats
.

rdfdf:sql-nvarchar-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-nvarchar-literal-nullable
.

rdfdf:sql-nvarchar-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal-nullable;
  virtrdf:qmfName "sql-nvarchar-literal-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-literal-nullable-SuperFormats
.

rdfdf:sql-nvarchar-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-integer
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-integer";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when 0 then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#integer'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree}^)";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^) when 'http://www.w3.org/2001/XMLSchema#integer' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{sqlval-of-tree}^";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -2147483648";					# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 2147483647";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#integer";	# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-integer-SuperFormats
.

rdfdf:sql-integer-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-integer-nullable;
      rdf:_2 rdfdf:default-nullable;
  rdf:_3 rdfdf:default
.

rdfdf:sql-integer-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-integer;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when null then null when 0 then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-integer-nullable";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfSuperFormats rdfdf:sql-integer-nullable-SuperFormats
.

rdfdf:sql-integer-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:default-nullable
.

rdfdf:sql-integer-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-integer-uri";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -2147483648";					# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 2147483647";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfCustomString1 "local://%d";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-integer-uri-SuperFormats
.

rdfdf:sql-integer-uri-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-integer-uri-nullable
.

rdfdf:sql-integer-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-integer-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "sql-integer-uri-nullable";
  virtrdf:qmfLongTmpl " __i2id (__spfin (^{custom-string-1}^, ^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfin (^{custom-string-1}^, ^{alias-dot}^^{column}^)";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-integer-uri-nullable-SuperFormats
.

rdfdf:sql-integer-uri-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-integer-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-integer-literal";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -2147483648";					# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 2147483647";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfCustomString1 "local://%d";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-integer-literal-SuperFormats
.

rdfdf:sql-integer-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-integer-literal-nullable
.

rdfdf:sql-integer-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-integer-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-integer-literal-nullable";
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-integer-literal-nullable-SuperFormats
.

rdfdf:sql-integer-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-doubleprecision
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-doubleprecision";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when 0 then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " isnotnull (^{tree}^)";				# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#double'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree}^)";
  virtrdf:qmfIidOfShortTmpl " NULL";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^) when 'http://www.w3.org/2001/XMLSchema#double' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{sqlval-of-tree}^";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -1.797e308";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 1.797e308";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#double";	# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-doubleprecision-SuperFormats
.

rdfdf:sql-doubleprecision-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-doubleprecision-nullable;
      rdf:_2 rdfdf:default-nullable;
  rdf:_3 rdfdf:default
.

rdfdf:sql-doubleprecision-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-doubleprecision;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-doubleprecision-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-doubleprecision-nullable-SuperFormats
.

rdfdf:sql-doubleprecision-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:default-nullable
.

rdfdf:sql-numeric
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-numeric";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when 0 then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{alias-dot}^^{column}^)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " isnotnull (^{tree}^)";				# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#decimal'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{tree}^)";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^) when 'http://www.w3.org/2001/XMLSchema#numeric' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{sqlval-of-tree}^";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -99999999999999999999999999999999999999999999999999";	# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 99999999999999999999999999999999999999999999999999";		# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#decimal";	# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-numeric-SuperFormats
.

rdfdf:sql-numeric-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-numeric-nullable;
  rdf:_2 rdfdf:default-nullable;
  rdf:_3 rdfdf:default
.

rdfdf:sql-numeric-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-numeric;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-numeric-nullable";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfSuperFormats rdfdf:sql-numeric-nullable-SuperFormats
.

rdfdf:sql-numeric-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:default-nullable
.

rdfdf:sql-numeric-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-numeric-uri";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -99999999999999999999999999999999999999999999999999";	# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 99999999999999999999999999999999999999999999999999";		# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfCustomString1 "local://%f";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-numeric-uri-SuperFormats
.

rdfdf:sql-numeric-uri-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-numeric-uri-nullable
.

rdfdf:sql-numeric-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-numeric-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "sql-numeric-uri-nullable";
  virtrdf:qmfLongTmpl " __i2id (__spfin (^{custom-string-1}^, ^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfin (^{custom-string-1}^, ^{alias-dot}^^{column}^)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-numeric-uri-nullable-SuperFormats
.

rdfdf:sql-numeric-uri-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-numeric-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-numeric-literal";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " -99999999999999999999999999999999999999999999999999";	# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " 99999999999999999999999999999999999999999999999999";		# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfCustomString1 "local://%f";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-numeric-literal-SuperFormats
.

rdfdf:sql-numeric-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-numeric-literal-nullable
.

rdfdf:sql-numeric-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-numeric-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-numeric-literal-nullable";
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-numeric-literal-nullable-SuperFormats
.

rdfdf:sql-numeric-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-doubleprecision-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-doubleprecision-literal";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " cast('-Inf' as double precision)";			# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " cast('+Inf' as double precision)";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfCustomString1 "local://%g";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-doubleprecision-literal-SuperFormats
.

rdfdf:sql-doubleprecision-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-doubleprecision-literal-nullable
.

rdfdf:sql-doubleprecision-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-doubleprecision-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-doubleprecision-literal-nullable";
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-doubleprecision-literal-nullable-SuperFormats
.

rdfdf:sql-doubleprecision-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-date
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-date";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " 1";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_pure (1)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#date'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " 1";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_pure (1)";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^) when 'http://www.w3.org/2001/XMLSchema#date' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{sqlval-of-tree}^";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " cast ('0001-01-01' as date)";			# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " cast ('3000-12-31' as date)";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#date";	# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-date-SuperFormats
.

rdfdf:sql-date-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
      rdf:_1 rdfdf:sql-date-nullable;
  rdf:_2 rdfdf:sql-datetime;
  rdf:_3 rdfdf:sql-datetime-nullable;
  rdf:_4 rdfdf:default-nullable;
  rdf:_5 rdfdf:default
.

rdfdf:sql-date-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-date;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfBoolTmpl " case (isnull (^{alias-dot}^^{column}^) when 1 thern null else 1 end";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvTmpl " case (isnull (^{alias-dot}^^{column}^) when 1 thern null else sparql_ebv_pure (1) end";
  virtrdf:qmfBoolOfShortTmpl " case (isnull (^{tree}^) when 1 thern null else 1 end";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " case (isnull (^{tree}^) when 1 thern null else sparql_ebv_pure (1) end";
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-date-nullable";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfSuperFormats rdfdf:sql-date-nullable-SuperFormats
.

rdfdf:sql-date-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-datetime-nullable;
  rdf:_2 rdfdf:default-nullable
.

rdfdf:sql-date-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-date-literal";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfCustomString1 "local://%D";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-date-literal-SuperFormats
.

rdfdf:sql-date-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-date-literal-nullable
.

rdfdf:sql-date-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-date-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-date-literal-nullable";
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-date-literal-nullable-SuperFormats
.

rdfdf:sql-date-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-time
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-time";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " 1";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_pure (1)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#time'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " 1";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_pure (1)";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^) when 'http://www.w3.org/2001/XMLSchema#time' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{sqlval-of-tree}^";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " cast ('0001-01-01' as date)";			# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " cast ('3000-12-31' as date)";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#time";	# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-time-SuperFormats
.

rdfdf:sql-time-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-time-nullable;
  rdf:_2 rdfdf:default-nullable;
  rdf:_3 rdfdf:default
.

rdfdf:sql-time-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-time;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfBoolTmpl " case (isnull (^{alias-dot}^^{column}^) when 1 thern null else 1 end";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvTmpl " case (isnull (^{alias-dot}^^{column}^) when 1 thern null else sparql_ebv_pure (1) end";
  virtrdf:qmfBoolOfShortTmpl " case (isnull (^{tree}^) when 1 thern null else 1 end";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " case (isnull (^{tree}^) when 1 thern null else sparql_ebv_pure (1) end";
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-time-nullable";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfSuperFormats rdfdf:sql-time-nullable-SuperFormats
.

rdfdf:sql-time-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:default-nullable
.

rdfdf:sql-time-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-time-literal";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfCustomString1 "local://%D";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-time-literal-SuperFormats
.

rdfdf:sql-time-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-time-literal-nullable
.

rdfdf:sql-time-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-time-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-time-literal-nullable";
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-time-literal-nullable-SuperFormats
.

rdfdf:sql-time-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-datetime
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-datetime";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " 1";	# STRING REQUIRED ... boolean value template
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_pure (1)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#dateTime'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " 1";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_pure (1)";
  virtrdf:qmfIidOfShortTmpl " NULL";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " (case (^{datatype-of-tree}^) when 'http://www.w3.org/2001/XMLSchema#dateTime' then ^{sqlval-of-tree}^ else NULL end)";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{sqlval-of-tree}^";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " ^{tree}^";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL";						# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# INTEGER REQUIRED Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " cast ('0001-01-01' as datetime)";			# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " cast ('3000-12-31' as datetime)";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#dateTime";	# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-datetime-SuperFormats
.

rdfdf:sql-datetime-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-datetime-nullable;
  rdf:_2 rdfdf:default-nullable;
  rdf:_3 rdfdf:default
.

rdfdf:sql-datetime-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-datetime;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfBoolTmpl " case (isnull (^{alias-dot}^^{column}^) when 1 thern null else 1 end";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvTmpl " case (isnull (^{alias-dot}^^{column}^) when 1 thern null else sparql_ebv_pure (1) end";
  virtrdf:qmfBoolOfShortTmpl " case (isnull (^{tree}^) when 1 thern null else 1 end";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " case (isnull (^{tree}^) when 1 thern null else sparql_ebv_pure (1) end";
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_TYPED, virtrdf:SPART_VARR_LONG_EQ_SQL;
  virtrdf:qmfName "sql-datetime-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-datetime-nullable-SuperFormats
.

rdfdf:sql-datetime-nullable-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:default-nullable
.

rdfdf:sql-datetime-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfName "sql-datetime-literal";
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfCustomString1 "local://%D";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-datetime-literal-SuperFormats
.

rdfdf:sql-datetime-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-datetime-literal-nullable
.

rdfdf:sql-datetime-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-datetime-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-datetime-literal-nullable";
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^, ^{alias-dot}^^{column}^)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{tree}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-datetime-literal-nullable-SuperFormats
.

rdfdf:sql-datetime-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:multipart-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "multipart-uri";
  virtrdf:qmfShortTmpl "^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{as-name-N}^^{end}^";	# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __i2id (__spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfUriOfShortTmpl " __spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "^{comma-list-begin}^ __spfinv (^{tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[^{N}^]^{as-name-N}^^{end}^";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl		"^{comma-list-begin}^ __spfinv (^{sqlval-of-tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "^{comma-list-begin}^ __spfinv (__id2in (^{tree}^), ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "^{comma-list-begin}^ __spfinv (^{tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by uri
#wrong:  virtrdf:qmfShortOfNiceSqlvalTmpl "^{comma-list-begin}^ ^{N-aref-of-spfinv}^^{as-name-N}^^{end}^";	# ... works like qmfShortOfSqlvalTmpl for values of one selected data type, not suitable for other types
#wrong:  virtrdf:qmfDtpOfNiceSqlval 217;						# The 'nice' DTP that is an acceptable type of qmfShortOfNiceSqlvalTmpl, zero or unset if no nice type
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:multipart-uri-SuperFormats
.

rdfdf:multipart-uri-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:multipart-uri-nullable
.

rdfdf:multipart-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:multipart-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "multipart-uri-nullable";
  virtrdf:qmfLongTmpl " __i2id (__spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:multipart-uri-nullable-SuperFormats
.

rdfdf:multipart-uri-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:multipart-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "multipart-literal";
  virtrdf:qmfShortTmpl "^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{as-name-N}^^{end}^";	# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " case __spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^) when '' then 0 else 1 end";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_sqlval (__spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " NULL";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " case __spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^) when '' then 0 else 1 end";	# STRING REQUIRED Boolean value of short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (__spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfUriOfShortTmpl " __spfi (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl	"^{comma-list-begin}^ __spfinv (^{tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[^{N}^]^{as-name-N}^^{end}^";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl		"^{comma-list-begin}^ __spfinv (^{sqlval-of-tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl		"^{comma-list-begin}^ __spfinv (__id2in (^{tree}^), ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl		"^{comma-list-begin}^ __spfinv (^{tree}^, ^{custom-string-1}^, 2^{opt-comma-arg-dtps}^)[^{N}^]^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by uri
#wrong:  virtrdf:qmfShortOfNiceSqlvalTmpl "^{comma-list-begin}^ ^{N-aref-of-spfinv}^^{as-name-N}^^{end}^";	# ... works like qmfShortOfSqlvalTmpl for values of one selected data type, not suitable for other types
#wrong:  virtrdf:qmfDtpOfNiceSqlval 217;						# The 'nice' DTP that is an acceptable type of qmfShortOfNiceSqlvalTmpl, zero or unset if no nice type
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_SPRINTFF, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:multipart-literal-SuperFormats
.

rdfdf:multipart-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:multipart-literal-nullable
.

rdfdf:multipart-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:multipart-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_SPRINTFF;
  virtrdf:qmfName "multipart-literal-nullable";
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " case __spfn (^{custom-string-1}^, ^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^) when null then null when '' then 0 else 1 end";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " case __spfn (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^) when null then null when '' then 0 else 1 end";	# STRING REQUIRED Boolean value of short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (__spf (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";
virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^, ^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:multipart-literal-nullable-SuperFormats
.

rdfdf:multipart-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:multipart-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "multipart-uri-fn-nullable";
  virtrdf:qmfShortTmpl "^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{as-name-N}^^{end}^";	# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __i2id (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __bft (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^), 1)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __i2id (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __bft (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^), 1)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfUriOfShortTmpl " __bft (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^), 1)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{sqlval-of-tree}^)^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (__id2in (^{tree}^))^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 0;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:multipart-uri-fn-nullable-SuperFormats
.

rdfdf:multipart-uri-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:multipart-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "multipart-literal-fn-nullable";
  virtrdf:qmfShortTmpl "^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{as-name-N}^^{end}^";	# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " sparql_ebv_int_of_obj (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";							# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{alias-N-dot}^^{column-N}^^{end}^))";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_LONG_OF_SQLVAL (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " DB.DBA.RDF_DATATYPE_OF_SQLVAL (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " sparql_ebv_int_of_obj (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";		# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_obj (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^) as varchar))";
  virtrdf:qmfUriOfShortTmpl " cast (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^))";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{custom-verbatim-1}^ (^{comma-list-begin}^ ^{tree-N}^^{end}^) as varchar)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{sqlval-of-tree}^)^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (__ro2sq /*l*/ (^{tree}^))^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "^{comma-list-begin}^ ^{custom-verbatim-1}^_INV_^{N1}^ (^{tree}^)^{as-name-N}^^{end}^";	# STRING REQUIRED ... makes short by literal
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:multipart-literal-fn-nullable-SuperFormats
.

rdfdf:multipart-literal-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:zeropart-uri
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "zeropart-uri";
  virtrdf:qmfShortTmpl "1 /*zeropart*/";					# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __i2id (__spfi (^{custom-string-1}^))";		# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfi (^{custom-string-1}^)";			# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __i2id (__spfi (^{custom-string-1}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfi (^{custom-string-1}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#anyURI'";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^))";
  virtrdf:qmfUriOfShortTmpl " __spfi (^{custom-string-1}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfi (^{custom-string-1}^)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "1 /*zeropart*/";				# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "1 /*zeropart*/";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "1 /*zeropart*/";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "1 /*zeropart*/";					# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:zeropart-uri-SuperFormats
.

rdfdf:zeropart-uri-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:zeropart-uri-nullable
.

rdfdf:zeropart-uri-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:zeropart-uri;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions							# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "zeropart-uri-nullable";
  virtrdf:qmfLongTmpl " __i2id (__spfin (^{custom-string-1}^))";		# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfin (^{custom-string-1}^)";			# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __i2id (__spfin (^{custom-string-1}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfin (^{custom-string-1}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfin (^{custom-string-1}^)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:zeropart-uri-nullable-SuperFormats
.

rdfdf:zeropart-uri-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:zeropart-literal
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "zeropart-literal";
  virtrdf:qmfShortTmpl "1 /*zeropart*/";					# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __spf (^{custom-string-1}^)";		# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spf (^{custom-string-1}^)";			# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " case __spf (^{custom-string-1}^) when null then null when '' then 0 else 1 end";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __spf (^{custom-string-1}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spf (^{custom-string-1}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " NULL";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " case __spf (^{custom-string-1}^) when null then null when '' then 0 else 1 end";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (__spf (^{custom-string-1}^))";
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfi (^{custom-string-1}^))";
  virtrdf:qmfUriOfShortTmpl " __spfi (^{custom-string-1}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spf (^{custom-string-1}^)";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "1 /*zeropart*/";				# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "1 /*zeropart*/";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "1 /*zeropart*/";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "1 /*zeropart*/";					# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:zeropart-literal-SuperFormats
.

rdfdf:zeropart-literal-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:zeropart-literal-nullable
.

rdfdf:zeropart-literal-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:zeropart-literal;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions							# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "zeropart-literal-nullable";
  virtrdf:qmfLongTmpl " __spfn (^{custom-string-1}^)";		# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __spfn (^{custom-string-1}^)";			# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLongOfShortTmpl " __spfn (^{custom-string-1}^)";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __spfn (^{custom-string-1}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (__spfin (^{custom-string-1}^))";
  virtrdf:qmfUriOfShortTmpl " __spfin (^{custom-string-1}^)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " __spfn (^{custom-string-1}^)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:zeropart-literal-nullable-SuperFormats
.

rdfdf:zeropart-literal-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:zeropart-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "zeropart-uri-fn-nullable";
  virtrdf:qmfShortTmpl "1 /*zeropart*/";	# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __i2id (^{custom-verbatim-1}^ ())";			# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __bft (^{custom-verbatim-1}^ (), 1)";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __i2id (^{custom-verbatim-1}^ ())";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __bft (^{custom-verbatim-1}^ (), 1)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (^{custom-verbatim-1}^ ())";
  virtrdf:qmfUriOfShortTmpl " __bft (^{custom-verbatim-1}^ (), 1)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{custom-verbatim-1}^ ()";			# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "1 /*zeropart*/";				# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "1 /*zeropart*/";				# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "1 /*zeropart*/";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "1 /*zeropart*/";					# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";				# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:zeropart-uri-fn-nullable-SuperFormats
.

rdfdf:zeropart-uri-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:zeropart-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "zeropart-literal-fn-nullable";
  virtrdf:qmfShortTmpl "1 /*zeropart*/";						# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{custom-verbatim-1}^ ())";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{custom-verbatim-1}^ ()";					# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " sparql_ebv_int_of_obj (^{custom-verbatim-1}^ ())";							# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{custom-verbatim-1}^ ())";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";							# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";							# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsblankOfShortTmpl " 0";							# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";					# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_LONG_OF_SQLVAL (^{custom-verbatim-1}^ ())";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{custom-verbatim-1}^ ()";				# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " DB.DBA.RDF_DATATYPE_OF_SQLVAL (^{custom-verbatim-1}^ ())";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";						# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " sparql_ebv_int_of_sqlval (^{custom-verbatim-1}^ ())";			# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (^{custom-verbatim-1}^ ())";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{custom-verbatim-1}^ () as varchar))";
  virtrdf:qmfUriOfShortTmpl " cast (^{custom-verbatim-1}^ ())";				# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{custom-verbatim-1}^ () as varchar)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl "1 /*zeropart*/";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl "1 /*zeropart*/";					# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "1 /*zeropart*/";						# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "1 /*zeropart*/";						# STRING REQUIRED ... makes short by literal
# Misc
  virtrdf:qmfIsBijection 0;								# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfIsStable 0;								# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_VECTOR_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";							# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 0;								# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;							# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions							# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
#  virtrdf:qmfValRange-rvrDatatype "";							# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";								# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;								# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:zeropart-literal-fn-nullable-SuperFormats
.

rdfdf:zeropart-literal-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:singlepart-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "singlepart-uri-fn";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " __i2id (^{custom-verbatim-1}^ (^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " __bft (^{custom-verbatim-1}^ (^{alias-dot}^^{column}^), 1)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " NULL";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";					# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " __i2id (^{custom-verbatim-1}^ (^{tree}^))";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " __bft (^{custom-verbatim-1}^ (^{tree}^), 1)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " UNAME'http://www.w3.org/2001/XMLSchema#anyURI'";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " NULL";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " __i2id (^{custom-verbatim-1}^ (^{tree}^))";
  virtrdf:qmfUriOfShortTmpl " __bft (^{custom-verbatim-1}^ (^{tree}^), 1)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{tree}^)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{custom-verbatim-1}^_INVERSE (^{sqlval-of-tree}^)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "  ^{custom-verbatim-1}^_INVERSE (__id2in (^{tree}^))";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "  ^{custom-verbatim-1}^_INVERSE (^{tree}^)";		# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL, virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfCustomString1 "DB.DBA.RDF_DF_VARCHAR_URI";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:singlepart-uri-fn-SuperFormats
.

rdfdf:singlepart-uri-fn-SuperFormats
      rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:singlepart-uri-fn-nullable
.

rdfdf:singlepart-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_IRI_CALC;
  virtrdf:qmfName "singlepart-uri-fn-nullable";
  virtrdf:qmfSuperFormats rdfdf:singlepart-uri-fn-nullable-SuperFormats
.

rdfdf:singlepart-uri-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.


rdfdf:singlepart-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "singlepart-literal-fn";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{custom-verbatim-1}^ (^{alias-dot}^^{column}^))";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{custom-verbatim-1}^ (^{alias-dot}^^{column}^)";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " sparql_ebv_int_of_obj (^{custom-verbatim-1}^ (^{alias-dot}^^{column}^))";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_obj (^{custom-verbatim-1}^ (^{alias-dot}^^{column}^))";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_SQLVAL (^{custom-verbatim-1}^ (^{tree}^))";		# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{custom-verbatim-1}^ (^{tree}^)";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " DB.DBA.RDF_DATATYPE_OF_SQLVAL (^{custom-verbatim-1}^ (^{tree}^))";# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " NULL";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " sparql_ebv_int_of_obj (^{custom-verbatim-1}^ (^{tree}^))";		# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_obj (^{custom-verbatim-1}^ (^{tree}^))";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{custom-verbatim-1}^ (^{tree}^) as varchar))";
  virtrdf:qmfUriOfShortTmpl " cast (^{custom-verbatim-1}^ (^{tree}^) as varchar)";		# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{custom-verbatim-1}^ (^{tree}^) as varchar)";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " NULL";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " ^{custom-verbatim-1}^_INVERSE (^{sqlval-of-tree}^)";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl "  ^{custom-verbatim-1}^_INVERSE (__ro2sq /*l*/ (^{tree}^))";	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl "  ^{custom-verbatim-1}^_INVERSE (^{tree}^)";	# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "http://www.w3.org/2001/XMLSchema#any";	# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "NULL";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfCustomString1 "DB.DBA.RDF_DF_VARCHAR_LITERAL";
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:singlepart-literal-fn-SuperFormats
.

rdfdf:singlepart-literal-fn-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:singlepart-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "singlepart-literal-fn-nullable";
  virtrdf:qmfSuperFormats rdfdf:singlepart-literal-fn-nullable-SuperFormats
.

rdfdf:singlepart-literal-fn-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.


rdfdf:sql-varchar-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-uri-fn";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
.

rdfdf:sql-varchar-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-uri-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn-nullable;
.

rdfdf:sql-nvarchar-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-nvarchar-uri-fn";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
.

rdfdf:sql-nvarchar-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-nvarchar-uri-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn-nullable;
.

rdfdf:sql-integer-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-integer-uri-fn";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
.

rdfdf:sql-integer-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-integer-uri-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn-nullable;
.

rdfdf:sql-numeric-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-numeric-uri-fn";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
.

rdfdf:sql-numeric-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-numeric-uri-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn-nullable;
.

rdfdf:sql-doubleprecision-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-doubleprecision-uri-fn";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
.

rdfdf:sql-doubleprecision-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-doubleprecision-uri-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn-nullable;
.

rdfdf:sql-date-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-date-uri-fn";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
.

rdfdf:sql-date-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-date-uri-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn-nullable;
.

rdfdf:sql-time-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-time-uri-fn";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
.

rdfdf:sql-time-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-time-uri-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn-nullable;
.

rdfdf:sql-datetime-uri-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-datetime-uri-fn";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn;
.

rdfdf:sql-datetime-uri-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-datetime-uri-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-uri-fn-nullable;
.

rdfdf:sql-varchar-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-literal-fn";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
.

rdfdf:sql-varchar-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-literal-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn-nullable;
.

rdfdf:sql-nvarchar-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-nvarchar-literal-fn";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
.

rdfdf:sql-nvarchar-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-nvarchar-literal-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn-nullable;
.

rdfdf:sql-integer-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-integer-literal-fn";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
.

rdfdf:sql-integer-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-integer-literal-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn-nullable;
.

rdfdf:sql-numeric-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-numeric-literal-fn";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
.

rdfdf:sql-numeric-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-numeric-literal-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn-nullable;
.

rdfdf:sql-doubleprecision-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-doubleprecision-literal-fn";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
.

rdfdf:sql-doubleprecision-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-doubleprecision-literal-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn-nullable;
.

rdfdf:sql-date-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-date-literal-fn";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
.

rdfdf:sql-date-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-date-literal-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn-nullable;
.

rdfdf:sql-time-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-time-literal-fn";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
.

rdfdf:sql-time-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-time-literal-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn-nullable;
.

rdfdf:sql-datetime-literal-fn
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-datetime-literal-fn";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn;
.

rdfdf:sql-datetime-literal-fn-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-datetime-literal-fn-nullable";
  virtrdf:inheritFrom rdfdf:singlepart-literal-fn-nullable;
.

rdfdf:sql-varchar-fixedlang-x-any
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-varchar-fixedlang-x-any";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^^{as-name}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{alias-dot}^^{column}^, null, 'x-any')";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLanguageTmpl " 'x-any'";
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_sqlval (case (^{alias-dot}^^{column}^) when '' then 0 else 1 end)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
  virtrdf:qmfIsnumericOfShortTmpl " 0";						# STRING OPTIONAL ... whether the short is number (unlike SSG_VALMODE_NUM, no DATE/TIME etc., only number)
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{tree}^, null, 'x-any')";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " NULL";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " 'x-any'";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (^{tree}^) when '' then 0 else 1 end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (^{tree}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree}^";				# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " ^{sqlval-of-tree}^^{as-name}^";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (isstring (^{sqlval-of-tree}^)) when 0 then NULL else (^{sqlval-of-tree}^) end)^{as-name}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " __rdf_strsqlval (^{sqlval-of-tree}^)^{as-name}^" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
  virtrdf:qmfShortOfNiceSqlvalTmpl " ^{tree}^^{as-name}^" ;				# STRING OPTIONAL
  virtrdf:qmfDtpOfNiceSqlval 182 ;
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_STRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-fixedlang-x-any-SuperFormats
.

rdfdf:sql-varchar-fixedlang-x-any-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-varchar-fixedlang-x-any-nullable
.

rdfdf:sql-varchar-fixedlang-x-any-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-varchar-fixedlang-x-any;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when null then null when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " sparql_ebv_of_sqlval (case (^{alias-dot}^^{column}^) when null then null when '' then 0 else 1 end)";
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when null then null when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (^{tree}^) when null then null when '' then 0 else 1 end)";
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-varchar-fixedlang-x-any-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-varchar-fixedlang-x-any-nullable-SuperFormats
.

rdfdf:sql-varchar-fixedlang-x-any-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longvarchar-fixedlang-x-any
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longvarchar-fixedlang-x-any";
  virtrdf:inheritFrom rdfdf:sql-varchar-fixedlang-x-any;
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as varchar)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case when ^{alias-dot}^^{column}^ is null then null when length (^{alias-dot}^^{column}^) = 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvTmpl " (case when ^{alias-dot}^^{column}^ is null then null when length (^{alias-dot}^^{column}^) = 0 then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as varchar)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " (case when ^{tree}^ is null then null when length (^{tree}^) = 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " case when ^{tree}^ is null then null when length (^{tree}^) = 0 then sparql_ebv_pure (0) else sparql_ebv_pure (1) end";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{tree}^ as varchar))";
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as varchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-fixedlang-x-any-SuperFormats
.

rdfdf:sql-longvarchar-fixedlang-x-any-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longvarchar-fixedlang-x-any-nullable
.

rdfdf:sql-longvarchar-fixedlang-x-any-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longvarchar-fixedlang-x-any;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when null then null when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when null then null when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " sparql_ebv_of_sqlval (case (^{tree}^) when null then null when '' then 0 else 1 end)";
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longvarchar-fixedlang-x-any-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longvarchar-fixedlang-x-any-nullable-SuperFormats
.

rdfdf:sql-longvarchar-fixedlang-x-any-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-nvarchar-fixedlang-x-any
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-nvarchar-fixedlang-x-any";
  virtrdf:qmfShortTmpl " ^{alias-dot}^^{column}^^{as-name}^";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{alias-dot}^^{column}^, null, 'x-any')";	# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " ^{alias-dot}^^{column}^";				# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfLanguageTmpl " 'x-any'";
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " (case (^{alias-dot}^^{column}^) when '' then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " 0";						# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " isnotnull (^{tree}^)";				# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " DB.DBA.RDF_MAKE_LONG_OF_TYPEDSQLVAL (^{tree}^, null, 'x-any')";	# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " ^{tree}^";					# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " NULL";					# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " 'x-any'";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when null then null when '' then 0 else 1 end)";
  virtrdf:qmfSparqlEbvOfShortTmpl " (case (^{tree}^) when null then null when '' then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (^{tree}^)";
  virtrdf:qmfUriOfShortTmpl " NULL";						# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " ^{tree}^";				# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " ^{sqlval-of-tree}^^{as-name}^";	# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " (case (isstring (^{sqlval-of-tree}^)) when 0 then NULL else (^{sqlval-of-tree}^) end)^{as-name}^";	# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " __rdf_strsqlval (^{tree}^)^{as-name}^" ;	# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " NULL" ;						# STRING REQUIRED ... makes short by uri
  virtrdf:qmfShortOfNiceSqlvalTmpl " ^{tree}^^{as-name}^" ;				# STRING OPTIONAL
  virtrdf:qmfDtpOfNiceSqlval 182 ;
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfHasCheapSqlval 1;							# BOOLEAN OPTIONAL Nonzero if conversions of short to sqlval and back are cheaper than to long and back
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_WIDESTRCMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " ''";							# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " '\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF'";			# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "";						# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-fixedlang-x-any-SuperFormats
.

rdfdf:sql-nvarchar-fixedlang-x-any-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-nvarchar-fixedlang-x-any-nullable
.

rdfdf:sql-nvarchar-fixedlang-x-any-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-nvarchar-fixedlang-x-any;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfBoolTmpl " (case (^{alias-dot}^^{column}^) when null then null when '' then 0 else 1 end)";	# STRING REQUIRED Boolean value template, can be NULL
  virtrdf:qmfSparqlEbvTmpl " (case (^{alias-dot}^^{column}^) when null then null when '' then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
  virtrdf:qmfBoolOfShortTmpl " (case (^{tree}^) when null then null when '' then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " (case (^{tree}^) when null then null when '' then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-nvarchar-fixedlang-x-any-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-nvarchar-fixedlang-x-any-nullable-SuperFormats
.

rdfdf:sql-nvarchar-fixedlang-x-any-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

rdfdf:sql-longnvarchar-fixedlang-x-any
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sql-longnvarchar-fixedlang-x-any";
  virtrdf:inheritFrom rdfdf:sql-nvarchar-fixedlang-x-any;
  virtrdf:qmfIsBijection 0;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfSqlvalTmpl " cast (^{alias-dot}^^{column}^ as nvarchar)";		# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " (case (length (^{alias-dot}^^{column}^)) when 0 then 0 else 1 end)";
  virtrdf:qmfSparqlEbvTmpl " (case (length (^{alias-dot}^^{column}^)) when 0 then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
  virtrdf:qmfSqlvalOfShortTmpl " cast (^{tree}^ as nvarchar)";			# STRING REQUIRED ... SQL value from short
  virtrdf:qmfBoolOfShortTmpl " (case (length (^{tree}^)) when 0 then 0 else 1 end)";	# STRING REQUIRED ... boolean value from short
  virtrdf:qmfSparqlEbvOfShortTmpl " (case (length (^{tree}^)) when 0 then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
  virtrdf:qmfIidOfShortTmpl " __i2id (cast (^{tree}^ as nvarchar))";
  virtrdf:qmfStrsqlvalOfShortTmpl " cast (^{tree}^ as nvarchar)";		# STRING REQUIRED ... SQL representation of the STRING value of short
  virtrdf:qmfSuperFormats rdfdf:sql-longnvarchar-fixedlang-x-any-SuperFormats
.

rdfdf:sql-longnvarchar-fixedlang-x-any-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sql-longnvarchar-fixedlang-x-any-nullable
.

rdfdf:sql-longnvarchar-fixedlang-x-any-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sql-longnvarchar-fixedlang-x-any;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfBoolTmpl " (case when ^{alias-dot}^^{column}^ is null then null when (length (^{alias-dot}^^{column}^) = 0) then 0 else 1 end)";
  virtrdf:qmfSparqlEbvTmpl " (case when ^{alias-dot}^^{column}^ is null then null when (length (^{alias-dot}^^{column}^) = 0) then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
  virtrdf:qmfBoolOfShortTmpl " (case when ^{tree}^ is null then null when (length (^{tree}^) = 0) then 0 else 1 end)";
  virtrdf:qmfSparqlEbvOfShortTmpl " (case when ^{tree}^ is null then null when (length (^{tree}^) = 0) then sparql_ebv_pure (0) else sparql_ebv_pure (1) end)";
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_LIT;
  virtrdf:qmfName "sql-longnvarchar-fixedlang-x-any-nullable";
  virtrdf:qmfSuperFormats rdfdf:sql-longnvarchar-fixedlang-x-any-nullable-SuperFormats
.

rdfdf:sql-longnvarchar-fixedlang-x-any-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

virtrdf:DefaultQuadMap
  rdf:type virtrdf:QuadMap;
  virtrdf:qmGraphMap virtrdf:DefaultQuadMap-G;
  virtrdf:qmSubjectMap virtrdf:DefaultQuadMap-S;
  virtrdf:qmPredicateMap virtrdf:DefaultQuadMap-P;
  virtrdf:qmObjectMap virtrdf:DefaultQuadMap-O;
  virtrdf:qmTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmMatchingFlags virtrdf:SPART_QM_OK_FOR_ANY_QUAD
.

virtrdf:DefaultQuadMap-G
      rdf:type virtrdf:QuadMapValue;
      virtrdf:qmvTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmvATables virtrdf:DefaultQuadMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultQuadMap-G-cols;
  virtrdf:qmvFormat rdfdf:default-iid-nonblank;
  virtrdf:qmvColumnsFormKey 0
.

virtrdf:DefaultQuadMap-G-cols
          rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultQuadMap-G-col-G
.

virtrdf:DefaultQuadMap-G-col-G
              rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!pquad";
  virtrdf:qmvcColumnName "G"
.

virtrdf:DefaultQuadMap-S
      rdf:type virtrdf:QuadMapValue;
      virtrdf:qmvTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmvATables virtrdf:DefaultQuadMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultQuadMap-S-cols;
  virtrdf:qmvFormat rdfdf:default-iid;
  virtrdf:qmvColumnsFormKey 0
.

virtrdf:DefaultQuadMap-S-cols
          rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultQuadMap-S-col-S
.

virtrdf:DefaultQuadMap-S-col-S
              rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!pquad";
  virtrdf:qmvcColumnName "S"
.

virtrdf:DefaultQuadMap-P
      rdf:type virtrdf:QuadMapValue;
      virtrdf:qmvTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmvATables virtrdf:DefaultQuadMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultQuadMap-P-cols;
  virtrdf:qmvFormat rdfdf:default-iid-nonblank;
  virtrdf:qmvColumnsFormKey 0
.

virtrdf:DefaultQuadMap-P-cols
          rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultQuadMap-P-col-P
.

virtrdf:DefaultQuadMap-P-col-P
              rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!pquad";
  virtrdf:qmvcColumnName "P"
.

virtrdf:DefaultQuadMap-O
      rdf:type virtrdf:QuadMapValue;
      virtrdf:qmvTableName "DB.DBA.RDF_QUAD";
  virtrdf:qmvATables virtrdf:DefaultQuadMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultQuadMap-O-cols;
  virtrdf:qmvFText virtrdf:DefaultQuadMap-ft;
  virtrdf:qmvGeo virtrdf:DefaultQuadMap-geo;
  virtrdf:qmvFormat rdfdf:default;
  virtrdf:qmvColumnsFormKey 0
.

virtrdf:DefaultQuadMap-O-cols
          rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultQuadMap-O-col-O
.

virtrdf:DefaultQuadMap-O-col-O
              rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!pquad";
  virtrdf:qmvcColumnName "O"
.

virtrdf:DefaultQuadMap-atables
  rdf:type virtrdf:array-of-QuadMapATable;
  rdf:_1 virtrdf:DefaultQuadMap-pquad
.

virtrdf:DefaultQuadMap-pquad
  rdf:type virtrdf:QuadMapATable;
  virtrdf:qmvaAlias "!pquad";
  virtrdf:qmvaTableName "DB.DBA.RDF_QUAD"
.

virtrdf:DefaultQuadMap-ft
  rdf:type virtrdf:QuadMapFText;
  virtrdf:qmvftColumnName "O";
  virtrdf:qmvftXmlIndex 1
.

virtrdf:DefaultQuadMap-geo
  rdf:type virtrdf:QuadMapFText;
  virtrdf:qmvftColumnName "O";
.

# All definitions below this point are for federated SPARQL, so they're mostly fake.

rdfdf:sinv-iid
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sinv-iid";
  virtrdf:qmfShortTmpl " /* sinv-iid?! */";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " /* sinv-iid?! */";				# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " /* sinv-iid?! */";			# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " /* sinv-iid?! */";							# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " /* sinv-iid?! */";						# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " /* sinv-iid?! */";		# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " /* sinv-iid?! */";		# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " /* sinv-iid?! */";						# STRING REQUIRED ... whether the short is literal
# Templates of 0/1 that tell whether the short is of some sort:
  virtrdf:qmf01uriOfShortTmpl " /* sinv-iid?! */";			# STRING REQUIRED ... whether the short is uri, returns 0 or 1
  virtrdf:qmf01blankOfShortTmpl " /* sinv-iid?! */";			# STRING REQUIRED ... whether the short is blank node ref, returns 0 or 1
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " /* sinv-iid?! */";					# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " /* sinv-iid?! */";				# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " /* sinv-iid?! */";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " /* sinv-iid?! */";					# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " /* sinv-iid?! */";						# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " /* sinv-iid?! */";
  virtrdf:qmfUriOfShortTmpl " /* sinv-iid?! */";				# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " /* sinv-iid?! */";		# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " /* sinv-iid?! */";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " /* sinv-iid?! */";		# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " /* sinv-iid?! */";					# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " /* sinv-iid?! */";			# STRING REQUIRED ... makes short by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 0;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLong 1;						# BOOLEAN OPTIONAL Nonzero if the format is subformat of LONG valmode
  virtrdf:qmfIsSubformatOfLongWhenRef 1;					# BOOLEAN OPTIONAL Nonzero if the format is subformat of LONG valmode for values that are IRIs or blank nodes
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_IID_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl "NULL";						# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl "NULL";						# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 0;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sinv-iid-SuperFormats
.

rdfdf:sinv-iid-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sinv-iid-nullable;
  rdf:_2 rdfdf:sinv;
  rdf:_3 rdfdf:sinv-nullable
.

rdfdf:sinv-iid-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sinv-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF;
  virtrdf:qmfName "sinv-iid-nullable";
  virtrdf:qmfSuperFormats rdfdf:sinv-iid-nullable-SuperFormats
.

rdfdf:sinv-iid-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sinv-nullable
.

rdfdf:sinv-iid-nonblank
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sinv-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI, virtrdf:SPART_VARR_NOT_NULL;
  virtrdf:qmfName "sinv-iid-nonblank";
  virtrdf:qmfSuperFormats rdfdf:sinv-iid-nonblank-SuperFormats
.

rdfdf:sinv-iid-nonblank-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sinv-iid-nonblank-nullable;
  rdf:_2 rdfdf:sinv-iid;
  rdf:_3 rdfdf:sinv-iid-nullable;
  rdf:_4 rdfdf:sinv;
  rdf:_5 rdfdf:sinv-nullable
.

rdfdf:sinv-iid-nonblank-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sinv-iid;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_IS_REF, virtrdf:SPART_VARR_IS_IRI;
  virtrdf:qmfName "sinv-iid-nonblank-nullable";
  virtrdf:qmfSuperFormats rdfdf:sinv-iid-nonblank-nullable-SuperFormats
.

rdfdf:sinv-iid-nonblank-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sinv-iid-nullable;
  rdf:_2 rdfdf:sinv-nullable
.

rdfdf:sinv
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:qmfName "sinv";
  virtrdf:qmfShortTmpl " /* sinv?! */";				# STRING REQUIRED "short" value template, can be NULL
  virtrdf:qmfLongTmpl " /* sinv?! */";		# STRING REQUIRED "long" value template, can be NULL
  virtrdf:qmfSqlvalTmpl " /* sinv?! */";	# STRING REQUIRED "sqlval" value template, can be NULL
  virtrdf:qmfBoolTmpl " /* sinv?! */";		# STRING REQUIRED Boolean value template, can be NULL
# Templates of booleans that tell whether the short is of some sort:
  virtrdf:qmfIsrefOfShortTmpl " /* sinv?! */";				# STRING REQUIRED ... whether the short is ref
  virtrdf:qmfIsuriOfShortTmpl " /* sinv?! */";			# STRING REQUIRED ... whether the short is uri
  virtrdf:qmfIsblankOfShortTmpl " /* sinv?! */";			# STRING REQUIRED ... whether the short is blank node ref
  virtrdf:qmfIslitOfShortTmpl " /* sinv?! */";			# STRING REQUIRED ... whether the short is literal
# Templates that convert short value into other types (can be applied to both field and not field expression)
  virtrdf:qmfLongOfShortTmpl " /* sinv?! */";			# STRING REQUIRED ... long from short
  virtrdf:qmfSqlvalOfShortTmpl " /* sinv?! */";		# STRING REQUIRED ... SQL value from short
  virtrdf:qmfDatatypeOfShortTmpl " /* sinv?! */";	# STRING REQUIRED ... datatype IRI STRING from short
  virtrdf:qmfLanguageOfShortTmpl " /* sinv?! */";	# STRING REQUIRED ... language ID STRING from short
  virtrdf:qmfBoolOfShortTmpl " /* sinv?! */";		# STRING REQUIRED ... boolean value from short
  virtrdf:qmfIidOfShortTmpl " /* sinv?! */";
  virtrdf:qmfUriOfShortTmpl " /* sinv?! */";				# STRING REQUIRED ... URI STRING from short
  virtrdf:qmfStrsqlvalOfShortTmpl " /* sinv?! */";	# STRING REQUIRED ... SQL representation of the STRING value of short
# Templates of expressions that make short values from other representations
  virtrdf:qmfShortOfTypedsqlvalTmpl " /* sinv?! */";					# STRING REQUIRED ... makes short by SQL value with specified type and/or language
  virtrdf:qmfShortOfSqlvalTmpl " /* sinv?! */";		# STRING REQUIRED ... makes short by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfShortOfLongTmpl " /* sinv?! */";		# STRING REQUIRED ... makes short by long
  virtrdf:qmfShortOfUriTmpl " /* sinv?! */";	# STRING REQUIRED ... makes short by uri
# Templates of expressions that find existing short values from other representations
  virtrdf:qmfExistingShortOfTypedsqlvalTmpl " /* sinv?! */";	# ... finds existing obj by SQL value with specified type and/or language
  virtrdf:qmfExistingShortOfSqlvalTmpl " /* sinv?! */";	# STRING OPTIONAL ... finds existing obj by sqlvalue with no language and a datatype specified by SQL type
  virtrdf:qmfExistingShortOfLongTmpl " /* sinv?! */";	# STRING OPTIONAL ... finds existing obj by long
  virtrdf:qmfExistingShortOfUriTmpl " /* sinv?! */";		# STRING OPTIONAL ... finds existing obj by uri
# Misc
  virtrdf:qmfIsBijection 1;							# INTEGER REQUIRED Nonzero if the format is bijection so long values are equal IFF short values of the type are equal
  virtrdf:qmfMapsOnlyNullToNull 1;						# INTEGER OPTIONAL Nonzero if the format gives NULL IFF short value is NULL
  virtrdf:qmfIsStable 1;							# INTEGER REQUIRED Nonzero if sql values are in order IFF of short values are in order
  virtrdf:qmfIsSubformatOfLongWhenEqToSql 1;
  virtrdf:qmfIsSubformatOfLongWhenRef 1;
  virtrdf:qmfCmpFuncName "DB.DBA.RDF_OBJ_CMP";					# STRING REQUIRED Name of comparison function that acts like strcmp but args are of this type
  virtrdf:qmfTypeminTmpl " /* sinv?! */";		# STRING REQUIRED Template of expn that returns the smallest value of the type of value of arg
  virtrdf:qmfTypemaxTmpl " /* sinv?! */";		# STRING REQUIRED Template of expn that returns the biggest possible value of the type of value of arg
  virtrdf:qmfWrapDistinct 1;
# Metadata about values that can be stored in this field
  virtrdf:qmfColumnCount 1;							# Number of columns of the oroginal data (usually 1, zero if variable and not yet set)
  virtrdf:qmfOkForAnySqlvalue 1;						# BOOLEAN REQUIRED Nonzero if the field format can store any possible SQL value (even if the field itself can not)
  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
    virtrdf:SPART_VARR_NOT_NULL;
#  virtrdf:qmfValRange-rvrDatatype "";						# ANY_URI OPTIONAL Datatype of stored values, if fixed
#  virtrdf:qmfValRange-rvrLanguage "x-any";					# ANY_URI OPTIONAL Language, if fixed
#  virtrdf:qmfFixedValue "";							# ANY OPTIONAL Value of stored values, if fixed
  virtrdf:qmfUriIdOffset 0;							# INTEGER OPTIONAL The value that should be added to locally stored ref id in order to get portable ref id
  virtrdf:qmfSuperFormats rdfdf:sinv-SuperFormats
.

rdfdf:sinv-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat;
  rdf:_1 rdfdf:sinv-nullable
.

rdfdf:sinv-nullable
  rdf:type virtrdf:QuadMapFormat;
  virtrdf:inheritFrom rdfdf:sinv;
  virtrdf:noInherit virtrdf:qmfValRange-rvrRestrictions;
#  virtrdf:qmfValRange-rvrRestrictions						# BITMASK OPTIONAL Natural restrictions on values stored at the field
#    no restructions ATM;
  virtrdf:qmfName "sinv-nullable";
  virtrdf:qmfSuperFormats rdfdf:sinv-nullable-SuperFormats
.

rdfdf:sinv-nullable-SuperFormats
  rdf:type virtrdf:array-of-QuadMapFormat
.

virtrdf:DefaultServiceMap
  rdf:type virtrdf:QuadMap;
  virtrdf:qmGraphMap virtrdf:DefaultServiceMap-G;
  virtrdf:qmSubjectMap virtrdf:DefaultServiceMap-S;
  virtrdf:qmPredicateMap virtrdf:DefaultServiceMap-P;
  virtrdf:qmObjectMap virtrdf:DefaultServiceMap-O;
  virtrdf:qmTableName "sinv";
  virtrdf:qmMatchingFlags virtrdf:SPART_QM_OK_FOR_ANY_QUAD
.

virtrdf:DefaultServiceMap-G
  rdf:type virtrdf:QuadMapValue;
  virtrdf:qmvTableName "sinv";
  virtrdf:qmvATables virtrdf:DefaultServiceMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultServiceMap-G-cols;
  virtrdf:qmvFormat rdfdf:default-iid-nonblank;
  virtrdf:qmvColumnsFormKey 0
.

virtrdf:DefaultServiceMap-G-cols
  rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultServiceMap-G-col-G
.

virtrdf:DefaultServiceMap-G-col-G
  rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!sinv";
  virtrdf:qmvcColumnName "sinv_G"
.

virtrdf:DefaultServiceMap-S
  rdf:type virtrdf:QuadMapValue;
  virtrdf:qmvTableName "sinv";
  virtrdf:qmvATables virtrdf:DefaultServiceMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultServiceMap-S-cols;
  virtrdf:qmvFormat rdfdf:default-iid;
  virtrdf:qmvColumnsFormKey 0
.

virtrdf:DefaultServiceMap-S-cols
  rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultServiceMap-S-col-S
.

virtrdf:DefaultServiceMap-S-col-S
  rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!sinv";
  virtrdf:qmvcColumnName "sinv_S"
.

virtrdf:DefaultServiceMap-P
  rdf:type virtrdf:QuadMapValue;
  virtrdf:qmvTableName "sinv";
  virtrdf:qmvATables virtrdf:DefaultServiceMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultServiceMap-P-cols;
  virtrdf:qmvFormat rdfdf:default-iid-nonblank;
  virtrdf:qmvColumnsFormKey 0
.

virtrdf:DefaultServiceMap-P-cols
  rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultServiceMap-P-col-P
.

virtrdf:DefaultServiceMap-P-col-P
  rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!sinv";
  virtrdf:qmvcColumnName "sinv_P"
.

virtrdf:DefaultServiceMap-O
  rdf:type virtrdf:QuadMapValue;
  virtrdf:qmvTableName "sinv";
  virtrdf:qmvATables virtrdf:DefaultServiceMap-atables;
  virtrdf:qmvColumns virtrdf:DefaultServiceMap-O-cols;
  virtrdf:qmvFText virtrdf:DefaultServiceMap-ft;
  virtrdf:qmvGeo virtrdf:DefaultServiceMap-geo;
  virtrdf:qmvFormat rdfdf:default;
  virtrdf:qmvColumnsFormKey 0
.

virtrdf:DefaultServiceMap-O-cols
  rdf:type virtrdf:array-of-QuadMapColumn;
  rdf:_1 virtrdf:DefaultServiceMap-O-col-O
.

virtrdf:DefaultServiceMap-O-col-O
  rdf:type virtrdf:QuadMapColumn;
  virtrdf:qmvcAlias "!sinv";
  virtrdf:qmvcColumnName "sinv_O"
.

virtrdf:DefaultServiceMap-atables
  rdf:type virtrdf:array-of-QuadMapATable;
  rdf:_1 virtrdf:DefaultServiceMap-pquad
.

virtrdf:DefaultServiceMap-pquad
  rdf:type virtrdf:QuadMapATable;
  virtrdf:qmvaAlias "!sinv";
  virtrdf:qmvaTableName "sinv"
.

virtrdf:DefaultServiceMap-ft
  rdf:type virtrdf:QuadMapFText;
  virtrdf:qmvftAlias "!sinv";
  virtrdf:qmvftColumnName "sinv_O";
  virtrdf:qmvftConds virtrdf:DefaultServiceMap-ft-conds;
  virtrdf:qmvftTableName "sinv";
  virtrdf:qmvftXmlIndex 1
.

virtrdf:DefaultServiceMap-ft-conds
  rdf:type virtrdf:array-of-string;
.

virtrdf:DefaultServiceMap-geo
  rdf:type virtrdf:QuadMapFText;
  virtrdf:qmvftAlias "!sinv";
  virtrdf:qmvftColumnName "sinv_O";
  virtrdf:qmvftConds virtrdf:DefaultServiceMap-geo-conds;
  virtrdf:qmvftTableName "sinv";
  virtrdf:qmvftXmlIndex 0
.

virtrdf:DefaultServiceMap-geo-conds
  rdf:type virtrdf:array-of-string;
.
