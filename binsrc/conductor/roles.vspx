<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2023 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="roles"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1"
        xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:xhtml="http://www.w3.org/1999/xhtml"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">

  <v:variable name="mode2" type="varchar" default="'browse'" param-name="mode"/>

  <v:variable name="group_sel" type="integer" default="1"/>
  <v:variable name="user_sel" type="integer" default="1"/>
  <v:variable name="roles_read_flag" type="integer" default="0"/>
  <v:variable name="roles_grant_list" type="any" default="null"/>

  <vm:if test="self.mode2 in ('create', 'edit')">
    <table class="ctl_form">
      <v:form name="edit_roles_form" type="simple" method="POST" action="accounts_page.vspx?page=2">
        <input type="hidden" name="role_name" value="<?= get_keyword ('role_name', self.vc_page.vc_event.ve_params, '') ?>"/>
        <input type="hidden" name="mode" value="<?= self.mode2 ?>"/>

        <v:on-post>
          <![CDATA[
            declare val, role_name, g_name varchar;
            declare comp vspx_field;

            if (get_keyword('update', params, '') <> '')
            {
              declare inx, len, r_ident integer;

              if (self.mode2 = 'create')
              {
                comp := control.vc_find_control('name');
                role_name:= trim (comp.ufl_value);
                USER_ROLE_CREATE(role_name);
              }
              else if (self.mode2 = 'edit')
              {
                role_name := get_keyword ('role_name', params);
              }
              comp := control.vc_find_control ('desc_update');
              val := comp.ufl_value;
              update sys_users set U_FULL_NAME = val where U_NAME = role_name;
              select distinct U_ID into r_ident from SYS_USERS where U_NAME= role_name and U_IS_ROLE =1;
              if (exists (select GI_SUPER from SYS_ROLE_GRANTS where GI_GRANT = r_ident and GI_DIRECT = 1))
              {
                for select GI_SUPER  from SYS_ROLE_GRANTS  where  GI_GRANT = r_ident and GI_DIRECT =1 do
                {
                  select distinct U_NAME into g_name from SYS_USERS where U_ID = GI_SUPER;
                  if (g_name <> '')
                  {
                    declare exit handler for sqlstate '*'
                    {
                      dbg_obj_print (__SQL_MESSAGE);
                    };
                    USER_REVOKE_ROLE (g_name, role_name);
                  }
                }
              }

              inx := 0;
              len := length (self.roles_grant_list);
              while (inx < len)
              {
                USER_GRANT_ROLE (self.roles_grant_list [inx], role_name);
                inx := inx + 1;
              }
              http_request_status ('HTTP/1.1 302 Found');
              http_header (sprintf ('Location: accounts_page.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
            }
            else if (get_keyword ('load_update', params) <> '')
            {
              comp := control.vc_find_control('gp_update');
              self.group_sel := comp.ufl_selected;
              comp := control.vc_find_control('us_update');
              self.user_sel := comp.ufl_selected;
            }
            else if (get_keyword ('grant_update', params) <> '')
            {
              declare cnt, i integer;

              cnt := length (params);
              for (i := 0; i < cnt; i := i + 2)
              {
                if (params[i] = 'roles_users_update')
                {
                  self.roles_grant_list := vector_concat (self.roles_grant_list, vector (params[i + 1]));
                }
              }
            }
            else if (get_keyword('revoke_update', params) <> '')
            {
              declare cnt, i, size, indx , flag_  integer;
              declare roles any;

              roles := vector ();
              cnt := length (self.roles_grant_list);
              size := length (params);
              for (i := 0; i < cnt; i := i + 1)
              {
                indx := 0;
                flag_ := 0;
                while (indx < size)
                {
                  if (params[indx] = 'sel_list_update' and self.roles_grant_list[i] = params[indx+1])
                    flag_:= 1;

                  indx := indx + 2;
                }
                if (flag_ = 0)
                  roles := vector_concat (roles, vector (self.roles_grant_list [i]));
              }
              self.roles_grant_list := vector();
              cnt := length (roles);
              for (i := 0; i < cnt; i := i + 1)
              {
                self.roles_grant_list := vector_concat (self.roles_grant_list, vector (roles [i]));
              }
            }
            declare inx, len integer;

            comp := control.vc_find_control ('sel_list_update');
            (comp as vspx_select_list).vsl_items := vector();
            (comp as vspx_select_list).vsl_item_values := vector();
            inx := 0;
            len := length (self.roles_grant_list);
            while (inx < len)
            {
              (comp as vspx_select_list).vsl_items := vector_concat ((comp as vspx_select_list).vsl_items, vector (self.roles_grant_list [inx]));
              (comp as vspx_select_list).vsl_item_values := vector_concat ((comp as vspx_select_list).vsl_item_values, vector (self.roles_grant_list [inx]));
              inx := inx + 1;
            }
            (comp as vspx_select_list).vsl_selected_inx := 0;
          ]]>
        </v:on-post>
        <tr>
          <th>Role Name</th>
        <?vsp
          if (self.mode2 = 'create')
          {
        ?>
          <td>
            <v:text name="name" xhtml_style="width: 100%;" />
          </td>
        <?vsp
          }
          else if (self.mode2 = 'edit')
          {
        ?>
          <td><?V get_keyword('role_name', control.vc_page.vc_event.ve_params) ?></td>
        <?vsp
          }
        ?>
        </tr>
        <tr>
          <th valign="top">Description</th>
          <td>
            <v:textarea class="widget_full_width" name="desc_update" xhtml_id="desc_update" xhtml_style="width: 99%; height: 100px;">
              <v:before-data-bind>
                <![CDATA[
                  if (get_keyword('update', params, '') = '')
                  {
                    if (isnull (get_keyword ('desc_update', control.vc_page.vc_event.ve_params)))
                    {
                      control.ufl_value := coalesce ((select U_FULL_NAME from DB.DBA.SYS_USERS where U_NAME = get_keyword ('role_name', control.vc_page.vc_event.ve_params)), '');
                    }
                    else
                    {
                      control.ufl_value := get_keyword ('desc_update', control.vc_page.vc_event.ve_params);
                    }
                    control.vc_data_bound := 1;
                  }
                ]]>
              </v:before-data-bind>
            </v:textarea>
          </td>
        </tr>
        <tr>
          <th valign="top">Grants</th>
          <td>
            Show:
            <label>
              <v:check-box name="us_update" value="1" initial-checked="1" /> Users
            </label>
            <label>
              <v:check-box name="gp_update" value="1" initial-checked="1" /> Roles
            </label>
            <v:button name="load_update" action="submit" value="Reload"/>
          </td>
        </tr>
        <tr>
          <th valign="top"></th>
          <td>
            <table class="complex_selector">
              <tr class="complex_selector_header">
                <th>Available users/groups</th>
                <th/>
                <th>Selected users/groups</th>
              </tr>
              <tr>
                <td> <!-- select box for available-->
                  <?vsp
                    http ('<select class="complex_selector" name="roles_users_update" size="10" style="width:216px" multiple="TRUE">');
                    for (select U_NAME, U_IS_ROLE from DB.DBA.SYS_USERS where U_NAME <> get_keyword ('role_name', self.vc_page.vc_event.ve_params, '')) do
                    {
                      if ((self.group_sel = 1 and U_IS_ROLE = 1) or (self.user_sel = 1 and U_IS_ROLE = 0))
                      {
                        if (isnull (self.roles_grant_list) or (position (U_NAME, self.roles_grant_list) = 0))
                        {
                          http (sprintf ('<option>%s</option>', U_NAME));
                        }
                      }
                    }
                    http('</select>');
                  ?>
                </td>
                <td> <!-- move buttons -->
                  <v:button class="complex_selector" name="grant_update" action="submit" value=">>"/>
                  <br/>
                  <v:button class="complex_selector" name="revoke_update" action="submit" value="<<"/>
                </td>
                <td> <!-- select box for chosen -->
                  <v:select-list xhtml_class="complex_selector" name="sel_list_update" xhtml_size="10" xhtml_style="width:216px" xhtml_multiple="TRUE" >
                    <v:before-data-bind>
                      <![CDATA[
                        if ((self.roles_read_flag = 0) and (get_keyword('update', control.vc_page.vc_event.ve_params, '') = ''))
                        {
                          declare u_ident integer;
                          declare g_name varchar;

                          g_name := get_keyword('role_name', control.vc_page.vc_event.ve_params, '');
                          self.roles_grant_list := vector();
                          u_ident := (select distinct U_ID from SYS_USERS where U_NAME= g_name and U_IS_ROLE = 1);
                          for (select GI_SUPER from SYS_ROLE_GRANTS where GI_GRANT = u_ident and GI_DIRECT = 1) do
                          {
                            if (exists (select distinct U_NAME from SYS_USERS where U_ID = GI_SUPER ))
                            {
                              select distinct U_NAME  into g_name from SYS_USERS where U_ID = GI_SUPER;
                              if (g_name is not null and g_name <> '')
                                self.roles_grant_list := vector_concat (self.roles_grant_list, vector(g_name));
                            }
                          }
                          declare inx, len integer;

                          control.vsl_items := vector();
                          control.vsl_item_values:= vector();
                          len := length (self.roles_grant_list);
                          for (inx := 0; inx < len; inx := inx + 1)
                          {
                            control.vsl_items := vector_concat (control.vsl_items, vector (self.roles_grant_list[inx]));
                            control.vsl_item_values := vector_concat (control.vsl_item_values, vector (self.roles_grant_list[inx]));
                          }
                          control.vsl_selected_inx := 0;
                        }
                        self.roles_read_flag := 1;
                        control.vc_data_bound := 1;
                      ]]>
                    </v:before-data-bind>
                  </v:select-list>
                </td> <!-- end select box for chosen -->
              </tr>
            </table>
          </td>
        </tr>
        <tr>
          <th valign="top"></th>
          <td>
            <v:button action="submit" name="cancel_update" value="Cancel">
              <v:on-post>
                <![CDATA[
                  http_request_status ('HTTP/1.1 302 Found');
                  http_header (sprintf ('Location: accounts_page.vspx?page=2&sid=%s&realm=%s\r\n', self.sid, self.realm));
                ]]>
              </v:on-post>
            </v:button>
            <v:button action="submit" name="update" value="-- case when self.mode2 = 'edit' then 'Update' else 'Create' end"/>
          </td>
        </tr>
      </v:form>
    </table>
  </vm:if>

  <vm:if test="self.mode2 not in ('create', 'edit')">
    <v:variable persist="1" name="search_mask2" type="varchar" default="'%'"/>
    <v:variable persist="1" name="pattern_value2" type="varchar" default="'%'"/>
    <v:variable persist="1" name="pattern_where2" type="varchar" default="'1'"/>
    <v:variable name="ord2" type="varchar" default="'1'" />
    <v:variable name="ord2_seq" type="varchar" default="'asc'" />

    <v:method name="ord2_set" arglist="in x any, inout e vspx_event, inout ds vspx_data_set">
      <![CDATA[
        if (self.ord2 = x)
        {
          self.ord2_seq := case when (self.ord2_seq = 'asc') then 'desc' else 'asc' end;
        }
        else
        {
          self.ord2 := x;
          self.ord2_seq := 'asc';
        }
      ]]>
    </v:method>

    <v:form name="sf2" type="simple" action="" method="POST">
      <div class="search_area">Show roles
        <v:select-list name="howto2" value="--self.pattern_where2">
          <v:item name="Starting with" value="1" />
          <v:item name="Containing" value="2" />
          <v:item name="Ending with" value="3" />
          <v:item name="Exact match" value="4" />
        </v:select-list>
        <v:text name="pattern_text2" value="--self.pattern_value2"/>
        <v:button name="submit2" action="simple" value="Filter">
          <v:on-post>
            <![CDATA[
              self.pattern_where2 := self.howto2.ufl_value;
              self.pattern_value2 := self.pattern_text2.ufl_value;
              self.search_mask2 :=
                case self.pattern_where2
                  when '1' then self.pattern_value2 || '%'
                  when '2' then '%' || self.pattern_value2 || '%'
                  when '3' then '%' || self.pattern_value2
                  else self.pattern_value2
                end;

              if (self.search_mask2 = '')
                self.search_mask2 := '%';

              self.ds2.vc_reset ();
              self.vc_data_bind (e);
            ]]>
           </v:on-post>
         </v:button>
        <v:button name="reset2" action="simple" value="Clear">
          <v:on-post>
            <![CDATA[
              self.pattern_where2 := '1';
              self.pattern_value2 := '%';
              self.search_mask2 := '%';
              self.howto2.vc_data_bind (e);
              self.pattern_text2.ufl_value := '';

              self.ds2.vc_reset ();
              self.vc_data_bind (e);
            ]]>
          </v:on-post>
        </v:button>
      </div>
    </v:form>

    <v:data-source
        name="dsrc2"
        expression-type="sql"
        nrows="20"
        initial-offset="0">
      <v:before-data-bind>
        <![CDATA[
          if (e.ve_is_post and e.ve_button is not null)
          {
            declare ord_button varchar;

            ord_button := e.ve_button.vc_name;
            if (ord_button like 'ord_%')
            {
              ord_button := subseq (ord_button, 5);
              self.ord2_set (ord_button, e, self.ds2);
            }
          }
          control.ds_sql := 'select U_NAME, coalesce (U_FULL_NAME, \'\') U_FULL_NAME from DB.DBA.SYS_USERS where U_IS_ROLE = 1 and U_NAME like ?';
          if (self.ord2 <> '')
            control.ds_sql := control.ds_sql || ' order by ' || self.ord2 || ' ' || self.ord2_seq;

          control.ds_parameters := null;
          control.add_parameter (self.search_mask2);
        ]]>
      </v:before-data-bind>
      <v:after-data-bind>
        control.ds_make_statistic ();
      </v:after-data-bind>
    </v:data-source>

    <v:data-set name="ds2" data-source="self.dsrc2" scrollable="1">

      <div class="navigation">
        <vm:ds-navigation-new data-set="ds2"/>
      </div>

      <v:template name="ds2_header" type="simple" name-to-remove="table" set-to-remove="bottom">
        <table class="listing">
          <thead>
            <tr>
              <th>
                <v:button action="simple" name="ord2_1" value="Account Name" style="url" />
                <?vsp http (self.ord_show (self.ord2, self.ord2_seq, '1')); ?>
              </th>
              <th>
                <v:button action="simple" name="ord2_2" value="Description" style="url" />
                <?vsp http (self.ord_show (self.ord2, self.ord2_seq, '2')); ?>
              </th>
              <th class="action new_item">
                <v:url name="new_role2" url="accounts_page.vspx?page=2&mode=create" value="Create Role" />
              </th>
            </tr>
          </thead>
        </table>
      </v:template>

      <v:template name="ds2_repeat" type="repeat">
        <v:template name="ds2_empty" type="if-not-exists">
          <tr>
            <td class="listing_empty" colspan="3">
              No role names match given pattern
            </td>
          </tr>
        </v:template>

        <v:template name="ds2_browse" type="browse">
          <tr>
            <td nowrap="1">
              <img src="images/icons/group_16.png" alt="User" title="User"/>
              <v:label name="ds2_label1" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" format="%s"/>
           </td>
            <td nowrap="1">
              <v:label name="ds2_label2" value="--(control.vc_parent as vspx_row_template).te_rowset[1]" format="%s"/>
           </td>
           <td class="action">
             <v:button action="simple"
                       style="image"
                       name="edit2"
                       value="images/icons/edit_16.png"
                       url="--concat ('accounts_page.vspx?page=2&mode=edit&role_name=', (control.vc_parent as vspx_row_template).te_rowset[0])"
                       xhtml_alt="Edit"
                       xhtml_title="Edit"
                       text="&nbsp;Edit"
             />
             <v:button action="simple"
                       style="image"
                       name="delete2"
                       value="images/icons/trash_16.png"
                       url="--concat('role_remove.vspx?mode=delete&role_name=', (control.vc_parent as vspx_row_template).te_rowset[0])"
                       xhtml_alt="Delete"
                       xhtml_title="Delete"
                       text="&nbsp;Delete"
             />
            </td>
          </tr>
        </v:template>
      </v:template>

      <v:template name="ds2_remain" type="simple">
        <?vsp
          declare n, n_remain integer;

          n_remain := self.ds2.ds_data_source.ds_nrows - self.ds2.ds_data_source.ds_rows_fetched;
          for (n := 0; n < n_remain; n := n + 1)
          {
            http ('<tr><td colspan="3">&nbsp;</td></tr>');
          }
       ?>
      </v:template>

      <v:template name="ds2_dummy" type="simple" name-to-remove="table" set-to-remove="top">
        <table>
        </table>
      </v:template>
    </v:data-set>
  </vm:if>
</v:page>
