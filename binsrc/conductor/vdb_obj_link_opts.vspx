<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="databases"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        fast-render="1"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Virtuoso External Datasource Management</vm:pagetitle>
  <vm:pagewrapper>
    <vm:scripts>
      <?vsp
        http ('<script language="JavaScript" type="text/javascript" src="admin_utils.js"></script>');
      ?>
    </vm:scripts>

    <vm:variables>
      <v:variable name="current_dsn" type="varchar" default="null" param-name="dsn"/>
      <v:variable name="s_stables" persist="1" type="any" default="null" />
      <v:variable name="s_tables" persist="1" type="any" default="null" />
      <v:variable name="s_views" persist="1" type="any" default="null" />
      <v:variable name="s_procs" persist="1" type="any" default="null" />
      <v:variable name="pks_t" persist="1" type="any" default="null" />
      <v:variable name="sel_pk" persist="1" type="any" default="null" />
      <v:variable name="pks_st" persist="1" type="any" default="null" />
      <v:variable name="pks_v" persist="1" type="any" default="null" />
      <v:variable name="proc_col_mode" persist="temp" type="any" default="null" />
      <v:variable name="xsd_types" persist="temp" type="any" default="null" />
      <v:variable persist="1" name="vdb_object_errs" type="any" default="null"/>
      <v:variable name="ret_bmk" type="varchar" default="null" param-name="bmk"/>
    </vm:variables>

    <vm:menu>
      <vm:menuitem value="External Data Sources"/>
    </vm:menu>

    <vm:header caption="External Data Sources">
    </vm:header>

    <vm:pagebody vdb_check="1">
      <vm:help id="vdb_obj_link_opts" sect=""/>
      <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
        <tr valign='top'>
          <td>
            <table cellpadding='10' cellspacing='0' border='0' width='100%'>
              <tr>
                <td>
                  <table cellpadding="0" cellspacing="0" border="0">
                    <tr>
                      <td class="page_tab" align="center">
                        <v:url name="b_url31" value="External Linked Objects" url="vdb_linked_obj.vspx" xhtml_class="uddi"/>
                      </td>
                      <td class="page_tab_selected" align="center">Data Sources</td>
                      <td class="page_tab" align="center">
                        <v:url name="b_url32" url="vdb_config_dsn.vspx" value="Configure Data Sources" xhtml_class="uddi"/>
                      </td>
                      <td class="page_tab_empty" align="center" width="100%">
                        &amp;nbsp;
                      </td>
                    </tr>
                  </table>

                  <table class="tab_page">
                    <tr>
                      <td valign="top">
                        <!-- MAIN -->
                        <v:template name="vdb_link_confirmation" type="simple" >
                          <v:on-init>
                            self.proc_col_mode := vector ('IN','OUT','INOUT','RETURNS');
                            self.xsd_types :=
                            vector (
                            'xsd:string', 'http://www.w3.org/2001/XMLSchema:string',
                            'xsd:int', 'http://www.w3.org/2001/XMLSchema:int',
                            'xsd:float','http://www.w3.org/2001/XMLSchema:float',
                            'xsd:double','http://www.w3.org/2001/XMLSchema:double',
                            'xsd:decimal','http://www.w3.org/2001/XMLSchema:decimal',
                            'xsd:dateTime', 'http://www.w3.org/2001/XMLSchema:dateTime',
                            'void', '__VOID__'
                            );
                          </v:on-init>
                          <br/>
                          <table width="100%">
                            <tr class="subpage_header_area">
                              <td>
                                <img class="dialog_icon" src="images/icons/about_32.png" alt="Stop" title="Stop"/>
                                Linking objects from data source <b><?V self.current_dsn ?></b>.
                                <!-- move into thehelp
                                <br/>
                                If you wish to make modifications to local names and other properties of the objects being linked, you may do so now.<br/>Hit 'Link' to proceed.
                                -->
                              </td>
                            </tr>
                            <tr>
                              <td class="Warning"/>
                            </tr>
                            <tr class="main_page_area">
                              <td>
                                <v:form name="link_options_form" type="simple" method="POST" action="">
                                  <div class="listing_top_ctl_grp">
                                    <v:text name="mass_tbq" xhtml_size="3" value="">
                                      <v:before-render>
                                        control.ufl_value := '';
                                      </v:before-render>
                                    </v:text>.
                                    <v:text name="mass_tbo" xhtml_size="15" value="">
                                      <v:before-render>
                                        control.ufl_value := '';
                                      </v:before-render>
                                    </v:text>.[TABLE]
                                    <v:button name="mass_set" action="simple" value="Set To All">
                                      <v:on-post>
                                        <![CDATA[
                                          declare i, l,dst_arr,tmp_arr any;
                                          declare _views integer;

                                          _views := 0;

                                          if (self.mass_tbq.ufl_value <> '' or self.mass_tbo.ufl_value <> '')
                                          {
                                          _loop:;
                                            i := 0;
                                            if (_views)
                                              dst_arr := self.s_views;
                                            else
                                              dst_arr := self.s_tables;

                                            l := length(dst_arr);
                                            while (i < l)
                                            {
                                              tmp_arr := dst_arr[i][1];
                                              if (self.mass_tbq.ufl_value <> '')
                                                aset(tmp_arr,0,self.mass_tbq.ufl_value);

                                              if (self.mass_tbo.ufl_value <> '')
                                                aset(tmp_arr,1,self.mass_tbo.ufl_value);

                                              dst_arr[i][1] := tmp_arr;
                                              i:= i + 1;
                                            }
                                            if (_views)
                                              self.s_views := dst_arr;
                                            else
                                              self.s_tables := dst_arr;

                                            if (_views = 0)
                                            {
                                              _views := 1;
                                              goto _loop;
                                            }

                                            i := 0;
                                            dst_arr := self.s_procs;
                                            while (i < length(dst_arr))
                                            {
                                              if (self.mass_tbq.ufl_value <> '')
                                                aset(dst_arr,i + 1,self.mass_tbq.ufl_value);

                                              if (self.mass_tbo.ufl_value <> '')
                                                aset(dst_arr,i + 2,self.mass_tbo.ufl_value);

                                              i := i + 7;
                                            }
                                            self.s_procs := dst_arr;
                                            --self.vc_data_bind(e);
                                          }
                                        ]]>
                                      </v:on-post>
                                    </v:button>
                                  </div>

                                  <table  width="100%">
                                    <tr>
                                      <th align="center">Tables and views</th>
                                    </tr>
                                    <tr>
                                      <td>
                                        <?vsp
                                          declare i, len, vlen integer;
                                          declare cols, tmp_vec any;
                                          declare col_name, col_type, col_mode varchar;
                                          declare _r_tbl, _l_tbl any;
                                          declare pref any;

                                          len := length (self.s_tables);
                                          vlen := length (self.s_views);
                                          i := 0;

                                          if (len > 0 or vlen > 0)
                                          {
                                            declare arr, tbls any;

                                            http ('<table class="listing">');
                                            http ('  <tr class="listing_header_row">');
                                            http ('    <th>Remote Table Name</th>');
                                            http ('    <th>Catalog</th>');
                                            http ('    <th>Owner (Schema)</th>');
                                            http ('    <th>Link as</th>');
                                            http ('    <th>Primary key(s)</th>');
                                            http ('    <th class="action">Action</th>');
                                            http ('  </tr>');

                                            if (not isarray (self.sel_pk))
                                              self.sel_pk := vector ();

                                            arr := self.s_tables;
                                            tbls := 1;
                                            pref := 't';

                                          againt:
                                            len := length (arr);
                                            i := 0;

                                            while (i < len)
                                            {
                                              declare pkeys any;
                                              declare rtbl_name varchar;

                                              _r_tbl := arr[i][0];
                                              _l_tbl := arr[i][1];

                                              http ('<tr style="background-color: #fff;">');
                                              if (length (_r_tbl[0]))
                                              {
                                                http (sprintf('<td style="background-color: #f0f0f0;">%s.%s.%s</td>', _r_tbl[0], _r_tbl[1], _r_tbl[2]));
                                                rtbl_name := concat (_r_tbl[0], '.', _r_tbl[1], '.', _r_tbl[2]);
                                              }
                                              else if (length (_r_tbl[1]))
                                              {
                                                http (sprintf('<td style="background-color: #f0f0f0;">%s.%s</td>', _r_tbl[1], _r_tbl[2]));
                                                rtbl_name := concat ('.', _r_tbl[1], '.', _r_tbl[2]);
                                              }
                                              else
                                              {
                                                http (sprintf('<td style="background-color: #f0f0f0;">%s</td>', _r_tbl[2]));
                                                rtbl_name := '..' || _r_tbl[2];
                                              }
                                              http (sprintf('<td><input type="text" name="%s_catalog_%d" value="%s" style="width: 100%%; max-width: 10em;"/></td>', pref, i, case when length (_l_tbl[0]) then _l_tbl[0] else 'DB' end));
                                              http (sprintf('<td><input type="text" name="%s_schema_%d" value="%s" style="width: 100%%; max-width: 20em;" /></td>', pref, i, _l_tbl[1]));
                                              http (sprintf('<td><input type="text" name="%s_name_%d" value="%s" style="width: 100%%; max-width: 40em;" /></td>', pref, i, _l_tbl[2]));
                                              http ('<td>');

                                              pkeys := get_keyword (rtbl_name, self.sel_pk);
                                              if (pkeys is null)
                                              {
                                                pkeys := vdb_get_pkeys (self.current_dsn, _r_tbl[0], _r_tbl[1], _r_tbl[2]);
                                              }
                                              else
                                              {
                                                declare tmp any;
                                                if (pref = 't')
                                                {
                                                  tmp := self.pks_t;
                                                  tmp[i] := pkeys;
                                                  self.pks_t := tmp;
                                                }
                                                else if (pref = 'v')
                                                {
                                                  tmp := self.pks_v;
                                                  tmp[i] := pkeys;
                                                  self.pks_v := tmp;
                                                }
                                              }

                                              if (length (pkeys) > 0)
                                              {
                                                for (declare x any, x := 0; x < length (pkeys) ; x := x + 1)
                                                {
                                                  http (sprintf('%s', pkeys[x]));
                                                  if (x < length (pkeys) - 1)
                                                    http (', ');
                                                }
                                              }
                                              else
                                              {
                                                http ('-');
                                              }

                                              http ('</td>');
                                              http ('<td class="action">');
                                              http (sprintf ('&nbsp;<a href="vdb_obj_link_pk.vspx?sid=%s&realm=%s&tbl=%U&pks=%U&dsn=%U"><img src="images/icons/edit_16.png" border="0" alt="Edit" title="Edit" />&nbsp;Edit</a>', self.sid, self.realm, rtbl_name, encode_base64 (serialize (pkeys)), self.current_dsn));
                                              http ('</td></tr>');

                                              i := i + 1;
                                            }

                                            if (tbls)
                                            {
                                              tbls := 0;
                                              pref := 'v';
                                              arr := self.s_views;

                                              goto againt;
                                            }

                                            http ('</table>');
                                          }
                                          else
                                          {
                                            http ('No table or view is selected.');
                                          }
                                        ?>
                                      </td>
                                    </tr>
                                  </table>
                                  <hr/>
                                  <table>
                                    <tr>
                                      <th align="center">Procedures</th>
                                    </tr>
                                    <tr>
                                      <td>
                                        <script language="JavaScript">
                                          <![CDATA[
                                            function ShowHideOptions(btn,inx)
                                            {
                                              var opt_row = document.getElementById('pr_prop_row_' + inx);
                                              if (btn.value == 'Show Options') {
                                                if (opt_row)
                                                  opt_row.style.display = "";

                                                opt_row.visible = true;
                                                btn.value = 'Hide Options';
                                              } else {
                                                if (opt_row) {
                                                  opt_row.style.display = "none";
                                                  opt_row.visible = false;
                                                }
                                                btn.value = 'Show Options';
                                              }
                                            }
                                          ]]>
                                        </script>
                                        <?vsp
                                          declare i, len, j , n, l, k integer;
                                          declare cols, tmp_vec any;
                                          declare col_name, col_type, col_mode varchar;

                                          len := length (self.s_procs);
                                          i := 0;

                                          if (len > 0)
                                          {
                                            http ('<table class="listing">');
                                            http ('  <tr class="listing_header_row">');
                                            http ('    <th>Remote Name</th>');
                                            http ('    <th>Catalog</th>');
                                            http ('    <th>Owner (Schema)</th>');
                                            http ('    <th>Link as</th>');
                                            http ('    <th class="action">Action</th>');
                                            http ('  </tr>');

                                            while (i < len)
                                            {
                                              http ('<tr style="background-color: #fff;">');
                                              http (sprintf('<td style="background-color: #f0f0f0;">%s</td>', aref(self.s_procs,i)));
                                              http (sprintf('<td><input type="text" name="catalog_%d" value="%s" style="width: 100%%; max-width: 10em;"/></td>', i, coalesce (aref (self.s_procs, i + 1), 'DB')));
                                              http (sprintf('<td><input type="text" name="schema_%d" value="%s" style="width: 100%%; max-width: 20em;"/></td>', i, aref (self.s_procs, i + 2)));
                                              http (sprintf('<td><input type="text" name="name_%d" value="%s" style="width: 100%%; max-width: 40em;"/></td>', i, aref (self.s_procs, i + 3)));
                                              --http (sprintf('<td><input type="text" name="COMMENT_%d" value="" /></td>', i));
                                              http (sprintf('<td><input type="button" name="sh_%d" value="Show Options" onclick="ShowHideOptions(this,%d)"/></td>', i,i));
                                              http ('</tr>');
                                              http (sprintf('<tr style="display:none;" id="pr_prop_row_%d"><td colspan="5">',i));
                                              http (sprintf('<label for="COMMENT_%d"><b>Description</b></label>',i));
                                              http (sprintf('<input type="text" name="COMMENT_%d" value="" />', i));
                                              http ('<br/>');
                                              http (sprintf('<label for="wrap_0_%d"><b>PL Wrapper Requirement</b></label>',i));
                                              --http ('<tr><th colspan=">PL Wrapper Requirement</th><td colspan="4">');
                                              http (sprintf('<input type="radio" id="wrap_0_%d" name="wrap_0_%d" value="wrap" checked="true"/>SOAP Execution',i,i));
                                              http (sprintf('<input type="radio" id="wrap_0_%d" name="wrap_0_%d" value="rset" />SQL Execution',i,i));
                                              http (sprintf('<input type="radio" id="wrap_0_%d" name="wrap_0_%d" value="attach" />None',i,i));
                                              --http ('</td></tr>');
                                              --http ('</table>');
                                              cols := aref (self.s_procs,i + 6);
                                              n := length (cols);
                                              j := 0;
                                              http ('<table>');
                                              http ('<tr>');
                                              http ('<th colspan="4" align="center">Parameters</th>');
                                              http ('</tr>');
                                              http ('<tr><th>Type</th><th>Name</th><th>Data Type</th><th>SOAP Type</th></tr>');
                                              while (j < n)
                                              {
                                                col_mode := aref (aref (cols, j), 0);
                                                col_name := aref (aref (cols, j), 1);
                                                col_type := aref (aref (cols, j), 2);
                                                http ('<tr class=""><td>');
                                                http (sprintf ('<select name="parm_%d_%s_io">', j, col_name));
                                                tmp_vec := self.proc_col_mode;
                                                k := length (tmp_vec);
                                                l := 0;

                                                while (l < k)
                                                {
                                                  http (sprintf ('<option value="%s"', aref (tmp_vec, l)));

                                                  if (aref (tmp_vec, l) = upper (col_mode))
                                                    http ('selected="true"');

                                                  http (sprintf ('>%s</option>', aref (tmp_vec, l)));
                                                  l := l + 1;
                                                }

                                                http ('</select></td>');
                                                http (sprintf ('<td>%s</td>', col_name));
                                                http (sprintf ('<td><select name="parm_%d_%s_t">', i, col_name));
                                                tmp_vec := get_vdb_data_types ();
                                                k := length (tmp_vec);
                                                l := 0;

                                                while (l < k)
                                                {
                                                  http (sprintf ('<option value="%s"', aref (tmp_vec,l) ));
                                                  if (aref (tmp_vec,l) = upper (col_type))
                                                    http ('selected="true"');
                                                  http (sprintf ('>%s</option>\n',aref (tmp_vec,l)));
                                                  l := l + 1;
                                                }

                                                http ('</select></td>\n');
                                                http (sprintf ('<td><select name="parm_%d_%s_s">\n<option value="" selected="true">*none*</option>\n ',i,col_name));
                                                tmp_vec := self.xsd_types;
                                                k := length (tmp_vec);
                                                l := 0;

                                                while (l < k)
                                                {
                                                  http (sprintf ('<option value="%s"', aref (tmp_vec,l+1) ));
                                                  http (sprintf ('>%s</option>\n',aref (tmp_vec,l) ));
                                                  l := l + 2;
                                                }
                                                http ('</select>\n</td></tr>');
                                                j := j + 1;
                                              }
                                              http ('</table>');
                                              --http ('<tr><td colspan="5">&nbsp;</td></tr>');
                                              i := i + 7;
                                            }
                                            http ('</table>');
                                          }
                                          else
                                          {
                                            http ('None selected');
                                          }
                                        ?>
                                      </td>
                                    </tr>
                                  </table>
                                  <v:button action="simple" name="proc_link_cancel" value="Cancel">
                                    <v:on-post>
                                      <v:script>
                                        <![CDATA[
                                          self.s_stables := null;
                                          self.s_tables := null;
                                          self.s_views := null;
                                          self.s_procs := null;
                                          self.pks_t := null;
                                          self.pks_v := null;
                                          self.sel_pk := null;
                                          self.vc_redirect (sprintf('vdb_conn_dsn.vspx#%s',self.ret_bmk));
                                          return;
                                        ]]>
                                      </v:script>
                                    </v:on-post>
                                  </v:button>
                                  <v:button action="simple" name="proc_link_apply" value="Link">
                                    <v:on-post>
                                      <v:script>
                                        <![CDATA[
                                          declare i, len, j , n, l, k integer;
                                          declare cols, l_procs any;
                                          declare local_cat,
                                                  local_sch,
                                                  local_name,
                                                  col_name,
                                                  col_type,
                                                  col_mode,
                                                  col_soap_type,
                                                  wrap_mode,
                                            comments varchar;

                                          l_procs := self.s_procs;
                                          len := length (l_procs);
                                          i := 0;

                                          while (i < len)
                                          {
                                            local_cat := get_keyword (sprintf ('catalog_%d', i), params);
                                            local_sch := get_keyword (sprintf ('schema_%d', i), params);
                                            local_name := get_keyword (sprintf ('name_%d', i), params);
                                            wrap_mode := get_keyword (sprintf ('wrap_0_%d', i), params);
                                            comments := get_keyword (sprintf ('COMMENT_%d', i), params);
                                            aset (l_procs,i + 1, local_cat);
                                            aset (l_procs,i + 2, local_sch);
                                            aset (l_procs,i + 3, local_name);
                                            aset (l_procs,i + 4, wrap_mode);
                                            aset (l_procs,i + 5, comments);
                                            cols := aref(l_procs,i + 6);
                                            n := length (cols);
                                            j := 0;

                                            while (j < n)
                                            {
                                              col_mode := aref (aref (cols, j), 0);
                                              col_name := aref (aref (cols, j), 1);
                                              col_type := aref (aref (cols, j), 2);
                                              col_mode := get_keyword (sprintf ('parm_%d_%s_io', j, col_name), params);
                                              col_type := get_keyword (sprintf ('parm_%d_%s_t', i, col_name), params);
                                              col_soap_type := get_keyword (sprintf ('parm_%d_%s_s', i, col_name), params);
                                              aset (cols, j , vector (col_mode, col_name, col_type, col_soap_type));
                                              j := j + 1;
                                            }

                                            aset (l_procs, i + 6, cols);
                                            i := i + 7;
                                          }

                                          declare errs any;

                                          errs := vector();
                                          vdb_link_procedures (self.vc_event.ve_params,
                                                               self.current_dsn,
                                                               l_procs,
                                                               errs);

                                          vdb_link_tables ('t',
                                                     self.vc_event.ve_params,
                                                           self.current_dsn,
                                                           self.s_tables,
                                                           self.pks_t,
                                                           errs);

                                          vdb_link_tables ('v',
                                               self.vc_event.ve_params,
                                                           self.current_dsn,
                                                           self.s_views,
                                                           self.pks_v,
                                                           errs);


                                          if (length (errs))
                                          {
                                            self.vdb_object_errs := errs;
                                            errs := null;
                                            self.vc_redirect ('vdb_errs.vspx');
                                            return;
                                          }

                                          self.s_stables := null;
                                          self.s_tables := null;
                                          self.s_views := null;
                                          self.s_procs := null;
                                          self.pks_t := null;
                                          self.pks_v := null;
                                          self.sel_pk := null;
                                          self.vc_redirect ('vdb_linked_obj.vspx');
                                          return;
                                        ]]>
                                      </v:script>
                                    </v:on-post>
                                  </v:button>
                                </v:form>
                              </td>
                            </tr>
                          </table>
                        </v:template>
                        <!-- END -->
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
