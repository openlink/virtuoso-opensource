<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="db_repl_page"
  decor="yacutia_decor.vspx"
  style="yacutia_style.xsl"
  vm:owner="yacutia_db_repl_page"
  doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
  fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
  xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="repl_basic_local_result_str" type="varchar" persist="1" default="''"/>
      <v:variable name="repl_basic_local_sources" type="any" persist="1" default="null"/>
      <v:variable name="repl_basic_local_destinations" type="any" persist="1" default="null"/>
      <v:variable name="repl_basic_local_running" type="integer" persist="1" default="0"/>
    </vm:variables>
    <vm:pagebody vdb_check="1">
      <v:method name="check_qr" arglist="in tb any, in qry any">
	declare tree any;
	tree := sql_parse (qry);
	self.check_qr1 (tb, tree);
      </v:method>
      <v:method name="check_qr1" arglist="in tb any, in tree any">
	if (isarray(tree) and length (tree) and tree[0] = 200)
	  {
	    if (tree[1] = tb)
	      signal ('X0001', 'The destination table exists in the source query');
	  }
	if (not isarray(tree))
    	  return;
	foreach (any elm in tree) do
	  self.check_qr1 (tb, elm);
      </v:method>
    <v:after-data-bind>
      <v:script>
        <![CDATA[

          http_request_status('HTTP/1.1 302 Found');
          http_header(sprintf('Location: db_repl_basic_local_create.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
          http_flush();

          declare continue handler for SQLSTATE '*' {
            ROLLBACK WORK;
            self.repl_basic_local_running := 0;
            self.repl_basic_local_result_str := concat(__SQL_STATE,__SQL_MESSAGE);
            COMMIT WORK;
          };
          declare _idx integer;

          --declare _tables any;
          declare _tbl,_local_qual, _local_owner, _local_name, _local_full_name varchar;

          --_tables := self.repl_basic_local_tables;

          _idx := 0;

          while (_idx < length(self.repl_basic_local_sources))
          {
	      declare continue handler for SQLSTATE '*' {
	      declare msg, stat any;
	      ROLLBACK WORK;
	      stat := __SQL_STATE;
	      if (__SQL_STATE = '42S01')
	        msg := 'The destination table already exists or is same as source table.';
	      else if (__SQL_STATE = 'X0001')
	        {
	          msg := 'The destination table exists in the source query';
		  stat := '42000';
		}
	      else
	        msg := __SQL_MESSAGE;
              registry_set(sprintf('REPL_COUNT_%s_%s_%s',_local_qual,_local_owner,_local_name), stat || ' ' || msg);
              goto next_tbl;
            };
            declare _rc integer;
            declare _pk_names any;
            declare _stmt, _stat, _msg, _rpk_col_names, _col_name, _col_type varchar;
            declare _local_create integer;
            _local_qual := self.repl_basic_local_destinations[_idx][2];
            _local_owner := self.repl_basic_local_destinations[_idx][3];
            _local_name := self.repl_basic_local_destinations[_idx][4];
            _local_create := self.repl_basic_local_destinations[_idx][0];
            _local_full_name := sprintf ('%s.%s.%s', _local_qual, _local_owner, _local_name);

	    if (_local_create = 1)
	      {
	        _stmt := y_make_tb_from_query (_local_full_name, self.repl_basic_local_sources[_idx]);
                exec (_stmt);
              };

	    self.check_qr (concat (_local_qual, '.', _local_owner, '.', _local_name), self.repl_basic_local_sources[_idx]);

            _stmt := sprintf ('create nonincremental snapshot "%I"."%I"."%I" as ''%s''',
            _local_qual, _local_owner, _local_name, replace (self.repl_basic_local_sources[_idx], '''', ''''''));
            _stat := '00000';
            _msg := '';
            if (0 <> exec (_stmt, _stat, _msg))
            {
              signal (_stat, _msg);
              --  registry_set(sprintf('REPL_COUNT_%s_%s_%s',_local_qual,_local_owner,_local_name),_stat || ' ' || _msg);
              goto next_tbl;
            }
	    declare cmpl any;
	    cmpl := y_get_tbl_row_count (_local_qual, _local_owner, _local_name);

	    registry_set(sprintf('REPL_COUNT_%s_%s_%s',_local_qual,_local_owner,_local_name),
	     	sprintf ('Completed %d Records', cmpl));
            next_tbl: ;
            commit work;
            _idx := _idx + 1;
          }

          self.repl_basic_local_running := 0;
       ]]>
      </v:script>
    </v:after-data-bind>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>

