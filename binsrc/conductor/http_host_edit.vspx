<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2023 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="http_edit_path_page"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Virtuoso HTTP Server Management</vm:pagetitle>
  <vm:pagewrapper>
    <vm:menu>
      <vm:menuitem value="HTTP Host Properties"/>
    </vm:menu>
    <vm:variables>
      <v:variable name="vhost" persist="0" type="varchar" default="null" param-name="vhost"/>
      <v:variable name="lhost" persist="0" type="varchar" default="null" param-name="lhost"/>
      <v:variable name="vhosto" persist="0" type="varchar" default="null" param-name="vhost"/>
      <v:variable name="lhosto" persist="0" type="varchar" default="null" param-name="lhost"/>
      <v:variable name="lhost1" persist="0" type="varchar" default="null"/>
      <v:variable name="vhost1" persist="0" type="varchar" default="null"/>
      <v:variable name="key1" persist="0" type="varchar" default="'none'"/>
      <v:variable name="extra_cert" persist="0" type="varchar" default="null"/>
      <v:variable name="ca_certs" persist="0" type="varchar" default="null"/>
      <v:variable name="verify1" persist="0" type="varchar" default="0"/>
      <v:variable name="port1" persist="0" type="varchar" default="'443'"/>
      <v:variable name="stopit" persist="0" type="int" default="1"/>
      <v:variable name="v_ssl_enable" persist="0" type="int" default="1"/>
      <v:variable name="v_host_exists" persist="0" type="int" default="0"/>
    </vm:variables>
    <vm:header caption="Virtual Host Properties"/>
    <vm:pagebody>
        <v:on-init>
	  declare pos int;
	  if (self.vhost is null or self.lhost is null)
	    return;
	  for select top 1 HP_AUTH_OPTIONS, HP_SECURITY from HTTP_PATH where HP_HOST = self.vhost and HP_LISTEN_HOST = self.lhost do
	    {
	      declare cert, opts varchar;
	      opts := deserialize (HP_AUTH_OPTIONS);
	      if (isarray (opts))
	        {
		  cert := get_keyword ('https_key', opts, 'none');
		  if (cert like 'db:%')
		    cert := subseq (cert, 3);
		  self.key1 := cert;
		  self.verify1 := cast (get_keyword ('https_verify', opts, 0) as varchar);
		  self.extra_cert := get_keyword ('https_extra_chain_certificates', opts, null);
		  self.ca_certs := get_keyword ('https_cv', opts, null);
	        }
              if (HP_SECURITY = 'SSL')
                self.v_ssl_enable := 1;
              self.v_host_exists := 1;
	    }
	  if (self.stopit and 1 = http_listen_host (self.lhost, 2))
	    http_listen_host (self.lhost, 1);
	  if (self.lhost = '*ini*')
            {
	      self.lhost := server_http_port ();
              if (strrchr (self.lhost, ':') is null)
	        self.lhost := ':' || self.lhost;
	    }
	  else if (self.lhost = '*ini*')
            {
              self.lhost := coalesce (server_https_port (), '');
              if (strrchr (self.lhost, ':') is null)
	        self.lhost := ':' || self.lhost;
	    }

	  pos := strrchr (self.lhost, ':');
	  if (pos is not null)
	    {
	      self.lhost1 := substring (self.lhost, 1, pos);
	      self.port1 := substring (self.lhost, pos + 2, length (self.lhost));
	    }
	  else
	    self.lhost1 := self.lhost;

	  if (length (self.lhost1) = 0)
	    self.lhost1 := '0.0.0.0';

	  pos := strrchr (self.vhost, ':');
	  if (pos is not null)
	    self.vhost1 := substring (self.vhost, 1, pos);
	  else
	    self.vhost1 := self.vhost;

	</v:on-init>
        <v:form name="frm_add_templ" method="POST" type="simple">
          <!--div class="dialog_text"></div-->
          <table class='ctl_grp'>
            <tr>
              <td>Host &amp; Domain Name</td>
	      <td>
		<v:text name="vhost_nam" value="--self.vhost1" xhtml_size="40" error-glyph="*">
                  <v:before-render>
                    if (not length (control.ufl_value) and 0 = self.v_host_exists)
                      control.ufl_value := sys_stat ('st_host_name');
                  </v:before-render>
		  <v:validator test="regexp" regexp="^[\.0-9A-Za-z-]+$" empty-allowed="1"
		    message="You should provide a valid host name" />
		</v:text>
              </td>
            </tr>
            <tr>
              <td>Listening Interface</td>
              <td id="if_opt">
		  <![CDATA[
		  <script type="text/javascript">
	           function init () {
		      var sr_cl = new OAT.Combolist([],"<?V self.lhost1 ?>");
		      sr_cl.input.name = "lhost_if";
		      sr_cl.input.id = "lhost_if";
		      $("if_opt").appendChild(sr_cl.div);
		      sr_cl.addOption("0.0.0.0");
		      <?vsp
		        declare arr any;
			arr := tcpip_local_interfaces ();
			foreach (any elm in arr) do
			  http (sprintf ('sr_cl.addOption("%s");', elm));
		      ?>
		     }
		  </script>
		  ]]>
		<!--v:text name="lhost_if" value="-#-self.lhost1" xhtml_size="20" error-glyph="*">
		  <v:validator test="regexp" regexp="^[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?$"
		    message="You should provide a valid IP address" />
		</v:text-->
              </td>
            </tr>
            <tr>
              <td>TCP Port</td>
              <td>
		<v:text name="lhost_port" value="--self.port1" xhtml_size="5" error-glyph="*">
		  <v:validator test="regexp" regexp="^[0-9]+$"
		    message="You should provide a valid TCP port" />
		</v:text>
              </td>
            </tr>
            <tr>
              <td/>
              <td>
                  <v:check-box name="ssl_enable" value="1" xhtml_id="cb_ssl_enable" initial-checked="--self.v_ssl_enable" auto-submit="1">
                      <v:on-post><![CDATA[
                          if (self.vhosto is null)
                            {
                              if (not control.ufl_selected and self.lhost_port.ufl_value = '443')
                                self.lhost_port.ufl_value := '8080';
                              if (control.ufl_selected and self.lhost_port.ufl_value = '8080')
                                self.lhost_port.ufl_value := '443';
                            }
		  ]]></v:on-post>
                  </v:check-box>
                  <label for="cb_ssl_enable">Enable SSL/TLS</label>
              </td>
            </tr>
            <v:template name="ssl_listener_opts" type="simple" condition="equ(self.ssl_enable.ufl_selected,1)">
            <tr>
                <td><label class="help_tooltip" 
                            helptext="Server X.509 certificate and private key identifier">
                            SSL Key</label></td>
	      <td>
		  <v:data-list name="key_list" value="--self.key1"
		      sql="select top 1 'none' as xenc_key from sys_keys union all
		      select xenc_key from yac_list_keys (username) (xenc_key varchar, xenc_type varchar) x where username = 'dba'"
		      key-column="xenc_key"
		      value-column="xenc_key"
		      />
		  &nbsp;
		  <v:button action="simple" name="gen_key" value="Generate New" enabled="--xenc_key_exists ('id_rsa')">
		      <v:on-post><![CDATA[
			  declare kname varchar;
			  declare subj, host varchar;
			  declare arr any;

			  if (length (self.vhost_nam.ufl_value))
			    {
			      host := self.vhost_nam.ufl_value;
			    }
			  else
			    {
                              self.vc_is_valid := 0;
                              self.vc_error_message := 'Host name (CNAME) cannot be empty, cannot generate X.509 certificate.';
                              rollback work;
                              return;
			    }
                          kname := DB.DBA.HTTPS_MAKE_HOST_KEY (host);
			  self.key_list.vc_data_bind (e);
			  self.key_list.ufl_value := kname;
			  self.key_list.vs_set_selected ();
			  ]]></v:on-post>
		  </v:button>
              </td>
            </tr>
            <tr>
                <td><label class="help_tooltip" 
                    helptext="Certificates of Certification Authorities (CA) which form 
                    the certificate chain of the server certificate.">Extra Chain Certificates</label></td>
              <td>
		<v:text name="extra_cert1" value="--self.extra_cert" xhtml_size="50">
		</v:text>
              </td>
            </tr>
            <tr>
                <td><label class="help_tooltip" 
                    helptext="Certificates of Certification Authorities (CA) whose clients you deal with. 
                    These are used for Client Authentication.">CA Certificates</label></td>
              <td>
		<v:text name="ca_certs1" value="--self.ca_certs" xhtml_size="50">
		</v:text>
              </td>
            </tr>
            <tr>
                <td><label class="help_tooltip" helptext="Certificate verification level for the Client Authentication.">HTTPS verify</label></td>
              <td>
		  <v:select-list name="verify" value="--self.verify1" >
		      <v:item name="none" value="0"/>
		      <v:item name="required" value="1"/>
		      <v:item name="optional" value="2"/>
		      <v:item name="optional no CA" value="3"/>
		</v:select-list>
              </td>
            </tr>
            </v:template>
            <tr>
              <td colspan="2" align="center">
                <v:button action="simple" name="cancel_templ" value="Cancel">
                  <v:on-post>
                      <![CDATA[
                      declare ssl_opts any;
                      ssl_opts := NULL;
                      for select top 1 deserialize (HP_AUTH_OPTIONS) as old_ssl_opts from DB.DBA.HTTP_PATH where HP_LISTEN_HOST = self.lhosto do
                        {
                          ssl_opts := old_ssl_opts;
                        }
                      if (self.lhosto is not null and not http_listen_host (self.lhosto, 2))
                        http_listen_host (self.lhosto, 0, ssl_opts);
		      self.vc_redirect (sprintf ('http_serv_mgmt.vspx'));
                      ]]>
                  </v:on-post>
                </v:button>
                <v:button action="simple" name="save_btn" value="Save">
                  <v:on-post>
                      <![CDATA[

           if (not self.vc_is_valid)
             return;

           declare vhost_o, lhost_o, vhost, lhost, state, message, lhost_if, ssl_opts any;
           vhost_o := self.vhosto;
	   lhost_o := self.lhosto;

	   declare exit handler for sqlstate '*'
	   {
	     self.vc_is_valid := 0;
	     self.vc_error_message := __SQL_MESSAGE;
	     rollback work;
	     return;
	   };

           declare kname, extra, verify, ca_certs any;
           kname := self.key_list.ufl_value;
           extra := self.extra_cert1.ufl_value;
           ca_certs := self.ca_certs1.ufl_value;
           verify := self.verify.ufl_value;

           lhost_if := get_keyword ('lhost_if', e.ve_params, '');

	   y_check_host (self.vhost_nam.ufl_value, lhost_if, self.lhost_port.ufl_value);

	   vhost := self.vhost_nam.ufl_value;
	   lhost := replace (concat (lhost_if, ':', self.lhost_port.ufl_value), '0.0.0.0', '');

	   if (self.vhost = vhost and lhost = self.lhost and kname = self.key1 and self.verify1 = verify and
              extra = self.extra_cert and ca_certs = self.ca_certs)
	     goto same_host;
           ssl_opts := null;
           set triggers off;
	   for select
	       HP_HOST, HP_LISTEN_HOST, HP_PPATH, HP_LPATH,
	       HP_AUTH_FUNC, HP_AUTH_OPTIONS, HP_DEFAULT, HP_STORE_AS_DAV,
	       HP_DIR_BROWSEABLE, HP_PERSIST_SES_VARS, HP_POSTPROCESS_FUNC,
	       HP_REALM, HP_RUN_SOAP_AS, HP_RUN_VSP_AS, HP_SECURITY, HP_SOAP_OPTIONS,
	       HP_OPTIONS, HP_IS_DEFAULT_HOST
	       from DB.DBA.HTTP_PATH where HP_HOST = vhost_o and HP_LISTEN_HOST = lhost_o do
	     {
	        declare opts any;
      	        state := '00000';
	        message := '';
		VHOST_REMOVE (vhost_o, lhost_o, HP_LPATH, 0);
		opts := deserialize (HP_AUTH_OPTIONS);
		yac_set_ssl_key (kname, verify, extra, opts, ca_certs);
		HP_AUTH_OPTIONS := serialize (opts);
		if (kname <> 'none')
		  {
		    HP_SECURITY := 'SSL';
		    if (ssl_opts is null)
		      ssl_opts := opts;
		  }
		else
                  {
                    HP_SECURITY := null;
		  }
		exec('VHOST_DEFINE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', state, message,
		     vector (vhost, lhost, HP_LPATH, HP_PPATH, HP_STORE_AS_DAV, HP_DIR_BROWSEABLE,
		             HP_DEFAULT, HP_AUTH_FUNC, HP_REALM, HP_POSTPROCESS_FUNC, HP_RUN_VSP_AS,
			     HP_RUN_SOAP_AS, HP_SECURITY, HP_PERSIST_SES_VARS,
			     deserialize (HP_SOAP_OPTIONS),
			     deserialize (HP_AUTH_OPTIONS), deserialize(HP_OPTIONS), HP_IS_DEFAULT_HOST));
                if (state <> '00000')
                  {
		    rollback work;
		    self.vc_is_valid := 0;
		    self.vc_error_message := message;
		    return;
                  }
                self.v_host_exists := 1;
	     }
           set triggers on;
           if (0 = self.v_host_exists) -- new listener 
             {
               declare security_flag varchar;
               security_flag := NULL;
               ssl_opts := NULL;
               if (self.ssl_enable.ufl_selected)
                 {
                   security_flag := 'SSL';
                   yac_set_ssl_key (kname, verify, extra, ssl_opts, ca_certs);
                 }
	       DB.DBA.VHOST_DEFINE (vhost=>vhost, lhost=>lhost, lpath=>'/', ppath=>'/', sec=>security_flag, auth_opts=>ssl_opts);
             }
           else
            {
                -- finally we update listeners table
                if (kname = 'none')
                  {
                    extra := kname := null;
                  }
                if (lhost_o <> lhost)
                  {
                    delete from DB.DBA.SYS_HTTP_LISTENERS where HL_INTERFACE = lhost_o;
                  }
               else
                  {
                    kname := concat ('db:', kname);
                     update DB.DBA.SYS_HTTP_LISTENERS set HL_CERTIFICATE = kname, HL_KEY = kname, HL_EXTRA = extra, HL_VERYFY = verify, 
                          HL_CA_LIST = ca_certs
                        where HL_INTERFACE = lhost;
                  }
            }
            if (not http_listen_host (lhost, 2))
	    http_listen_host (lhost, 0, ssl_opts);
	    self.stopit := 0;
	    commit work;
	    same_host:
            self.vc_redirect (sprintf ('http_serv_mgmt.vspx'));
                      ]]></v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
        </v:form>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
