<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="sparql_create_page"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        vm:owner="yacutia_sparql_page"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">
 <vm:pagetitle>SPARQL Execution</vm:pagetitle>
 <vm:pagewrapper>
    <vm:variables>
      <v:variable name="query_text" default="''" type="varchar" persist="0"/>
      <v:variable name="store_path" default="null" type="varchar" persist="0" param-name="edit"/>
      <v:variable name="step" default="0" type="int" persist="0"/>
    </vm:variables>
  <vm:menu>
   <vm:menuitem value="SPARQL"/>
  </vm:menu>
  <vm:header caption="SPARQL Execution"/>
  <vm:pagebody>
  <v:on-init>
    <![CDATA[
    set http_charset='utf-8';
    ]]>
  </v:on-init>
  <![CDATA[
  <script type="text/javascript">
function callSparql (graph_id, qry_id, res_id)
{
  var qry_in = document.getElementById (qry_id);
  var div = document.getElementById (res_id);
  var qry = qry_in.value;
  var graph_in = document.getElementById (graph_id);
  var graph = graph_in.value;
  var endpoint = '/sparql/';
  var callback = function(data)
     {
       div.innerHTML = data;
     }
  var body = 'query='+encodeURIComponent (qry)+
          '&format='+ encodeURIComponent('text/html') +
          '&default-graph-uri='+encodeURIComponent (graph);
  errorfn = function(x)
  {
    var response = x.getResponseText ()
    div.innerHTML = '<div class="error_msg"><pre>' + response + '</pre></div>';
  }
  OAT.AJAX.POST (endpoint, body, callback, {type:OAT.AJAX.TYPE_TEXT, onerror:errorfn, headers:{Accept:'text/html'}});
}
  </script>

  ]]>
  <v:after-data-bind><![CDATA[
      if (get_keyword ('edit', e.ve_params) is not null)
        {
	       declare xt, default_graph, root, xslt, tmp any;
	       whenever not found goto nf;
	       select RES_CONTENT into tmp from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword ('edit', e.ve_params);
	       xt := xtree_doc (tmp);
	       self.qr.ufl_value := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:sparql/text()', xt);
	       default_graph := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:sparql/@sql:default-graph-uri', xt);
	       root := xpath_eval ('local-name (/*[1][namespace-uri() != "urn:schemas-openlink-com:xml-sql"])', xt);
	       xslt := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//*/@sql:xsl', xt);

	       self.default_graph.ufl_value := default_graph;
	       --self.default_graph.vs_set_selected ();
	       self.root_element.ufl_value := root;
	       self.style_path_control.ufl_value := xslt;
	       if (length (xslt))
	         self.xslt_include.ufl_selected := 1;
	       self.store_path := get_keyword ('edit', e.ve_params);
	       nf:;
	}
	]]></v:after-data-bind>
    <script type="text/javascript"><![CDATA[
]]></script>
    <vm:help id="sparql" sect=""/>
      <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
        <tr valign='top'>
          <td>
            <table cellpadding='10' cellspacing='0' border='0' width='100%'>
              <tr>
                <td>
                  <table cellpadding="0" cellspacing="0" border="0">
                    <tr>
                      <td class="page_tab_selected" align="center">Query</td>
                      <td class="page_tab" align="center">
                         <v:url name="b_url31" value="Saved Queries" url="sparql_load.vspx" xhtml_class="uddi"/>
                      </td>
                      <td class="page_tab_empty" align="center" width="100%">
                        &amp;nbsp;
                      </td>
                    </tr>
                  </table>
                  <table class="tab_page">
                    <tr>
		      <td valign="top">
			<!-- MAIN AREA -->
			<v:template name="t_qry" type="simple" enabled="--equ (self.step, 0)">
			<v:form name="edit_form" type="simple" method="POST">
			  <table border="0" cellspacing="0" class="ctl_grp" cellpadding="5" align="center">
			    <tr>
			      <td>Default Graph IRI</td>
			      <td>
				<!--v:data-list name="default_graph"
				  sql="select DB.DBA.RDF_QNAME_OF_IID(G) as graph_uri from (select distinct G from RDF_QUAD) quad"
				  key-column="graph_uri" value-column="graph_uri"
				  xhtml_id="default_graph" xhtml_style="width: 320px;" /-->
				  <v:text name="default_graph" value="" xhtml_size="70" xhtml_id="default_graph"
				      default_value="--coalesce (cfg_item_value (virtuoso_ini_path (), 'SPARQL', 'DefaultGraph'), '')"
				      ></v:text>
			      </td>
			    </tr>
			    <tr>
			      <td colspan="2">
				  <label>Query</label><br/>
				    <v:textarea name="qr" value="" xhtml_cols="70" xhtml_rows="15" xhtml_id="qr"/>
			      </td>
			    </tr>
			    <tr>
			      <td colspan="2">
				<input type="button"  onclick="javascript: callSparql ('default_graph', 'qr', 'rdf_result'); return false"
				      name="exec1" value="Execute"/>
				<v:button action="simple" name="sav1" value="Save">
				  <v:on-post>

				    declare exit handler for sqlstate '*'
				    {
				      self.vc_is_valid := 0;
				      self.vc_error_message := __SQL_MESSAGE;
				      return;
				    };

				    sparql_to_sql_text (self.qr.ufl_value);
				    self.t_qry.vc_enabled := 0;
				    self.step := 1;
				    self.t_save.vc_data_bind (e);
				  </v:on-post>
				</v:button>
				<v:button action="simple" name="load1" value="Load">
				  <v:on-post>
				    self.vc_redirect ('sparql_load.vspx');
				  </v:on-post>
				</v:button>
				  <v:button action="simple" name="reset1" value="Clear">
				    <v:on-post>
				      self.vc_redirect ('sparql_input.vspx');
				    </v:on-post>
				  </v:button>
			      </td>
			    </tr>
			    <tr>
			      <td id="rdf_result" colspan="2">
			      </td>
			    </tr>
			  </table>

			</v:form>
		      </v:template>
		      <v:template name="t_save" type="simple" enabled="--equ (self.step, 1)">
			<v:form name="save_form" type="simple" method="POST">
			  <table border="0" cellspacing="0" class="ctl_grp" cellpadding="5" align="center">
			    <caption>Save SPARQL as a XML Template</caption>
			    <tr>
			      <td>Root Element</td><td>
				<v:text name="root_element" value="ROOT" />
			      </td>
			      <td></td><td>

			      </td>
			    </tr>
			    <tr>
			      <td>File of XML template</td><td>
				<v:text name="save_path" xhtml_size="40" value="--coalesce (control.ufl_value,
				  self.store_path, '')" />
				<vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes"
				  flt_pat="" path="DAV" browse_type="col"
				  w_title="DAV Browser" title="DAV Browser" lang="en" return_box="save_path"/>
			      </td>
			      <td colspan="2" align="center">Permissions
			      </td>
			    </tr>
			    <tr>
			      <td>Stylesheet for XSLT</td><td>
        <v:text name="style_path_control" xhtml_size="40"/>
        <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="*.xsl" path="DAV" browse_type="res" w_title="DAV Browser" title="DAV Browser" lang="en" return_box="style_path_control"/>
			      </td>
			      <td colspan="2" rowspan="2">
				<table>
				  <tr>
				     <td colspan="3">Owner</td><td colspan="3">Group</td><td colspan="3">Users</td><td>Idx</td>
				     <tr align="center">
				       <td>r
				       </td>
				       <td>w
				       </td>
				       <td>x
				       </td>
				       <td>r
				       </td>
				       <td>w
				       </td>
				       <td>x
				       </td>
				       <td>r
				       </td>
				       <td>w
				       </td>
				       <td>x
				       </td>
				       <td>
				       </td>
				     </tr>
				     <tr>
				       <td>
					 <v:check-box name="cb1" value="1" initial-checked="1"/>
				       </td>
				       <td>
					 <v:check-box name="cb2" value="1" initial-checked="1"/>
				       </td>
				       <td>
					 <v:check-box name="cb3" value="1" initial-checked="1"/>
				       </td>
				       <td>
					 <v:check-box name="cb4" value="1" initial-checked="1"/>
				       </td>
				       <td>
					 <v:check-box name="cb5" value="1" initial-checked="0"/>
				       </td>
				       <td>
					 <v:check-box name="cb6" value="1" initial-checked="1"/>
				       </td>
				       <td>
					 <v:check-box name="cb7" value="1" initial-checked="1"/>
				       </td>
				       <td>
					 <v:check-box name="cb8" value="1" initial-checked="0"/>
				       </td>
				       <td>
					 <v:check-box name="cb9" value="1" initial-checked="1"/>
				       </td>
				       <td>
					 <v:check-box name="cb0" value="1" initial-checked="0"/>
				       </td>
				     </tr>
				  </tr>
				</table>
			      </td>
			    </tr>
			    <tr>
			      <td>Description</td><td>
				<v:text name="t_desc" value="" xhtml_size="70"/>
			      </td>
			    </tr>
			    <tr>
			      <td colspan="4">
				<v:button action="simple" name="save_tm" value="Save">
	  <v:on-post><![CDATA[
	   declare save_path, dav_folder_owner, dav_folder_group, file_perms, folders_message, res_string,
				    style_path, doc_elem, default_graph_iri, user_perm any;

	   save_path := self.save_path.ufl_value;
	   style_path := self.style_path_control.ufl_value;
	   doc_elem := self.root_element.ufl_value;

	   if (save_path = '' )
	     {
		self.vc_error_message := 'Path to save result in is empty. Enter a  correct path.';
		self.vc_is_valid := 0;
		return;
	     }
	   else
	      {
		if (dav_path_validate(save_path,dav_folder_owner, dav_folder_group, file_perms, folders_message) <> 1 )
		  {
		     self.vc_error_message := sprintf('Path to store into is invalid. Path validation was failed: "%s"',
		  		folders_message);
		     self.vc_is_valid := 0;
		     return;
		  }
		else if (dav_check_permissions(connection_get('vspx_user'), file_perms,'010' ,
		  dav_folder_owner, dav_folder_group, folders_message) <> 1)
		  {
		    self.vc_error_message := sprintf('You are unable to store this file: "%s"', folders_message);
		    self.vc_is_valid := 0;
		    return;
		  }
		}

	   user_perm:='';
	   user_perm:=concat(user_perm, chr(self.cb1.ufl_selected + 48));
	   user_perm:=concat(user_perm, chr(self.cb2.ufl_selected + 48));
	   user_perm:=concat(user_perm, chr(self.cb3.ufl_selected + 48));
	   user_perm:=concat(user_perm, chr(self.cb4.ufl_selected + 48));
	   user_perm:=concat(user_perm, chr(self.cb5.ufl_selected + 48));
	   user_perm:=concat(user_perm, chr(self.cb6.ufl_selected + 48));
	   user_perm:=concat(user_perm, chr(self.cb7.ufl_selected + 48));
	   user_perm:=concat(user_perm, chr(self.cb8.ufl_selected + 48));
	   user_perm:=concat(user_perm, chr(self.cb9.ufl_selected + 48));
	   if (self.cb0.ufl_selected)
	     user_perm:=concat(user_perm, 'R');
	   else
	     user_perm:=concat(user_perm, 'N');

	       res_string := '<?xml version="1.0" encoding="UTF-8"?>';
               if (length (doc_elem))
	         res_string := concat(res_string, '<', doc_elem, '>');

	       res_string := concat(res_string,'<sql:sparql xmlns:sql="urn:schemas-openlink-com:xml-sql" ');
               default_graph_iri := self.default_graph.ufl_value;
	       if (length (default_graph_iri))
	         res_string := concat(res_string,' sql:default-graph-uri="', default_graph_iri ,'"');

               if (length(style_path) > 0)
                 res_string := concat(res_string,' sql:xsl="', style_path,'"');

               res_string := concat(res_string,'>');

               res_string := concat(res_string,'<![CDATA[',self.qr.ufl_value, ']]','></sql:sparql>');
               if (length (doc_elem))
	         res_string := concat(res_string, '</', doc_elem, '>');

	       YAC_DAV_RES_UPLOAD (save_path,  res_string, 'text/xml',user_perm,
	          'dav', 'administrators');
	       YAC_DAV_PROP_REMOVE (save_path,'xml-template', connection_get ('vspx_user'), 1);
               YAC_DAV_PROP_SET (save_path,'xml-template','execute');
	       if (length (self.t_desc.ufl_value))
	         {
		   YAC_DAV_PROP_REMOVE (save_path,'xml-sql-description', connection_get ('vspx_user'), 1);
	           YAC_DAV_PROP_SET (save_path, 'xml-sql-description', self.t_desc.ufl_value);
	         }

	    self.t_save.vc_enabled := 0;
	    self.step := 0;
	    self.t_qry.vc_data_bind (e);
	    ]]></v:on-post>
				</v:button>
				<v:button action="simple" name="cancel_tm" value="Cancel">
				  <v:on-post>
				    self.t_save.vc_enabled := 0;
				    self.step := 0;
				    self.t_qry.vc_data_bind (e);
				  </v:on-post>
				</v:button>
			      </td>
			    </tr>
			  </table>
			</v:form>
		      </v:template>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
  </vm:pagebody>
 </vm:pagewrapper>
</v:page>
