<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="xquery_create_page3" decor="yacutia_decor.vspx" style="yacutia_style.xsl" vm:owner="yacutia_xquery_page" fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
 <vm:pagetitle>XQuery Execution</vm:pagetitle>
 <vm:pagewrapper>
  <vm:variables>
   <v:variable name="wrong_entry" default="null" type="varchar" persist="1"/>
   <v:variable name="ctx_value" default="null" type="varchar" persist="1" />
   <v:variable name="url" default="null" type="varchar" persist="1"/>
   <v:variable name="table_name" default="null" type="varchar" persist="1"/>
   <v:variable name="kcol" default="null" type="varchar" persist="1"/>
   <v:variable name="kvalue" default="''" type="varchar" persist="1"/>
   <v:variable name="vcol" default="null" type="varchar" persist="1"/>
   <v:variable name="query_text" default="''" type="varchar" persist="1"/>
   <v:variable name="doc_node" default="''" type="varchar" persist="1"/>
   <v:variable name="style_path" default="''" type="varchar" persist="1"/>
   <v:variable name="skip_bad" default="0" type="int" persist="1" param-name="sbad"/>
   <v:variable name="is_html" default="0" type="int" persist="1" param-name="ishtml"/>
   <v:variable name="res" default="null" type="varchar" persist="temp" param-name="edit"/>
   <v:variable name="store_path" default="null" type="varchar" persist="1"/>
  </vm:variables>
  <vm:menu>
   <vm:menuitem value="XQuery"/>
  </vm:menu>
  <vm:header caption="XQuery execution"/>
  <vm:pagebody>
      <v:local-variable name="init_data">
	<v:after-data-bind>
	  if (self.res is not null)
	    {
	       declare xt, ctx, root, xslt, tmp any;
	       self.wrong_entry := null;
	       whenever not found goto nf;
	       select RES_CONTENT into tmp from WS.WS.SYS_DAV_RES where RES_FULL_PATH = self.res;
	       xt := xtree_doc (tmp);
	       self.query_text := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:xquery/text()', xt);
	       ctx := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:xquery/@sql:context', xt);
	       root := xpath_eval ('local-name (/*[1])', xt);
	       xslt := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//*/@sql:xsl', xt);
	       if (length (ctx))
	          self.ctx_value := '3';
	       else
                  self.ctx_value := '0';
	       self.url := ctx;
	       self.root_element.ufl_value := root;
	       self.style_path_control.ufl_value := xslt;
	       if (length (xslt))
	         self.xslt_include.ufl_selected := 1;
	       self.store_path := self.res;
	       nf:;
	    }
	</v:after-data-bind>
      </v:local-variable>
    <vm:help id="xquery" sect=""/>
      <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
        <tr valign='top'>
          <td>
            <table cellpadding='10' cellspacing='0' border='0' width='100%'>
              <tr>
                <td>
                  <table cellpadding="0" cellspacing="0" border="0">
                    <colgroup>
                      <col/>
                      <col/>
                      <col/>
                      <col/>
                      <col/>
                      <col/>
                    </colgroup>
                    <tr>
                        <td class="page_tab_selected" align="center">XQuery Basic</td>
                        <td class="page_tab" align="center">
			  <v:url name="b_url32" value="XQuery Advanced" url="xquery_adv.vspx" xhtml_class="uddi"/>
                        </td>
                        <td class="page_tab" align="center">
			  <v:url name="b_url31" value="Stored XQuery Templates" url="xquery_templates.vspx" xhtml_class="uddi"/>
                        </td>
                        <td class="page_tab_empty" align="center" width="100%">
                          <table cellpadding="0" cellspacing="0">
                            <tr>
                              <td width="100%" >
                              </td>
                            </tr>
                          </table>
                        </td>
                    </tr>
                  </table>
                  <table class="tab_page">
                    <tr>
		      <td valign="top">
			<!-- MAIN AREA -->
   <v:template name="template1" type="simple" enabled="--case when ( get_keyword('mode', e.ve_params) = 'query' or get_keyword('mode', e.ve_params) = 'retry') then 1 else 0 end">
    <vm:form name="xq_execute_form" type="simple" method="POST" action="">
     <input type="hidden" name="context" value="<?= self.ctx_value ?>" />
     <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
     <vm:attrs border="0" class="ctl_grp" width="100%" cellspacing="0" cellpadding="5" align="center"/>
     <vm:events>
      <v:on-post>
       <![CDATA[
                {
                  declare ctx_value varchar;
                  declare result, xq_res any;
                  declare doc, doc_base,xq, res_string, folders_message  varchar;
                  declare cnt, num integer;
                  declare err_sqlstate, err_msg, rel_path varchar;
                  declare m_dta any;
                  declare n, len integer;
                   declare tmp varchar;

                  self.wrong_entry := null;

                  err_sqlstate := '00000';
		  err_msg := '';

		  if (length (get_keyword ('context', params)))
		    self.ctx_value := get_keyword ('context', params);

                  if (e.ve_button.vc_name = 'prev')  {
                      http_request_status ('HTTP/1.1 302 Found');
                      if (self.ctx_value = '2')
                         http_header (sprintf ('Location: xquery2.vspx?context=%s&sid=%s&realm=%s\r\n',
                                            self.ctx_value, self.sid ,self.realm));
                      else if (self.ctx_value in ('1', '3', '4'))
                         http_header (sprintf ('Location: xquery.vspx?context=%s&sid=%s&realm=%s\r\n',
                                            self.ctx_value, self.sid ,self.realm));
                      else
                         http_header (sprintf ('Location: xquery.vspx?context=%s&sid=%s&realm=%s\r\n',
                                            self.ctx_value, self.sid ,self.realm));
                      return;
                    }

                  if (e.ve_button.vc_name = 'cancel') {
                      http_request_status ('HTTP/1.1 302 Found');
                      http_header (sprintf ('Location: xquery.vspx?context=%s&sid=%s&realm=%s\r\n',
                                            self.ctx_value, self.sid ,self.realm));
                      return;
                    }

                  -- store the query and xslt param values in order to use them either here or in store form

                  self.query_text := get_keyword ('query_text_control', params);
                  self.doc_node := get_keyword ('root_element', params);
                  self.style_path := '';
                  if (self.query_text = '')  {
                       self.wrong_entry := 'Query text is empty. Enter a correct XQuery expression.';
                       goto go_again;
                  }

                  if (self.doc_node = '') {
                       self.wrong_entry := 'Root Element is empty. Enter a  correct Root Element name.';
                      goto go_again;
                  }

                  if (get_keyword('xslt_include',params) ='1'  ) {
                         self.style_path := get_keyword ('style_path_control', params);
                         if (self.style_path ='') {
                           self.wrong_entry := 'XSLT transformation is requested, but no path  is provided for stylesheet file.';
                           goto go_again;
                         } else if (check_dav_file_permissions (self.style_path, connection_get('vspx_user'), '100', folders_message) <> 1  ) {
                              self.wrong_entry := sprintf('Path on  stylesheet file is invalid:  "%s".',folders_message);
                              goto go_again;
                         }
                  }


     doc_base := '';
    if (self.ctx_value ='1')
      {
        doc_base := 'virt://WS.WS.SYS_DAV_RES.RES_FULL_PATH.RES_CONTENT:';
      }
    else if (self.ctx_value ='2')
      {
        doc_base := concat('virt://', self.table_name,  '.',  self.kcol,  '.',  self.vcol , ':', self.kvalue);
      }
    else if (self.ctx_value ='3')
      {
        doc_base := '';
      }
    else if (self.ctx_value = '4')
      {
        doc_base := '';
      }

         declare pmode varchar;
         pmode := '0';
	 if (self.skip_bad)
	   pmode := '2';
	 else if (self.is_html)
	   pmode := '1';


       {
          declare exit handler for sqlstate '*'
          {
            self.wrong_entry := __SQL_MESSAGE;
	    goto go_again;
          };
	  res_string := y_execute_xq (
	    self.query_text,
	    get_keyword ('root_element', params, 'root'),
	    doc_base,
	    self.url,
	    self.ctx_value,
	    pmode
	  );
       }
       http_request_status ('HTTP/1.1 302 Found');
       http_header (sprintf('Location: xquery3.vspx?mode=store&context=%s&sid=%s&realm=%s\r\n', self.ctx_value, self.sid ,self.realm));
       return;
     go_again: ;
                }

    ]]>
      </v:on-post>
     </vm:events>
     <vm:row>
      <vm:raw>
       <td align="left" colspan="4">
        <?vsp
	 if (0 and self.ctx_value = '4')
	 http ('Please, note <b>\044collection-doc</b> contains current document from the collection.<br/>');
         if (self.wrong_entry is null) {
            http('Specify proper XQuery expression.');
         } else {
            http('<span style="{color:red}">');
            http(self.wrong_entry);
            self.wrong_entry := null;
            http('</span>');
         }
      ?>
       </td>
      </vm:raw>
     </vm:row>
     <vm:row>
      <vm:raw>
	<td align="left" colspan="4">
	  Query Context: <i><v:label name="ctx_type" value="--case self.ctx_value when '1' then 'WebDAV resource'
	    when '2' then 'Database Table' when '3' then 'External URL' when '4' then 'WebDAV Collection'
	    else 'none' end
	    "/></i>
    <?vsp
    if (self.ctx_value in ('1', '3'))
      {
      ?>
      URL: <i><v:button action="browse" name="brws_xml" value="--self.url" style="url"
				       selector="xquery_src_show.vspx"
				       child-window-options="scrollbars=yes, menubar=no, height=630, width=1000">
				       <v:before-render><![CDATA[
					 declare url, doc_base, pars any;
					 control.ufl_value := self.url;
					 doc_base := '';
					 if (self.ctx_value ='1')
					   doc_base := 'virt://WS.WS.SYS_DAV_RES.RES_FULL_PATH.RES_CONTENT:';
					 else if (self.ctx_value ='3')
					   doc_base := '';
					 pars := sprintf ('url=%s%s', doc_base, cast(self.url as varchar));
					 control.vcb_selector := vspx_uri_add_parameters (control.vcb_selector, pars);
				       ]]></v:before-render>
				     </v:button></i>
      <?vsp
      }
    else if (self.ctx_value ='2')
      {
      ?>
      : <i><?V self.table_name ?></i> Column: <i><?V self.kcol ?></i> =
      <v:button action="browse" name="brws_xml1" value="--self.kvalue" style="url"
				       selector="xquery_src_show.vspx"
				       child-window-options="scrollbars=yes, menubar=no, height=630, width=1000">
				       <v:before-render><![CDATA[
					 control.ufl_value := self.kvalue;
					 declare url, doc_base, pars any;
					 if (self.ctx_value ='2')
					   {
					 doc_base := concat('virt://', self.table_name,  '.',  self.kcol,  '.',  self.vcol , ':', self.kvalue);
					 pars := sprintf ('url=%s%s', doc_base, cast (self.url as varchar));
					 control.vcb_selector := vspx_uri_add_parameters (control.vcb_selector, pars);
					   }
				       ]]></v:before-render>
				     </v:button>
      <?vsp
      }
    else if (self.ctx_value ='4')
      {
      ?>
      URL: <i><v:button action="browse" name="brws_xml2" value="--self.url" style="url"
				       selector="popup_browser.vspx"
				       child-window-options="scrollbars=yes, menubar=no, height=630, width=800">
				       <v:before-render><![CDATA[
					 declare url, doc_base, pars any;
					 url := cast (self.url as varchar);
					 if (self.url like 'http://local.virt/%')
					   url := substring (self.url, 18, length (self.url));
					 control.ufl_value := url;
					 pars := sprintf ('dir=%s', url);
					 control.vcb_selector := vspx_uri_add_parameters (control.vcb_selector, pars);
				       ]]></v:before-render>
				     </v:button></i>
      <?vsp
      }
    ?>
       </td>
      </vm:raw>
     </vm:row>
     <vm:row>
      <vm:control name="query_text_control" type="textarea" colspan="4">
       <vm:caption value="XQuery expression" pos="top"/>
       <vm:attrs xhtml_style="width:100%" xhtml_rows="10"/>
       <vm:events>
        <v:after-data-bind>
         <![CDATA[
            if (get_keyword('mode', params) = 'query' and get_keyword('entry', params) = '1' and self.vc_event.ve_is_post = 0) {
              self.ctx_value := get_keyword('context',self.vc_page.vc_event.ve_params);
              self.url := get_keyword('url',self.vc_page.vc_event.ve_params,'');
              self.table_name := get_keyword('table_name',self.vc_page.vc_event.ve_params);
              self.kcol := get_keyword('kcol',self.vc_page.vc_event.ve_params);
              self.vcol := get_keyword('vcol',self.vc_page.vc_event.ve_params);
              self.kvalue := get_keyword('kvalue',self.vc_page.vc_event.ve_params);
            }
          ]]>
        </v:after-data-bind>
        <v:before-data-bind>
         <![CDATA[
              if ( self.query_text is not null and self.query_text <> '')
                control.ufl_value := self.query_text;
          ]]>
        </v:before-data-bind>
       </vm:events>
      </vm:control>
     </vm:row>
     <vm:row>
      <vm:raw>
       <td>
        <?vsp
         declare pmode varchar;
         pmode := '0';
	 if (self.skip_bad)
	   pmode := '2';
	 else if (self.is_html)
	   pmode := '1';
          http('<input type="button" name="xquery_check" ');
    http('value="Execute" ');
    http('onclick="javascript: ');
    http('window.query_text=document.xq_execute_form.query_text_control; ');
    http('window.open (\'xquery_check.vspx?query_text=\'+escape(document.xq_execute_form.query_text_control.value)');
    http('+\'&root_node=\'+document.xq_execute_form.root_element.value');
    http('+\'');
    http('&context=');
    http(self.ctx_value);
    if (self.ctx_value <> '0') {
      http('&url=');
      http(self.url);
    }
    if (self.ctx_value = '2') {
      http('&table_name=');
      http(self.table_name);
      http('&kcol=');
      http(self.kcol);
      http('&vcol=');
      http(self.vcol);
      http('&kvalue=');
      http(self.kvalue);
    }
      http('&sid=');
      http(self.sid);
      http('&realm=');
      http(self.realm);
      http('&pmode=');
      http(pmode);

    http('\'');

    http(', \'xquery_check_window\', \'resizable=yes, scrollbars=yes, menubar=no, height=630, width=600\')" ');
    http(' /> ');

        ?>
       </td>
      </vm:raw>
     </vm:row>

                 <vm:row>
                  <vm:raw>
       <td colspan="2"><table><tr>
                   <td>
                    <v:check-box name="xslt_include" group-name="xslt_include" value="1" xhtml_id="xslt_include"/>
                  <v:on-post>
                    <script><![CDATA[
        ;
                    ]]></script>
                  </v:on-post>

                   </td>
                   <td align="left"><label for="xslt_include">XSLT transformation</label></td>
       </tr></table></td>
                  </vm:raw>

      <vm:raw>
       <td> Stylesheet</td>
       <td>
        <v:text name="style_path_control" xhtml_size="40"/>
        <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="*.xsl" path="DAV" browse_type="res" w_title="DAV Browser" title="DAV Browser" lang="en" return_box="style_path_control"/>
       </td>
      </vm:raw>
     </vm:row>
     <vm:row>
      <vm:raw>
       <td></td>
       <td></td>
      </vm:raw>
      <vm:control name="root_element" type="edit">
       <vm:attrs default_value="root"/>
       <vm:caption value="Root Element" pos="left"/>
      </vm:control>
     </vm:row>
     <vm:row>
      <vm:bgroup colspan="4" align="center">
       <v:button action="submit" name="prev" value="Previous" enabled="--isnull (self.store_path)"/>
       <v:button action="submit" name="cancel" value="Cancel"/>
       <v:button action="submit" name="next" value="Next"/>
      </vm:bgroup>
     </vm:row>
    </vm:form>
   </v:template>

   <!-- Template for the last screen - execute and save  -->
   <v:template name="template2" type="simple" enabled="--case when ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'store') then 1 else 0 end">
    <vm:form name="xq_store_form" type="simple" method="POST" action="">
     <input type="hidden" name="context" value="<?= self.ctx_value ?>" />
     <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
     <vm:attrs border="0" class="ctl_grp" width="100%" cellspacing="0" cellpadding="5" align="center"/>
     <vm:events>
      <v:on-post>
       <script><![CDATA[
    {
     declare ctx_value, user_perm, save_path  varchar;
     declare result, xq_res any;
     declare doc, doc_base,xq, res_string ,  folders_message, file_perms  varchar;
     declare cnt, num integer;
     declare err_sqlstate, err_msg, rel_path varchar;
     declare m_dta any;
     declare n, len, dav_folder_owner, dav_folder_group   integer;
     declare tmp varchar;

     save_path := get_keyword('save_path',params);
     doc := get_keyword('choice_source',params);
     self.wrong_entry := null;
     err_sqlstate := '00000';
     err_msg := '';
     if (e.ve_button.vc_name = 'prev_save') {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xquery3.vspx?mode=query&context=%s&sid=%s&realm=%s\r\n',get_keyword('context', params), self.sid ,self.realm));
          return;
     }
     if (e.ve_button.vc_name = 'cancel_save') {
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xquery.vspx?context=%s&sid=%s&realm=%s\r\n',get_keyword('context', params), self.sid ,self.realm));
        return;
     }

     if (save_path = '' ) {
  self.wrong_entry := 'Path to save result in is empty. Enter a  correct path.';
        goto go_again;
	}
	else if (exists(select 1 from WS.WS.SYS_DAV_RES where RES_FULL_PATH = save_path)
	         and not self.replace_existing.ufl_selected)
	{
  	  self.wrong_entry := 'The specified resource for result already exist.';
  	  goto go_again;
        } else {
        if ( dav_path_validate(save_path,dav_folder_owner, dav_folder_group, file_perms, folders_message) <> 1 ) {
            self.wrong_entry := sprintf('Path to store into is invalid. Path validation was failed: "%s"', folders_message);
             goto go_again;
        } else if ( dav_check_permissions(connection_get('vspx_user'), file_perms,'010' ,dav_folder_owner, dav_folder_group, folders_message) <> 1) {
       self.wrong_entry := sprintf('You are unable to store this file: "%s"', folders_message);
       goto go_again;
        }
     }

     if (doc = '1') {
   if (get_keyword ('update_interval', params) = '') {
     self.wrong_entry := 'Create XML in Real Time  is requested, but no interval value  is provided.';
     goto go_again;
   }
   if ( atoi(get_keyword ('update_interval', params)) < 10 ) {
     self.wrong_entry := 'Interval value  has to be  >= 10.';
     goto go_again;
   }
   if (regexp_match ('^[0-9]+$', get_keyword ('update_interval', params)) is null ) {
            self.wrong_entry := 'Interval value  has to be a number.';
      goto go_again;
       }
     }

     declare pmode varchar;


         doc_base := '';
      if (self.ctx_value ='1') { -- this is dav
        doc_base := 'virt://WS.WS.SYS_DAV_RES.RES_FULL_PATH.RES_CONTENT:';
      } else if (self.ctx_value ='2') { -- this is table
        doc_base := concat('virt://', self.table_name,  '.',  self.kcol,  '.',  self.vcol , ':', self.kvalue);
      } else if (self.ctx_value ='3') { -- URL
         doc_base := '';
      } else if (self.ctx_value ='4') { -- Collection URL
         doc_base := '';
       }


      pmode := '0';
      if (self.skip_bad)
        pmode := '2';
      else if (self.is_html)
        pmode := '1';


       {
          declare exit handler for sqlstate '*'
          {
            err_msg := __SQL_MESSAGE;
            http_request_status ('HTTP/1.1 302 Found');
            http_header (sprintf('Location: xquery4.vspx?result=error&sid=%s&realm=%s&error=%s\r\n',self.sid ,self.realm,err_msg));
            return;
          };
	  res_string := y_execute_xq (
	    self.query_text,
	    get_keyword ('root_element', params, 'root'),
	    doc_base,
	    self.url,
	    self.ctx_value,
	    pmode
	  );
       }

       user_perm:='';
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_r') as vspx_field).ufl_selected + 48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_w') as vspx_field).ufl_selected+48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_x') as vspx_field).ufl_selected+48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_r') as vspx_field).ufl_selected+48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_w') as vspx_field).ufl_selected+48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_x') as vspx_field).ufl_selected+48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_r') as vspx_field).ufl_selected+48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_w') as vspx_field).ufl_selected+48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_x') as vspx_field).ufl_selected+48));
       user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_4_index') as vspx_field).ufl_selected+48));

       declare exit handler for sqlstate '*'
       {
         self.vc_is_valid := 0;
	 self.vc_error_message := __SQL_MESSAGE;
	 return;
       }
       ;

       {
		 declare dav_folder_owner, dav_folder_group integer;
		 declare file_perms, folders_message, path varchar;

		 path := get_keyword('save_path',params);

		 if (dav_path_validate (path,
					dav_folder_owner,
					dav_folder_group,
					file_perms,
					folders_message) <> 1 )
		   {
		     signal('22023', sprintf ('Storage path validation failed with error: %s',
						     folders_message));
		   }
		 else if (dav_check_permissions (connection_get ('vspx_user'),
					      file_perms,
					      '010',
					      dav_folder_owner,
					      dav_folder_group,
					      folders_message) <> 1)
		     {
		       signal ('22023', sprintf ('No permission to store in this folder. Error: %s',
						       folders_message));
		     }

          }

                  if (doc <> '2') {
                    YAC_DAV_RES_UPLOAD (get_keyword('save_path',params),
                   concat('<?xml version="1.0" encoding="UTF-8" ?><',self.doc_node,'>', res_string, '</',self.doc_node,'>'),
                   'text/xml',user_perm, 'dav', 'administrators');
                    if (doc = '1') {
                        declare _interval  integer;
                         _interval := atoi (get_keyword ('update_interval', params, '10'));
                        if (_interval > 0)
                            insert replacing DB.DBA.SYS_SCHEDULED_EVENT (SE_NAME, SE_START, SE_SQL, SE_INTERVAL)
                                   values (get_keyword('save_path',params), now (), sprintf ('WS.WS.XML_AUTO_SCHED (''%s'')',
                                   get_keyword('save_path',params)), _interval);
                        else
                            delete from DB.DBA.SYS_SCHEDULED_EVENT where SE_NAME = get_keyword('save_path',params);
                    }
                  } else if (doc='2') {
                    res_string := '<?xml version="1.0" encoding="UTF-8"?>';
                    res_string := concat(res_string, '<', self.doc_node, ' xmlns:sql="urn:schemas-openlink-com:xml-sql"');
                    if (length(self.style_path) > 0)
                      res_string := concat(res_string,' sql:xsl="',self.style_path,'">');
                    else
                      res_string := concat(res_string,'>');
                    res_string := concat(res_string,'<sql:xquery');
                    if (self.ctx_value <> '0')
                       res_string := concat(res_string,' sql:context="', doc_base, self.url ,'">');
                     else
                       res_string := concat(res_string,' sql:context="">');
                    res_string := concat(res_string,'<![CDATA[',self.query_text, ']]','></sql:xquery>');
                    res_string := concat(res_string, '</', self.doc_node, '>');
		    YAC_DAV_RES_UPLOAD (get_keyword('save_path',params),  res_string, 'text/xml',user_perm,
		       'dav', 'administrators');
                    YAC_DAV_PROP_SET (get_keyword('save_path',params),'xml-template','execute');
		    if (length (self.t_desc.ufl_value))
		      {
		        YAC_DAV_PROP_SET (get_keyword('save_path',params), 'xml-sql-description', self.t_desc.ufl_value);
		      }
                  }
                  self.query_text := null;
                  http_request_status ('HTTP/1.1 302 Found');
                  http_header (sprintf('Location: xquery4.vspx?result=ok&sid=%s&realm=%s\r\n',self.sid ,self.realm));

    go_again:
       ;
                }

    ]]></script>
     </v:on-post>
     <v:before-render>
       if (not self.vc_event.ve_is_post and self.store_path is not null)
         {
	   self.persist_enable.ufl_selected := 0;
	   self.template_enable.ufl_selected := 1;
	   self.t_desc.ufl_value := coalesce((select PROP_VALUE from WS.WS.SYS_DAV_PROP, WS.WS.SYS_DAV_RES where
	   RES_FULL_PATH = self.store_path and PROP_TYPE = 'R' and PROP_PARENT_ID = RES_ID and PROP_NAME =
	   'xml-sql-description'
	   ), '');
	   self.replace_existing.ufl_selected := 1;
	 }
     </v:before-render>
     </vm:events>
     <vm:row>
      <vm:raw>
       <td align="left" colspan="4">
        <?vsp
         if (self.wrong_entry is null) {
           http('Specify save parameters.');
         } else {
            http('<span style="{color:red}">');
            http(self.wrong_entry);
      self.wrong_entry := null;
      http('</span>');
    }
      ?>
       </td>
      </vm:raw>
     </vm:row>

     <vm:row>
      <vm:raw>
       <td> Store into
        <span class="attention_marker">*</span>
       </td>
       <td>
	 <v:text name="save_path" xhtml_size="40" value="--coalesce (control.ufl_value, self.store_path, '')" />
	 <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="" path="DAV" browse_type="col"
	   w_title="DAV Browser" title="DAV Browser" lang="en" return_box="save_path"/>
       </td>
      </vm:raw>
      <vm:control name="user_permitions" type="checkbox" dir="horiz">
       <vm:attrs width="0" class="SubData" border="0"/>
       <vm:caption value="Permissions" align="left"/>
       <vm:items left-margin="12" right-margin="12">
        <vm:group name="own" label="Owner">
         <vm:item name="r" value="1" label="r" initial-checked="1">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
         <vm:item name="w" value="1" label="w" initial-checked="1">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
         <vm:item name="x" value="1" label="x" initial-checked="1">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
        </vm:group>
        <vm:group name="group" label="Group">
         <vm:item name="r" value="1" label="r">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
         <vm:item name="w" value="1" label="w">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
         <vm:item name="x" value="1" label="x">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
        </vm:group>
        <vm:group name="other" label="Users">
         <vm:item name="r" value="1" label="r">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
         <vm:item name="w" value="1" label="w">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
         <vm:item name="x" value="1" label="x">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
        </vm:group>
        <vm:group label="Index">
         <vm:item name="index" value="1" label="t">
          <vm:events>
           <v:after-data-bind>
            <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
           </v:after-data-bind>
          </vm:events>
         </vm:item>
        </vm:group>
       </vm:items>
      </vm:control>
     </vm:row>
     <vm:row>
       <vm:raw>
	 <td nowrap="1">
	   <v:check-box name="replace_existing" value="1" xhtml_id="replace_existing_id"/>
	 </td>
	 <td nowrap="1"><label for="replace_existing_id" class="req">Replace the existing resource</label></td>
       </vm:raw>
     </vm:row>
     <vm:row>
       <vm:container width="100%" class="SubData" border="0" colspan="2" title="Sensitivity To Database Changes">
       <vm:row>
        <vm:control name="persist_enable" group-name="choice_source" type="radiobutton" initial-checked="1" value="0"/>
        <vm:static cell="yes">Persist XML</vm:static>
       </vm:row>
       <vm:row>
        <vm:space/>
        <vm:control name="update_interval" type="edit">
         <vm:caption value="Update every" pos="left"/>
        </vm:control>
        <vm:static cell="yes">minutes</vm:static>
       </vm:row>
       <vm:row>
        <vm:control name="template_enable" group-name="choice_source" type="radiobutton" value="2"/>
        <vm:static cell="yes">Create as XML Template</vm:static>
       </vm:row>
       <vm:row>
        <vm:space/>
	<vm:control name="t_desc" type="edit">
	  <vm:attrs xhtml_size="70"/>
         <vm:caption value="Description" pos="left"/>
        </vm:control>
       </vm:row>
      </vm:container>
     </vm:row>
     <vm:row>
      <vm:bgroup colspan="4" align="center">
       <v:button action="submit" name="prev_save" value="Previous" enabled="--isnull (self.store_path)"/>
       <v:button action="submit" name="cancel_save" value="Cancel"/>
       <v:button action="submit" name="save" value="Save"/>
      </vm:bgroup>
     </vm:row>
    </vm:form>
   </v:template>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
  </vm:pagebody>
 </vm:pagewrapper>
</v:page>
