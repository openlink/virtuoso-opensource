<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="robot_sched"
  decor="yacutia_decor.vspx"
  style="yacutia_style.xsl"
        fast-render="1"
        xmlns:v="http://www.openlinksw.com/vspx/"
  xmlns:vm="http://www.openlinksw.com/vspx/macro"
  doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
  <vm:pagetitle>WebDAV Content Management</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable persist="0" name="ename" type="varchar" default="''"/>
      <v:variable persist="0" name="host" type="varchar" default="''" param-name="host"/>
      <v:variable persist="0" name="root" type="varchar" default="''" param-name="root"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="WebDAV Content Management"/>
    </vm:menu>
    <vm:rawheader>
      <h1 class="page_title">
        <?vsp
          if (get_keyword('mode', self.vc_page.vc_event.ve_params) = 'edt')
            http('Modify Web Robot Scheduled Event');
          else
            http('Create Web Robot Scheduled Event');
        ?>
      </h1>
    </vm:rawheader>
    <vm:pagebody>
      <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
        <tr valign='top'>
          <td>
            <table cellpadding='10' cellspacing='0' border='0' width='100%'>
              <tr>
                <td>
                  <table cellpadding="0" cellspacing="0" border="0">
                    <tr>
                        <td class="page_tab" align="center" nowrap="1">
                          <v:url name="b_url41" value="Repository" url="cont_page.vspx?page=1" xhtml_class="uddi"/>
                        </td>
                        <td class="page_tab_selected" align="center" nowrap="1">
                          <v:url name="b_url45" value="Content Imports" url="cont_page.vspx?page=2" xhtml_class="uddi"/>
                        </td>
                        <td class="page_tab" align="center" nowrap="1">
			  <v:url name="b_url43" value="Text Indexing" format="%s" url="cont_page.vspx?page=3" xhtml_class="uddi"/>
                        </td>
                        <td class="page_tab" align="center" nowrap="1">
			  <v:url name="b_url42" value="Resource Types" format="%s" url="cont_page.vspx?page=4" xhtml_class="uddi"/>
                        </td>
                        <td class="page_tab_empty" align="center" width="100%">
                        &nbsp;
                        </td>
                    </tr>
                  </table>
                  <table class="tab_page">
                    <tr>
                      <td valign="top">
      <table width="100%">
        <tr>
          <td align="right">
            <v:form name="robot_form1" type="simple" method="POST" action="">
              <table>
                <tr>
                  <td align="right">
                    <v:button action="simple" value="Import Queues" name="robot_button36" format="%s">
                      <v:on-post>
                        <![CDATA[
                          http_request_status('HTTP/1.1 302 Found');
                          http_header(sprintf('Location: robot_queues.vspx?sid=%s&realm=%s\r\n', self.sid , self.realm));
                          return;
                        ]]>
                      </v:on-post>
                    </v:button>
                  </td>
                  <td align="right">
                    <v:button action="simple" value="Retrieved Sites" name="robot_button4" format="%s">
                      <v:on-post>
                        <![CDATA[
                          http_request_status ('HTTP/1.1 302 Found');
                          http_header(sprintf('Location: robot_sites.vspx?sid=%s&realm=%s\r\n', self.sid , self.realm));
                          return;
                        ]]>
                      </v:on-post>
                    </v:button>
                  </td>
                </tr>
              </table>
            </v:form>
          </td>
        </tr>
      </table>
      <table width="98%" border="0" cellspacing="0" cellpadding="3" class="ctl_grp" xmlns:xhtml="http://www.w3.org/1999/xhtml">
        <v:form name="event_form" type="simple" method="POST" action="robot_sched.vspx">
          <input type="hidden" name="mode" value="<?= get_keyword('mode', self.vc_page.vc_event.ve_params) ?>"/>
                            <v:before-data-bind>
                              <![CDATA[
            declare _host, _root, _name, _store_type, store_prefix varchar;
	    declare _udata any;
	    if (get_keyword('mode', self.vc_page.vc_event.ve_params) = 'edt')
	      {
	        if (self.ename = '')
	 	  self.ename := cast(deserialize(decode_base64(get_keyword('ename', self.vc_page.vc_event.ve_params))) as varchar);
	      }
            else
              {
                _host := self.host;
                _root := self.root;
                                  declare exit handler for not found
                                  {
	          signal ('.....', sprintf ('No such target'));
	        };
                select VS_DESCR, deserialize(VS_UDATA) into _name, _udata from WS.WS.VFS_SITE where VS_HOST = _host and VS_ROOT = _root;
		_store_type := get_keyword ('store-type', _udata, 'none');
		store_prefix := case when _store_type = 'dav' then '/DAV/' else '' end;
                self.ename := concat(_name, '(', _host,' in ',store_prefix,_root,')');
              }
                              ]]>
                            </v:before-data-bind>
          <v:on-post>
              <![CDATA[
                declare i, cnt, exist, u_ident, g_name, inter integer;
                declare tmp, val, start_str varchar;
                if (get_keyword('cancel', params) <> '' or self.vc_is_valid = 0)
                {
                  success:
                  http_request_status ('HTTP/1.1 302 Found');
                  http_header(sprintf('Location: robot_queues.vspx?sid=%s&realm=%s\r\n', self.sid, self.realm));
                  return;
                }
                inter := 0;
                if ((control.vc_find_control('start_time') as vspx_field).ufl_value <> '')
                {
                  declare state, msg, m_dta, res varchar;
                  state := '00000';
                  exec('stringdate(?)', state, msg, vector((control.vc_find_control('start_time') as vspx_field).ufl_value), m_dta, res);
                  if (state <> '00000')
                    start_str := cast(now() as varchar);
                  else
                    start_str := stringdate((control.vc_find_control('start_time') as vspx_field).ufl_value);
                }
                else
                                {
                  start_str := cast(now() as varchar);
                                }
                inter := get_keyword('interval_value', e.ve_params, '10');
		if (exists(select 1 from DB.DBA.SYS_SCHEDULED_EVENT where SE_NAME = self.ename))
		  {
                    update DB.DBA.SYS_SCHEDULED_EVENT set SE_START = start_str, SE_INTERVAL = inter where SE_NAME = self.ename;
		  }
                else
                                {
                  insert into SYS_SCHEDULED_EVENT (SE_NAME, SE_START, SE_INTERVAL, SE_SQL) values(self.ename, start_str, inter, concat('WS.WS.SERV_QUEUE_TOP(\'',self.host,'\',\'',self.root,'\', 1, 0, null, null)'));
                                }

		commit work;
                goto success;
              ]]>
          </v:on-post>
         <tr align="left">
                              <th width="150px">Event Name</th>
           <td valign="left">
             <?V self.ename ?>
           </td>
         </tr>
         <tr align="left">
                              <th valign="top">Start Time</th>
           <td valign="top">
             <v:text name="start_time" xhtml_style="width:400">
               <v:before-data-bind>
                                    <![CDATA[
                   declare start_time varchar;
                   if (get_keyword('mode', params) = 'edt')
                   {
                     select adm_date_fmt(se_start) into start_time from sys_scheduled_event where se_name = self.ename;
                     control.ufl_value := start_time;
                     control.vc_data_bound := 1;
                   }
                   else
                   {
                     start_time := get_keyword('start_time', params);
                     if (start_time is not NULL)
                     {
                       control.ufl_value:= start_time;
                       control.vc_data_bound := 1;
                     }
                     else
                     {
                       control.ufl_value:= cast(now() as varchar);
                       control.vc_data_bound := 1;
                     }
                   }
                                    ]]>
               </v:before-data-bind>
             </v:text>
           </td>
         </tr>
         <tr align="left">
                              <th valign="top">Interval</th>
           <td valign="top">
             <v:text name="interval_value" xhtml_style="width:400">
               <!-- v:validator name="interval_value_val1" min="1" max="999999999" empty-allowed="1" test="value" regexp="" message="Wrong value! " /-->
               <!-- v:validator name="interval_value_val2" min="0" max="0" empty-allowed="0" test="regexp" regexp="^[0-9]+$" message="Wrong value! must be a number" /-->
               <v:before-data-bind>
                   <![CDATA[
                     declare ufn integer;
                     if (get_keyword('mode', params) = 'edt')
                     {
                       select se_interval into ufn from SYS_SCHEDULED_EVENT where SE_NAME = self.ename;
                       control.ufl_value := cast(ufn as varchar);
                       control.vc_data_bound := 1;
                     }
                     else
                     {
                       declare pwd varchar;
                       pwd := get_keyword('interval_value', params, '10');
                       if (pwd is not NULL)
                       {
                         control.ufl_value:= pwd;
                         control.vc_data_bound := 1;
                       }
                     }
                   ]]>
               </v:before-data-bind>
             </v:text>
           </td>
         </tr>
                            <tr>
           <td/>
                              <td>
             <v:button action="submit" name="cancel" value="Cancel" />
             <?vsp
               if (get_keyword('mode', self.vc_page.vc_event.ve_params) is NULL or get_keyword('mode', self.vc_page.vc_event.ve_params) <> 'edit')
               {
             ?>
             <input type="reset" name="Submit2" value="Reset"/>
             <?vsp
               }
             ?>
             <v:button action="submit" name="save" value="Save"/>
           </td>
         </tr>
       </v:form>
      </table>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
