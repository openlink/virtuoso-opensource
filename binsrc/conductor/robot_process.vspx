<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="robot_queues_page" decor="yacutia_decor.vspx" style="yacutia_style.xsl" fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
  <vm:pagetitle>WebDAV Content Management</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="error_str" persist="1" type="varchar" default="''"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="WebDAV Content Management"/>
    </vm:menu>
    <vm:header caption="Content Import Queues">
      <vm:raw>
        <td class="SubInfo">
          <vm:url name="robot_control_ref" format="%s" value="--'Import Targets'" url="--'robot_control.vspx'"/>
        </td>
        <td class="SubInfo">
          <vm:url name="robot_sites_ref" format="%s" value="--'Retrieved Sites'" url="--'robot_sites.vspx'"/>
        </td>
      </vm:raw>
    </vm:header>
    <vm:pagebody>
      <H3>Site Download Status</H3>
      <?vsp
        declare _err_cnt integer;
        _host := get_keyword ('host', params);
        _root := get_keyword ('root', params);
        _upd := atoi (get_keyword ('upd', params));
        _url := get_keyword ('url', params);
        if (_upd < 2)
        {
          http('<br>\n');
          declare _start_t, _end_t integer;
          declare _t_int, updated_l integer;
          declare sttime datetime;
          declare continue handler for not found { sttime := now (); };
          {
            select max(VU_CPTIME) into sttime from WS.WS.VFS_URL where VU_ROOT = _root and VU_HOST = _host;
          }
          updated_l := 0;
          if (_upd = 0)
          {
            -- always do re-fetch
            if (_url is null)
              _url := coalesce ((select VS_URL from WS.WS.VFS_SITE where VS_ROOT = _root and VS_HOST = _host), '/');
            delete from WS.WS.VFS_URL where VU_ROOT = _root and VU_HOST = _host;
            delete from WS.WS.VFS_QUEUE where VQ_ROOT = _root and VQ_HOST = _host and VQ_URL <> _url;
            update WS.WS.VFS_QUEUE set VQ_STAT = 'waiting' where VQ_HOST = _host and VQ_ROOT = _root and VQ_URL = _url;
          }
          _start_t := msec_time ();
          -- disable the following code to enable old behaviour
          if (1)
          {
            http_rewrite ();
            http_header(sprintf('Location: robot_status.vspx?host=%U&root=%U&url=%U&start=%d&sid=%s&stime=%s\r\n', _host, _root, _url, _start_t, sid, cast(sttime as varchar)));
            http_request_status('HTTP/1.1 302 Found');
            http_flush();
          }
          WS.WS.SERV_QUEUE_TOP(_host, _root, _upd, _dbg, null, null);
          _end_t := msec_time ();
          _t_int := _end_t - _start_t;
          declare continue handler for not found
          {
            updated_l := 0;
          };
          select count(*) into updated_l from WS.WS.VFS_URL where VU_ROOT = _root and VU_HOST = _host and VU_CPTIME > sttime and VU_URL not like '%/';
          if (_upd = 1)
          {
            if (updated_l > 0)
              http (sprintf ('<p><small><strong>Total updated : %d</strong></small></p>', updated_l), res_ses);
            else
              http (sprintf ('<p><small><strong>No updates</strong></small></p>', updated_l), res_ses);
          }
          http (concat ('<p><strong> Total time: ', cast (_t_int as varchar), ' (msec) </strong></p>'), res_ses);
          _err_cnt := coalesce ((select count(*) from WS.WS.VFS_QUEUE where VQ_HOST = _host and VQ_ROOT = _root and VQ_STAT = 'error'), 0);
          if (_err_cnt > 1)
            http (concat ('<p>Errors while retrieving target. Wrong entries : ', cast (_err_cnt as varchar) ,'. Select "Stop" and "Reset" to return initial state</p>'), res_ses);
        }
        else if (_upd = 2)
        {
          update WS.WS.VFS_QUEUE set VQ_STAT = 'waiting' where VQ_HOST = _host and VQ_ROOT = _root and VQ_URL = _url;
        }
        else if (_upd = 3)
        {
          delete from  WS.WS.VFS_QUEUE where VQ_HOST = _host and VQ_ROOT = _root and VQ_URL <> _url and VQ_STAT <> 'pending';
        }
        commit work;
        http (string_output_string (res_ses));
      ?>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
