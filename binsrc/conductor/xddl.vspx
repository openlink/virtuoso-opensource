<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="uddi_serve_page"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        vm:owner="yacutia_xddl_page"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">

 <v:on-init>
	<script><![CDATA[
    declare res varchar;
    self.column_types := vector();

    self.column_types := vector_concat(self.column_types,  vector(189,'integer'));
    self.column_types := vector_concat(self.column_types,  vector(219, 'numeric'));
    self.column_types := vector_concat(self.column_types,  vector(188, 'smallint'));
    self.column_types := vector_concat(self.column_types,  vector(190, 'real'));
    self.column_types := vector_concat(self.column_types,  vector(191, 'double precision' ));


    self.column_types := vector_concat(self.column_types,  vector(182,'varchar'));
    self.column_types := vector_concat(self.column_types,  vector(125,'long varchar'));

    self.column_types := vector_concat(self.column_types,  vector(225, 'nvarchar'));
    self.column_types := vector_concat(self.column_types,  vector(226, 'long nvarchar'));

    self.column_types := vector_concat(self.column_types,  vector(222,'varbinary'));
    self.column_types := vector_concat(self.column_types,  vector(131,'long varbinary' ));

    self.column_types := vector_concat(self.column_types,  vector(230, 'long xml'));

    self.column_types := vector_concat(self.column_types,  vector(129,  'date' ));
    self.column_types := vector_concat(self.column_types,  vector(211, 'datetime'  ));
    self.column_types := vector_concat(self.column_types,  vector(210, 'time'));
    self.column_types := vector_concat(self.column_types,  vector(210, 'timestamp'));

    self.column_types := vector_concat(self.column_types,  vector(183, 'string'));
    self.column_types := vector_concat(self.column_types,  vector(192, 'char'));
    self.column_types := vector_concat(self.column_types,  vector(125,'any'));


    self.actions := vector('','No Action');
    self.actions := vector_concat(self.actions,  vector('set null','Set NULL'));
    self.actions := vector_concat(self.actions,  vector('cascade','Cascade'));
    self.actions := vector_concat(self.actions,  vector('set default','Set Default'));

    self.column_edit_buff := xpath_eval('/column', xtree_doc('<column/>'));
    self.column_create_buff := xpath_eval('/column', xtree_doc('<column/>'));
    self.current_table := xml_tree_doc('<table/>');

  ]]></script>
 </v:on-init>


 <vm:pagetitle>XDDL</vm:pagetitle>
 <vm:pagewrapper>
	<vm:rawheader>
	 <td>
		<?vsp
  {
  declare mode varchar;
   mode := self.mode;
  if (mode  is null and (self.page = '1' or self.page is null  or  self.page = '2' or self.page = '3' )  )
          http('Edit Buffer');
    else if ( mode  ='table_edit') {
         if ( self.kind ='edit')
            http('Edit Table');
       else  if ( self.kind ='create')
            http('Create Table');

  } else if ( mode  ='column_edit')
              http('Edit Column');
  else if ( mode  ='column_create')
              http('Create New Column');
  else if ( mode  ='column_remove')
              http('Remove Column');

  else if ( mode  ='primary_key_dialog')
              http('Primary Key Dialog');

  else if ( mode  ='create')
              http('Create New Table');

  else if ( mode  ='foreign_key_edit') {
  --    if (get_keyword('what', control.vc_page.vc_event.ve_params) = 'edit')
              http('Edit Foreign Key');
    --  else  if (get_keyword('what', control.vc_page.vc_event.ve_params) = 'create')
          --    http('Create Foreign Key');
   }
  else if ( mode  ='xddl_save')
              http('Save XDDL to DAV');
  else if ( mode  ='xddl_load')
              http('Load XDDL from DAV');
  else if ( mode  ='foreign_key_remove')
              http('Remove Foreign Key');
  else if ( mode  ='exec_xddl')
              http('Execute');
  else if ( mode  ='xddl_execute_error')
               http('Execution error message.');
  else if ( mode  ='table_remove')
              http('Remove Table.');
  else if ( mode  ='foreign_key_actions')
              http('Foreign Key Actions Editor.');

  else if ( mode  ='xddl_chooser')
              http('Current Database Objects Chooser.');
  else if ( mode  ='xddl_constraint_error')
	         http('Check Constraint Validation results.');

        } ?>
	 </td>
	</vm:rawheader>

	<vm:variables>
	 <v:variable persist="1" name="xddl_source_type" type="integer" default="1"/>
	 <v:variable persist="1" name="xddl_source_name" type="varchar" default="null"/>
	 <v:variable name="chosen_objects" type="any" default="null" persist="1"/>
	 <v:variable name="chosen_existing_objects" type="any" default="null" persist="1"/>



	 <v:variable name="objects" default="null" type="xml" persist="1"/>
	 <v:variable name="views" default="null" type="xml" persist="1"/>
	 <v:variable name="procedures" default="null" type="xml" persist="1"/>




	 <v:variable name="chooser_catalog"  type="any" persist="1" default="'%'"/>
	 <v:variable name="chooser_schema"  type="any" persist="1" default="'%'"/>
	 <v:variable persist="1" name="chooser_mask" type="varchar" default="'%'"/>

	 <v:variable persist="1" name="rows_fetched" type="integer" default="0"/>

	 <v:variable persist="1" name="chooser_browse_procedures" type="integer" default="0"/>
	 <v:variable persist="1" name="chooser_browse_tables" type="integer" default="1"/>
	 <v:variable persist="1" name="chooser_browse_views" type="integer" default="0"/>
	 <v:variable name="catalogs_list" default="null" type="any" persist="1"/>
	 <v:variable name="schemas_list" default="null" type="any" persist="1"/>

	 <v:variable name="drop_list" default="null" type="any" persist="1"/>


	 <v:variable persist="1" name="tables_browse_cat" type="varchar" default="'DB'"/>
	 <v:variable persist="1" name="tables_browse_sch" type="varchar" default="'DBA'"/>
	 <v:variable persist="1" name="tables_browse_mask" type="varchar" default="'%'"/>

	 <v:variable persist="1" name="views_browse_cat" type="varchar" default="'DB'"/>
	 <v:variable persist="1" name="views_browse_sch" type="varchar" default="'DBA'"/>
	 <v:variable persist="1" name="views_browse_mask" type="varchar" default="'%'"/>

	 <v:variable persist="1" name="procs_browse_cat" type="varchar" default="'DB'"/>
	 <v:variable persist="1" name="procs_browse_sch" type="varchar" default="'DBA'"/>
	 <v:variable persist="1" name="procs_browse_mask" type="varchar" default="'%'"/>


	 <v:variable name="current_table" default="null" type="xml" persist="1"/>
	 <v:variable name="primary_key" default="null" type="any" persist="1"/>

	 <v:variable name="foreign_key_columns" default="null" type="any" persist="1"/>


	 <v:variable name="foreign_key" default="null" type="xml" persist="1"/>
	 <v:variable name="type_name" default="null" type="varchar" persist="1"/>
	 <v:variable name="type_value" default="null" type="varchar" persist="0"/>
	 <v:variable name="ref_table_name" default="''" type="varchar" persist="0"/>

	 <v:variable name="reference_table_value" default="null" type="varchar" persist="1"/>
	 <v:variable name="column_edit_buff" default="null" type="xml" persist="1"/>
	 <v:variable name="column_create_buff" default="null" type="xml" persist="1"/>
	 <v:variable name="column_types" default="null" type="any" persist="1"/>
	 <v:variable name="actions" default="null" type="any" persist="1"/>
	 <v:variable name="wrong_entry" default="null" type="varchar" persist="1"/>
	 <v:variable name="statements" default="null" type="varchar" persist="1"/>
	 <v:variable name="current_column_name" default="null" type="varchar" persist="1"/>
	 <v:variable name="dav_loaded_from" default="null" type="varchar" persist="1"/>

	 <v:variable name="key_is_unique" default="null" type="varchar" persist="1"/>
	 <v:variable name="key_is_clustered" default="null" type="varchar" persist="1"/>
	 <v:variable name="key_is_oid" default="null" type="varchar" persist="1"/>
	 <v:variable name="page_to_go_back" default="null" type="varchar" persist="1"/>



	 <v:variable name="page_data" type="any" default="null" persist="1"/>
	 <v:variable name="pages_data"  persist="1" type="any" default="null"/>
	 <v:variable name="cur_page" type="integer" default="0" persist="1"/>
	 <v:variable name="datasource_entry" type="integer" default="0" persist="0"/>
	 <v:variable name="exec_errors"  persist="1" type="any" default="null"/>

	 <v:variable name="mode"  persist="1" type="varchar" default="null"/>
	 <v:variable name="kind"  persist="1" type="varchar" default="null"/>
	 <v:variable name="page"  persist="1" type="varchar" default="null"/>
	 <v:variable name="table_editor_page"  persist="1" type="varchar" default="null"/>

	 <v:variable name="table_name"  persist="1" type="varchar" default="null"/>
	 <v:variable name="parent_table"  persist="1" type="varchar" default="null"/>
	 <v:variable name="column_name"  persist="1" type="varchar" default="null"/>

	 <v:variable name="full_advanced_mode"  persist="1" type="integer" default="0"/>
   <v:variable persist="temp" name="row_count" type="integer" default="1"/>

	</vm:variables>
	<vm:pagebody>
	 <v:template name="template0" type="simple" enabled="1">
		<vm:events>
		 <v:before-data-bind>
			<script><![CDATA[
		       declare t_obj, t_orig xml_tree;
		       declare len, i, len2, i2, f  integer;

		if (get_keyword('init',params) is not null and get_keyword('init',params) = 'xddl')			{
		     self.page := null;
		     self.mode := null;
				 self.kind := null;
				 self.table_editor_page := null;
			   self.xddl_source_type := 0;
      	 self.objects := xpath_eval('/tables', xml_tree_doc('<tables/>'));
				 self.views := xpath_eval('/views', xml_tree_doc('<views/>'));
				 self.procedures :=  xpath_eval('/procedures', xml_tree_doc('<procedures/>'));
		}


		if (get_keyword('page',params) is not null)			{
		     self.page := get_keyword('page',params);
		     self.mode := null;
				 self.kind := null;
				 self.table_editor_page := null;

		}


		if ((e.ve_button is null and get_keyword('advanced_toogle',params) is not null ) and self.mode = 'table_edit' and  self.table_editor_page = '1' and get_keyword('table_editor_page',params) is null) {
		   self.full_advanced_mode := 0;
       if (get_keyword('advanced_mode',params) = '1')
		     self.full_advanced_mode := 1;
		}

		if (get_keyword('table_editor_page',params) is not null)  {
		  if (get_keyword('entry', params) is null ) {
		    if ( self.table_editor_page = '3' ) { -- now we need to transfer pk cols from vector into current table xml tree.
				   self.current_table := xddl_attach_pk_xml_tree (self.primary_key, self.current_table,
											  self.key_is_unique, self.key_is_clustered,self.key_is_oid );
				} else if ( self.table_editor_page = '4' ) { -- now we need to transfer fk cols from vector into current table xml tree.
				    declare i, len integer;
				    len := length( self.foreign_key_columns);
            i := 0;
            while (i < len) {
              if ( aref(self.foreign_key_columns,i+1) is null or aref(self.foreign_key_columns,i+2) is null ) {
                self.wrong_entry := sprintf ('Column %s has no valid reference specified.', aref(self.foreign_key_columns,i));
								self.vc_data_bind(e);
                return;
              }
              i:= i + 3;
            }

				 self.current_table := xddl_attach_fk_xml_tree(self.foreign_key_columns, self.current_table );
				}
			}
		  self.table_editor_page := get_keyword('table_editor_page',params);
		}
		if (get_keyword('entry', params) = '1' and self.mode='table_edit' and self.table_editor_page='1' ) {
				self.primary_key := null;
				self.table_name := null;
	 }


		if (get_keyword('mode',params) is not null)			{
		     self.mode := get_keyword('mode',params);
				 self.table_editor_page := '1';
				 self.table_name := get_keyword('table_name',params);
		}
		if (get_keyword('kind',params) is not null)
		     self.kind := get_keyword('kind',params);

		if (get_keyword('edit_table_name',params) is not null)
		     self.table_name := get_keyword('edit_table_name',params);
    if (get_keyword('table_parent_control', params) is not null)
				 self.parent_table  :=  get_keyword('table_parent_control', params);

		if ( get_keyword('view_name', params) is not null )
		  self.table_name := get_keyword('view_name', params);
    if ( get_keyword('procedure_name', params) is not null)
		  self.table_name := get_keyword('procedure_name', params);


--			  if (self.objects is null) {
--			   self.xddl_source_type := 0;
--      	self.objects := xpath_eval('/tables', xml_tree_doc('<tables/>'));
--				} else
			   		self.objects := xml_tree_doc(self.objects);

--			  if (self.views is null) {
--					self.views := xpath_eval('/views', xml_tree_doc('<views/>'));
--				} else
			   		self.views := xml_tree_doc(self.views);

--			  if (self.procedures is null) {
--						self.procedures :=  xpath_eval('/procedures', xml_tree_doc('<procedures/>'));
--				} else
			   		self.procedures := xml_tree_doc(self.procedures);


				if (self.drop_list is null)
					self.drop_list := vector();

				t_obj := xpath_eval('/tables/table',self.objects,0);
				len := length(t_obj);
				i:=0;
			    self.catalogs_list := vector();
			    self.schemas_list := vector();

			while (i < len) {
			     declare name, cname, sname varchar;
				name := cast ( xpath_eval('./@name',aref(t_obj,i)) as varchar );
				cname := name_part(name,0);
				sname := name_part(name,1);

			      f:=0;
			      i2 := 0;
			      len2 := length(self.catalogs_list);
			      while (i2 < len2) {
			         if (aref(self.catalogs_list,i2) = cname)
			             f  := 1;
			         i2 := i2 +1;
			      }
			      if (f = 0)
                    	self.catalogs_list  :=  vector_concat (self.catalogs_list, vector(cname));

			      f:=0;
			      i2 := 0;
			      len2 := length(self.schemas_list);
			      while (i2 < len2) {
			         if (aref(self.schemas_list,i2) = sname)
			             f  := 1;
			         i2 := i2 +1;
			      }
			      if (f = 0)
                    	self.schemas_list  :=  vector_concat (self.schemas_list, vector(sname));

			   i:= i + 1;
			}


		     ]]></script>
		 </v:before-data-bind>
		</vm:events>
	 </v:template>
	 <v:template name="template100" type="simple" enabled="--case when self.mode is null then 2 else 0 end">
		<table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
		 <tr valign='top'>
			<td>
			 <table cellpadding='10' cellspacing='0' border='0' width='100%'>
				<tr>
				 <td>
					<table cellpadding="0" cellspacing="0" border="0">
					 <colgroup>
						<col/>
						<col/>
						<col/>
						<col/>
						<col/>
					 </colgroup>
					 <tr>
						 <td class="page_tab<?vsp if (self.page ='1' or  self.page is null) http('_selected'); ?>" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url21" value="--'Tables'" format="%s" url="--'xddl.vspx?page=1'" xhtml_class="uddi"/>&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab<?vsp if ( self.page ='2' ) http('_selected'); ?>" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url12" value="--'Views'" format="%s" url="--'xddl.vspx?page=2'" xhtml_class="uddi"/>
&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab<?vsp if ( self.page ='3' ) http('_selected'); ?>" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url13" value="--'Stored Procedures'" format="%s" url="--'xddl.vspx?page=3'" xhtml_class="uddi"/>
&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab_empty" align="center" width="100%">
								 <?vsp

           if (self.xddl_source_type=1) {
             if (self.page ='1' or  self.page is null)
               http('List of the tables from current database.');
             else if ( self.page ='2'  )
               http('List of the Views from current database.');
             else if ( self.page ='3'  )
               http('List of the Procedures from current database.');
           } else if (self.xddl_source_type=2) {
            http(sprintf('Editing  %s.', self.xddl_source_name));
           } else if (self.xddl_source_type=0) {
             http('Editing New Schema.');
           }
         ?>
						 </td>

						<!--
						<v:template name="tabTemplate1" type="simple" enabled="--case when (self.page ='1' or  self.page is null) then 1 else 0 end">
						 <td class="page_tab_selected" align="center">
							<nobr>&nbsp;&nbsp;Tables&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url12" value="--'Views'" format="%s" url="--'xddl.vspx?page=2'" xhtml_class="uddi"/>
&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url13" value="--'Stored Procedures'" format="%s" url="--'xddl.vspx?page=3'" xhtml_class="uddi"/>
&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab_empty" align="center" width="100%">
               &amp;nbsp;
						 </td>
						</v:template>

						<v:template name="tabTemplate2" type="simple" enabled="--case when ( self.page ='2' ) then 1 else 0 end">
						 <td class="page_tab" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url21" value="--'Tables'" format="%s" url="--'xddl.vspx?page=1'" xhtml_class="uddi"/>&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab_selected" align="center">
							<nobr>&nbsp;&nbsp;Views&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url23" value="--'Stored Procedures'" format="%s" url="--'xddl.vspx?page=3'" xhtml_class="uddi"/>
&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab_empty" align="center" width="100%">
                &amp;nbsp;
						 </td>
						</v:template>
						<v:template name="tabTemplate3" type="simple" enabled="--case when ( self.page ='3' ) then 1 else 0 end">
						 <td class="page_tab" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url31" value="--'Tables'" format="%s" url="--'xddl.vspx?page=1'" xhtml_class="uddi"/>
&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab" align="center">
							<nobr>&nbsp;&nbsp;
							 <v:url name="b_url32" value="--'Views'" format="%s" url="--'xddl.vspx?page=2'" xhtml_class="uddi"/>
&nbsp;&nbsp;</nobr>
						 </td>



						 <td class="page_tab_selected" align="center">
							<nobr>&nbsp;&nbsp;Stored Procedures&nbsp;&nbsp;</nobr>
						 </td>
						 <td class="page_tab_empty" align="center" width="100%">
                &amp;nbsp;
						 </td>
						</v:template>-->
					 </tr>
					</table>
					<table class="tab_page">
					 <tr>
						<td valign="top">

						 <!-- Tables -->



						 <v:template name="tables_template" type="simple" enabled="--case when ( self.page ='1'  or  self.page is null ) then 1 else 0 end">
							<!--<table>
							 <tr>
								<td class="uddi_info">
								 <?vsp

           if (self.xddl_source_type=1) {
              http('List of the tables from current database.');
           } else if (self.xddl_source_type=2) {
            http(sprintf('Editing  %s.', self.xddl_source_name));
           } else if (self.xddl_source_type=0) {
             http('Editing New Schema.');
           }
         ?>
								</td>
							 </tr>
							</table>
							<br/>-->
							<!--Filter

							<v:form name="tables_filter_form" type="simple" method="POST" action="">
							 <v:on-post>
								<v:script><![CDATA[
						if ( get_keyword('tables_filter_apply', params) is not null ) {
							self.tables_browse_cat := self.table_catalog_list.ufl_value;
							self.tables_browse_sch := self.table_schema_list.ufl_value;
							self.tables_browse_mask := case when self.table_mask_filter.ufl_value='' then '%' else self.table_mask_filter.ufl_value end;
							self.mode := null;
							self.page := '1';
							self.vc_data_bind(e);

--							http_request_status ('HTTP/1.1 302 Found');
--							http_header (sprintf('Location: xddl.vspx?page=1&sid=%s&realm=%s\r\n', self.sid ,self.realm));
							return;

						} else  if ( get_keyword('tables_filter_reset', params) is not null ) {
							self.tables_browse_cat := 'all_catalog';
							self.tables_browse_sch := 'all_schema';
							self.tables_browse_mask := '%';
							self.mode := null;
							self.page := '1';
							self.vc_data_bind(e);
--							http_request_status ('HTTP/1.1 302 Found');
--							http_header (sprintf('Location: xddl.vspx?page=1&sid=%s&realm=%s\r\n', self.sid ,self.realm));
							return;
						}
				]]></v:script>
							 </v:on-post>
							 <table>
								<tr>
								 <td>Catalog</td>
								 <td>
									<v:select-list name="table_catalog_list"   xhtml_style="width: 200px;"  value="--self.tables_browse_cat">
									 <v:before-data-bind>
										<script><![CDATA[ {
									if ( self.page ='1'  or  self.page is null ) {
										declare t_obj, t_orig xml_tree;
										declare len, i integer;
										t_obj := self.catalogs_list;
										len := length(t_obj);
										i:=0;
										(control as vspx_select_list).vsl_items := vector();
										(control as vspx_select_list).vsl_item_values := vector();
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('All Catalogs'));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('all_catalog'));

										while (i < len) {
											declare name varchar;
											name := aref(t_obj,i);
											(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
											(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
											 i:= i + 1;
										}
									}
								}
								]]></script>
									 </v:before-data-bind>
									</v:select-list>
								 </td>
								 <td>Mask</td>
								 <td>
									<v:text name="table_mask_filter"   xhtml_style="width: 200px;"  value="--self.tables_browse_mask">
									</v:text>
								 </td>
								</tr>
								<tr>
								 <td>Schema</td>
								 <td>
									<v:select-list name="table_schema_list"   xhtml_style="width: 200px;" value="--self.tables_browse_sch">
									 <v:before-data-bind>
										<script><![CDATA[ {
									if ( self.page ='1'  or  self.page is null ) {
										declare t_obj, t_orig xml_tree;
										declare len, i integer;

										t_obj := self.schemas_list;
										len := length(t_obj);
										i:=0;
										(control as vspx_select_list).vsl_items := vector();
										(control as vspx_select_list).vsl_item_values := vector();
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('All Schemas'));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('all_schema'));
										while (i < len) {
											declare name varchar;
											name := aref(t_obj,i);
											(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
											(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
											i:= i + 1;
										}
									}
								}
							]]></script>
									 </v:before-data-bind>
									</v:select-list>
								 </td>
								 <td align="right" colspan="2">
									<v:button action="submit" name="tables_filter_apply" value="Filter" xhtml_style="width: 56px; height: 24px;"/>
									<v:button action="submit" name="tables_filter_reset" value="Reset" xhtml_style="width: 56px; height: 24px;"/>
								 </td>
								</tr>
							 </table>
							</v:form>

								end of Filter -->

							<img src="images/icons/add_table_16.png" alt="New Table" title="New Table" />
							<v:url name="n_table_url" value="--'New table'" format="%s" url="--'xddl.vspx?entry=1&mode=table_edit&kind=create&table_editor_page=1'" xhtml_class="uddi"/>

							<table class="listing" rules="groups">
                <colgroup/><colgroup/>
							 <thead>
								<tr>
								 <th width="16"/>
								 <th>Name</th>
								 <th>Action</th>
								</tr>
							 </thead>
							 <tbody>
								<?vsp

        if ( self.page ='1'  or  self.page is null ) {
           declare t_obj, t_orig xml_tree;
           declare len, i, mask_len integer;
        mask_len := length(self.tables_browse_mask);
        t_obj := xpath_eval('/tables/table',self.objects,0); -- xddl_get(null)
        len := length(t_obj);
        i:=0;
        while (i < len) {
            declare name, drop_flag varchar;
              name := cast ( xpath_eval('./@name',aref(t_obj,i)) as varchar);
              drop_flag := cast ( xpath_eval('./@drop',aref(t_obj,i)) as varchar);

--              if (( self.tables_browse_cat = 'all_catalog' or  upper (name_part(name, 0)) =  upper(self.tables_browse_cat) )  and  ( self.tables_browse_sch = 'all_schema' or upper(name_part(name, 1)) = upper( self.tables_browse_sch))) {
--                if ( self.tables_browse_mask = '%'  or ( self.tables_browse_mask <> '%'  and upper (substring(name_part(name,2), 1, mask_len  ) ) =  upper(self.tables_browse_mask) ))
                 http('<tr><td><img src="images/icons/table_16.png" alt="Table" title="Table" /></td>');
                 if (drop_flag = 'true') {
                    http(sprintf('<td style="text-decoration: line-through; ">%s</td>',  name) );
                    http(sprintf('<td><a href="xddl.vspx?mode=xddl_table_drop&kind=undrop&table_name=%s&sid=%s&realm=%s">Undrop</a></td>', name,self.sid ,self.realm ));
                 } else {
                    http(sprintf('<td>%s</td>',  name) );
                    http(sprintf('<td><a href="xddl.vspx?entry=1&mode=table_edit&kind=edit&table_name=%s&sid=%s&realm=%s">Edit</a>', name,  self.sid ,self.realm ));
                    http(sprintf('&nbsp;&nbsp;&nbsp;<a href="xddl.vspx?mode=xddl_table_drop&kind=drop&table_name=%s&sid=%s&realm=%s">Drop</a>', name,self.sid ,self.realm ));
                    http(sprintf('&nbsp;&nbsp;&nbsp;<a href="#" onclick="javascript: window.open (\'isql.vspx?sid=%s&realm=%s&gen_table_sel=%s\', \'browse_button1_window\', \'scrollbars=yes,resizable=yes,status=no,menubar=no,height=600,width=800\')">View</a></td><td>&nbsp;</td>', self.sid ,self.realm , name));
                 }
                 http('</tr>');
--              }
            i:= i + 1;
          }
          }

       ?>
							 </tbody>
							</table>
						 </v:template>

						 <!--Views -->
						 <v:template name="views_template" type="simple" enabled="--case when ( self.page ='2'  ) then 1 else 0 end">
							<!--<table>
							 <tr>
								<td class="uddi_info">
								 <?vsp
                               if (self.xddl_source_type=1) {
                                http('List of the Views from current database.');
                               } else if (self.xddl_source_type=2) {
                                http(sprintf('Editing  %s.', self.xddl_source_name));
                               } else if (self.xddl_source_type=0) {
                                  http('Editing New Schema.');
                              }
                 ?>
								</td>
							 </tr>
							</table>
							<br/>-->
							<!--
							<v:form name="views_filter_form" type="simple" method="POST" action="">
							 <v:on-post>
								<v:script><![CDATA[
						if ( get_keyword('views_filter_apply', params) is not null ) {
							self.views_browse_cat := self.view_catalog_list.ufl_value;
							self.views_browse_sch := self.view_schema_list.ufl_value;
							self.views_browse_mask := case when self.view_mask_filter.ufl_value='' then '%' else self.view_mask_filter.ufl_value end;
							} else  if ( get_keyword('views_filter_reset', params) is not null ) {
							self.views_browse_cat := 'all_catalog';
							self.views_browse_sch := 'all_schema';
							self.views_browse_mask := '%';
						}
						self.mode := null;
						self.page := '2';
						self.vc_data_bind(e);
--						http_request_status ('HTTP/1.1 302 Found');
--		http_header (sprintf('Location: xddl.vspx?page=2&sid=%s&realm=%s\r\n', self.sid ,self.realm));
		return;

						]]></v:script>
							 </v:on-post>
							 <table>
								<tr>
								 <td>Catalog
								 </td>
								 <td>
									<v:select-list name="view_catalog_list"   xhtml_style="width: 200px;"  value="--self.views_browse_cat">
									 <v:before-data-bind>
										<script><![CDATA[ {
				if ( self.page ='2' ) {
					 declare t_obj, t_orig xml_tree;
					 declare len, i integer;

			t_obj := self.catalogs_list;
			len := length(t_obj);
			i:=0;
					(control as vspx_select_list).vsl_items := vector();
					(control as vspx_select_list).vsl_item_values := vector();
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('All Catalogs'));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('all_catalog'));

			while (i < len) {
					 declare name varchar;
						name := aref(t_obj,i);
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
				 i:= i + 1;
			}
					}
				}
				]]></script>
									 </v:before-data-bind>
									</v:select-list>
								 </td>
								 <td>Mask
								 </td>
								 <td>
									<v:text name="view_mask_filter"   xhtml_style="width: 200px;"  value="--self.views_browse_mask">
									</v:text>
								 </td>
								</tr>
								<tr>
								 <td>Schema
								 </td>
								 <td>
									<v:select-list name="view_schema_list"   xhtml_style="width: 200px;" value="--self.views_browse_sch">
									 <v:before-data-bind>
										<script><![CDATA[ {
				if ( self.page ='2'  ) {
					 declare t_obj, t_orig xml_tree;
					 declare len, i integer;

			t_obj := self.schemas_list;
			len := length(t_obj);
			i:=0;
					(control as vspx_select_list).vsl_items := vector();
					(control as vspx_select_list).vsl_item_values := vector();
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('All Schemas'));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('all_schema'));
			while (i < len) {
					 declare name varchar;
						name := aref(t_obj,i);
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
				 i:= i + 1;
			}
					}
				}
				]]></script>
									 </v:before-data-bind>
									</v:select-list>
								 </td>
								 <td align="right" colspan="2">
									<v:button action="submit" name="views_filter_apply" value="Filter" xhtml_style="width: 56px; height: 24px;"/>
									<v:button action="submit" name="views_filter_reset" value="Reset" xhtml_style="width: 56px; height: 24px;"/>
								 </td>
								</tr>
							 </table>
							</v:form>
							-->

							<img src="images/icons/add_view_16.png" alt="New View" title="New View" />
							<v:url name="n_view_url" value="--'New View'" format="%s" url="--'xddl.vspx?entry=1&mode=view_dialog_create'" xhtml_class="uddi"/>

							<table class="listing" rules="groups">
                <colgroup/><colgroup/>
							 <thead>
								<tr>
								 <th width="16"/>
								 <th>Name</th>
								 <th>Action</th>
								</tr>
							 </thead>
							 <tbody>
								<?vsp
        if ( self.page ='2'  ) {
           declare t_obj, t_orig xml_tree;
           declare len, i, mask_len integer;
        mask_len := length(self.views_browse_mask);
        t_obj := xpath_eval('/views/view',self.views,0);
        len := length(t_obj);
        i:=0;
        while (i < len) {
            declare name, drop_flag varchar;
              name := cast ( xpath_eval('./@name',aref(t_obj,i)) as varchar);
               drop_flag := cast ( xpath_eval('./@drop',aref(t_obj,i)) as varchar);

--              if (( self.views_browse_cat = 'all_catalog' or  upper (name_part(name, 0)) =  upper(self.views_browse_cat) )  and  ( self.views_browse_sch = 'all_schema' or upper(name_part(name, 1)) = upper( self.views_browse_sch))) {
--                  if ( self.views_browse_mask = '%'  or ( self.views_browse_mask <> '%'  and upper (substring(name_part(name,2), 1, mask_len  ) ) =  upper(self.views_browse_mask) ))

                 http('<tr><td><img src="images/icons/view_16.png" alt="View" title="View" /></td>');
                 if (drop_flag = 'true') {
                  http(sprintf('<td style="text-decoration: line-through; ">%s</td>',  name) );
                  http(sprintf('<td><a href="xddl.vspx?mode=xddl_view_drop&kind=undrop&view_name=%s&sid=%s&realm=%s">Undrop</a></td>', name,self.sid ,self.realm ));
                 } else {
                  http(sprintf('<td>%s</td>',  name) );
                  http(sprintf('<td><a href="xddl.vspx?entry=1&page=view_dialog_edit&mode=edit&view_name=%s&sid=%s&realm=%s">Edit</a>', name,  self.sid ,self.realm ));
                  http(sprintf('&nbsp;&nbsp;&nbsp;<a href="xddl.vspx?mode=xddl_view_drop&kind=drop&view_name=%s&sid=%s&realm=%s">Drop</a>', name,self.sid ,self.realm ));
                  http(sprintf('&nbsp;&nbsp;&nbsp;<a href="#" onclick="javascript: window.open (\'isql.vspx?sid=%s&realm=%s&gen_table_sel=%s\', \'browse_button1_window\', \'scrollbars=yes,resizable=yes,status=no,menubar=no,height=600,width=800\')">View</a></td><td>&nbsp;</td>', self.sid ,self.realm , name));
                 }
                 http('</tr>');

--                http(sprintf('<tr><td>%s</td><td><a href="xddl.vspx?entry=1&page=view_dialog_edit&mode=edit&view_name=%s&sid=%s&realm=%s">Edit</a>
--                &nbsp;&nbsp;&nbsp;<a href="xddl.vspx?view_name=%s&sid=%s&realm=%s">Drop</a>&nbsp;&nbsp;&nbsp;<a href="xddl.vspx?view_name=%s&sid=%s&realm=%s">View</a></td><td>&nbsp;</td></tr>',
--                name, name,  self.sid ,self.realm, name,self.sid ,self.realm, name, self.sid ,self.realm));
--              }
            i:= i + 1;
        }
          }

       ?>
							 </tbody>
							</table>
						 </v:template>

						 <!--Stored Procedures -->
						 <v:template name="tmodel_template" type="simple" enabled="--case when ( self.page ='3' ) then 1 else 0 end">
							<!--<table>
							 <tr>
								<td class="uddi_info">
								 <?vsp
                               if (self.xddl_source_type=1) {
                                http('List of the Procedures from current database.');
                               } else if (self.xddl_source_type=2) {
                                http(sprintf('Editing %s.', self.xddl_source_name));
                               } else if (self.xddl_source_type=0) {
                                  http('Editing New Schema.');
             }
                            ?>
								</td>
							 </tr>
							</table>
							<br/>-->
							<!--
							<v:form name="sp_filter_form" type="simple" method="POST" action="">
							 <v:on-post>
								<v:script><![CDATA[
						if ( get_keyword('procs_filter_apply', params) is not null ) {
							self.procs_browse_cat := self.sp_catalog_list.ufl_value;
							self.procs_browse_sch := self.sp_schema_list.ufl_value;
							self.procs_browse_mask := case when self.sp_mask_filter.ufl_value='' then '%' else self.sp_mask_filter.ufl_value end;
						self.mode := null;
						self.page := '3';
						self.vc_data_bind(e);
--						http_request_status ('HTTP/1.1 302 Found');
--		http_header (sprintf('Location: xddl.vspx?page=3&sid=%s&realm=%s\r\n', self.sid ,self.realm));
		return;

							} else  if ( get_keyword('procs_filter_reset', params) is not null ) {
							self.procs_browse_cat := 'all_catalog';
							self.procs_browse_sch := 'all_schema';
							self.procs_browse_mask := '%';
						self.mode := null;
						self.page := '3';
						self.vc_data_bind(e);
--						http_request_status ('HTTP/1.1 302 Found');
--		http_header (sprintf('Location: xddl.vspx?page=3&sid=%s&realm=%s\r\n', self.sid ,self.realm));
		return;
						}


						]]></v:script>
							 </v:on-post>
							 <table>
								<tr>
								 <td>Catalog
								 </td>
								 <td>
									<v:select-list name="sp_catalog_list"   xhtml_style="width: 200px;" value="--self.procs_browse_cat">
									 <v:before-data-bind>
										<script><![CDATA[ {
				if ( self.page ='3' ) {
					 declare t_obj, t_orig xml_tree;
					 declare len, i integer;

			t_obj := self.catalogs_list;
			len := length(t_obj);
			i:=0;
					(control as vspx_select_list).vsl_items := vector();
					(control as vspx_select_list).vsl_item_values := vector();
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('All Catalogs'));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('all_catalog'));
			while (i < len) {
					 declare name varchar;
						name := aref(t_obj,i);
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
				 i:= i + 1;
			}
					}
				}
				]]></script>
									 </v:before-data-bind>
									</v:select-list>
								 </td>
								 <td>Mask
								 </td>
								 <td>
									<v:text name="sp_mask_filter"   xhtml_style="width: 200px;"  value="--self.procs_browse_mask">
									</v:text>
								 </td>
								</tr>
								<tr>
								 <td>Schema
								 </td>
								 <td>
									<v:select-list name="sp_schema_list"   xhtml_style="width: 200px;"  value="--self.procs_browse_sch">
									 <v:before-data-bind>
										<script><![CDATA[ {
				if ( self.page ='3'  ) {
					 declare t_obj, t_orig xml_tree;
					 declare len, i integer;

			t_obj := self.schemas_list;
			len := length(t_obj);
			i:=0;
					(control as vspx_select_list).vsl_items := vector();
					(control as vspx_select_list).vsl_item_values := vector();
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('All Schemas'));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('all_schema'));
			while (i < len) {
					 declare name varchar;
						name := aref(t_obj,i);
										(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
										(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
				 i:= i + 1;
			}
					}
				}
				]]></script>
									 </v:before-data-bind>
									</v:select-list>
								 </td>
								 <td align="right" colspan="2">
									<v:button action="submit" name="procs_filter_apply" value="Filter" xhtml_style="width: 56px; height: 24px;"/>
									<v:button action="submit" name="procs_filter_reset" value="Reset" xhtml_style="width: 56px; height: 24px;"/>
								 </td>
								</tr>
							 </table>
							</v:form>
							-->

							<img src="images/icons/add_script_16.png" alt="New Stored Procedure" title="New Stored Procedure" />
							<v:url name="n_sp_url" value="--'New Stored Procedure'" format="%s" url="--'xddl.vspx?entry=1&mode=procedure_dialog_create'" xhtml_class="uddi"/>

							<table class="listing" rules="groups">
                <colgroup/><colgroup/>
							 <thead>
								<tr>
								 <th width="16"/>
								 <th>Name</th>
								 <th>Action</th>
								</tr>
							 </thead>
							 <tbody>
								<?vsp
        if ( self.page ='3'  ) {
           declare t_obj, t_orig xml_tree;
           declare len, i, mask_len integer;
        mask_len := length(self.procs_browse_mask);
        t_obj := xpath_eval('/procedures/procedure',self.procedures,0);
        len := length(t_obj);
        i:=0;
        while (i < len) {
            declare name, drop_flag varchar;
              name := cast ( xpath_eval('./@name',aref(t_obj,i)) as varchar);
               drop_flag := cast ( xpath_eval('./@drop',aref(t_obj,i)) as varchar);


--              if (( self.procs_browse_cat = 'all_catalog' or  upper (name_part(name, 0)) =  upper(self.procs_browse_cat) )  and  ( self.procs_browse_sch = 'all_schema' or upper(name_part(name, 1)) = upper( self.procs_browse_sch))) {
--                  if ( self.procs_browse_mask = '%'  or ( self.procs_browse_mask <> '%'  and upper (substring(name_part(name,2), 1, mask_len  ) ) =  upper(self.procs_browse_mask) ))

                http('<tr><td><img src="images/icons/script_16.png" alt="Stored procedure" title="Stored procedure" /></td>');
                if (drop_flag = 'true') {
                  http(sprintf('<td style="text-decoration: line-through; ">%s</td>',  name) );
                  http(sprintf('<td><a href="xddl.vspx?mode=xddl_procedure_drop&kind=undrop&table_name=%s&sid=%s&realm=%s">Undrop</a></td>', name,self.sid ,self.realm ));
                } else {
                  http(sprintf('<td>%s</td>',  name) );
                  http(sprintf('<td><a href="xddl.vspx?entry=1&page=procedures_dialog_edit&mode=edit&procedure_name=%s&sid=%s&realm=%s">Edit</a>', name,  self.sid ,self.realm ));
                  http(sprintf('&nbsp;&nbsp;&nbsp;<a href="xddl.vspx?mode=xddl_procedure_drop&kind=drop&procedure_name=%s&sid=%s&realm=%s">Drop</a></td>', name,self.sid ,self.realm ));
                }
                http('</tr>');


--                http(sprintf('<tr><td>%s</td><td><a href="xddl.vspx?entry=1&page=procedures_dialog_edit&mode=edit&procedure_name=%s&sid=%s&realm=%s">Edit</a>&nbsp;&nbsp;&nbsp;<a href="xddl.vspx?view_name=%s&sid=%s&realm=%s">Drop</a>&nbsp;&nbsp;&nbsp;</td></tr>',
--                name, name,  self.sid ,self.realm, name,self.sid ,self.realm));
--              }
            i:= i + 1;
        }
          }

       ?>

							 </tbody>
							</table>
						 </v:template>

						</td>
					 </tr>
					</table>
				 </td>
				</tr>
			 </table>
			</td>
		 </tr>
		</table>

		<vm:form name="xddl_commands_form" type="simple" method="POST" action="">
		<!--
		 <input type="hidden" name="page" value="<?= get_keyword('page', control.vc_page.vc_event.ve_params)?>" />
		 -->
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
              if (self.page is null or  self.page = '')
              	self.page_to_go_back := '1';
              else
              self.page_to_go_back := self.page;
            if ( get_keyword('common_load_command', params) is not null ) {
	    self.mode := 'xddl_load';
	    self.vc_data_bind(e);
--		            http_request_status ('HTTP/1.1 302 Found');
--				  http_header (sprintf('Location: xddl.vspx?mode=xddl_load&sid=%s&realm=%s\r\n', self.sid ,self.realm));
				return;
              }
            if ( get_keyword('common_save_command', params) is not null ) {
	    self.mode := 'xddl_save';
	    self.vc_data_bind(e);

--		           http_request_status ('HTTP/1.1 302 Found');
--			  http_header (sprintf('Location: xddl.vspx?mode=xddl_save&sid=%s&realm=%s\r\n', self.sid ,self.realm));
				return;
              }
		      if (get_keyword('common_init_command',params) is not null) {
					  self.pages_data  := vector();
	    self.mode := 'xddl_chooser';
	    self.vc_data_bind(e);

--						http_request_status ('HTTP/1.1 302 Found');
--						http_header (sprintf('Location: xddl.vspx?mode=xddl_chooser&sid=%s&realm=%s\r\n',self.sid ,self.realm));
						return;
		      }
		      if (get_keyword('common_exec_command',params) is not null) {
			    declare res, table_ident, table_name varchar;
			    declare objs any;
			    declare i, n, tid  integer;
		          declare difference, obj xml_tree;
			    objs :=   xpath_eval ( '/tables/table',xml_tree_doc(self.objects), 0);
				n := length(objs);
				i := 0;
				self.statements :='';
				while (i < n) {
					obj := aref(objs,i);
					table_name :=  cast ( xpath_eval('./@name',obj) as varchar);
					table_ident :=  cast ( xpath_eval('./@ident',obj) as varchar);
					if ( exists ( select 1 from db.dba.xddl_tables where T_NAME = table_name) )  {

					   select T_IDENT into tid from DB.DBA.XDDL_TABLES  where T_NAME = table_name ;
					   if (sprintf('%d',tid) <> table_ident) {
						self.mode := 'exec_xddl_denied';
						self.table_name :=  table_name;
						self.vc_data_bind(e);
--					    	http_request_status ('HTTP/1.1 302 Found');
--					    	http_header (sprintf('Location: xddl.vspx?mode=exec_xddl_denied&table_name=%s&sid=%s&realm=%s\r\n',table_name, self.sid ,self.realm));
					    	return;
					   }
				         difference := xddl_diff(xddl_get_base(),obj);
				       } else  difference := xml_cut(obj);
				    res := xddl_to_ddl(xddl_get_base(), xml_tree_doc(difference));
				    self.statements := concat(self.statements, res);

				  i := i + 1;
				}

			    res := xddl_to_ddl(xddl_get_base(),self.views);
			    self.statements := concat(self.statements, '\n', res);

			    res := xddl_to_ddl(xddl_get_base(), self.procedures);
			    self.statements := concat(self.statements, '\n', res);
				self.mode :='exec_xddl';
				self.vc_data_bind(e);
				return;
--			    http_request_status ('HTTP/1.1 302 Found');
--			    http_header (sprintf('Location: xddl.vspx?mode=exec_xddl&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('common_delete_command',params) is not null) {
		      declare path varchar;
		      path :=  '/tables/table[@drop=\'true\']';
			self.objects := XMLUpdate(self.objects,path, null);
		      path :=  '/views/view[@drop=\'true\']';
			self.views := XMLUpdate(self.views,path, null);
		      path :=  '/procedures/procedure[@drop=\'true\']';
			self.procedures := XMLUpdate(self.procedures,path, null);
			self.page := self.page_to_go_back;
			self.mode :=  null;
			self.vc_data_bind(e);
			return;
			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n',self.page_to_go_back , self.sid ,self.realm));
			    return;
		      }

		      if (get_keyword('common_revert_command',params) is not null and self.xddl_source_type <> 0) {
		            self.mode := 'revert_edit_buffer';
			    self.vc_data_bind(e);
			    return;
			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?mode=revert_edit_buffer&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('common_clear_command',params) is not null) {
		      	self.objects := xpath_eval('/tables', xml_tree_doc('<tables/>'));
			self.procedures :=  xpath_eval('/procedures', xml_tree_doc('<procedures/>'));
			self.views := xpath_eval('/views', xml_tree_doc('<views/>'));


		      	self.xddl_source_type := 0;
			self.page := self.page_to_go_back;
			self.mode :=  null;
			self.vc_data_bind(e);
			return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back , self.sid ,self.realm));
			    return;
		      }
		    	    ]]></script>
			</v:on-post>
		 </vm:events>

		 <vm:row>
			<vm:bgroup colspan="6" align="center">
	  		<v:button action="submit" name="common_load_command" value="Load" xhtml_style="width: 56px; height: 24px;"/>
			  <v:button action="submit" name="common_save_command" value="Save" xhtml_style="width: 56px; height: 24px;"/>
			  <v:button action="submit" name="common_init_command" value="Import" xhtml_style="width: 56px; height: 24px;"/>
			  <v:button action="submit" name="common_delete_command" value="Delete" xhtml_style="width: 56px; height: 24px;"/>
			  <v:button action="submit" name="common_revert_command" value="Revert" xhtml_style="width: 56px; height: 24px;"/>
			  <v:button action="submit" name="common_exec_command" value="Execute" xhtml_style="width: 56px; height: 24px;"/>
			  <v:button action="submit" name="common_clear_command" value="Clear" xhtml_style="width: 56px; height: 24px;"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

<!-- Table editor screen -->

	 <v:template name="template101" type="simple" enabled="-- case when ( self.mode = 'table_edit' ) then 1 else 0 end">
		<vm:events>
		 <v:before-data-bind>
			<script><![CDATA[
				declare table_name, column_name, path  varchar;

		     if ( ( self.mode = 'table_edit') and ( get_keyword('entry', params)  is not null)  ) {
		         if ( self.kind = 'edit') {
				   table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);
				   self.current_table :=  xml_cut( xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),xml_tree_doc(self.objects)) );
				} else if ( self.kind = 'create') {
					    self.wrong_entry := null;
				    self.current_table := xpath_eval('/table',xml_tree_doc('<table name="" parent="xsi:nil"/>')) ;
				}
			 } else if ( self.mode = 'table_edit')
					self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));

			if ( ( self.mode = 'table_edit') and ( get_keyword('column_name', params)  is not null) and   ( get_keyword('what', params) = 'column_edit')  ) {
			        table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);
				column_name := get_keyword('column_name', control.vc_page.vc_event.ve_params);
			        path := sprintf('/table/column[@name=\'%s\']', column_name);
			       self.column_edit_buff := xml_cut(xpath_eval(path,xml_tree_doc(self.current_table)) );
      			       self.type_value := xpath_eval('/column/@type', self.column_edit_buff);
			} else if (self.mode = 'table_edit')
			    self.column_edit_buff := xpath_eval('/column',xml_tree_doc('<column name="" type="" prec="" scale="" nullable="" identified_by="" collation="" identity=""><default_value>null</default_value></column>')) ;

			self.column_create_buff := xpath_eval('/column',xml_tree_doc('<column name="" type="" prec="0" scale="0" nullable="" identified_by="" collation="" identity=""/>')) ;

		     ]]></script>
		 </v:before-data-bind>
		</vm:events>
<!--
Here is the tabs
-->
<table cellpadding='10' cellspacing='0' border='0' width='100%'>
<tr>
   <td>

<!-- Here is the tabs array -->
<table cellpadding="0" cellspacing="0" border="0">
 <colgroup> <col/><col/><col/><col/></colgroup>
 <tr>

<v:template name="columnsTabTemplate" type="simple" enabled=" --case when ( self.table_editor_page ='1' or  self.table_editor_page is null) then 1 else 0 end">
      <td class="page_tab_selected" align="center"><nobr>&nbsp;&nbsp;Columns&nbsp;&nbsp;</nobr></td>
      <td class="page_tab" align="center">
			 <?vsp
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='1' ) {
						   if ( length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							   http('<nobr>&nbsp;&nbsp;Constraints&nbsp;&nbsp;</nobr>');
						   else
						     http('<a href="#" class="uddi" onclick="javascript:doPostValue(\'table_edit_form\',\'table_editor_page\',\'2\');"><nobr>&nbsp;&nbsp;Constraints&nbsp;&nbsp;</nobr></a>');
						  }
			 ?>
				</td>
      <td class="page_tab" align="center">
			 <?vsp
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='1' ) {
						   if ( length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							   http('<nobr>&nbsp;&nbsp;Primary key&nbsp;&nbsp;</nobr>');
						   else
						     http('<a href="#" class="uddi" onclick="javascript:doPostValue(\'table_edit_form\',\'table_editor_page\',\'3\');"><nobr>&nbsp;&nbsp;Primary key&nbsp;&nbsp;</nobr></a>');
						  }
			 ?>
			</td>
      <td class="page_tab" align="center">
			 <?vsp
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='1' ) {
						   if ( length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							   http('<nobr>&nbsp;&nbsp;Foreign key&nbsp;&nbsp;</nobr>');
						   else
						     http('<a href="#" class="uddi" onclick="javascript:doPostValue(\'table_edit_form\',\'table_editor_page\',\'4\');"><nobr>&nbsp;&nbsp;Foreign key&nbsp;&nbsp;</nobr></a>');
						  }
			 ?>
			</td>
      <td class="page_tab_empty" align="center" width="100%"><table cellpadding="0" cellspacing="0"><tr><td width="100%"></td></tr></table></td>
</v:template>
<v:template name="constraintTabTemplate" type="simple" enabled="--case when ( self.table_editor_page ='2' ) then 1 else 0 end">
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('ds_constr','table_editor_page','1');"><nobr>&nbsp;&nbsp;Columns&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab_selected" align="center"><nobr>&nbsp;&nbsp;Constraints&nbsp;&nbsp;</nobr></td>
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('ds_constr','table_editor_page','3');"><nobr>&nbsp;&nbsp;Primary key&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('ds_constr','table_editor_page','4');"><nobr>&nbsp;&nbsp;Foreign key&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab_empty" align="center" width="100%"><table cellpadding="0" cellspacing="0"><tr><td width="100%"></td></tr></table></td>
</v:template>
<v:template name="primaryKeyTabTemplate" type="simple" enabled="--case  when ( self.table_editor_page ='3' ) then 1 else 0 end">
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('xddl_primary_key_form','table_editor_page','1');"><nobr>&nbsp;&nbsp;Columns&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('xddl_primary_key_form','table_editor_page','2');"><nobr>&nbsp;&nbsp;Constraints&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab_selected" align="center"><nobr>&nbsp;&nbsp;Primary key&nbsp;&nbsp;</nobr></td>
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('xddl_primary_key_form','table_editor_page','4');"><nobr>&nbsp;&nbsp;Foreign key&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab_empty" align="center" width="100%"><table cellpadding="0" cellspacing="0"><tr><td width="100%"></td></tr></table></td>
</v:template>
<v:template name="foreignKeyTabTemplate" type="simple" enabled="--case when ( self.table_editor_page ='4' ) then 1 else 0 end">
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('xddl_foreign_key_form','table_editor_page','1');"><nobr>&nbsp;&nbsp;Columns&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('xddl_foreign_key_form','table_editor_page','2');"><nobr>&nbsp;&nbsp;Constraints&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab" align="center"><a href="#" class="uddi" onclick="javascript:doPostValue('xddl_foreign_key_form','table_editor_page','3');"><nobr>&nbsp;&nbsp;Primary key&nbsp;&nbsp;</nobr></a></td>
      <td class="page_tab_selected" align="center"><nobr>&nbsp;&nbsp;Foreign key&nbsp;&nbsp;</nobr></td>
      <td class="page_tab_empty" align="center" width="100%"><table cellpadding="0" cellspacing="0"><tr><td width="100%"></td></tr></table></td>
</v:template>
</tr>
</table>
<table class="tab_page">
  <tr>
  <td valign="top">
<v:template name="columnsTabContentTemplate" type="simple" enabled="--case when ( self.table_editor_page ='1' or  self.table_editor_page is null) then 1 else 0 end">

<!-- This is the form  of table edit screen with the list of columns  -->

		<v:form name="table_edit_form" type="simple" method="POST" action="">
		 <table border="0" size="100%">
			<tr>
			 <td >
				<b>
				 <?vsp
          if (  self.wrong_entry is not null ) {
                 http(sprintf('<span class="attention_marker">Error:  %s </span>', self.wrong_entry));
								 self.wrong_entry := null;
					}
          ?>
				</b>
			 </td>
			</tr>
			<tr>
			 <td>
				<table>
				 <tr>
					<td>Table Name</td>
					<td>
					 <v:template name="template101a" type="simple"  enabled="--case when (self.kind = 'edit') then 1 else 0 end">

						<b>
						 <v:label name="l_table_name" value="--self.table_name" format="%s"/>
						</b>
					 </v:template>
					 <v:template name="template101b" type="simple"  enabled="--case when (self.kind = 'create') then 1 else 0 end">
<!-- element-value="--self.current_table"   element-place="@name"-->
						<v:text name="edit_table_name" >
						 <v:before-data-bind>
							<script><![CDATA[

				        if (self.mode = 'table_edit'  and self.kind = 'edit') {
							control.ufl_value := 	cast ( xpath_eval('/table/@name',self.current_table) as varchar);

						 } else
						    control.ufl_value :=  self.table_name;

                    ]]></script>
						 </v:before-data-bind>

						 <v:on-post>
							<script><![CDATA[
					control.vc_put_value_to_element();
                    ]]></script>
						 </v:on-post>
						</v:text>
					 </v:template>

					</td>
					<td width="20"></td>
					<td>Parent Table</td>
					<td>
					<!-- element-value="--self.current_table"   element-place="@name"  list-document="--self.objects" list-match="'/tables/table'" list-key-path="@name" list-value-path="@name" -->
					 <v:data-list name="table_parent_control"   xhtml_style="width: 200px;">
						<v:after-data-bind>
						 <script><![CDATA[
		        if (self.mode = 'table_edit' ) {
						    declare objs any;
								declare i, len integer;
								declare val varchar;
								objs :=  xpath_eval('/tables/table/@name', self.objects, 0);
								len := length (objs);
								i := 0;
		            (control as vspx_select_list).vsl_items := vector();
		            (control as vspx_select_list).vsl_item_values := vector();
		            (control as vspx_select_list).vsl_selected_inx := 0;

                (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('No Parent') );
                (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('xsi:nil'));
			          while (i < len) {
								  val := cast (aref (objs,i) as varchar);
									if ( self.kind = 'create'  or (self.kind = 'edit' and ( val <> self.table_name ) ) ) {
                    (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(val) );
                    (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(val));
								  }
									i := i + 1;
								}
								control.ufl_value :=  xpath_eval('/table/@parent', xml_tree_doc(self.current_table) );
			          control.vs_set_selected();
			      }
                    ]]></script>
						</v:after-data-bind>
						<v:on-post>
						 <script><![CDATA[
			control.vc_put_value_to_element();
                    ]]></script>
						</v:on-post>
					 </v:data-list>
					</td>
					<!-- td width="10%"></td><td><v:button name="table_name_apply" action="submit" value="Apply"/></td -->
				 </tr>
				 <tr>
				 <td colspan="5">
				   <v:check-box name="advanced_mode" value="1" xhtml_onclick="javascript:doPost(\'table_edit_form\',\'advanced_toogle\');">
             <v:before-data-bind>
						 <script><![CDATA[
								     control.ufl_selected :=  self.full_advanced_mode;
                    ]]></script>
						</v:before-data-bind>
					 </v:check-box>
				   Show advanced options
				   </td>
				 </tr>
				</table>
				<!-- /v:form -->
			 </td>
			</tr>
			<tr>
			 <td>
				<v:data-set name="ds" data="-- xpath_eval ('/table/column', xml_tree_doc(self.current_table), 0)" meta="--vector(vector('callret',182,0,256,1,0,1,0,0,0,0,0 ))" nrows="1000" scrollable="1" edit="1" width="80">
				 <v:template name="template1" type="simple" name-to-remove="table" set-to-remove="bottom">
					<table rules="groups" width="100%">
					 <thead>
						<tr>
						 <td align="center">
							<b>
							 <v:label name="label1H" value="'Key'" format="%s" width="80"/>
							</b>
						 </td>
						 <td align="center">
							<b>
							 <v:label name="label2H" value="'Name'" format="%s" width="80"/>
							</b>
						 </td>
						 <td align="center">
							<b>
							 <v:label name="label3H" value="'Type'" format="%s" width="80"/>
							</b>
						 </td>
						 <td align="center">
							<b>
							 <v:label name="label4H" value="'Prec'" format="%s" width="80"/>
							</b>
						 </td>
						 <td align="center">
							<b>
							 <v:label name="label5H" value="'Scale'" format="%s" width="80"/>
							</b>
						 </td>
						 <td align="center">
							<b>
							 <v:label name="label6H" value="'Nullable'" format="%s" width="80"/>
							</b>
						 </td>
						 <td align="center">
							<b>
							 <v:label name="label7H" value="'Identity'" format="%s" width="80"/>
							</b>
						 </td>
					 <v:template name="showAdvancedLabelTemplate" type="simple" enabled="--case when (self.full_advanced_mode = 0) then 1 else 0 end">
						 <td align="center">
							<b>
							 <v:label name="label8H" value="'Advanced'" format="%s" width="80"/>
							</b>
						 </td>
					 </v:template>
						 <td align="center">&nbsp;</td>
						</tr>
					 </thead>
					</table>
				 </v:template>
				 <v:template name="template2" type="repeat" name-to-remove="" set-to-remove="">
					<v:template name="template7" type="if-not-exists" name-to-remove="table" set-to-remove="both">
					 <!--  table rules="groups">
						 <tr>
							 <td align="center" colspan="11">
								 <b>No columns  are presented</b>
							 </td>
						 </tr>
					 </table -->
					</v:template>
					<v:hidden width="0" height="0">
					 <v:template name="template5" type="edit" name-to-remove="" set-to-remove="">
						<v:form name="upf" type="update" if-not-exists="insert">
						 <v:on-post>
							<script><![CDATA[

		            declare path, table_name, column_oname, column_name, column_type,  tmp, def_value, col_value, ident_value varchar;
			    declare objs, prev_instance  xml_tree;
			    column_name := get_keyword('name_control', params);
			    column_oname := self.current_column_name;
			    column_type :=  get_keyword('type_control', params);

          def_value := get_keyword('default_control', params);
			    col_value := get_keyword('collation_control', params);
					ident_value := get_keyword('identified_control', params);

			    prev_instance  :=   xpath_eval ( sprintf('/table/column[@name=\'%s\']',column_name),xml_tree_doc(self.current_table) );

		      if (get_keyword('upd_button',params) is not null) {
				   tmp :=  self.type_name ;
				   self.column_edit_buff := xml_cut(prev_instance);
--					 xpath_eval('/column',xml_tree_doc(sprintf('<column name="" type="" prec="" identified_by="" collation="" identity=""><default_value>%s</default_value></column>', def_value )) );
			      if (  column_oname <> column_name and  prev_instance  is not null ) {
				      self.mode := 'column_exist';
				      self.column_name := column_name;
				      self.vc_data_bind(e);
				      return;
			     }  else {
				      XMLAddAttribute(self.column_edit_buff, 2, 'type-text', tmp );
				      XMLAddAttribute(self.column_edit_buff, 2, 'name', column_name );
				      XMLAddAttribute(self.column_edit_buff, 2, 'type', column_type );
				      XMLAddAttribute(self.column_edit_buff, 2, 'prec', get_keyword('prec_control', params) );
				      XMLAddAttribute(self.column_edit_buff, 2, 'scale', get_keyword('scale_control', params) );
				      XMLAddAttribute(self.column_edit_buff, 2, 'nullable', case when ( get_keyword('nullable_control', params) is null) then '0' else '1' end );
				      XMLAddAttribute(self.column_edit_buff, 2, 'identity', case when (get_keyword('identity_control', params) is null) then '0' else '1' end );
				      if  (def_value is not null) {
					      XMLAddAttribute(self.column_edit_buff, 2, 'collation', col_value );
				        XMLAddAttribute(self.column_edit_buff, 2, 'identified_by',  ident_value);
								self.column_edit_buff := XMLUpdate(self.column_edit_buff,'/column/default_value', xml_tree_doc(sprintf('<default_value>%s</default_value>',def_value)));
		          }
 			        path := sprintf('/table/column[@name=\'%s\']', column_oname);
			        self.current_table := XMLUpdate(xml_tree_doc(self.current_table),path, self.column_edit_buff);


			       if ( get_keyword('key_control',params) is not null  )  { -- pk checkbox is checked
			           if (column_type <> '225' and  -- nvarchar
				       column_type <> '226' and  -- long nvarchar
				       column_type <> '125' and  -- varbinary
				       column_type <> '222' and  -- long varbinary
				       column_type <> '131' and  -- long varchar
				       column_type <> '230' ) {	 -- long xml
			                path := sprintf('/table/pk');
					objs := xpath_eval(path, self.current_table);
					if (objs is null) {
					   objs :=  xpath_eval('/pk', xml_tree_doc(sprintf('<pk  unique="" clustered="" oid=""><field ord="0" col="%s"/></pk>', column_name) ));
					   prev_instance  :=  xpath_eval('/table',self.current_table);
					   XMLAppendChildren(prev_instance  , objs);
			      		   self.current_table := prev_instance ;

			      	        } else {
			      	               path := sprintf ('/table/pk/field[@col=\'%s\']',  column_oname );
						if (column_oname <> column_name and xpath_eval(path, self.current_table) is not null  ) {  -- there  is a pk for old column
			      	    		declare n integer;
						       self.current_table := XMLUpdate(xml_tree_doc(self.current_table),path, null);

							  n := 	xpath_eval('count(/table/pk/field)', self.current_table);
					       	 objs :=  xpath_eval('/field', xml_tree_doc(sprintf('<field ord="%d" col="%s"/>', n, column_name) ));
						      prev_instance  :=  xpath_eval('/table/pk',self.current_table);
						      XMLAppendChildren(prev_instance  , objs);

						}
						if ( column_oname = column_name  and xpath_eval(path, self.current_table) is null ) { -- new pk is added for  existing column
			      	    		declare n integer;
							n := 	xpath_eval('count(/table/pk/field)', self.current_table);
					       	 objs :=  xpath_eval('/field', xml_tree_doc(sprintf('<field ord="%d" col="%s"/>', n, column_name) ));
						      prev_instance  :=  xpath_eval('/table/pk',self.current_table);
						      XMLAppendChildren(prev_instance  , objs);
						}
					}
				   }
			       } else { -- pk checkbox is unchecked. do we have pk for initial   column's  name?
			            path := sprintf ('/table/pk/field[@col=\'%s\']',  column_oname );
						if ( xpath_eval(path, self.current_table) is not null  ) {  -- there  is a pk for old column, kill it!
			      	    		declare n integer;
							n := 	xpath_eval('count(/table/pk/field)', self.current_table);
							if (n = 1)
							  self.current_table := XMLUpdate(xml_tree_doc(self.current_table),'/table/pk', null);
							else
						       self.current_table := XMLUpdate(xml_tree_doc(self.current_table),path, null);

						}
			       }
			        self.ds.vc_data_bind (e);
							self.ds.ds_current_row := null;

			 }
		  }
		    ]]></script>
						 </v:on-post>


	 <v:template name="template6" type="simple" name-to-remove="table" set-to-remove="both">
	  <table width="100%" border="0" cellspacing="0" cellpadding="0">
	    <tr>
		<!--
			or
			xpath_eval(sprintf('/table/fk/reference[@col = \'%s\']/@col',column_name ),(control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) = column_name
		 -->
		<td align="center">
		 <v:check-box name="key_control">
		<v:before-data-bind>
		 <script><![CDATA[
		 declare column_name  varchar;
		 column_name := cast ( xpath_eval('./@name',  (control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
		if ( xpath_eval(sprintf('/table/pk/field[@col = \'%s\']/@col',column_name ),(control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) = column_name ) {
		     control.ufl_selected := 1;
		 } else
		       control.ufl_selected := 0;
		 control.vc_data_bound :=1;
		]]></script>
		</v:before-data-bind>
		 </v:check-box>
		</td>
		<td>
		 <v:text name="name_control"  >
		<v:before-data-bind>
		 <script><![CDATA[
			 declare name varchar;

			 name := cast ( xpath_eval('./@name',  (control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
			 control.ufl_value := name;
			 self.current_column_name := name;
		     ]]></script>
		</v:before-data-bind>
		 </v:text>
		</td>
		<td>
		 <v:select-list name="type_control">
		<v:before-data-bind>
		 <script><![CDATA[
		  if ( self.mode = 'table_edit' ) {
		    declare i, len integer;
		    declare id, type varchar;
		    len := length(self.column_types);
		    i := 0;
		    (control as vspx_select_list).vsl_items := vector();
		    (control as vspx_select_list).vsl_item_values := vector();
		    (control as vspx_select_list).vsl_selected_inx := 0;
		type := cast ( xpath_eval('./@type',  (control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
		while (i < len) {
		    id :=  sprintf('%d',aref(self.column_types, i));
		     if (id = type )
		       (control as vspx_select_list).vsl_selected_inx := i/2;
		    (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(aref(self.column_types, i+1)) );
		    (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(sprintf('%d',aref(self.column_types, i))));
		   i:= i + 2;
		}
		self.type_name := aref((control as vspx_select_list).vsl_items, (control as vspx_select_list).vsl_selected_inx);
		control.ufl_value := aref((control as vspx_select_list).vsl_item_values, (control as vspx_select_list).vsl_selected_inx);
		control.vs_set_selected();
		 } ]]></script>
		</v:before-data-bind>
		<v:on-post>
		 <script><![CDATA[
		  self.type_name := aref((control as vspx_select_list).vsl_items, (control as vspx_select_list).vsl_selected_inx);
              ]]></script>
		</v:on-post>
		 </v:select-list>
	      </td>
	     <td>
		<v:text name="prec_control"  xhtml_style="width: 32px;">
		<v:before-data-bind>
		 <script><![CDATA[
		    declare prec varchar;
		 prec := cast ( xpath_eval('./@prec',  (control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
		 control.ufl_value := case when (prec = '2147483647') then '' else  prec end ;
		]]></script>
		</v:before-data-bind>
		 </v:text>
								</td>
								<td>
								 <v:text name="scale_control"   xhtml_style="width: 32px;">
									<v:before-data-bind>
									 <script><![CDATA[
														 declare name varchar;
														 name := cast ( xpath_eval('./@scale',  (control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
														 control.ufl_value := name;
												     ]]></script>
									</v:before-data-bind>

								 </v:text>
								</td>
								<td align="center">
								 <v:check-box name="nullable_control">
									<v:before-data-bind>
									 <script><![CDATA[
														 declare value varchar;
														 value := cast ( xpath_eval('./@nullable',  (control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
														 if (value= '1')
														    control.ufl_selected := 1;
														else
														       control.ufl_selected := 0;
														 control.vc_data_bound :=1;
										              ]]></script>
									</v:before-data-bind>
								 </v:check-box>
								</td>
								<td align="center">
								 <v:check-box name="identity_control">
									<v:before-data-bind>
									 <script><![CDATA[
														 declare value varchar;
														 value := cast ( xpath_eval('./@identity',  (control.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
														 if (value= '1')
														    control.ufl_selected := 1;
														else
														       control.ufl_selected := 0;
														 control.vc_data_bound :=1;
										              ]]></script>
									</v:before-data-bind>
								 </v:check-box>
								</td>
								<v:template name="showAdvancedUpdateTemplate" type="simple" enabled="--case when (self.full_advanced_mode = 0) then 1 else 0 end">
								<td><!--Advanced option --></td>
								</v:template>
								<td nowrap="nowrap">
								 <v:button name="upd_button" action="submit" value="Update"/>
								 <input type="submit" name="ds_cancel" value="Cancel"/>
								</td>

								</tr>
					 <v:template name="updateAdvancedTemplate" type="simple" enabled="--case when (self.full_advanced_mode = 1) then 1 else 0 end">

<!-- here is the advanced information -->
							 <tr>
							   <td colspan="8">
								   <table>
									 <tr><td>Collation</td>
										<td>



		 <v:select-list name="collation_control" xhtml_style="width:100%;">
		<v:before-data-bind>
		 <script><![CDATA[
		  if ( self.mode = 'table_edit' ) {
		    declare i, len integer;
		    declare id, collation_value, col_name varchar;
				declare collation_objs any;
		    (control as vspx_select_list).vsl_items := vector();
		    (control as vspx_select_list).vsl_item_values := vector();
		    (control as vspx_select_list).vsl_selected_inx := 0;

		collation_value := cast ( xpath_eval('./@collation',  (control.vc_parent.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
		col_name := cast ( xpath_eval('./@name',  (control.vc_parent.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );

		(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('None') );
		(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('xsi:nil') );
		i := 0;
		for select COLL_NAME from SYS_COLLATIONS do {

		      if (COLL_NAME = collation_value )
		        (control as vspx_select_list).vsl_selected_inx := i;
		      (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(COLL_NAME) );
		      (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(COLL_NAME) );
				i := i + 1;
		}
		  control.ufl_value := aref((control as vspx_select_list).vsl_item_values, (control as vspx_select_list).vsl_selected_inx);
		 control.vs_set_selected();
		 } ]]></script>
		</v:before-data-bind>
		 </v:select-list>







										</td>
									 </tr>

									 <tr><td>Identified By</td>
								<td>
		 <v:select-list name="identified_control" xhtml_style="width:100%;">
		<v:before-data-bind>
		 <script><![CDATA[
		  if ( self.mode = 'table_edit' ) {
		    declare i, len integer;
		    declare id, type, identified_value, col_name varchar;
				declare column_objs any;
		    (control as vspx_select_list).vsl_items := vector();
		    (control as vspx_select_list).vsl_item_values := vector();
		    (control as vspx_select_list).vsl_selected_inx := 0;
				column_objs := xpath_eval('/table/column',self.current_table,0);
        len := length(column_objs);
        i := 0;
		identified_value := cast ( xpath_eval('./@identified_by',  (control.vc_parent.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
		col_name := cast ( xpath_eval('./@name',  (control.vc_parent.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar );
		(control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('None') );
		(control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('xsi:nil') );

		while (i < len) {
		    id :=  cast ( xpath_eval('./@name', aref(column_objs, i)  ) as varchar );
		    type :=  cast ( xpath_eval('./@type', aref(column_objs, i)  ) as varchar );
				if (id <> col_name and (type = '182' or type = '183' or type = '192' or type = '225' ) ) {
		      if (id = identified_value )
		        (control as vspx_select_list).vsl_selected_inx := i;
		      (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(id) );
		      (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(id) );
				}
		   i:= i + 1;
		}
		  control.ufl_value := aref((control as vspx_select_list).vsl_item_values, (control as vspx_select_list).vsl_selected_inx);
		 control.vs_set_selected();
		 } ]]></script>
		</v:before-data-bind>
		 </v:select-list>

								</td>
									 </tr>
									 <tr><td>Default</td>
								<td>
								 <v:text name="default_control"  xhtml_style="width: 104px;">
									<v:before-data-bind>
									 <script><![CDATA[
														 declare name varchar;
														 name := cast (xpath_eval('default_value/text()',(control.vc_parent.vc_parent.vc_parent.vc_parent as vspx_data_set).ds_current_row.te_rowset) as varchar);
														 control.ufl_value := name;
												     ]]></script>
									</v:before-data-bind>

								 </v:text>
								</td>

									 </tr>
									 </table>
								 </td>
							 </tr>
</v:template>
							</table>
						 </v:template>
						</v:form>
					 </v:template>
					</v:hidden>
					<v:template name="template4" type="browse" name-to-remove="table" set-to-remove="both">
					 <table rules="groups" width="100%">
						<tr>
						 <td> <v:label name="brws_key" value="--case when(  xpath_eval(sprintf('/table/pk/field[@col = \'%s\']/@col', xpath_eval('@name',(control.vc_parent as vspx_row_template).te_rowset) ),xml_tree_doc(self.current_table) ) = xpath_eval('@name',(control.vc_parent as vspx_row_template).te_rowset)  ) then '*' else '&nbsp'  end" format="%s" width="80"/>
<!--
							<v:label name="brws_key"  format="%s" width="80">
							 <v:after-data-bind>
								<script><![CDATA[
							     declare col_name varchar;
									 declare i, len integer;
							     col_name := xpath_eval('@name',(control.vc_parent as vspx_row_template).te_rowset);
									 control.ufl_value:= '';
									 i := 0;
									 len := length(self.primary_key);
									 while (i < len) {
									   if (col_name = aref(self.primary_key, i) )
										   control.ufl_value := '*';
									   i := i + 1;
									 }

							     ]]></script>
							 </v:after-data-bind>
							</v:label>
-->
						 </td>
						 <td align="left" nowrap="1">
							<v:label name="brws_name" value="--xpath_eval('@name',(control.vc_parent as vspx_row_template).te_rowset)" format="%s" width="80">
							 <v:after-data-bind>
								<script><![CDATA[
							     declare col_name varchar;
							     col_name := control.ufl_value;
							     if ( upper(col_name) = '_IDN')
							         control.vc_parent.vc_enabled := 0;
							     ]]></script>
							 </v:after-data-bind>
							</v:label>
						 </td>
						 <td align="left" nowrap="1">
							<v:label name="brws_type" value="--xpath_eval('@type-text',(control.vc_parent as vspx_row_template).te_rowset)" format="%s" width="80"/>
						 </td>
						 <td align="left" nowrap="1">
							<v:label name="brws_prec" value="--case when (xpath_eval('@prec',(control.vc_parent as vspx_row_template).te_rowset) = '2147483647') then '&nbsp' else  xpath_eval('@prec',(control.vc_parent as vspx_row_template).te_rowset) end" format="%s" width="80"/>
						 </td>
						 <td align="left" nowrap="1">
							<v:label name="brws_scale" value="--case when (xpath_eval('@scale',(control.vc_parent as vspx_row_template).te_rowset) is null) then '&nbsp' else  xpath_eval('@scale',(control.vc_parent as vspx_row_template).te_rowset) end" format="%s" width="80"/>
						 </td>
						 <td align="center" nowrap="1">
							<v:label name="brws_nullable" value="--case when ( xpath_eval('@nullable',(control.vc_parent as vspx_row_template).te_rowset) = '1' ) then '*' else '&nbsp'  end" format="%s" width="80"/>
						 </td>
						 <td align="center" nowrap="1">
							<v:label name="brws_identity" value="--case when ( xpath_eval('@identity',(control.vc_parent as vspx_row_template).te_rowset) = '1' ) then '*' else '&nbsp'  end" format="%s" width="80"/>
						 </td>
						 <v:template name="showAdvancedBrowseTemplate" type="simple" enabled="--case when (self.full_advanced_mode = 0) then 1 else 0 end">
						 <td><!--Advanced option --></td>
						 </v:template>
						 <td nowrap="1">
							<v:button name="ds_edit" action="simple" value="Edit">
<!--							 <v:on-post>
								<script><![CDATA[
							self.going_to_edit := 1;
					      self.vc_data_bind (e);
								return;

			             ]]></script>
							 </v:on-post> -->
							</v:button>

							<v:button name="ds_delete" action="simple" value="Delete">
							 <v:on-post>
								<script><![CDATA[
			          		declare column_name, path varchar;
			          		column_name :=  cast ( xpath_eval('@name',(control.vc_parent as vspx_row_template).te_rowset) as varchar);
					    path := sprintf('/table/column[@name=\'%s\']',column_name);

					    self.current_table:=  XMLUpdate(self.current_table, path,  null);
					      self.ds.vc_data_bind (e);

			             ]]></script>
							 </v:on-post>
							</v:button>
						 </td>

						 </tr>
<!-- here is the browser of advanced information-->
					 <v:template name="browseAdvancedTemplate" type="simple" enabled="--case when ( self.full_advanced_mode = 1) then 1 else 0 end">

            <tr>
						  <td colspan="8">
							  <table>
								  <tr><td>Collation</td>
						      <td align="left" nowrap="1">
							      <v:label name="brws_collation" value="--case when (xpath_eval('@collation',(control.vc_parent.vc_parent as vspx_row_template).te_rowset)='xsi:nil') then '' else xpath_eval('@collation',(control.vc_parent.vc_parent as vspx_row_template).te_rowset) end" format="%s" width="80"/>
						       </td>
									</tr>
								  <tr><td>Identified By</td>
						       <td align="left" nowrap="1">
							     <v:label name="brws_identified" value="--case when (xpath_eval('@identified_by',(control.vc_parent.vc_parent as vspx_row_template).te_rowset) = 'xsi:nil') then '' else xpath_eval('@identified_by',(control.vc_parent.vc_parent as vspx_row_template).te_rowset) end" format="%s" width="80"/>
						       </td>
									</tr>
								  <tr><td>Default</td>
						        <td align="left" nowrap="1">
							      <v:label name="brws_default" value="--case  when cast (xpath_eval('./default_value/text()',(control.vc_parent.vc_parent as vspx_row_template).te_rowset) as varchar) is null then '' else cast (xpath_eval('./default_value/text()',(control.vc_parent.vc_parent as vspx_row_template).te_rowset) as varchar) end" format="%s" width="80"/>
						        </td>
									</tr>
								</table>
							</td>
						</tr>
</v:template>
					 </table>

					</v:template>
					<v:template name="template8" type="add" name-to-remove="" set-to-remove="">
					 <v:form name="add" type="update"  if-not-exists="insert">
						<v:before-render>
						 <script><![CDATA[
							control.vc_enabled := case when (self.ds.ds_current_row is not null) then 0 else 1 end;
						]]></script>
						</v:before-render>
						<v:on-post>
						 <script><![CDATA[

		            declare path, table_name, column_oname, column_name, column_type,  tmp varchar;
			    declare objs , prev_instance  xml_tree;
			    table_name := get_keyword('edit_table_name', params);
			    column_name := get_keyword('add_name_control', params);
			    column_type := get_keyword('add_type_type', params);
			    if (get_keyword('add_advanced_button',params) is not null ) {
					          if ( self.full_advanced_mode  = 0)
										   self.full_advanced_mode  := 1;
									  else
										   self.full_advanced_mode  := 0;
								self.vc_data_bind(e);
								return;
		      } else if (get_keyword('add_button',params) is not null) {
				   tmp :=  self.type_name ;
	   			 prev_instance  :=   xpath_eval ( sprintf('/table/column[@name=\'%s\']',column_name),xml_tree_doc(self.current_table) );
			      if (  prev_instance  is not null ) {
				    self.mode := 'column_exist';
				    self.table_name := table_name;
				    self.column_name := column_name;
				    self.vc_data_bind(e);
				    return;
			     }  else {
					  declare default_value, col_value, ident_value varchar;
			      path := sprintf('/table[@name=\'%s\']',table_name);
						default_value := get_keyword('add_default_control',params);
						col_value := get_keyword('add_collation_control',params);
						ident_value  :=  get_keyword('add_identified_control',params);
						if (default_value is not null ) {

				     XMLAddAttribute(self.column_create_buff, 2, 'identified_by',  get_keyword('add_nullable_control', params) );
				     XMLAddAttribute(self.column_create_buff, 2, 'collation', get_keyword('add_identity_control', params)  );

			        objs := xpath_eval('/default_value',  xml_tree_doc(sprintf('<default_value>%s</default_value>', default_value)));
			        prev_instance := xpath_eval('/column',xml_tree_doc(self.column_create_buff));
			        XMLAppendChildren(prev_instance , objs);
						  self.column_create_buff :=  prev_instance;
						}


			      XMLAddAttribute(self.column_create_buff, 2, 'type-text', tmp );

				      XMLAddAttribute(self.column_edit_buff, 2, 'prec', get_keyword('add_prec_control', params) );
				      XMLAddAttribute(self.column_edit_buff, 2, 'scale', get_keyword('add_scale_control', params) );


				    XMLAddAttribute(self.column_create_buff, 2, 'nullable', case when ( get_keyword('add_nullable_control', params) is null) then '0' else '1' end );
				    XMLAddAttribute(self.column_create_buff, 2, 'identity', case when (get_keyword('add_identity_control', params) is null) then '0' else '1' end );

			      objs := xpath_eval('/table',xml_tree_doc(self.current_table));
			      XMLAppendChildren(objs, self.column_create_buff);
			      self.current_table := objs;

			      if ( get_keyword('add_key_control',params) is not null  )  {
             if (column_type <> '225' and  -- nvarchar
				       column_type <> '226' and  -- long nvarchar
				       column_type <> '125' and  -- varbinary
				       column_type <> '222' and  -- long varbinary
				       column_type <> '131' and  -- long varchar
				       column_type <> '230' ) {	 -- long xml
			         path := sprintf('/table/pk');
					     objs := xpath_eval(path, self.current_table);
					     if (objs is null) {
					        objs :=  xpath_eval('/pk', xml_tree_doc(sprintf('<pk  unique="" clustered="" oid=""><field ord="0" col="%s"/></pk>', column_name) ));
					        prev_instance  :=  xpath_eval('/table',self.current_table);
					        XMLAppendChildren(prev_instance  , objs);
			      		  self.current_table := prev_instance ;
			      	 } else {
			      	      declare n integer;
						        n := 	xpath_eval('count(/table/pk/field)', self.current_table);
				       	    objs :=  xpath_eval('/field', xml_tree_doc(sprintf('<field ord="%d" col="%s"/>', n, column_name) ));
					          prev_instance  :=  xpath_eval('/table/pk',self.current_table);
					          XMLAppendChildren(prev_instance  , objs);
					     }
				     }
			     }
			     self.ds.vc_data_bind (e);
			     return;
			 }
		  }
		    ]]></script>
						</v:on-post>
						<v:template name="template9" type="simple" name-to-remove="table" set-to-remove="both">
						 <table rules="groups" width="100%">
							<tr>
							 <td align="center">
								<v:check-box name="add_key_control" >
								 <v:on-post>
									<script><![CDATA[
									    if (get_keyword('add_button',params) is not null )
													control.vc_put_value_to_element();
										              ]]></script>
								 </v:on-post>
								</v:check-box>
							 </td>
							 <td>
								<v:text name="add_name_control"    element-value="--self.column_create_buff" element-place="@name">
								 <v:on-post>
									<script><![CDATA[
									   if (get_keyword('add_button',params) is not null )
													control.vc_put_value_to_element();
										              ]]></script>
								 </v:on-post>
								 <v:before-data-bind>
									<script><![CDATA[
														 declare name varchar;
												if (get_keyword('add_advanced_button',params) is null )
														 control.ufl_value:= '';
												     ]]></script>
								 </v:before-data-bind>

								</v:text>
							 </td>
							 <td>
								<v:select-list name="add_type_type"  element-value="--self.column_create_buff" element-place="@type">
								 <v:on-post>
									<script><![CDATA[
									    if (get_keyword('add_button',params) is not null )
													control.vc_put_value_to_element();
										              ]]></script>
								 </v:on-post>
								 <v:before-data-bind>
									<script><![CDATA[
												      if ( self.mode = 'table_edit' ) {
													    declare i, len integer;
													    declare id varchar;
													    len := length(self.column_types);
													    i := 0;
													    (control as vspx_select_list).vsl_items := vector();
													    (control as vspx_select_list).vsl_item_values := vector();
												        (control as vspx_select_list).vsl_selected_inx := 0;

														while (i < len) {
														     id :=  sprintf('%d',aref(self.column_types, i));
														     if (id = self.type_value )
																	(control as vspx_select_list).vsl_selected_inx := i/2;
									                             (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(aref(self.column_types, i+1)) );
									                             (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(sprintf('%d',aref(self.column_types, i))));
															   i:= i + 2;
														}
														 self.type_name := aref((control as vspx_select_list).vsl_items, (control as vspx_select_list).vsl_selected_inx);
												    } ]]></script>
								 </v:before-data-bind>
								 <v:on-post>
									<script><![CDATA[
													  self.type_name := aref((control as vspx_select_list).vsl_items, (control as vspx_select_list).vsl_selected_inx);
													control.vc_put_value_to_element();
										              ]]></script>
								 </v:on-post>
								</v:select-list>
							 </td>
							 <td>
								<v:text name="add_prec_control"  xhtml_style="width: 32px;"  element-value="--self.column_create_buff" element-place="@prec">
								 <v:on-post>
									<script><![CDATA[
									     if (get_keyword('add_button',params) is not null )
													control.vc_put_value_to_element();
										              ]]></script>
								 </v:on-post>
								 <v:before-data-bind>
									<script><![CDATA[
														 declare name varchar;
												     ]]></script>
								 </v:before-data-bind>

								</v:text>
							 </td>
							 <td>
								<v:text name="add_scale_control"   xhtml_style="width: 32px;"  element-value="--self.column_create_buff" element-place="@scale">
								 <v:on-post>
									<script><![CDATA[
									    if (get_keyword('add_button',params) is not null )
													control.vc_put_value_to_element();
										              ]]></script>
								 </v:on-post>
								 <v:before-data-bind>
									<script><![CDATA[
														 declare name varchar;
												     ]]></script>
								 </v:before-data-bind>

								</v:text>
							 </td>
							 <td align="center">
								<v:check-box name="add_nullable_control"  element-value="--self.column_create_buff" element-place="@nullable">
								</v:check-box>
							 </td>

							 <td align="center">
								<v:check-box name="add_identity_control"  element-value="--self.column_create_buff" element-place="@identity">
								 <!--v:on-post>
														 <script><![CDATA[
														 if (get_keyword('add_button',params) is not null )
								 control.vc_put_value_to_element();
												 ]]></script>
							 </v:on-post -->
								</v:check-box>
							 </td>
							 <v:template name="showAdvancedAddTemplate" type="simple" enabled="--case when ( self.full_advanced_mode = 0) then 1 else 0 end">
							 <td><v:button name="add_advanced_button" action="submit" value="Advanced"/></td>
							  </v:template>
							 <td nowrap="nowrap">
								<v:button name="add_button" action="submit" value="Add"/>
							 </td>

							 </tr>
					 <v:template name="addAdvancedTemplate" type="simple" enabled="--case when (self.full_advanced_mode = 1)  then 1 else 0 end ">

<!-- here is the advanced information-->
							 <tr>
							   <td colspan="8">
								   <table>
									 <tr><td>Collation</td>
									 <td>
		 <v:select-list name="add_collation_control" element-value="--self.column_create_buff" element-place="@collation" xhtml_style="width:100%;">
		<v:before-data-bind>
		 <script><![CDATA[
		  if ( self.mode = 'table_edit' ) {
		    declare i, len integer;
		    declare id, collation_value varchar;
				declare collations_objs any;
		    (control as vspx_select_list).vsl_items := vector();
		    (control as vspx_select_list).vsl_item_values := vector();
		    (control as vspx_select_list).vsl_selected_inx := 0;
		    (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('None') );
		    (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('xsi:nil') );


		for select COLL_NAME from SYS_COLLATIONS do {
		      (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(COLL_NAME) );
		      (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(COLL_NAME) );
		}
		 } ]]></script>
		</v:before-data-bind>
								      <v:on-post>
									     <script><![CDATA[
													control.vc_put_value_to_element();
										           ]]></script>
								        </v:on-post>

		 </v:select-list>
							      </td>

									 </tr>
									 <tr><td>Identified By</td>
							       <td>
		 <v:select-list name="add_identified_control" element-value="--self.column_create_buff" element-place="@identified_by" xhtml_style="width:100%;">
		<v:before-data-bind>
		 <script><![CDATA[
		  if ( self.mode = 'table_edit' ) {
		    declare i, len integer;
		    declare id, identified_value, type  varchar;
				declare column_objs any;
		    (control as vspx_select_list).vsl_items := vector();
		    (control as vspx_select_list).vsl_item_values := vector();
		    (control as vspx_select_list).vsl_selected_inx := 0;
				column_objs := xpath_eval('/table/column',self.current_table,0);
        len := length(column_objs);
        i := 0;
		    (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('None') );
		    (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('xsi:nil') );

		while (i < len) {
		    id :=  cast ( xpath_eval('./@name', aref(column_objs, i)  ) as varchar );
				type :=  cast ( xpath_eval('./@type', aref(column_objs, i)  ) as varchar );
				if (type = '182' or type = '183' or type = '192' or type = '225' ) {
		      (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(id) );
		      (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(id) );
				}
		   i:= i + 1;
		}
		 } ]]></script>
		</v:before-data-bind>
								      <v:on-post>
									     <script><![CDATA[
													control.vc_put_value_to_element();
										           ]]></script>
								        </v:on-post>

		 </v:select-list>


							       </td>
									 </tr>
									 <tr><td>Default</td>
							      <td>
								     <v:text name="add_default_control"  value="'null'"  xhtml_style="width: 104px;">
								     <v:on-post>
									   <script><![CDATA[
								        control.vc_put_value_to_element();
				             ]]></script>
								     </v:on-post>
								    </v:text>
							      </td>
									 </tr>
									 </table>
								 </td>
							</tr>
</v:template>
						 </table>
						</v:template>
					 </v:form>
					</v:template>

				 </v:template>
				</v:data-set>
			 </td>
			</tr>
		 </table>
		 <table border="0" width="100%">
			<tr>
			 <td align="center">
				<v:button action="submit" name="table_review_command" value="Review">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='1' ) {
						   if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							   control.vc_enabled := 0;
						   else
						     control.vc_enabled := 1;
						  }
						]]></script>
						</v:before-render>

		      <v:on-post>
			     <script><![CDATA[
          declare path, table_name, parent_table  varchar;
          declare objs xml_tree;
			        declare res varchar;
		          declare difference xml_tree;

		      self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));

			    parent_table  :=  self.parent_table;

          if ( self.kind ='create' )  {
                table_name :=  self.table_name;
					      XMLAddAttribute(self.current_table, 2, 'name', table_name );
								 XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
            		self.edit_table_name.vc_data_bind (e);
          } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);


			        difference := xddl_diff(xddl_get_base(), self.current_table);
			        res := xddl_to_ddl(xddl_get_base(), xml_tree_doc(difference));
			        self.statements := res;
				      self.mode := 'preview_xddl_table';
				      self.table_name := table_name;
				      self.vc_data_bind(e);
				      return;

		       ]]></script>
					</v:on-post>
				</v:button>

				<v:button action="submit" name="table_create_command" value="Create">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='1' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						}
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
					    declare  table_name varchar;

              self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));
              if ( self.kind ='create' )  {
                 table_name :=  self.table_name;
	               XMLAddAttribute(self.current_table, 2, 'name', table_name );
								 XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
              } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);

	            self.wrong_entry := null;
	            if ( self.kind ='create' ) {
	               if (  table_name = '' or ( table_name <> '' and xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) ) {
	                  if (table_name = '')
	                     self.wrong_entry := sprintf ('Table name is empty.');
		                else
		                   self.wrong_entry := sprintf ('Table %s exist.', table_name);
	               }
	           }

	           if ( self.wrong_entry  is  null ) {
			      declare  result integer;
			      declare  check_errors any;
					  check_errors := vector();
					  result :=  xddl_check_constraints_validation (self.current_table, self.sid , check_errors);
					  if (result < 0) {
					    self.exec_errors := check_errors;
					    self.mode := 'xddl_constraint_error';
							 self.vc_data_bind(e);
							 return;
					  }

	               self.exec_errors := xddl_execute_statements(self.current_table, self.statements );
	               if (length(self.exec_errors) = 0) {
	                     self.objects := xddl_attach_table_xml_tree(self.current_table, self.kind, self.objects);
                       self.mode := null;
                       self.page := '1';
	                     self.vc_data_bind(e);
	                     return;
	               } else {
	                    self.mode := 'xddl_execute_error';
	                    self.vc_data_bind(e);
	                    return;
	               }
	           }
		       ]]></script>
					</v:on-post>
				</v:button>
				<v:button action="submit" name="table_edit_apply" value="Save">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='1' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						 }
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
          declare path, table_name, parent_table  varchar;
          declare objs xml_tree;
					declare  result integer;
					declare  check_errors any;

          self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));
          if ( self.kind ='create' )  {
              table_name :=  self.table_name;
	            XMLAddAttribute(self.current_table, 2, 'name', table_name );
							XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
          } else {
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);
							  XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
					}

	        self.wrong_entry := null;
	        if ( self.kind ='create' ) {
	               if (  table_name = '' or ( table_name <> '' and xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) ) {
	                  if (table_name = '')
	                     self.wrong_entry := sprintf ('Table name is empty.');
		                else
		                   self.wrong_entry := sprintf ('Table %s exist.', table_name);
	               }
	        }
					if (self.wrong_entry is null) {
			      declare  result integer;
			      declare  check_errors any;
					  check_errors := vector();
					  result :=  xddl_check_constraints_validation (self.current_table, self.sid, check_errors);
					  if (result < 0) {
					    self.exec_errors := check_errors;
					    self.mode := 'xddl_constraint_error';
							 self.vc_data_bind(e);
							 return;
					  }

	            self.objects := xddl_attach_table_xml_tree( self.current_table, self.kind, self.objects);
              self.mode := null;
              self.page := '1';
	            self.vc_data_bind(e);
	            return;

					}
		       ]]></script>
					</v:on-post>
				</v:button>
				<v:button action="submit" name="table_edit_cancel" value="Cancel">
		      <v:on-post>
			     <script><![CDATA[
							self.mode := null;
							self.page := '1';
							self.vc_data_bind(e);
							return;
		       ]]></script>
					</v:on-post>
				</v:button>
			 </td>
			</tr>
		 </table>
		</v:form>

</v:template>
<!-- End of table editor -->

<v:template name="constraintTabContentTemplate" type="simple" enabled="--case when ( self.table_editor_page ='2' ) then 1 else 0 end">

				<v:data-set name="ds_constr" data="-- xpath_eval ('/table/constraint', xml_tree_doc(self.current_table), 0)" meta="--vector(vector('callret',182,0,256,1,0,1,0,0,0,0,0 ))" nrows="1000" scrollable="1" edit="1" width="80">
				 <v:template name="constr_template1" type="simple" name-to-remove="table" set-to-remove="bottom">
					<table rules="groups" width="100%" cellpadding="4" cellspacing="0">
					 <thead>
					 <tr>
			       <td colspan="4"><b>
				      <?vsp
                if (  self.wrong_entry is not null ) {
                    http(sprintf('<span class="attention_marker">Error:  %s </span>', self.wrong_entry));
								    self.wrong_entry := null;
					      }
              ?>
				      </b></td>

					 </tr>
						<tr>

						 <td align="center" width="10%">
							<b>
							 <v:label name="constr_label1" value="'Name'" format="%s" width="80"/>
							</b>
						 </td>
						 <td align="center" width="100%">
							<b>
							 <v:label name="constr_label2" value="'Condition'" format="%s" width="512"/>
							</b>
						 </td>
						 <td align="center">&nbsp;</td>
						</tr>
					 </thead>
					</table>
				 </v:template>

				 <v:template name="constr_template2" type="repeat" name-to-remove="" set-to-remove="">
					<v:template name="constr_template7" type="if-not-exists" name-to-remove="table" set-to-remove="both">
					</v:template>
					<v:hidden width="0" height="0">
					 <v:template name="constr_template5" type="edit" name-to-remove="" set-to-remove="">
						<v:form name="upf_constr" type="update" if-not-exists="insert">
						 <v:on-post>
							<script><![CDATA[
							declare constr_name, constr_prev_name, constr_value, path  varchar;
							declare prev_instance any;
	   			    declare constr, objs any;

							constr_name := get_keyword('edit_constr_name_control',params);
							constr_value := get_keyword('edit_constr_control',params);
							constr_prev_name := self.current_column_name;
							if (constr_name = '')  {
							  self.wrong_entry := 'Constraint identifier may not be empty string.';
								self.ds_constr.ds_current_row := null;
								goto try_again;
							}

							prev_instance  :=   xpath_eval ( sprintf('/table/constraint[@name=\'%s\']',constr_prev_name),xml_tree_doc(self.current_table) );
              if (constr_name <> constr_prev_name and prev_instance is not null) {
							  self.wrong_entry := 'Constraint with the same identifier exists.';
								self.ds_constr.ds_current_row := null;
								goto try_again;
							}

				      constr := xpath_eval('/constraint',xml_tree_doc(sprintf('<constraint name="%s"><code>%s</code></constraint>', constr_name, constr_value )) );


					    path := sprintf('/table/constraint[@name=\'%s\']',constr_prev_name);
					    self.current_table:=  XMLUpdate(self.current_table, path,  constr);


						self.ds_constr.vc_data_bind (e);
						self.ds_constr.ds_current_row := null;
            return;


							try_again: ;
		    ]]></script>
						 </v:on-post>
	 <v:template name="constr_template6" type="simple" name-to-remove="table" set-to-remove="both">
	  <table width="100%" border="0" cellspacing="0" cellpadding="0">
	    <tr>
		       <td align="left">
										<v:text name="edit_constr_name_control"  xhtml_style="width:100%;">
								 <v:on-post>
									<script><![CDATA[
									   --if (get_keyword('edit_constr_name_control',params) is not null )
												--	control.vc_put_value_to_element();
												;
										              ]]></script>
								 </v:on-post>
								 <v:before-data-bind>
									<script><![CDATA[
														 declare name varchar;
														 name := cast (xpath_eval('@name',(control.vc_parent.vc_parent.vc_parent  as vspx_data_set).ds_current_row.te_rowset) as varchar);
														 control.ufl_value := name;
														 self.current_column_name := name;
												     ]]></script>
								 </v:before-data-bind>
								</v:text>
		        </td>

					 <td align="left">
										<v:text name="edit_constr_control"  xhtml_style="width:100%;">
								 <v:on-post>
									<script><![CDATA[
									--   if (get_keyword('edit_constr_control',params) is not null )
										--			control.vc_put_value_to_element();
										;
										              ]]></script>
								 </v:on-post>
								 <v:before-data-bind>
									<script><![CDATA[
														 declare name varchar;
														 name := cast (xpath_eval('./code/text()',(control.vc_parent.vc_parent.vc_parent  as vspx_data_set).ds_current_row.te_rowset) as varchar);
														 control.ufl_value := name;
												     ]]></script>
								 </v:before-data-bind>
								</v:text>
		        </td>
								<td nowrap="nowrap">
								 <v:button name="upf_constr_button" action="submit" value="Update"/>
								 <input type="submit" name="ds_constr_cancel" value="Cancel"/>
								</td>

								</tr>
							</table>
						 </v:template>
						</v:form>
					 </v:template>
					</v:hidden>
					<v:template name="constr_template4" type="browse" name-to-remove="table" set-to-remove="both">
					 <table rules="groups" width="100%">
						<tr>
						 <td>
							<v:label name="brws_constraint_name" value="--cast (xpath_eval('@name',(control.vc_parent as vspx_row_template).te_rowset) as varchar)" format="%s" width="80"/>
						 </td>
						 <td>
							<v:label name="brws_constraint" value="--cast (xpath_eval('./code/text()',(control.vc_parent as vspx_row_template).te_rowset) as varchar)" format="%s" width="80"/>
						 </td>
						 <td nowrap="1">
							<v:button name="ds_constr_edit" action="simple" value="Edit"/>
							<v:button name="ds_constr_delete" action="simple" value="Delete">
							 <v:on-post>
								<script><![CDATA[
			          		declare constr_name, path varchar;
			          		constr_name :=  cast ( xpath_eval('@name',(control.vc_parent as vspx_row_template).te_rowset) as varchar);
					    path := sprintf('/table/constraint[@name=\'%s\']',constr_name);

					    self.current_table:=  XMLUpdate(self.current_table, path,  null);
					      self.ds_constr.vc_data_bind (e);

			             ]]></script>
							 </v:on-post>
							</v:button>
						 </td>

						 </tr>
					 </table>

					</v:template>
					<v:template name="constr_template8" type="add" name-to-remove="" set-to-remove="">
					 <v:form name="constr_add" type="update"  if-not-exists="insert">
						<v:before-render>
						 <script><![CDATA[
							control.vc_enabled := case when (self.ds_constr.ds_current_row is not null) then 0 else 1 end;
						]]></script>
						</v:before-render>
						<v:on-post>
						 <script><![CDATA[
	   			  declare constr, objs any;

				   constr := xpath_eval('/constraint',xml_tree_doc(sprintf('<constraint name="%s"><code>%s</code></constraint>',
					  get_keyword('add_constr_name_control', params),
						get_keyword('add_constr_control', params) )) );


			       objs := xpath_eval('/table',xml_tree_doc(self.current_table));
			      XMLAppendChildren(objs, constr);
			      self.current_table := objs;


						self.ds_constr.vc_data_bind (e);
            return;

		    ]]></script>
						</v:on-post>
						<v:template name="constr_template9" type="simple" name-to-remove="table" set-to-remove="both">
						 <table rules="groups" width="100%">
							<tr>
							 <td>
								<v:text name="add_constr_name_control"  xhtml_style="width:100%;">
								 <v:on-post>
									<script><![CDATA[
									   if (get_keyword('add_constr_name_button',params) is not null )
													control.vc_put_value_to_element();
										              ]]></script>
								 </v:on-post>
								 <v:before-data-bind>
									<script><![CDATA[
														 control.ufl_value:= '';
												     ]]></script>
								 </v:before-data-bind>

								</v:text>
							 </td>

							 <td>
								<v:text name="add_constr_control"  xhtml_style="width:100%;">
								 <v:on-post>
									<script><![CDATA[
									   if (get_keyword('add_constr_button',params) is not null )
													control.vc_put_value_to_element();
										              ]]></script>
								 </v:on-post>
								 <v:before-data-bind>
									<script><![CDATA[
														 control.ufl_value:= '';
												     ]]></script>
								 </v:before-data-bind>

								</v:text>
							 </td>
							 <td nowrap="nowrap">
								<v:button name="add_constr_button" action="submit" value="Add"/>
							 </td>
							 </tr>
						 </table>
						</v:template>
					 </v:form>
					</v:template>

				 </v:template>
		 <table border="0" width="100%">
			<tr>
			 <td align="center">
				<v:button action="submit" name="table_constr_review_command" value="Review">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='2' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						 }
						]]></script>
						</v:before-render>

					<v:on-post>
			     <script><![CDATA[
          declare path, table_name, parent_table  varchar;
          declare objs xml_tree;
			        declare res varchar;
		          declare difference xml_tree;

		      self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));

			    parent_table  :=  self.parent_table;

          if ( self.kind ='create' )  {
                table_name :=  self.table_name;
					      XMLAddAttribute(self.current_table, 2, 'name', table_name );
								 XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
            		self.edit_table_name.vc_data_bind (e);
          } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);


			        difference := xddl_diff(xddl_get_base(), self.current_table);
			        res := xddl_to_ddl(xddl_get_base(), xml_tree_doc(difference));
			        self.statements := res;
				      self.mode := 'preview_xddl_table';
				      self.table_name := table_name;
				      self.vc_data_bind(e);
				      return;

		       ]]></script>
					</v:on-post>
				</v:button>

				<v:button action="submit" name="table_constr_create_command" value="Create">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='2' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						 }
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
					    declare  table_name varchar;

              self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));
              if ( self.kind ='create' )  {
                 table_name :=  self.table_name;
	               XMLAddAttribute(self.current_table, 2, 'name', table_name );
								 XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
              } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);

	            self.wrong_entry := null;
	            if ( self.kind ='create' ) {
	               if (  table_name = '' or ( table_name <> '' and xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) ) {
	                  if (table_name = '')
	                     self.wrong_entry := sprintf ('Table name is empty.');
		                else
		                   self.wrong_entry := sprintf ('Table %s exist.', table_name);
	               }
	           }

	           if ( self.wrong_entry  is  null ) {
			      declare  result integer;
			      declare  check_errors any;
					  check_errors := vector();
					  result :=  xddl_check_constraints_validation (self.current_table, self.sid, check_errors);
					  if (result < 0) {
					    self.exec_errors := check_errors;
					    self.mode := 'xddl_constraint_error';
							 self.vc_data_bind(e);
							 return;
					  }

	               self.exec_errors := xddl_execute_statements(self.current_table, self.statements );
	               if (length(self.exec_errors) = 0) {
	                     self.objects := xddl_attach_table_xml_tree(self.current_table, self.kind, self.objects);
                       self.mode := null;
                       self.page := '1';
	                     self.vc_data_bind(e);
	                     return;
	               } else {
	                    self.mode := 'xddl_execute_error';
	                    self.vc_data_bind(e);
	                    return;
	               }
	           }
		       ]]></script>
					</v:on-post>
				</v:button>
				<v:button action="submit" name="table_constr_edit_apply" value="Save">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='2' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						}
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
          declare path, table_name, parent_table  varchar;
          declare objs xml_tree;
          self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));
          if ( self.kind ='create' )  {
              table_name :=  self.table_name;
	            XMLAddAttribute(self.current_table, 2, 'name', table_name );
							XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
          } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);


	        self.wrong_entry := null;
	        if ( self.kind ='create' ) {
	               if (  table_name = '' or ( table_name <> '' and xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) ) {
	                  if (table_name = '')
	                     self.wrong_entry := sprintf ('Table name is empty.');
		                else
		                   self.wrong_entry := sprintf ('Table %s exist.', table_name);
	               }
	        }

					if (self.wrong_entry is null) {
			      declare  result integer;
			      declare  check_errors any;
					  check_errors := vector();
					  result :=  xddl_check_constraints_validation (self.current_table, self.sid, check_errors);
					  if (result < 0) {
					    self.exec_errors := check_errors;
					    self.mode := 'xddl_constraint_error';
							 self.vc_data_bind(e);
							 return;
					  }

	            self.objects := xddl_attach_table_xml_tree( self.current_table, self.kind, self.objects);
              self.mode := null;
              self.page := '1';
	            self.vc_data_bind(e);
	            return;

					}
		       ]]></script>
					</v:on-post>
				</v:button>
				<v:button action="submit" name="table_constr_edit_cancel" value="Cancel">
		      <v:on-post>
			     <script><![CDATA[
							self.mode := null;
							self.page := '1';
							self.vc_data_bind(e);
							return;
		       ]]></script>
					</v:on-post>
				</v:button>
			 </td>
			</tr>
		 </table>


				</v:data-set>

</v:template>


<v:template name="primaryKeyTabContentTemplate" type="simple" enabled="--case  when ( self.table_editor_page ='3' ) then 1 else 0 end">
		<vm:events>
		 <v:before-data-bind>
			<script><![CDATA[
		      if (self.mode = 'table_edit' and self.table_editor_page = '3') {
		         declare path, table_name, column_name  varchar;
			       declare tmp_arr any;
			       declare i, len integer;
  			     table_name := self.table_name;

			       if ( get_keyword('reload_entry', params) is null) {

			           self.key_is_unique :=  xpath_eval('/table/pk/@is_unique',xml_tree_doc(self.current_table));
				         self.key_is_clustered :=   xpath_eval('/table/pk/@is_clustered',xml_tree_doc(self.current_table));
				         self.key_is_oid := xpath_eval('/table/pk/@is_oid',xml_tree_doc(self.current_table));

			           path := '/table/pk/field';
			           tmp_arr := xpath_eval(path,xml_tree_doc(self.current_table),0);

			           self.primary_key := vector();
			           i := 0;
			           len := length(tmp_arr);
			           while ( i < len) {
			             column_name := cast( xpath_eval('./@col',aref(tmp_arr,i)) as varchar );
			             self.primary_key := vector_concat(self.primary_key,vector( column_name) );
			             i := i +1;
			         }
			       }
			 }

       ]]></script>
		 </v:before-data-bind>
		</vm:events>

		<vm:form name="xddl_primary_key_form" type="simple" method="POST" action="">
		 <input type="hidden" name="reload_entry" value="1" />
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[

		         declare objs xml_tree;
			 declare path, table_name, column_name,  pk_name, tmp_pk  varchar;
		         declare tmp_array, cols any;
			 declare i, len, is_found integer;

					self.key_is_unique  := case when ( get_keyword('primary_key_unique_control',params) is not null ) then '1' else '0' end;
					self.key_is_clustered  := case when ( get_keyword('primary_key_clustered_control',params) is not null ) then '1' else '0' end;
					self.key_is_oid   := case when ( get_keyword('primary_key_objectid_control',params) is not null ) then '1' else '0' end;


	 		 table_name := self.table_name;
	       if (get_keyword('table_pk_edit_cancel',params) is not null) {
		           self.table_editor_page := '1';
			         self.vc_data_bind(e);
			         return;
		      } else if (get_keyword('table_pk_review_command',params) is not null or
					           get_keyword('table_pk_create_command',params) is not null or
										 get_keyword('table_pk_edit_save_command',params) is not null ) {

		            len :=  length(self.primary_key);
			         --objs := xml_tree_doc(self.current_table);
			         objs := xpath_eval('/table',xml_tree_doc(self.current_table));
			         path := sprintf('/table/pk/field',table_name);
			         cols:= xpath_eval(path,objs,0);

			      if (len > 0) { -- update pk
			           declare pk_tree, field xml_tree;
			           pk_tree := xml_tree_doc(sprintf('<pk is_unique="%s" is_clustered="%s" is_oid="%s"/>',
			           self.key_is_unique,
				         self.key_is_clustered,
				          self.key_is_oid ));
			           pk_tree := xpath_eval('/pk',pk_tree);
			           i :=0;
			           while (i < len) {
				           tmp_pk := aref(self.primary_key,i);
					         field := xml_tree_doc(sprintf('<field ord="%d" col="%s"/>',i,tmp_pk));
					         XMLAppendChildren ( pk_tree, field);
			             i:= i +1;
			           }
			       if (length( cols) = 0 ) {
			          XMLAppendChildren (objs,   pk_tree);
				  	    self.current_table := objs;
			       } else {
					        path := sprintf('/table/pk');
					        self.current_table := XMLUpdate(objs,path, pk_tree);
				     }
			    } else if  (length(cols) > 0 ) { -- remove pk
			        self.current_table := XMLUpdate(objs,'/table/pk', NULL);
			    }

					   -- here we need to put other stuff - review, save, create

 			       self.table_editor_page := '1';
			       self.vc_data_bind(e);
			       return;
		      }

		      if (get_keyword('primary_key_remove_command',params) is not null) {
			    pk_name := get_keyword('primary_keys_columns_control', params);
			    if (pk_name is not null) {
			       tmp_array := vector();
			       i := 0;
			       len :=  length(self.primary_key);
			       while (i < len) {
			        tmp_pk := aref(self.primary_key,i);
			        if (tmp_pk  <> pk_name)
				  tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
			        i:= i +1;
			       }
			       self.primary_key :=  tmp_array;
			    }
					self.vc_data_bind(e);
			    return;

		      }
		      if (get_keyword('primary_key_add_command',params) is not null) {
			        pk_name := get_keyword('primary_keys_available_columns_control', params);
			        if (pk_name is not null) {
			           self.primary_key := vector_concat(self.primary_key,vector( pk_name) );
			        }
							self.vc_data_bind(e);
			        return;
		      }
		      if (get_keyword('primary_key_up_command',params) is not null) {
			        pk_name := get_keyword('primary_keys_columns_control', params);
			        if (pk_name is not null) {
			           i := 0;
			           is_found := -1;
			           len :=  length(self.primary_key);
			           while (i < len) {
			             tmp_pk := aref(self.primary_key,i);
			             if (tmp_pk  = pk_name)
					         is_found := i;
			             i:= i +1;
			           }

			           if (is_found > 0) {
			             tmp_array := vector();
				           i:=0;
				           while (i < len) {
				             tmp_pk := aref(self.primary_key,i);
				             if (( is_found - 1) =  i) {
				               tmp_array := vector_concat(tmp_array,vector( pk_name) );
				               tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
				             } else if ( is_found <>  i) {
				                tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
				             }
				             i:= i +1;
				          }
				          self.primary_key :=  tmp_array;
			          }
			         }
							 self.vc_data_bind(e);
			         return;
		      }
		      if (get_keyword('primary_key_down_command',params) is not null) {
			      pk_name := get_keyword('primary_keys_columns_control', params);
			      if (pk_name is not null) {
			       i := 0;
			       is_found := -1;
			       len :=  length(self.primary_key);
			       while (i < len) {
			        tmp_pk := aref(self.primary_key,i);
			         if (tmp_pk  = pk_name)
					     is_found := i;
			         i:= i +1;
			       }

			       if ((is_found >= 0) and (is_found < (len -1)) ) {
			          tmp_array := vector();
				        i:=0;
				        while (i < len) {
				          tmp_pk := aref(self.primary_key,i);
				          if (( is_found + 1) =  i) {
				            tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
				            tmp_array := vector_concat(tmp_array,vector( pk_name) );
				          } else if ( is_found <>  i) {
				            tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
				          }
				          i:= i +1;
				        }
				        self.primary_key :=  tmp_array;
			       }
			      }
						self.vc_data_bind(e);
			      return;
		      }

		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td>Table Name</td>
			 <td colspan="6">
				<b>
				 <?vsp
				     if (self.table_name is not null)   http(self.table_name);
         ?>
				</b>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:control name="primary_keys_available_columns_control" type="select">
			 <vm:caption value="Available Columns" align="top"/>
			 <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" xhtml_multiple="TRUE"/>
			 <vm:events>
				<v:before-data-bind>
				 <script><![CDATA[
		     if (self.mode = 'table_edit' and  self.table_editor_page ='3' ) {
			    declare i, len, i2, len2,  is_found integer;
			    declare table_name, path, column_name, column_type, pk_name varchar;
			    declare cols  any;
			    declare objs xml_tree;

			    table_name := get_keyword('table_name', params);
			    cols := vector();

			    objs := xml_tree_doc(self.current_table);

			    cols:= xpath_eval('/table/column',objs,0);




			    len := length(cols);
			    len2 := length(self.primary_key);
			    i := 0;
			    (control as vspx_select_list).vsl_items := vector();
			    (control as vspx_select_list).vsl_item_values := vector();

			while (i < len) {
			   column_name := xpath_eval('./@name',aref(cols,i));
			   column_type := xpath_eval('./@type',aref(cols,i));
			   if (column_type <> '225' and  -- nvarchar
				       column_type <> '226' and  -- long nvarchar
				       column_type <> '125' and  -- varbinary
				       column_type <> '222' and  -- long varbinary
				       column_type <> '131' and  -- long varchar
				       column_type <> '230' ) {	 -- long xml
			     i2 := 0;
			     is_found := 0;
			     while (i2 < len2) {
			      pk_name := aref(self.primary_key,i2);

			      if (column_name = pk_name)
			        is_found := 1;
			      i2 := i2 +1;
			     }
			     if (is_found = 0) {
                              (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(column_name) );
                              (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(column_name));
			     }
			   }
			   i:= i +1;
			}
  		        (control as vspx_select_list).vsl_selected_inx := 0;
		     }
		    ]]></script>
				</v:before-data-bind>
			 </vm:events>
			</vm:control>
			<vm:raw>
			 <td>
				<table border="0">
				 <tr>
					<td>
					 <v:button action="submit" name="primary_key_add_command" value=">>" xhtml_style="width: 28px;"/>
					</td>
				 </tr>
				 <tr>
					<td>
					 <v:button action="submit" name="primary_key_remove_command" value="<<" xhtml_style="width: 28px;"/>
					</td>
				 </tr>
				 <tr>
					<td>
					 <v:button action="submit" name="primary_key_up_command" value="Up" xhtml_style="width: 28px;"/>
					</td>
				 </tr>
				 <tr>
					<td>
					 <v:button action="submit" name="primary_key_down_command" value="Dn" xhtml_style="width: 28px;"/>
					</td>
				 </tr>
				</table>
			 </td>
			</vm:raw>
			<vm:control name="primary_keys_columns_control" type="select">
			 <vm:caption value="Primary Key Columns" align="top"/>
			 <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" xhtml_multiple="TRUE"/>
			 <vm:events>
				<v:after-data-bind>
				 <script><![CDATA[
		     if (self.mode = 'table_edit' and  self.table_editor_page ='3' ) {
			    declare i, len integer;
			    declare table_name, path, column_name varchar;
			    declare cols any;
			    declare objs xml_tree;

			    table_name := get_keyword('table_name', params);


			    len := length( self.primary_key);
			    i := 0;
			    (control as vspx_select_list).vsl_items := vector();
			    (control as vspx_select_list).vsl_item_values := vector();
		      (control as vspx_select_list).vsl_selected_inx := 0;

			while (i < len) {
			     column_name := aref(self.primary_key,i);
					 if (column_name <> '_IDN') {
              (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(column_name) );
              (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(column_name));
					    if ( get_keyword('primary_keys_columns_control', params) = column_name )
					       control.ufl_value := column_name;
					 }
			   i:= i +1;
			}
  		    control.vs_set_selected();
		     }
		    ]]></script>
				</v:after-data-bind>
			 </vm:events>
			</vm:control>
		 </vm:row>
		 <vm:row>
			<vm:container colspan="3">
			 <vm:raw>
				<tr>
				 <td>Unique</td>
				 <td>
					<!-- v:check-box name="primary_key_unique_control" element-value="--self.current_table" element-path="/table/pk" element-place="@is_unique" is-boolean="0" true-value="1" false-value="0" -->
					<v:check-box name="primary_key_unique_control" >
					 <v:before-data-bind>
						<script><![CDATA[
						if (self.key_is_unique = '1')
						     control.ufl_selected := 1;
						else
						       control.ufl_selected := 0;
						 control.vc_data_bound :=1;
					     ]]></script>
					 </v:before-data-bind>
					</v:check-box>
				 </td>
				</tr>
				<tr>
				 <td>Clustered</td>
				 <td>
					<!-- v:check-box name="primary_key_clustered_control" element-value="--self.current_table" element-path="/table/pk" element-place="@is_clustered"-->
					<v:check-box name="primary_key_clustered_control" >
					 <v:before-data-bind>
						<script><![CDATA[
						if (self.key_is_clustered = '1')
						     control.ufl_selected := 1;
						else
						       control.ufl_selected := 0;
						 control.vc_data_bound :=1;
					    ]]></script>
					 </v:before-data-bind>
					</v:check-box>
				 </td>
				</tr>
				<tr>
				 <td>Object ID</td>
				 <td>
					<!-- v:check-box name="primary_key_objectid_control" element-value="--self.current_table" element-path="/table/pk" element-place="@is_oid" -->
					<v:check-box name="primary_key_objectid_control" >

					 <v:before-data-bind>
						<script><![CDATA[
						if (self.key_is_oid = '1')
						     control.ufl_selected := 1;
						  else
						       control.ufl_selected := 0;
						 control.vc_data_bound :=1;
					     ]]></script>
					 </v:before-data-bind>

					</v:check-box>
				 </td>
				</tr>
			 </vm:raw>
			</vm:container>
		 </vm:row>

		 <vm:row>
			<vm:bgroup colspan="6" align="center">
		 <table border="0" width="100%">
			<tr>
			 <td align="center">
				<v:button action="submit" name="table_pk_review_command" value="Review">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='3' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						}
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
          declare path, table_name, parent_table  varchar;
          declare objs xml_tree;
			        declare res varchar;
		          declare difference xml_tree;
		      self.current_table := xddl_attach_pk_xml_tree (self.primary_key, self.current_table,
											  self.key_is_unique, self.key_is_clustered,self.key_is_oid );

		      self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));

			    parent_table  :=  self.parent_table;

          if ( self.kind ='create' )  {
                table_name :=  self.table_name;
					      XMLAddAttribute(self.current_table, 2, 'name', table_name );
								 XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
            		self.edit_table_name.vc_data_bind (e);
          } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);


			        difference := xddl_diff(xddl_get_base(), self.current_table);
			        res := xddl_to_ddl(xddl_get_base(), xml_tree_doc(difference));
			        self.statements := res;
				      self.mode := 'preview_xddl_table';
				      self.table_name := table_name;
				      self.vc_data_bind(e);
				      return;

		       ]]></script>
					</v:on-post>
				</v:button>

				<v:button action="submit" name="table_pk_create_command" value="Create">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='3' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
							}
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
					    declare  table_name varchar;

				   self.current_table := xddl_attach_pk_xml_tree (self.primary_key, self.current_table,
											  self.key_is_unique, self.key_is_clustered,self.key_is_oid );

              self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));
              if ( self.kind ='create' )  {
                 table_name :=  self.table_name;
	               XMLAddAttribute(self.current_table, 2, 'name', table_name );
								 XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
              } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);

	            self.wrong_entry := null;
	            if ( self.kind ='create' ) {
	               if (  table_name = '' or ( table_name <> '' and xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) ) {
	                  if (table_name = '')
	                     self.wrong_entry := sprintf ('Table name is empty.');
		                else
		                   self.wrong_entry := sprintf ('Table %s exist.', table_name);
	               }
	           }

	           if ( self.wrong_entry  is  null ) {
			      declare  result integer;
			      declare  check_errors any;
					  check_errors := vector();
					  result :=  xddl_check_constraints_validation (self.current_table, self.sid, check_errors);
					  if (result < 0) {
					    self.exec_errors := check_errors;
					    self.mode := 'xddl_constraint_error';
							 self.vc_data_bind(e);
							 return;
					  }

	               self.exec_errors := xddl_execute_statements(self.current_table, self.statements );
	               if (length(self.exec_errors) = 0) {
	                     self.objects := xddl_attach_table_xml_tree(self.current_table, self.kind, self.objects);
                       self.mode := null;
                       self.page := '1';
	                     self.vc_data_bind(e);
	                     return;
	               } else {
	                    self.mode := 'xddl_execute_error';
	                    self.vc_data_bind(e);
	                    return;
	               }
	           }
		       ]]></script>
					</v:on-post>
				</v:button>
				<v:button action="submit" name="table_pk_edit_apply" value="Save">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='1' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						 }
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
          declare path, table_name, parent_table  varchar;
          declare objs xml_tree;

			   self.current_table := xddl_attach_pk_xml_tree (self.primary_key, self.current_table,
											  self.key_is_unique, self.key_is_clustered,self.key_is_oid );

          self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));
          if ( self.kind ='create' )  {
              table_name :=  self.table_name;
	            XMLAddAttribute(self.current_table, 2, 'name', table_name );
							XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
          } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);


	        self.wrong_entry := null;
	        if ( self.kind ='create' ) {
	               if (  table_name = '' or ( table_name <> '' and xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) ) {
	                  if (table_name = '')
	                     self.wrong_entry := sprintf ('Table name is empty.');
		                else
		                   self.wrong_entry := sprintf ('Table %s exist.', table_name);
	               }
	        }
					if (self.wrong_entry is null) {
			      declare  result integer;
			      declare  check_errors any;
					  check_errors := vector();
					  result :=  xddl_check_constraints_validation (self.current_table, self.sid,  check_errors);
					  if (result < 0) {
					    self.exec_errors := check_errors;
					    self.mode := 'xddl_constraint_error';
							 self.vc_data_bind(e);
							 return;
					  }

	            self.objects := xddl_attach_table_xml_tree( self.current_table, self.kind, self.objects);
              self.mode := null;
              self.page := '1';
	            self.vc_data_bind(e);
	            return;

					}
		       ]]></script>
					</v:on-post>
				</v:button>
				<v:button action="submit" name="table_pk_edit_cancel" value="Cancel">
		      <v:on-post>
			     <script><![CDATA[
							self.mode := null;
							self.page := '1';
							self.vc_data_bind(e);
							return;
		       ]]></script>
					</v:on-post>
				</v:button>
			 </td>
			</tr>
		 </table>
			</vm:bgroup>
		 </vm:row>
		</vm:form>

</v:template>
<v:template name="foreignKeyTabContentTemplate" type="simple" enabled="--case when ( self.table_editor_page ='4' ) then 1 else 0 end">
		<vm:events>
		 <v:before-data-bind>
			<script><![CDATA[
          declare tmp_arr any;
					declare path, column_name, ref_column_name, ref_table varchar;
					declare i, len integer;

		      if (self.mode = 'table_edit' and  self.table_editor_page ='4'  ) {
			  if ( get_keyword('reload_entry', params) is null ) {
			    self.wrong_entry := null;
			    path := '//reference';
			    tmp_arr := xpath_eval(path,xml_tree_doc(self.current_table),0);
			    self.foreign_key_columns := vector();
			    i := 0;
			    len := length(tmp_arr);
			    while ( i < len) {
			       column_name :=  cast ( xpath_eval('./@col',aref(tmp_arr,i)) as varchar);
			       ref_column_name := cast ( xpath_eval('./@ref_col',aref(tmp_arr,i)) as varchar);
			       ref_table := cast ( xpath_eval('../@ref_table',aref(tmp_arr,i)) as varchar);

			       self.foreign_key_columns := vector_concat(self.foreign_key_columns,vector( column_name, ref_column_name, ref_table) );
			      i := i +1;
			    }
			    if (len > 0) {
			                   self.current_column_name :=  aref(self.foreign_key_columns,0);
			    			    self.reference_table_value :=  aref(self.foreign_key_columns,2);
			     }

			  }
			 } ]]></script>
		 </v:before-data-bind>
		</vm:events>

		<vm:form name="xddl_foreign_key_form" type="simple" method="POST" action="">
		 <input type="hidden" name="reload_entry" value="1" />
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[

		         declare objs, tmp_tree  xml_tree;
			 declare path, table_name, column_name,  pk_name, tmp_pk  varchar;
		         declare tmp_array, cols, fk_array any;
			 declare i, len, i2, len2,  is_found integer;

	 		 table_name := self.table_name;


       if (get_keyword('foreign_key_update_command',params) is not null) {
	           	declare current_column varchar;
			         declare i, len integer;

  		      current_column := get_keyword('foreign_keys_columns_control', params);
  		      if (current_column is not null) {
	  		       self.current_column_name := current_column;
				       len := length( self.foreign_key_columns);
				        i := 0;
				       while (i < len) {
			     	    if  ( current_column = aref(self.foreign_key_columns,i)  and aref(self.foreign_key_columns,i+2) is not null)
			     		    self.reference_table_value :=  aref(self.foreign_key_columns,i+2);
				        i:= i +3;
				       }
			      }
						self.vc_data_bind(e);
			      return;
		   }
		   if (get_keyword('foreign_key_change_reference_table_command',params) is not null) {
		        self.reference_table_value :=   get_keyword('reference_table_control', params);
						self.vc_data_bind(e);
			      return;
			 }
		   if (get_keyword('foreign_key_add_column_command',params) is not null) {
	           	declare current_column varchar;
			    declare i, len integer;
				if ( get_keyword('foreign_keys_available_columns_control', params) is not null)  {
					current_column := get_keyword('foreign_keys_available_columns_control', params);
  		        		 self.foreign_key_columns := vector_concat(self.foreign_key_columns,vector( current_column, null, null) );
  		        		 self.current_column_name := current_column;
				}
				self.vc_data_bind(e);
			  return;
			 }
		   if (get_keyword('foreign_key_remove_column_command',params) is not null) {
	           	declare current_column varchar;
			    declare i, len integer;
			    declare tmp_arr any;
				if ( get_keyword('foreign_keys_columns_control', params) is not null)  {
	  		         current_column := get_keyword('foreign_keys_columns_control', params);
					tmp_arr := vector();
					len :=  length(self.foreign_key_columns);
					i := 0;
					while ( i < len) {
					   if  (aref(self.foreign_key_columns,i) <> current_column) {
					   	tmp_arr :=  vector_concat(tmp_arr  , vector( aref(self.foreign_key_columns,i), aref(self.foreign_key_columns,i +1), aref(self.foreign_key_columns,i +2)) );
					   }
					   i := i + 3;
					}
	        		     self.foreign_key_columns := tmp_arr ;
				}
				self.vc_data_bind(e);
			    return;
			 }

		   if (get_keyword('foreign_key_add_reference_column_command',params) is not null) {
	           	declare current_column, column_name varchar;
			    declare i, len integer;
    			  declare tmp_arr any;

				if ( get_keyword('foreign_keys_reference_available_columns_control', params) is not null)  {
	  		         current_column := get_keyword('foreign_keys_reference_available_columns_control', params);
	  		           column_name := get_keyword('foreign_keys_columns_control', params);

					tmp_arr := vector();
					len :=  length(self.foreign_key_columns);
					i := 0;
					while ( i < len) {
					   if  (aref(self.foreign_key_columns,i) = column_name and aref(self.foreign_key_columns,i +1) is  null  )
					   		tmp_arr :=  vector_concat(tmp_arr  , vector( aref(self.foreign_key_columns,i), current_column, self.reference_table_value ) );
					    else
					       tmp_arr :=  vector_concat(tmp_arr  , vector( aref(self.foreign_key_columns,i), aref(self.foreign_key_columns,i +1), aref(self.foreign_key_columns,i +2)) );

					   i := i + 3;
					}
	        		     self.foreign_key_columns := tmp_arr ;
				}
				self.vc_data_bind(e);
				return;
			 }

		  if (get_keyword('foreign_key_remove_reference_column_command',params) is not null) {
	           	declare current_column, column_name varchar;
			    declare i, len integer;
			  declare tmp_arr any;

			  if ( get_keyword('foreign_keys_reference_columns_control', params) is not null)
	  		         current_column := get_keyword('foreign_keys_reference_columns_control', params);
--	  		           column_name := get_keyword('foreign_keys_columns_control', params);

					tmp_arr := vector();
					len :=  length(self.foreign_key_columns);
					i := 0;
					while ( i < len) {
					   if  (aref(self.foreign_key_columns,i + 1) = current_column)
					   	tmp_arr :=  vector_concat(tmp_arr  , vector( aref(self.foreign_key_columns,i), null, null ) );
					    else
					       tmp_arr :=  vector_concat(tmp_arr  , vector( aref(self.foreign_key_columns,i), aref(self.foreign_key_columns,i +1), aref(self.foreign_key_columns,i +2)) );

					   i := i + 3;
					}
	        self.foreign_key_columns := tmp_arr ;
				}
				self.vc_data_bind(e);
			  return;

		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<b>
				 <?vsp
    if (  self.wrong_entry is not null )
           http(sprintf('<span class="attention_marker">Wrong Foreign Key Defintion:  %s </span>', self.wrong_entry));
    ?>
				</b>
			 </td>
			</vm:raw>
		 </vm:row>

		 <vm:row>
			<vm:raw>
			 <td>Table Name</td>
			 <td colspan="6">
				<b>
				 <?vsp
				 if (self.table_name is not null)        http(self.table_name);
         ?>
				</b>
			 </td>
			</vm:raw>
		 </vm:row>

		 <vm:row>
			<vm:control name="foreign_keys_available_columns_control" type="select">
			 <vm:caption value="Available Columns" align="top"/>
			 <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" xhtml_multiple="TRUE"/>
			 <vm:events>
				<v:before-data-bind>
				 <script><![CDATA[
		     if (self.mode = 'table_edit' and  self.table_editor_page ='4'  ) {
			    declare i, len, i2, len2,  is_found integer;
			    declare table_name, path, column_name, pk_name, column_type  varchar;
			    declare cols  any;
			    declare objs xml_tree;

			    table_name := self.table_name;
			    cols := vector();

			    objs := xml_tree_doc(self.current_table);

			    cols:= xpath_eval('/table/column',objs,0);
			    len := length(cols);
			    len2 := length(self.foreign_key_columns);
			    i := 0;
			    (control as vspx_select_list).vsl_items := vector();
			    (control as vspx_select_list).vsl_item_values := vector();

			while (i < len) {
			   column_name := xpath_eval('./@name',aref(cols,i));
			   column_type := xpath_eval('./@type',aref(cols,i));
			   if (column_type <> '225' and  -- nvarchar
				       column_type <> '226' and  -- long nvarchar
				       column_type <> '125' and  -- varbinary
				       column_type <> '222' and  -- long varbinary
				       column_type <> '131' and  -- long varchar
				       column_type <> '230' and  	 -- long xml
							 column_name <> '_IDN'   ) {

			     i2 := 0;
			     is_found := 0;
			     while (i2 < len2) {
			      pk_name := aref(self.foreign_key_columns,i2);

			      if (column_name = pk_name)
			        is_found := 1;
			      i2 := i2 +1;
			     }
			     if (is_found = 0) {
                              (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(column_name) );
                              (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(column_name));
			     }
			   }
			   i:= i +1;
			}
  		        (control as vspx_select_list).vsl_selected_inx := 0;
		     }
		    ]]></script>
				</v:before-data-bind>
			 </vm:events>
			</vm:control>
			<vm:raw>
			 <td>
				<table border="0">
				 <tr>
					<td>
					 <v:button action="submit" name="foreign_key_add_column_command" value=">>" xhtml_style="width: 28px;"/>
					</td>
				 </tr>
				 <tr>
					<td>
					 <v:button action="submit" name="foreign_key_remove_column_command" value="<<" xhtml_style="width: 28px;"/>
					</td>
				 </tr>
				</table>
			 </td>
			</vm:raw>
			<vm:container>
			 <vm:row>
				<vm:raw>
				 <td>
					<table width="100%">
					 <tr>
						<td>Foreign Key Columns</td>
						<td  align="right">
						 <v:button action="submit" name="foreign_key_update_command" value="Update"/>
						</td>
					 </tr>
					</table>
				 </td>
				</vm:raw>
			 </vm:row>
			 <vm:row>
				<vm:control name="foreign_keys_columns_control" type="select">
				 <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" xhtml_multiple="TRUE"/>
				 <vm:events>
					<v:before-data-bind>
					 <script><![CDATA[
		     if ( self.mode = 'table_edit' and  self.table_editor_page ='4'  ) {
			    declare i, len integer;
			    declare table_name, path, column_name varchar;
			    declare cols any;
			    declare objs xml_tree;

			    table_name := self.table_name;


			    len := length( self.foreign_key_columns);
			    i := 0;
			    (control as vspx_select_list).vsl_items := vector();
			    (control as vspx_select_list).vsl_item_values := vector();
  		        (control as vspx_select_list).vsl_selected_inx := 0;

			while (i < len) {
			     column_name := aref(self.foreign_key_columns,i);
                             (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(column_name) );
                             (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(column_name));
			   i:= i +3;
			}

  		        if (len > 0  ) {
				    control.ufl_value :=  self.current_column_name;
					control.vs_set_selected();
  		        }
		     }
		    ]]></script>
					</v:before-data-bind>
				 </vm:events>
				</vm:control>
			 </vm:row>
			</vm:container>
		 </vm:row>
		 <vm:row>
			<vm:raw>
			 <td>Reference Table</td>
			 <td></td>
			 <td> <!--  list-document="--self.objects" list-match="'/tables/table'" list-key-path="@name" list-value-path="@name"  -->
				<v:data-list name="reference_table_control"   xhtml_style="width: 200px;" autosubmit="yes" >
				 <v:after-data-bind>
					<script><![CDATA[
		        if (self.mode = 'table_edit' and  self.table_editor_page ='4'  ) {

						    declare objs any;
								declare i, len integer;
								declare val varchar;
								objs :=  xpath_eval('/tables/table/@name', self.objects, 0);
								len := length (objs);
								i := 0;
		            (control as vspx_select_list).vsl_items := vector();
		            (control as vspx_select_list).vsl_item_values := vector();
		            (control as vspx_select_list).vsl_selected_inx := 0;

			          while (i < len) {
								  val := cast (aref (objs,i) as varchar);
									if ( self.kind = 'create'  or (self.kind = 'edit' and ( val <> self.table_name ) ) ) {
                    (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(val) );
                    (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(val));
								  }
									i := i + 1;
								}



				   if (self.reference_table_value is not null) {
						control.ufl_value :=  self.reference_table_value;
				   } else if (length((control as vspx_select_list).vsl_item_values) > 0 ) {
					    control.ufl_value := (control as vspx_select_list).vsl_item_values[0];
					     self.reference_table_value := control.ufl_value;
				   }
				control.vs_set_selected();
				 }
                    ]]></script>
				 </v:after-data-bind>
				</v:data-list>
				<v:button action="submit" name="foreign_key_change_reference_table_command" value="Change"/>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:control name="foreign_keys_reference_available_columns_control" type="select">
			 <vm:caption value="Available Reference Columns" align="top"/>
			 <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" xhtml_multiple="TRUE"/>
			 <vm:events>
				<v:before-data-bind>
				 <script><![CDATA[
		     if (self.mode = 'table_edit' and  self.table_editor_page ='4'  ) {
			    declare i, len, i2, len2,  is_found integer;
			    declare table_name, path, column_name, fk_ref_name, column_type varchar;
			    declare cols  any;
			    declare objs xml_tree;

			    table_name := self.table_name;
			    cols := vector();

			    objs := xml_tree_doc(self.objects);
			    path := sprintf('/tables/table[@name=\'%s\']/column',self.reference_table_value);
			    cols:= xpath_eval(path,objs,0);
			    len := length(cols);

			    len2 := length(self.foreign_key_columns);
			    i := 0;
			    (control as vspx_select_list).vsl_items := vector();
			    (control as vspx_select_list).vsl_item_values := vector();

			while (i < len) {
			   column_name := xpath_eval('./@name',aref(cols,i));
			   column_type := xpath_eval('./@type',aref(cols,i));
			   if (column_type <> '225' and  -- nvarchar
				       column_type <> '226' and  -- long nvarchar
				       column_type <> '125' and  -- varbinary
				       column_type <> '222' and  -- long varbinary
				       column_type <> '131' and  -- long varchar
				       column_type <> '230' and  -- long xml
							 column_name <> '_IDN' ) {

			     i2 := 0;
			     is_found := 0;
			     while (i2 < len2) {
			      fk_ref_name := aref(self.foreign_key_columns, i2+1);
			      if (column_name = fk_ref_name  and  aref(self.foreign_key_columns, i2+2) =  self.reference_table_value)
			        is_found := 1;
			      i2 := i2 +3;
			     }

			     if (is_found = 0) {
                              (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(column_name) );
                              (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(column_name));
			     }
			   }
			   i:= i +1;
			}
  		        (control as vspx_select_list).vsl_selected_inx := 0;
		     }
		    ]]></script>
				</v:before-data-bind>
			 </vm:events>

			</vm:control>
			<vm:raw>
			 <td>
				<table border="0">
				 <tr>
					<td>
					 <v:button action="submit" name="foreign_key_add_reference_column_command" value=">>" xhtml_style="width: 28px;"/>
					</td>
				 </tr>
				 <tr>
					<td>
					 <v:button action="submit" name="foreign_key_remove_reference_column_command" value="<<" xhtml_style="width: 28px;"/>
					</td>
				 </tr>
				</table>
			 </td>
			</vm:raw>
			<vm:control name="foreign_keys_reference_columns_control" type="select">
			 <vm:caption value="Reference Columns" align="top"/>
			 <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" xhtml_multiple="TRUE"/>
			 <vm:events>
				<v:before-data-bind>
				 <script><![CDATA[
		     if (self.mode = 'table_edit' and  self.table_editor_page ='4'  ) {
			    declare i, len integer;
			    declare table_name, path, column_name varchar;
			    declare cols any;
			    declare objs xml_tree;

			    table_name := self.reference_table_value;


			    len := length( self.foreign_key_columns);
			    i := 0;
			    (control as vspx_select_list).vsl_items := vector();
			    (control as vspx_select_list).vsl_item_values := vector();

			while (i < len) {
			     column_name := aref(self.foreign_key_columns,i + 1 );
			     if (aref(self.foreign_key_columns,i+2) = self.reference_table_value and  aref(self.foreign_key_columns,i) =  self.current_column_name ) {
                             (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(column_name) );
                             (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(column_name));
                     }
			   i:= i +3;
			}
  		        (control as vspx_select_list).vsl_selected_inx := 0;
		     }
		    ]]></script>
				</v:before-data-bind>
			 </vm:events>
			</vm:control>
		 </vm:row>

		 <vm:row>
			<vm:bgroup colspan="6" align="center">
		 <table border="0" width="100%">
			<tr>
			 <td align="center">
				<v:button action="submit" name="table_fk_review_command" value="Review">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='4' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						}
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
          declare path, table_name, parent_table  varchar;
          declare objs xml_tree;
			        declare res varchar;
		          declare difference xml_tree;

				  self.current_table := xddl_attach_fk_xml_tree(self.foreign_key_columns, self.current_table );

		      self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));

			    parent_table  :=  self.parent_table;

          if ( self.kind ='create' )  {
                table_name :=  self.table_name;
					      XMLAddAttribute(self.current_table, 2, 'name', table_name );
								 XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
            		self.edit_table_name.vc_data_bind (e);
          } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);


			        difference := xddl_diff(xddl_get_base(), self.current_table);
			        res := xddl_to_ddl(xddl_get_base(), xml_tree_doc(difference));
			        self.statements := res;
				      self.mode := 'preview_xddl_table';
				      self.table_name := table_name;
				      self.vc_data_bind(e);
				      return;

		       ]]></script>
					</v:on-post>
				</v:button>

				<v:button action="submit" name="table_fk_create_command" value="Create">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='4' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						 }
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
					    declare  table_name varchar;
				      self.current_table := xddl_attach_fk_xml_tree(self.foreign_key_columns, self.current_table );

              self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));
              if ( self.kind ='create' )  {
                 table_name :=  self.table_name;
	               XMLAddAttribute(self.current_table, 2, 'name', table_name );
								 XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
              } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);

	            self.wrong_entry := null;
	            if ( self.kind ='create' ) {
	               if (  table_name = '' or ( table_name <> '' and xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) ) {
	                  if (table_name = '')
	                     self.wrong_entry := sprintf ('Table name is empty.');
		                else
		                   self.wrong_entry := sprintf ('Table %s exist.', table_name);
	               }
	           }

	           if ( self.wrong_entry  is  null ) {
			      declare  result integer;
			      declare  check_errors any;
					  check_errors := vector();
					  result :=  xddl_check_constraints_validation (self.current_table, self.sid,  check_errors);
					  if (result < 0) {
					    self.exec_errors := check_errors;
					    self.mode := 'xddl_constraint_error';
							 self.vc_data_bind(e);
							 return;
					  }

	               self.exec_errors := xddl_execute_statements(self.current_table, self.statements );
	               if (length(self.exec_errors) = 0) {
	                     self.objects := xddl_attach_table_xml_tree(self.current_table, self.kind, self.objects);
                       self.mode := null;
                       self.page := '1';
	                     self.vc_data_bind(e);
	                     return;
	               } else {
	                    self.mode := 'xddl_execute_error';
	                    self.vc_data_bind(e);
	                    return;
	               }
	           }
		       ]]></script>
					</v:on-post>
				</v:button>
				<v:button action="submit" name="table_fk_edit_apply" value="Save">
						<v:before-render>
						 <script><![CDATA[
						 if ( self.mode = 'table_edit' and  self.table_editor_page ='4' ) {
						 if (self.table_name is null or  length(xpath_eval('//column', xml_tree_doc( self.current_table),0 ) ) = 0  )
							control.vc_enabled := 0;
						 else
						  control.vc_enabled := 1;
						 }
						]]></script>
						</v:before-render>
		      <v:on-post>
			     <script><![CDATA[
          declare path, table_name, parent_table  varchar;
          declare objs xml_tree;
				 self.current_table := xddl_attach_fk_xml_tree(self.foreign_key_columns, self.current_table );
          self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));
          if ( self.kind ='create' )  {
              table_name :=  self.table_name;
	            XMLAddAttribute(self.current_table, 2, 'name', table_name );
							XMLAddAttribute(self.current_table, 2, 'parent', self.parent_table );
          } else
                table_name :=  cast ( xpath_eval('/table/@name',self.current_table) as varchar);


	        self.wrong_entry := null;
	        if ( self.kind ='create' ) {
	               if (  table_name = '' or ( table_name <> '' and xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) ) {
	                  if (table_name = '')
	                     self.wrong_entry := sprintf ('Table name is empty.');
		                else
		                   self.wrong_entry := sprintf ('Table %s exist.', table_name);
	               }
	        }
					if (self.wrong_entry is null) {
			      declare  result integer;
			      declare  check_errors any;
					  check_errors := vector();
					  result :=  xddl_check_constraints_validation (self.current_table, self.sid,  check_errors);
					  if (result < 0) {
					    self.exec_errors := check_errors;
					    self.mode := 'xddl_constraint_error';
							 self.vc_data_bind(e);
							 return;
					  }

	            self.objects := xddl_attach_table_xml_tree( self.current_table, self.kind, self.objects);
              self.mode := null;
              self.page := '1';
	            self.vc_data_bind(e);
	            return;

					}
		       ]]></script>
					</v:on-post>
				</v:button>
				<v:button action="submit" name="table_fk_edit_cancel" value="Cancel">
		      <v:on-post>
			     <script><![CDATA[
							self.mode := null;
							self.page := '1';
							self.vc_data_bind(e);
							return;
		       ]]></script>
					</v:on-post>
				</v:button>
			 </td>
			</tr>
		 </table>
			</vm:bgroup>
		 </vm:row>
		</vm:form>

</v:template>
  </td>
  </tr>
</table>

  </td>
  </tr>
</table>



	 </v:template>

	 <v:template name="column_exist_template" type="simple" condition="( self.mode = 'column_exist' )">
		<vm:form name="column_exist_xddl_form" type="simple" method="POST" action="">
<!--
		 <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
		 <input type="hidden" name="column_name" value="<?= get_keyword('column_name', control.vc_page.vc_event.ve_params)?>" />
		 <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
		 <input type="hidden" name="kind" value="<?= get_keyword('kind', control.vc_page.vc_event.ve_params)?>" />
-->
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
			 self.mode := 'table_edit';
			 self.vc_data_bind(e);
			 return;

		    http_request_status ('HTTP/1.1 302 Found');
		    http_header (sprintf('Location: xddl.vspx?mode=table_edit&kind=%s&sid=%s&realm=%s&table_name=%s\r\n', self.kind, self.sid ,self.realm, get_keyword('table_name', params)));
		    return;
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp http(sprintf('You cannot create column <b>%s</b> for <b>%s</b>  table. It already exists.',self.column_name , self.table_name ) );
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="column_exist_command" value="Ok" xhtml_style="width: 56px;"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="foreign_key_dialog_template" type="simple" enabled="--case when ( self.mode = 'foreign_key_dialog' ) then 1 else 0 end">
	 </v:template>

	 <v:template name="template_edit_view" type="simple" enabled="--case when ( self.page = 'view_dialog_edit' ) then 1 else 0 end">
		<vm:form name="xddl_edit_view_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
		         declare view_name varchar;
		         view_name :=  self.table_name;
		      if (get_keyword('xddl_view_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := '2';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('xddl_view_apply_command',params) is not null) {
		        self.views :=  XMLUpdate(xml_tree_doc(self.views),sprintf('/views/view[@name=\'%s\']/text/text()', view_name ),  get_keyword('xddl_view_code_area',params)   );
		     	  XMLAddAttribute(xpath_eval(sprintf('/views/view[@name=\'%s\']', view_name ), self.views), 2, 'mode', 'changed' );

		      self.mode := null;
		      self.page := '2';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:control name="xddl_view_code_area" type="textarea">
			 <vm:attrs xhtml_style="height:320px; width:100%"/>
			 <vm:caption value="Statement" pos="top"/>
			 <vm:events>
				<v:after-data-bind>
				 <script><![CDATA[
			if ( self.page = 'view_dialog_edit') {
				declare code_text varchar;
				code_text :=  get_keyword('view_name', control.vc_page.vc_event.ve_params);
				control.ufl_value :=  xpath_eval( sprintf('/views/view[@name=\'%s\']/text/text()', code_text ) , self.views );
			}
		    ]]></script>
				</v:after-data-bind>
			 </vm:events>

			</vm:control>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_view_apply_command" value="Apply"/>
			 <v:button action="submit" name="xddl_view_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_create_view" type="simple" enabled="--case when ( self.mode = 'view_dialog_create' ) then 1 else 0 end">
		<vm:form name="xddl_create_view_form" type="simple" method="POST" action="">

		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
		         declare view_name, columns, rest_code, total, path varchar;
		         declare view_xml xml_tree;
		      if (get_keyword('xddl_view_create_cancel_command',params) is not null) {

		      self.mode := null;
		      self.page := '2';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('xddl_view_create_apply_command',params) is not null) {
				view_name := get_keyword('xddl_view_name', params);
				columns := get_keyword('xddl_view_columns', params);
				rest_code := get_keyword('xddl_view_create_code', params);
				total := sprintf('create view %s (%s) as %s', view_name, columns, rest_code );
				path := sprintf('<view name=\"%s\" mode="changed"/>', view_name);
				view_xml := xpath_eval('/view', xml_tree_doc(path));
    				  XMLAppendChildren(view_xml , XMLELEMENT('text', null,total));
   				  XMLAppendChildren(xpath_eval( '/views', self.views ) , view_xml);

		      self.mode := null;
		      self.page := '2';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>

		 <vm:row>
			<vm:raw>
			 <td>Create View
			 </td>
			 <td>
				<v:text name="xddl_view_name"></v:text>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:raw>
			 <td colspan="2" width="100%">
				<v:text name="xddl_view_columns" value="'columns_comma_list'" xhtml_style="width:100%"></v:text>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:container colspan="2" width="100%">
			 <vm:row>
				<vm:control name="xddl_view_create_code" type="textarea">
				 <vm:attrs xhtml_style="height:600px; width:100%"  />
				 <vm:caption value="As" pos="top"/>
				 <vm:events>
					<v:after-data-bind>
					 <script><![CDATA[
			if (self.mode = 'view_dialog_create' and get_keyword('entry', control.vc_page.vc_event.ve_params) is not null) {
				control.ufl_value :=  'SELECT\nFROM';
			}
		    ]]></script>
					</v:after-data-bind>
				 </vm:events>
				</vm:control>
			 </vm:row>
			</vm:container>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_view_create_apply_command" value="Apply"/>
			 <v:button action="submit" name="xddl_view_create_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_create_procedure" type="simple" enabled="--case when ( self.mode = 'procedure_dialog_create' ) then 1 else 0 end">
		<vm:form name="xddl_create_procedure_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
		         declare procedure_name, columns, returns_value, rest_code, total, path varchar;
		         declare procedure_xml xml_tree;
		      if (get_keyword('xddl_procedure_create_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := '3';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=3&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('xddl_procedure_create_apply_command',params) is not null) {
				procedure_name := get_keyword('xddl_procedure_name', params);
				columns := get_keyword('xddl_procedure_columns', params);
				returns_value := get_keyword('xddl_procedure_returns', params);
				rest_code := get_keyword('xddl_procedure_create_code', params);
				total := sprintf('create procedure %s (%s) ', procedure_name, columns);
				if  (length(returns_value) > 0)
						total := sprintf('%s returns %s',  total,  returns_value);
			     total := sprintf('%s {\n%s\n}',  total,  rest_code);

				path := sprintf('<procedure name=\"%s\"/>', procedure_name);
				procedure_xml := xpath_eval('/procedure', xml_tree_doc(path));
    				XMLAppendChildren(procedure_xml , XMLELEMENT('text', null,total));
   				XMLAppendChildren(xpath_eval( '/procedures', self.procedures ) , procedure_xml);
		      self.mode := null;
		      self.page := '3';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=3&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>

		 <vm:row>
			<vm:raw>
			 <td>Create Procedure
			 </td>
			 <td>
				<v:text name="xddl_procedure_name"></v:text>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:raw>
			 <td colspan="2" width="100%">
				<v:text name="xddl_procedure_columns" value="'arguments_comma_list'" xhtml_style="width:100%"></v:text>
			 </td>
			</vm:raw>
		 </vm:row>

		 <vm:row>
			<vm:raw>
			 <td>returns
			 </td>
			 <td>
				<v:text name="xddl_procedure_returns"></v:text>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:container colspan="2" width="100%">
			 <vm:row>
				<vm:control name="xddl_procedure_create_code" type="textarea">
				 <vm:attrs xhtml_style="height:600px; width:100%"  />
				 <vm:caption value="Procedure's body" pos="top"/>
				</vm:control>
			 </vm:row>
			</vm:container>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_procedure_create_apply_command" value="Apply"/>
			 <v:button action="submit" name="xddl_procedure_create_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_edit_procedure" type="simple" enabled="--case when ( self.page = 'procedures_dialog_edit' ) then 1 else 0 end">
		<vm:form name="xddl_edit_procedure_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
		         declare procedure_name varchar;
		         procedure_name :=  self.table_name;
		      if (get_keyword('xddl_procedure_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := '3';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=3&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('xddl_procedure_apply_command',params) is not null) {
		        		self.procedures :=  XMLUpdate(xml_tree_doc(self.procedures),sprintf('/procedures/procedure[@name=\'%s\']/text/text()', procedure_name ),  get_keyword('xddl_procedure_code_area',params)   );
		     	  XMLAddAttribute(xpath_eval(sprintf('/procedures/procedure[@name=\'%s\']', procedure_name ), self.procedures), 2, 'mode', 'changed' );
		      self.mode := null;
		      self.page := '3';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=3&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:control name="xddl_procedure_code_area" type="textarea">
			 <vm:attrs xhtml_style="height:600px; width:100%"/>
			 <vm:caption value="SQL statement" pos="top"/>
			 <vm:events>
				<v:after-data-bind>
				 <script><![CDATA[
			if (self.page = 'procedures_dialog_edit') {
				declare code_text varchar;
				code_text :=  get_keyword('procedure_name', control.vc_page.vc_event.ve_params);
				control.ufl_value :=  xpath_eval( sprintf('/procedures/procedure[@name=\'%s\']/text/text()', code_text ) , self.procedures );
			}
		    ]]></script>
				</v:after-data-bind>
			 </vm:events>
			</vm:control>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_procedure_apply_command" value="Apply"/>
			 <v:button action="submit" name="xddl_procedure_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>


	 <v:template name="template_preview" type="simple" enabled="--case when ( self.mode = 'preview_xddl_table' ) then 1 else 0 end">
		<vm:form name="xddl_preview_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
		      if (get_keyword('xddl_perview_table_apply_command',params) is not null) {
		      self.mode := 'table_edit';
		      self.vc_data_bind(e);
		      return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp http(sprintf('The following statement will be executed against current database.' ));
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:control name="xddl_perview_table_statements_area" type="textarea">
			 <vm:attrs xhtml_style="height:320px; width:100%" xhtml_readonly="readonly"/>
			 <vm:caption value="SQL statements" pos="top"/>
			 <vm:events>
				<v:after-data-bind>
				 <script><![CDATA[
			if (self.mode = 'preview_xddl_table') {
				control.ufl_value := self.statements;
			}
		    ]]></script>
				</v:after-data-bind>
			 </vm:events>
			</vm:control>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_perview_table_apply_command" value="Back"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_save" type="simple" enabled="--case when ( self.mode = 'xddl_save' ) then 1 else 0 end">
		<vm:form name="xddl_save_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[

                  declare ctx_value, user_perm, save_path, file_perms, folders_message  varchar;
                  declare result, xq_res any;
                  declare doc, doc_base,xq, res_string  varchar;
                  declare cnt, num integer;
                  declare err_sqlstate, err_msg, rel_path varchar;
                  declare m_dta any;
                  declare n, len, dav_folder_owner, dav_folder_group  integer;
                  declare tmp varchar;
                  declare final_xml, tmp_xml xml_tree;
	      	  if (get_keyword('xddl_cancel_command',params) is not null) {

		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

		    http_request_status ('HTTP/1.1 302 Found');
		    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back,self.sid ,self.realm));
		    return;
		   }
		  if (get_keyword('xddl_save_command',params) is not null) {

			save_path := get_keyword('save_path',params);


			if (save_path = '') {
			   self.wrong_entry := 'Path to save result in is empty. Enter a  correct path.';
			   goto try_again;
			} else if ( exists(select 1 from WS.WS.SYS_DAV_RES where RES_FULL_PATH = save_path) ) {
			    self.wrong_entry := 'Path to save result does exist. Enter another path.';

--                          http_request_status ('HTTP/1.1 302 Found');
--	                    http_header (sprintf('Location: xddl.vspx?mode=xddl_save&sid=%s&realm=%s\r\n',self.sid ,self.realm));
--                          return;
                              goto try_again;
			}   else {
                           if ( dav_path_validate(save_path,dav_folder_owner, dav_folder_group, file_perms, folders_message) <> 1 ) {
                              self.wrong_entry := sprintf('Path on file to store into is invalid. Path validation was failed: "%s"', folders_message);
                              goto try_again;
                           } else if ( dav_check_permissions(connection_get('vspx_user'), file_perms,'010' ,dav_folder_owner, dav_folder_group, folders_message) <> 1) {
	                      self.wrong_entry := sprintf('You are unable to store this file: "%s"', folders_message);
	                       goto try_again;
                           }
                        }
			user_perm:='';
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_r') as vspx_field).ufl_selected + 48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_w') as vspx_field).ufl_selected+48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_x') as vspx_field).ufl_selected+48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_r') as vspx_field).ufl_selected+48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_w') as vspx_field).ufl_selected+48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_x') as vspx_field).ufl_selected+48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_r') as vspx_field).ufl_selected+48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_w') as vspx_field).ufl_selected+48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_x') as vspx_field).ufl_selected+48));
			user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_4_index') as vspx_field).ufl_selected+48));


			final_xml := XMLELEMENT('database', null, xpath_eval('/tables',  self.objects),  xpath_eval('/views',  self.views), xpath_eval('/procedures',  self.procedures) );


			result := string_output();
			http_value( final_xml, 0, result);


			DAV_RES_UPLOAD (get_keyword('save_path',params),  string_output_string (result ) , 'text/xml',user_perm, 'dav', 'dav','dav','dav');
		  self.xddl_source_type := 2;
	    self.xddl_source_name :=  get_keyword('save_path',params);

		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

		    http_request_status ('HTTP/1.1 302 Found');
		    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back, self.sid ,self.realm));
		    return;
		    try_again: ;
		   }

		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6" align="center">
				<?vsp
          if (self.wrong_entry is null)
            http('Specify a path on file to store in. ' );
                                   else {
                                         http(sprintf('<br><b>%s</b></br>', self.wrong_entry));
           self.wrong_entry := null;
                 }
                                ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:raw>
			 <td> Store into
				<span class="attention_marker">*</span>
			 </td>
			 <td>
				<v:text name="save_path" xhtml_size="40"/>
				<v:browse-button name="xml_path" action="browse" selector="/vspx/browser/dav_browser.vsp" child-window-options="resizable=yes, status=no, menubar=no, scrollbars=no, width=640, height=400" value="Browse..." browser-type="dav" browser-mode="RES" browser-xfer="DOM" browser-list="1" browser-current="1" browser-filter="*">
				 <v:field type="PATH" name="save_path"/>
				</v:browse-button>
			 </td>
			</vm:raw>
			<vm:control name="user_permitions" type="checkbox" dir="horiz">
			 <vm:attrs width="0" class="SubData" border="0"/>
			 <vm:caption value="Permissions" align="left"/>
			 <vm:items left-margin="12" right-margin="12" >
				<vm:group name="own" label="Owner">
				 <vm:item name="r" value="1" label="r" initial-checked="1">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				 <vm:item name="w" value="1" label="w" initial-checked="1">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				 <vm:item name="x" value="1" label="x" initial-checked="1">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				</vm:group>
				<vm:group name="group" label="Group">
				 <vm:item name="r" value="1" label="r">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				 <vm:item name="w" value="1" label="w">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				 <vm:item name="x" value="1" label="x">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				</vm:group>
				<vm:group name="other" label="Users">
				 <vm:item name="r" value="1" label="r">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				 <vm:item name="w" value="1" label="w">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				 <vm:item name="x" value="1" label="x">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				</vm:group>
				<vm:group label="Index">
				 <vm:item name="index" value="1" label="t">
					<vm:events>
					 <v:after-data-bind>
						<v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
					 </v:after-data-bind>
					</vm:events>
				 </vm:item>
				</vm:group>
			 </vm:items>
			</vm:control>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_save_command" value="Save" xhtml_style="width: 56px;"/>
			 <v:button action="submit" name="xddl_cancel_command" value="Cancel" xhtml_style="width: 56px;"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_load" type="simple" enabled="--case when ( self.mode = 'xddl_load' ) then 1 else 0 end">
		<vm:form name="xddl_load_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
			declare load_path, xml_file, folders_message varchar;

	      	  if (get_keyword('xddl_load_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

		    http_request_status ('HTTP/1.1 302 Found');
		    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back, self.sid ,self.realm));
		    return;
		   }

		  if (get_keyword('xddl_load_apply_command',params) is not null) {
		   load_path := get_keyword('load_path',params);

                    if (load_path = '') {
                        self.wrong_entry := 'Path on file to load from was not  specified.';
			goto try_again;
                    } else if (check_dav_file_permissions (load_path, connection_get('vspx_user'), '100', folders_message) <> 1  ) {
                       self.wrong_entry := sprintf('Path on file to load from is invalid:  "%s".',folders_message);
		       goto try_again;
		    }

		   select blob_to_string (RES_CONTENT) into xml_file from WS.WS.SYS_DAV_RES where RES_FULL_PATH = load_path;
			{
				declare exit handler for sqlstate '*'
				{
					self.wrong_entry := sprintf(' Error. DAV resource %s has  no valid  xml  format.', load_path);

					http_request_status ('HTTP/1.1 302 Found');
					http_header (sprintf('Location: xddl.vspx?mode=xddl_load&sid=%s&realm=%s\r\n',self.sid ,self.realm));
					return;
				};



			}

			if ( xpath_eval('//tables',xml_tree_doc (xml_file ))  is not null)
		 		    self.objects := xpath_eval('/tables',   xml_cut ( xpath_eval('//tables',xml_tree_doc (xml_file ))) );
		 	else
		 		self.objects := xpath_eval('/tables', xml_tree_doc('<tables/>'));
		 	if (xpath_eval('//views',xml_tree_doc (xml_file )) is not null )
		 		    self.views := xpath_eval('/views',   xml_cut ( xpath_eval('//views',xml_tree_doc (xml_file ))) );
		 	else
				 	self.views := xpath_eval('/views', xml_tree_doc('<views/>'));
		 	if (xpath_eval('//procedures',xml_tree_doc (xml_file )) is not null )
		 		    self.procedures := xpath_eval('/procedures',   xml_cut ( xpath_eval('//procedures',xml_tree_doc (xml_file ))) );
		 	else
		 		self.procedures :=  xpath_eval('/procedures', xml_tree_doc('<procedures/>'));

	         		self.xddl_source_type := 2;
	         		self.xddl_source_name :=  load_path;
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

		    http_request_status ('HTTP/1.1 302 Found');
		    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n',self.page_to_go_back, self.sid ,self.realm));
		    return;
		    try_again: ;
		   }

		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6" align="center">
				<?vsp
             if (self.wrong_entry is null)
               http('Specify a path of xddl file to load from. ' );
                                     else {
                                           http(sprintf('<br><b>%s</b></br>', self.wrong_entry));
             self.wrong_entry := null;
                    }
                                       ?>
			 </td>
			</vm:raw>
		 </vm:row>



		 <vm:row>
			<vm:raw>
			 <td> Load From
				<span class="attention_marker">*</span>
			 </td>
			 <td>
				<v:text name="load_path" xhtml_size="40"/>
				<v:browse-button name="load_xml_path" action="browse" selector="/vspx/browser/dav_browser.vsp" child-window-options="resizable=yes, status=no, menubar=no, scrollbars=no, width=640, height=400" value="Browse..." browser-type="dav" browser-mode="RES" browser-xfer="DOM" browser-list="1" browser-current="1" browser-filter="*">
				 <v:field type="PATH" name="load_path"/>
				</v:browse-button>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_load_apply_command" value="Load" xhtml_style="width: 56px;"/>
			 <v:button action="submit" name="xddl_load_cancel_command" value="Cancel" xhtml_style="width: 56px;"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>
	 <v:template name="template_init" type="simple" enabled="--case when ( self.mode = 'init_xddl' ) then 1 else 0 end">
		<vm:form name="init_xddl_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
			 declare path, table_name, column_name  varchar;
		      if (get_keyword('init_cancel_command',params) is not null) {

		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n',self.page_to_go_back, self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('init_apply_command',params) is not null) {
		            self.objects := xddl_get_tables(null);
				  self.views := xddl_get_views(null);
				  self.procedures := xddl_get_procedures(null);

		         		self.xddl_source_type := 1;

		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back, self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp http('You are about to reload xddl data from the database. All done changes will be lost. Are you sure?' );
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="init_apply_command" value="Apply"/>
			 <v:button action="submit" name="init_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_table_drop" type="simple" enabled="--case when ( self.mode = 'xddl_table_drop' ) then 1 else 0 end">
		<vm:form name="xddl_table_drop_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
			 declare path, table_name, column_name  varchar;
		      if (get_keyword('drop_table_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := '1';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=1&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('drop_table_apply_command',params) is not null) {
		         objs  := xpath_eval ( sprintf('/tables/table[@name=\'%s\']',self.table_name), self.objects);
		         if (self.kind = 'drop' )
		         		XMLAddAttribute(objs , 2, 'drop', 'true');
		         else if (self.kind = 'undrop' )
		         		XMLAddAttribute(objs , 2, 'drop', 'false');

		      self.mode := null;
		      self.page := '1';
		      self.vc_data_bind(e);
		      return;


			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=1&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp
          if (self.kind = 'drop' )
           http(sprintf ('You are about to drop <b>%s</b> table from the edit buffer.  Are you sure?', self.table_name ));
          else if (self.kind = 'undrop' )
            http(sprintf ('You are about to undrop <b>%s</b> table from the edit buffer.  Are you sure?', self.table_name ));

        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="drop_table_apply_command" value="Apply"/>
			 <v:button action="submit" name="drop_table_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>


	 <v:template name="template_view_drop" type="simple" enabled="--case when ( self.mode = 'xddl_view_drop' ) then 1 else 0 end">
		<vm:form name="xddl_view_drop_form" type="simple" method="POST" action="">
		 <input type="hidden" name="view_name" value="<?= get_keyword('view_name', control.vc_page.vc_event.ve_params)?>" />
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
			 declare path, view_name, column_name  varchar;
		      if (get_keyword('drop_view_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := '2';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('drop_view_apply_command',params) is not null) {
		      	view_name := get_keyword('view_name', params);
		         objs  := xpath_eval ( sprintf('/views/view[@name=\'%s\']',view_name), self.views);
		         if (self.kind = 'drop' )
		         		XMLAddAttribute(objs , 2, 'drop', 'true');
		         else if (self.kind = 'undrop' )
		         		XMLAddAttribute(objs , 2, 'drop', 'false');
		      self.mode := null;
		      self.page := '2';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=2&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp
          if (self.kind = 'drop' )
           http(sprintf ('You are about to drop <b>%s</b> view from the edit buffer.  Are you sure?', get_keyword('view_name', control.vc_page.vc_event.ve_params) ));
          else if (self.kind = 'undrop' )
            http(sprintf ('You are about to undrop <b>%s</b> view from the edit buffer.  Are you sure?', get_keyword('view_name', control.vc_page.vc_event.ve_params) ));

        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="drop_view_apply_command" value="Apply"/>
			 <v:button action="submit" name="drop_view_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_procedure_drop" type="simple" enabled="--case when ( self.mode = 'xddl_procedure_drop' ) then 1 else 0 end">
		<vm:form name="xddl_procedure_drop_form" type="simple" method="POST" action="">
		 <input type="hidden" name="procedure_name" value="<?= get_keyword('procedure_name', control.vc_page.vc_event.ve_params)?>" />
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
			 declare path, procedure_name, column_name  varchar;
		      if (get_keyword('drop_procedure_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := '3';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=3&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('drop_procedure_apply_command',params) is not null) {
		      	procedure_name := get_keyword('procedure_name', params);
		         objs  := xpath_eval ( sprintf('/procedures/procedure[@name=\'%s\']',procedure_name), self.procedures);
		         if (self.kind = 'drop' )
		         		XMLAddAttribute(objs , 2, 'drop', 'true');
		         else if (self.kind = 'undrop' )
		         		XMLAddAttribute(objs , 2, 'drop', 'false');

                      self.mode := null;
		      self.page := '3';
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=3&sid=%s&realm=%s\r\n',self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp
          if (self.kind = 'drop' )
           http(sprintf ('You are about to drop <b>%s</b> procedure from the edit buffer.  Are you sure?', get_keyword('procedure_name', control.vc_page.vc_event.ve_params) ));
          else if (self.kind = 'undrop' )
            http(sprintf ('You are about to undrop <b>%s</b> procedure from the edit buffer.  Are you sure?', get_keyword('procedure_name', control.vc_page.vc_event.ve_params) ));

        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="drop_procedure_apply_command" value="Apply"/>
			 <v:button action="submit" name="drop_procedure_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>


	 <v:template name="template_exec" type="simple" enabled="--case when ( self.mode = 'exec_xddl' ) then 1 else 0 end">
		<vm:form name="xddl_exec_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
		      if (get_keyword('xddl_execute_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n',self.page_to_go_back, self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('xddl_execute_apply_command',params) is not null) {

			declare err_sqlstate, err_msg, rel_path varchar;
			declare m_dta any;
                        declare  xq_res any;
		        declare res, statement varchar;
			declare flag, pos integer;

			err_sqlstate := '00000';
			res := get_keyword('xddl_statements_area',params);
			res := trim(res);
			self.exec_errors := vector();
			if (res is not null and length(res) > 0) {
			   flag := 1;
			   while(flag = 1 and length(res) > 0) {
			      pos := locate(';',res);
			      if (pos > 0) {
			        statement := substring(res, 1,  pos -1);
				      if (locate(';', substring(res, pos + 1, length(res) - pos)) = 0 )
				         flag := 0;
				      else
				         res := substring(res, pos + 1, length(res) - pos);
			      } else {
			         statement := res;
				       flag := 0;
			      }

			      declare exit handler for sqlstate '*' {
				       err_msg := sprintf(' Execution Error: %s', __SQL_MESSAGE);
				       self.exec_errors := vector_concat( self.exec_errors, vector(statement, err_msg));
			      };
			      exec (statement, err_sqlstate, err_msg, vector(),100, m_dta, xq_res);
			      if ('00000' <> err_sqlstate)    {
			         err_msg := sprintf(' Execution Error: %s', err_msg);
				       self.exec_errors := vector_concat( self.exec_errors, vector(statement, err_msg));
			      }
			   }
			}
			if (length(self.exec_errors) = 0 ) {
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

			  http_request_status ('HTTP/1.1 302 Found');
			  http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back, self.sid ,self.realm));
			  return;
			} else {
		      self.mode := 'xddl_execute_error';
		      self.vc_data_bind(e);
		      return;

			  http_request_status ('HTTP/1.1 302 Found');
			  http_header (sprintf('Location: xddl.vspx?mode=xddl_execute_error&sid=%s&realm=%s\r\n', self.sid ,self.realm));
        		  return;
			}
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp http(sprintf('You are about to execute the following statements against current database. This may damage database structure and destroy data. Are you sure?' ));
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:control name="xddl_statements_area" type="textarea">
			 <vm:attrs xhtml_style="height:600px; width:100%"/>
			 <vm:caption value="SQL statements" pos="top"/>
			 <vm:events>
				<v:after-data-bind>
				 <script><![CDATA[
			if (self.mode = 'exec_xddl') {
				control.ufl_value := self.statements;
			}
		    ]]></script>
				</v:after-data-bind>
			 </vm:events>

			</vm:control>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_execute_apply_command" value="Apply"/>
			 <v:button action="submit" name="xddl_execute_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_xddl_execute_error" type="simple" enabled="--case when ( self.mode = 'xddl_execute_error' ) then 1 else 0 end">
		<vm:form name="xddl_execute_error_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

		    http_request_status ('HTTP/1.1 302 Found');
		    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back, self.sid ,self.realm));
		    return;
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp
        declare i, len integer;
        http('<table border="1" cellspacing="0">');
        http('<caption><b>List of error(s) appeared at the statements execution.<b></caption>');
        len := length(self.exec_errors);
        i := 0;
                                  http('<tr>');
          http('<td align="center"><b>');
          http('Text of statement');
          http('</b></td>');
          http('<td align="center"><b>');
          http('Error received');
          http('</b></td>');
          http('</tr>');
        while (i < len) {
          http('<tr>');
          http('<td>');
          http(aref(self.exec_errors, i));
          http('</td>');
          http('<td>');
          http(aref(self.exec_errors, i+1));
          http('</td>');
          http('</tr>');
          i := i + 2;
        }
        self.exec_errors := vector();
        http('</table>');
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_execute_error_command" value="Ok" xhtml_style="width: 56px;"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_xddl_constraints_error" type="simple" enabled="--case when ( self.mode = 'xddl_constraint_error' ) then 1 else 0 end">
		<vm:form name="xddl_constraint_error_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		      self.mode := 'table_edit';
		      self.vc_data_bind(e);
		      return;
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp
        declare i, len integer;
        http('<table border="1" cellspacing="0">');
        http('<caption><b>List of error(s) appeared at the check constraint validation.<b></caption>');
        len := length(self.exec_errors);
        i := 0;
                                  http('<tr>');
          http('<td align="center"><b>');
          http('Text of constraint condition');
          http('</b></td>');
          http('<td align="center"><b>');
          http('Error received');
          http('</b></td>');
          http('</tr>');
        while (i < len) {
          http('<tr>');
          http('<td>');
          http(aref(self.exec_errors, i));
          http('</td>');
          http('<td>');
          http(aref(self.exec_errors, i+1));
          http('</td>');
          http('</tr>');
          i := i + 2;
        }
        self.exec_errors := vector();
        http('</table>');
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_constraint_error_command" value="Ok" xhtml_style="width: 56px;"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_exec_xddl_denied" type="simple" enabled="--case when ( self.mode = 'exec_xddl_denied' ) then 1 else 0 end">
		<vm:form name="exec_xddl_denied_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
               declare table_name varchar;
               table_name := self.table_name;
                if (get_keyword('exec_xddl_denied_remove_command',params) ) {
                 		self.objects := XMLUpdate(self.objects,sprintf('/tables/table[@name = \'%s\']',table_name), null);
                } else
                if (get_keyword('exec_xddl_denied_update_command',params) ) {
	                 declare obj xml_tree;
	                     obj := xml_cut( xpath_eval(sprintf('/tables/table[@name = \'%s\']',table_name),  xddl_get_tables(sprintf('/table[@name = \'%s\']',table_name)) ) );
                 			self.objects := XMLUpdate(self.objects,sprintf('/tables/table[@name = \'%s\']',table_name), obj);
                }
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

		    http_request_status ('HTTP/1.1 302 Found');
		    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back,  self.sid ,self.realm));
		    return;
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp http(sprintf('Table <b>%s</b> may not be modified, because it has already been modified by other parties since you loaded the current xddl file.', self.table_name ) );
        http('<br/>You may:<br/>- Remove this table from tables edit buffer, or <br/>- Update description of the given table, or <br/>- Do nothing.<br/>In any case you will be forwarded back to the list of db objects and execution will be  canceled.');
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="exec_xddl_denied_remove_command" value="Remove"/>
			 <v:button action="submit" name="exec_xddl_denied_update_command" value="Update"/>
			 <v:button action="submit" name="exec_xddl_denied_cancel_command" value="Continue"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <v:template name="template_revert" type="simple" enabled="--case when ( self.mode = 'revert_edit_buffer' ) then 1 else 0 end">
		<vm:form name="xddl_revert_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		         declare objs xml_tree;
		      if (get_keyword('xddl_revert_cancel_command',params) is not null) {
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n',self.page_to_go_back , self.sid ,self.realm));
			    return;
		      }
		      if (get_keyword('xddl_revert_apply_command',params) is not null) {

		          if (self.xddl_source_type =  1)
		            self.objects := xddl_get_tables(null);
				else if (self.xddl_source_type = 2) {
					declare load_path, xml_file varchar;
				   	load_path := self.xddl_source_name;
			   		select blob_to_string (RES_CONTENT) into xml_file from WS.WS.SYS_DAV_RES where RES_FULL_PATH = load_path;
					{
						declare exit handler for sqlstate '*'
						{
							self.wrong_entry := sprintf(' Error. DAV resource %s has  no valid  xml  format.', load_path);

							http_request_status ('HTTP/1.1 302 Found');
							http_header (sprintf('Location: xddl.vspx?mode=xddl_load&sid=%s&realm=%s\r\n',self.sid ,self.realm));
							return;
						};
					}
 		    			self.objects := xml_tree_doc (xml_file );
				}
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

			    http_request_status ('HTTP/1.1 302 Found');
			    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back , self.sid ,self.realm));
			    return;
		      }
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp
              if (self.xddl_source_type =  1)
              http(sprintf('You are about to revert edit buffer, loaded from current database.  Are you sure?' ));
        else if (self.xddl_source_type = 2)
              http(sprintf('You are about to revert edit buffer, loaded from file <b>%s</b>.  Are you sure?', self.xddl_source_name ));
        ?>
			 </td>
			</vm:raw>
		 </vm:row>

		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_revert_apply_command" value="Apply"/>
			 <v:button action="submit" name="xddl_revert_cancel_command" value="Cancel"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>

	 <!-- DB Objects chooser -->
	 <v:template name="template_xddl_chooser" type="simple" enabled="--case when self.mode = 'xddl_chooser' then 1 else 0 end" >
		<v:before-data-bind>
		 <script><![CDATA[
		    if (self.mode = 'xddl_chooser' ) {
						self.chooser_browse_tables,
						self.chooser_browse_views,
						self.chooser_browse_procedures );

						self.chosen_objects := vector();
						self.chosen_existing_objects := vector();
					}
						self.datasource_entry := 0;
		     ]]></script>
		</v:before-data-bind>

		<v:form name="chooser_filter_form" type="simple" method="POST" action="">
		 <v:on-post>
			<v:script><![CDATA[
            if ( get_keyword('chooser_filter_apply', params) is not null ) {
              self.chooser_catalog := self.chooser_catalog_list.ufl_value;
              self.chooser_schema := self.chooser_schema_list.ufl_value;
              self.chooser_mask := case when self.chooser_mask_filter.ufl_value='' then '%' else self.chooser_mask_filter.ufl_value end;
            } else  if ( get_keyword('chooser_filter_reset', params) is not null ) {
              self.chooser_catalog := '%';
              self.chooser_schema := '%';
              self.chooser_mask := '%';
            }

            self.chooser_browse_tables :=  self.tables_en.ufl_selected;
            self.chooser_browse_views :=  self.views_en.ufl_selected;
            self.chooser_browse_procedures :=  self.procs_en.ufl_selected;

						self.pages_data := vector();

--						self.chooser_catalog_list.vc_data_bind(e);
--						self.chooser_schema_list.vc_data_bind(e);
						self.datasource1.vc_data_bind(e);
						self.chooser_ds.vc_data_bind(e);
--						self.vc_data_bind(e);
						return;
        ]]></v:script>
		 </v:on-post>
		 <table width="100%">
			<tr>
			 <td>Catalog</td>
			 <td>
				<v:data-list name="chooser_catalog_list"
                     sql="SELECT distinct name_part (T_NAME, 0) AS cat_name from DB.DBA.XDDL_TABLES UNION SELECT distinct name_part (SP_NAME, 0) from DB.DBA.XDDL_PROCEDURES ORDER BY cat_name"
                     key-column="cat_name" value-column="cat_name" defvalue="--self.chooser_catalog">
				 <v:after-data-bind>
					<script><![CDATA[
												(control as vspx_select_list).vsl_items :=  vector_concat (vector('All Catalogs'), (control as vspx_select_list).vsl_items);
												(control as vspx_select_list).vsl_item_values := vector_concat ( vector('%'), (control as vspx_select_list).vsl_item_values);
												control.vs_set_selected();
								 ]]></script>
				 </v:after-data-bind>
				</v:data-list>

			 </td>
			 <td>Mask</td>
			 <td>
				<v:text name="chooser_mask_filter"   xhtml_style="width: 200px;"  value="--self.chooser_mask">
				</v:text>
			 </td>
			 <td rowspan="2">
				<table>
				 <tr>
					<td>
					 <v:check-box name="tables_en" initial-checked="--self.chooser_browse_tables"/>
Show Tables
					</td>
				 </tr>
				 <tr>
					<td>
					 <v:check-box name="views_en" initial-checked="--self.chooser_browse_views"/>
Show Views
					</td>
				 </tr>
				 <tr>
					<td>
					 <v:check-box name="procs_en" initial-checked="--self.chooser_browse_procedures"/>
Show Procedures
					</td>
				 </tr>
				</table>
			 </td>
			 <td>
				<v:button action="submit" name="chooser_filter_apply" value="Filter" xhtml_style="width: 56px; height: 24px;"/>
			 </td>
			</tr>
			<tr>
			 <td>Schema</td>
			 <td>
				<v:data-list name="chooser_schema_list"
                sql="SELECT distinct name_part (T_NAME, 1) as sch_name from DB.DBA.XDDL_TABLES  UNION SELECT distinct name_part (SP_NAME, 1) from DB.DBA.XDDL_PROCEDURES ORDER BY sch_name"
                             key-column="sch_name" value-column="sch_name" defvalue="--self.chooser_schema">
				 <v:after-data-bind>
					<script><![CDATA[
												(control as vspx_select_list).vsl_items :=  vector_concat (vector('All Schemas'), (control as vspx_select_list).vsl_items);
												(control as vspx_select_list).vsl_item_values := vector_concat ( vector('%'), (control as vspx_select_list).vsl_item_values);
												control.vs_set_selected();
									]]></script>
				 </v:after-data-bind>
				</v:data-list>
			 </td>
			 <td align="right" colspan="2"></td>
			 <td>
				<v:button action="submit" name="chooser_filter_reset" value="Reset" xhtml_style="width: 56px; height: 24px;"/>
			 </td>
			</tr>
		 </table>
		</v:form>
		<!--
				<v:expression> <![CDATA[ select T_NAME,\'T\' as t_key from xddl_tables where upper(name_part (T_NAME, 0)) like upper(:chooser_catalog) and upper(name_part (T_NAME, 1)) like upper(:chooser_schema) and upper(name_part (T_NAME, 2)) like upper(:chooser_mask) and :chooser_browse_tables = 1
					union select V_NAME, \'V\' as v_key from sys_views where upper(name_part (V_NAME, 0)) like upper(:chooser_catalog) and upper(name_part (V_NAME, 1)) like upper(:chooser_schema) and upper(name_part (V_NAME, 2)) like upper(:chooser_mask) and :chooser_browse_views = 1
					union select SP_NAME, \'P\' as p_key from xddl_procedures where upper(name_part (SP_NAME, 0)) like upper(:chooser_catalog) and upper(name_part (SP_NAME, 1)) like upper(:chooser_schema) and upper(name_part (SP_NAME, 2)) like upper(:chooser_mask) and :chooserbp = 1
					 ]]> </v:expression>


		 -->
		<v:data-source name="datasource1" expression-type="sql" nrows="20" initial-offset="0">
		 <v:expression><![CDATA[ select T_NAME,\'T\' as t_key from xddl_tables where upper(name_part (T_NAME, 0)) like upper(?) and upper(name_part (T_NAME, 1)) like upper(?) and upper(name_part (T_NAME, 2)) like upper(?) and ? = 1
			union select V_NAME, \'V\' as v_key from xddl_views where upper(name_part (V_NAME, 0)) like upper(?) and upper(name_part (V_NAME, 1)) like upper(?) and upper(name_part (V_NAME, 2)) like upper(?) and ? = 1
			union select SP_NAME, \'P\' as p_key from xddl_procedures where upper(name_part (SP_NAME, 0)) like upper(?) and upper(name_part (SP_NAME, 1)) like upper(?) and upper(name_part (SP_NAME, 2)) like upper(?) and ? = 1
			 ]]></v:expression>
		 <v:param name="chooser_catalog1" value="--self.chooser_catalog"/>
		 <v:param name="chooser_schema1" value="--self.chooser_schema"/>
		 <v:param name="chooser_mask1" value="--self.chooser_mask"/>
		 <v:param name="chooser_tables" value="--self.chooser_browse_tables"/>

		 <v:param name="chooser_catalog2" value="--self.chooser_catalog"/>
		 <v:param name="chooser_schema2" value="--self.chooser_schema"/>
		 <v:param name="chooser_mask2" value="--self.chooser_mask"/>
		 <v:param name="chooser_browse_views" value="--self.chooser_browse_views"/>



		 <v:param name="chooser_catalog3" value="--self.chooser_catalog"/>
		 <v:param name="chooser_schema3" value="--self.chooser_schema"/>
		 <v:param name="chooser_mask3" value="--self.chooser_mask"/>
		 <v:param name="chooser_procedures" value="--self.chooser_browse_procedures"/>
		 <v:before-data-bind>
			<script><![CDATA[
			  control.ds_parameters := vector (self.chooser_catalog, self.chooser_schema, self.chooser_mask,  self.chooser_browse_tables, self.chooser_catalog, self.chooser_schema, self.chooser_mask, self.chooser_browse_views, self.chooser_catalog, self.chooser_schema, self.chooser_mask,  self.chooser_browse_procedures );
	    ]]></script>
		 </v:before-data-bind>

		 <v:after-data-bind>
			<script><![CDATA[
		declare i, len integer;
		declare d_vec any;
		self.cur_page := control.ds_rows_offs / control.ds_nrows;


		if (self.datasource_entry = 0) {
			if (self.cur_page =0 and ( length(self.pages_data) = 0) ) {
			self.page_data := vector();
			d_vec := control.ds_row_data;

			len := length (d_vec);
			i := 0;

				while (i < len) {
					self.page_data := vector_concat(self.page_data,  vector( aref(aref(d_vec, i), 0), aref(aref(d_vec, i), 1), 0 ));
					i := i + 1;
				}
				if (len > 0)
					self.pages_data := vector_concat(self.pages_data,  vector (self.page_data) );
		 }

			 self.datasource_entry := 1;
		} else {

			self.page_data := vector();
			d_vec := control.ds_row_data;
			len := length (d_vec);
			i := 0;
			if (self.cur_page > ( length(self.pages_data) -1)  ) {
				while (i < len) {
					self.page_data := vector_concat(self.page_data,  vector( aref(aref(d_vec, i), 0), aref(aref(d_vec, i), 1), 0 ));
					i := i + 1;
				}
				if (len > 0)
					self.pages_data := vector_concat(self.pages_data,  vector (self.page_data) );
			}
				 else
						self.page_data := aref (self.pages_data, self.cur_page );

				self.rows_fetched := control.ds_rows_fetched;

			self.datasource_entry :=0;
		}

	]]></script>
		 </v:after-data-bind>



		</v:data-source>

		<v:data-set name="chooser_ds" data-source="self.datasource1" scrollable="1">
		 <!--
				 <v:data-set name="chooser_ds"
					 sql="select T_NAME,'T' as t_key from xddl_tables where upper(name_part (T_NAME, 0)) like upper(:self.chooser_catalog) and upper(name_part (T_NAME, 1)) like upper(:self.chooser_schema) and upper(name_part (T_NAME, 2)) like upper(:self.chooser_mask) and :self.chooser_browse_tables=1
					 union select V_NAME, 'V' as v_key from sys_views where upper(name_part (V_NAME, 0)) like upper(:self.chooser_catalog) and upper(name_part (V_NAME, 1)) like upper(:self.chooser_schema) and upper(name_part (V_NAME, 2)) like upper(:self.chooser_mask) and :self.chooser_browse_views=1
					 union select SP_NAME, 'P' as p_key from xddl_procedures where upper(name_part (SP_NAME, 0)) like upper(:self.chooser_catalog) and upper(name_part (SP_NAME, 1)) like upper(:self.chooser_schema) and upper(name_part (SP_NAME, 2)) like upper(:self.chooser_mask) and :self.chooser_browse_procedures=1"
					 meta="--get_xml_meta()" nrows="10000" scrollable="0" width="80">
		 -->

		 <v:on-post>
			<script><![CDATA[
					declare i,len, n , cnt, o_state integer;
					declare o_name, o_type  varchar;
					declare obj xml_tree;
					declare t_vec any;

				if (get_keyword('chooser_cancel',params) is not null ) {
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;
				}

				if (get_keyword('chooser_apply',params) is not null ) {
					i := 0;
					len := length(self.pages_data);

					while (i < len) {
						t_vec := aref(self.pages_data, i);
						n := 0;
						cnt := length(t_vec);

						while (n < cnt ) {
							o_name :=  aref(t_vec, n);
							o_type :=  aref(t_vec, n + 1);
							o_state := aref(t_vec, n + 2);

							if  (o_state = 1) {
								if (o_type = 'T'  ) {
									if (xpath_eval(sprintf('/tables/table[@name = \'%s\']',o_name), self.objects) is null ) {
										obj := xddl_get_tables(sprintf('/table[@name = \'%s\']',o_name));
										XMLAppendChildren(xpath_eval( '/tables', self.objects ) , xml_cut(xpath_eval(sprintf('/tables/table[@name = \'%s\']',o_name), obj)));
									} else {
										self.chosen_existing_objects := vector_concat(self.chosen_existing_objects, vector(o_name, 'T'));
									}
								} else if (o_type = 'V') {
									if (xpath_eval(sprintf('/views/view[@name = \'%s\']',o_name), self.views) is null) {
										obj := xddl_get_views(sprintf('/view[@name = \'%s\']',o_name));
										XMLAppendChildren(xpath_eval( '/views', self.views ) , xml_cut(xpath_eval(sprintf('/views/view[@name = \'%s\']',o_name), obj)));
									} else {
										self.chosen_existing_objects := vector_concat(self.chosen_existing_objects, vector(o_name, 'V'));
									}
								} else if (o_type = 'P') {
									if (xpath_eval(sprintf('/procedures/procedure[@name = \'%s\']',o_name), self.procedures) is null) {
										obj := xddl_get_procedures(sprintf('/procedure[@name = \'%s\']',o_name));
										XMLAppendChildren(xpath_eval( '/procedures', self.procedures ) , xml_cut(xpath_eval(sprintf('/procedures/procedure[@name = \'%s\']',o_name), obj)));
									} else {
										self.chosen_existing_objects := vector_concat(self.chosen_existing_objects, vector(o_name, 'P'));
									}
								}
							}
							n :=  n+ 3;
						}
				 		i := i + 1;
					}
					if (length(self.chosen_existing_objects) > 0) {
		      self.mode := 'xddl_chooser_exists';
		      self.vc_data_bind(e);
		      return;

							http_request_status ('HTTP/1.1 302 Found');
							http_header (sprintf('Location: xddl.vspx?mode=xddl_chooser_exists&sid=%s&realm=%s\r\n',self.sid ,self.realm));
							return;
					} else {
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

						http_request_status ('HTTP/1.1 302 Found');
						http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back,  self.sid ,self.realm));
						return;
					}
				}	else if (get_keyword('chooser_all',params) is not null or get_keyword('chooser_clear',params) is not  null) {
						declare  cnt, n_pages,  c_flag  integer;
						self.pages_data := vector();
						self.page_data := vector();
						if ( get_keyword('chooser_all',params) is not  null)
							c_flag := 1;
						else c_flag := 0;
						cnt :=0;
						n_pages := 0;
						for select T_NAME as obj_name,'T' as t_key from xddl_tables where upper(name_part (T_NAME, 0)) like upper(self.chooser_catalog) and upper(name_part (T_NAME, 1)) like upper(self.chooser_schema) and upper(name_part (T_NAME, 2)) like upper(self.chooser_mask) and self.chooser_browse_tables = 1
							union select V_NAME  as obj_name, 'V' as t_key from sys_views where upper(name_part (V_NAME, 0)) like upper(self.chooser_catalog) and upper(name_part (V_NAME, 1)) like upper(self.chooser_schema) and upper(name_part (V_NAME, 2)) like upper(self.chooser_mask) and self.chooser_browse_views = 1
							union select SP_NAME  as obj_name, 'P' as t_key from xddl_procedures where upper(name_part (SP_NAME, 0)) like upper(self.chooser_catalog) and upper(name_part (SP_NAME, 1)) like upper(self.chooser_schema) and upper(name_part (SP_NAME, 2)) like upper(self.chooser_mask) and self.chooser_browse_procedures = 1
						do {
						 if (cnt = 20) { -- do synchronize this value with nROWS;
							self.pages_data := vector_concat(self.pages_data,  vector (self.page_data) );
							self.page_data := vector();
							cnt := 0;
							n_pages := n_pages + 1;
						 }
						 self.page_data := vector_concat(self.page_data,  vector( obj_name, t_key, c_flag ));
						 cnt := cnt +1;
						}
						self.pages_data := vector_concat(self.pages_data,  vector (self.page_data) );

						self.chooser_ds.vc_data_bind (e);
				}
				]]></script>
		 </v:on-post>
		 <v:template name="chooser_template1" type="simple" name-to-remove="table" set-to-remove="bottom">
        <table class="listing" rules="groups">
          <colgroup/><colgroup/><colgroup/>
          <thead>
            <tr>
               <th/>
               <th/>
               <th width="90%">Name</th>
            </tr>
          </thead>
        </table>
		 </v:template>
		 <v:template name="chooser_template2" type="repeat" name-to-remove="" set-to-remove="">
			<v:template name="chooser_template4" type="browse" name-to-remove="table" set-to-remove="both">
			 <table>
         <?vsp self.row_count := self.row_count + 1;
               http (sprintf ('<tr class="%s">', case when mod (self.row_count, 2) then 'listing_row_odd' else 'listing_row_even' end));
         ?>
         <td class="listing_col">
					<v:check-box name="chooser_sel" is-boolean="1" true-value="1" false-value="0" value="0">
					 <v:on-init>
						<script><![CDATA[control.vc_parent.vc_focus := 1; ]]></script>
					 </v:on-init>
					 <v:on-post>
						<script><![CDATA[
						    declare table_name varchar;
						 if (get_keyword('chooser_ds_next',params) is not null) {
									declare l_vec, f_vec any;
									f_vec := self.pages_data;
									l_vec := aref(f_vec, self.cur_page -1);
									aset( l_vec, (control.vc_parent as vspx_row_template).te_ctr*3 + 2, case when control.ufl_value='1' then 1 else 0 end);
									aset(f_vec, self.cur_page -1, l_vec);
									self.pages_data := f_vec;
						}	else if (get_keyword('chooser_ds_prev',params) is not null) {
									declare l_vec, f_vec any;
									if ((control.vc_parent as vspx_row_template).te_ctr < self.rows_fetched) {
										f_vec := self.pages_data;
										l_vec := aref(f_vec, self.cur_page +1);
										aset( l_vec, (control.vc_parent as vspx_row_template).te_ctr*3 + 2, case when control.ufl_value='1' then 1 else 0 end);
										aset(f_vec, self.cur_page +1, l_vec);
										self.pages_data := f_vec;
									}
						}	else if (get_keyword('chooser_apply',params) is not null) {
									declare l_vec, f_vec any;
                  f_vec := self.pages_data;
									l_vec := aref(f_vec, self.cur_page);
									aset( l_vec, (control.vc_parent as vspx_row_template).te_ctr*3 + 2, case when control.ufl_value='1' then 1 else 0 end);
									aset(f_vec, self.cur_page, l_vec);
									self.pages_data := f_vec;

						}

						]]></script>
					 </v:on-post>
					 <v:after-data-bind>
						<script><![CDATA[
							if (get_keyword('chooser_all',params) is not null )
								control.ufl_selected := 1;
							else if (get_keyword('chooser_clear',params) is not null )
								control.ufl_selected := 0;
							control.vc_data_bound := 1;
						]]></script>
					 </v:after-data-bind>
					 <v:before-render>
						<script><![CDATA[
						 if ( self.mode = 'xddl_chooser' ) {
							   declare flag_check integer;
								 if (length(self.pages_data) > 0) {
									flag_check := aref( aref(self.pages_data, self.cur_page), (control.vc_parent as vspx_row_template).te_ctr*3 + 2);
									if ( flag_check = 0) {
										control.ufl_true_value := 1;
										control.ufl_false_value := 0;
									} else {
										control.ufl_true_value := 0;
										control.ufl_false_value := 1;
									}
								}
							}
						]]></script>
					 </v:before-render>



					</v:check-box>
				 </td>
         <td class="listing_col">
      		 <v:template name="chooser_icon_t" type="simple" enabled="--case when (control.vc_parent as vspx_row_template).te_rowset[1] = 'T' then 1 else 0 end">
             <img src="images/icons/table_16.png" alt="Table" title="Table"/>
    			 </v:template>
      		 <v:template name="chooser_icon_v" type="simple" enabled="--case when (control.vc_parent as vspx_row_template).te_rowset[1] = 'V' then 1 else 0 end">
             <img src="images/icons/view_16.png" alt="View" title="View"/>
    			 </v:template>
      		 <v:template name="chooser_icon_p" type="simple" enabled="--case when (control.vc_parent as vspx_row_template).te_rowset[1] = 'P' then 1 else 0 end">
             <img src="images/icons/script_16.png" alt="Stored procedure" title="Stored procedure"/>
    			 </v:template>
				 </td>
         <td class="listing_col">
					<v:label name="chooser_labelName" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" format="%s" width="80"/>
				 </td>
         <?vsp http ('</tr>'); ?>
			 </table>
			</v:template>
		 </v:template>
		 <v:template name="chooser_template3" type="simple" name-to-remove="table" set-to-remove="top">
      <table>
		 	  <tr>
          <td/>
	  <td align="center"  class="listing_col_action">
	    <vm:ds-navigation data-set="ds_procs"/>
           </td>

				<td align="center">
				 <v:button name="chooser_all" action="simple" value="Select All" />
				 <v:button name="chooser_clear" action="simple" value="Clear" />
				 <v:button name="chooser_apply" action="simple" value="Apply" />
				 <v:button name="chooser_cancel" action="simple" value="Cancel" />
				</td>
			 </tr>
			</table>
		 </v:template>
		</v:data-set>
	 </v:template>



	 <v:template name="template_xddl_chooser_exists" type="simple" enabled="--case when ( self.mode = 'xddl_chooser_exists' ) then 1 else 0 end">
		<vm:form name="xddl_chooser_exists_form" type="simple" method="POST" action="">
		 <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
		 <vm:events>
			<v:on-post>
			 <script><![CDATA[
		      self.mode := null;
		      self.page := self.page_to_go_back;
		      self.vc_data_bind(e);
		      return;

		    http_request_status ('HTTP/1.1 302 Found');
		    http_header (sprintf('Location: xddl.vspx?page=%s&sid=%s&realm=%s\r\n', self.page_to_go_back,  self.sid ,self.realm));
		    return;
		    ]]></script>
			</v:on-post>
		 </vm:events>
		 <vm:row>
			<vm:raw>
			 <td colspan="6">
				<?vsp {
            declare i, len integer;
            i := 0;
            len := length(self.chosen_existing_objects);
            http('<table><tr><td colspan="2">The following database objects are present in edit buffer:</td></tr>');
            while (i < len) {
              http('<tr><td>');
              if (aref(self.chosen_existing_objects, i + 1) = 'T')
                http('Table ');
              else if (aref(self.chosen_existing_objects, i + 1) = 'V')
                http('View ');
              else if (aref(self.chosen_existing_objects, i + 1) = 'P')
                http('Procedure ');
              http('</td><td>');
              http(aref(self.chosen_existing_objects, i));
              http('</td></tr>');
              i := i + 2;
            }
            http('</table>');
          }
        ?>
			 </td>
			</vm:raw>
		 </vm:row>
		 <vm:row>
			<vm:bgroup colspan="6" align="center">
			 <v:button action="submit" name="xddl_chooser_exists_ok_command" value="OK"/>
			</vm:bgroup>
		 </vm:row>
		</vm:form>
	 </v:template>




	</vm:pagebody>
 </vm:pagewrapper>
</v:page>
