<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="event_edit_page" decor="yacutia_decor.vspx" style="yacutia_style.xsl" fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
  <vm:pagetitle>Virtuoso HTTP Database Replication</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable persist="0" name="ename" type="varchar" default="''"/>
      <v:variable persist="0" name="_item" type="varchar" default="''"/>
      <v:variable persist="0" name="_item_type" type="integer" default="0"/>
      <v:variable persist="1" name="error_str198" type="varchar" default="''"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="Bidirectional Snapshot Replication"/>
    </vm:menu>
    <vm:header caption="Bidirectional Snapshot Subscriptions"/>
    <vm:rawheader>
      <?vsp
        declare _item varchar;
        _item := get_keyword('item', self.vc_page.vc_event.ve_params);
        if (_item)
          self._item := cast(deserialize(decode_base64(_item)) as varchar);
        self._item_type := atoi(get_keyword('item_type', self.vc_page.vc_event.ve_params, '0'));
        http ('<div>for ');
        if (self._item_type = 1)
          http(sprintf('WebDAV collection <b>%s</b>', self._item));
        else
          http(sprintf('Table <b>%s</b>', self._item));
        http('</div><br/>');
      ?>
    </vm:rawheader>
    <vm:pagebody vdb_check="1">
      <v:form name="event_form1" type="simple" method="POST" action="">
        <v:before-data-bind>
          <v:script>
            <![CDATA[
              declare _item varchar;
              _item := get_keyword('item', self.vc_page.vc_event.ve_params);
              if (_item)
                self._item := cast(deserialize(decode_base64(_item)) as varchar);
              self._item_type := atoi(get_keyword('item_type', self.vc_page.vc_event.ve_params, '0'));
            ]]>
          </v:script>
        </v:before-data-bind>
        <input type="hidden" name="item" value="<?V get_keyword('item', self.vc_page.vc_event.ve_params) ?>"/>
        <input type="hidden" name="item_type" value="<?V get_keyword('item_type', self.vc_page.vc_event.ve_params) ?>"/>
        <table class="listing" rules="groups">
          <thead>
            <tr class="listing_header_row">
              <th class="checkbox" />
              <th>Subscriber</th>
              <th>Last pull time</th>
              <th>Last push time</th>
            </tr>
          </thead>
          <?vsp
            declare _count integer;
            _count := 0;
            declare _pull_ts, _push_ts, _prefix varchar;
            for select SS_SERVER, SS_LAST_PULL_TS, SS_LAST_PUSH_TS from DB.DBA.SYS_SNAPSHOT_SUB where SS_ITEM = self._item and SS_TYPE = self._item_type order by SS_SERVER do
            {
              _count := _count + 1;
              _pull_ts := yac_hum_datefmt(SS_LAST_PULL_TS);
              _push_ts := yac_hum_datefmt(SS_LAST_PUSH_TS);
          ?>
          <tr>
            <td class="listing_col">
              <input type="checkbox" name="SB_<?V SS_SERVER ?>"/>
            </td>
            <td class="listing_col">
              <?V SS_SERVER ?>
            </td>
            <td class="listing_col">
              <?V _pull_ts ?>
            </td>
            <td class="listing_col">
              <?V _push_ts ?>
            </td>
          </tr>
          <?vsp
            }
            if (_count = 0)
              http('<tr><td colspan="4" class="Attention">No subscriptions</td></tr>');
          ?>
        </table>
        <div class="listing_bot_ctl_grp">
          <v:button action="simple" name="cancel1" value="Cancel">
            <v:on-post>
              <v:script>
                <![CDATA[
                  self.vc_redirect('db_repl_bi.vspx');
                ]]>
              </v:script>
            </v:on-post>
          </v:button>
        <?vsp
          if (_count > 0)
          {
        ?>
          <v:button action="simple" name="initcopy" value="Initial copy">
            <v:on-post>
              <v:script>
                <![CDATA[
                  declare _idx integer;
                  _idx := 0;
                  declare _server varchar;
                  while (_server := adm_next_checkbox('SB_', self.vc_page.vc_event.ve_params, _idx))
                  {
                    declare state, msg, m_dta, res varchar;
                    state := '00000';
                    exec('REPL_INIT_SNAPSHOT(?, ?, ?)', state, msg, vector(_server, self._item, self._item_type), m_dta, res);
                    if (state <> '00000')
                    {
                      self.error_str198 := concat(self.error_str198, '<tr><td>', msg, '</td></tr>');
                    }
                  }
                ]]>
              </v:script>
            </v:on-post>
          </v:button>
          <v:button action="simple" name="delete" value="Delete">
            <v:on-post>
              <v:script>
                <![CDATA[
                  declare _idx integer;
                  _idx := 0;
                  declare _server varchar;
                  while (_server := adm_next_checkbox('SB_', self.vc_page.vc_event.ve_params, _idx))
                  {
                    declare state, msg, m_dta, res varchar;
                    state := '00000';
                    exec('REPL_DROP_SNAPSHOT_SUB(?, ?, ?)', state, msg, vector(_server, self._item, self._item_type), m_dta, res);
                    if (state <> '00000')
                    {
                      self.error_str198 := concat(self.error_str198, '<tr><td>', msg, '</td></tr>');
                    }
                  }
                ]]>
              </v:script>
            </v:on-post>
          </v:button>
        <?vsp
          }
        ?>
          <v:button action="simple" name="new_subscr" value="New Subscriber">
            <v:on-post>
              <v:script>
                <![CDATA[
                  self.vc_redirect(sprintf('db_repl_bi_add.vspx?item=%s&item_type=%s', encode_base64(serialize(self._item)), cast(self._item_type as varchar)));
                ]]>
              </v:script>
            </v:on-post>
          </v:button>
        </div>
      </v:form>
      <?vsp
        if (self.error_str198 <> '' and self.error_str198 is not null)
          http(sprintf('<table class="warning">%s</table>', self.error_str198));
        self.error_str198 := '';
       ?>
       <!--
       <span class="listing_hdr_qual">
   Notes:
   <ul>
     <li>To add new subscriber server, press the "New Subscriber" button.</li>
     <li>To initialize the subscription select some subscriber(s) and press "Initial copy" button.</li>
     <li>To remove some subscriber server (stops replication on it)
       from this publication, select some subscriber(s) and press
       "Delete" button.</li>
     <li>The "Last pull time" are timestamps when last time
       data changes was readed from subscriber and stored locally.
     </li>
     <li>The "Last push time" are timestamps when last time
       local data changes was stored on the subscriber.
     </li>
     <li>To change the interval for automatic synchronization of this publication, fill
       the "Update Interval" (in minutes) and press button "Set".</li>
     <li>To define a new conflict resolver procedure press "New Resolver" button.</li>
     <li>To delete a conflict resolver procedure select some and press "Remove" button.</li>
     <li>To edit the conflict resolver procedure, click over procedure's name link.</li>
     <li>To return to the publications page, press any of "Cancel" buttons or click the
       "Bidirectional Snapshot" link on tab desk.</li>
   </ul>
      </span>-->
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
