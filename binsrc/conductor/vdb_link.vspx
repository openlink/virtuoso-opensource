<?xml version="1.0"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="vdb_link_page"
  decor="yacutia_decor.vspx"
  style="yacutia_style.xsl"
  vm:owner="yacutia_vdb_link_page"
  doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
  fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
  xmlns:xhtml="http://www.w3.org/1999/xhtml"
  xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Virtuoso Link Remote Resources</vm:pagetitle>
  <vm:pagewrapper>
    <v:variable name="p_mode" persist="0" type="varchar" default="''" />
    <!-- p_mode: 1-list_dsns, 2-list_resources, 3-link_selected, 4-change_pk -->
    <v:variable name="ds_name" persist="0" type="varchar" default="''" />
    <v:variable name="ds_login" persist="0" type="varchar" default="''" />
    <v:variable name="ds_pwd" persist="0" type="varchar" default="''" />
    <v:variable name="sh_t" persist="0" type="integer" default="1" />
    <v:variable name="sh_st" persist="0" type="integer" default="0" />
    <v:variable name="sh_v" persist="0" type="integer" default="0" />
    <v:variable name="sh_p" persist="0" type="integer" default="0" />
    <v:variable name="s_tables" persist="0" type="any" default="''" />
    <v:variable name="s_stables" persist="0" type="any" default="''" />
    <v:variable name="s_views" persist="0" type="any" default="''" />
    <v:variable name="s_procs" persist="0" type="any" default="''" />
    <v:variable name="pks_t" persist="0" type="any" default="''" />
    <v:variable name="pks_st" persist="0" type="any" default="''" />
    <v:variable name="pks_v" persist="0" type="any" default="''" />
    <v:variable name="tbl_no" persist="0" type="integer" default="0" />
    <v:variable name="tbl_type" persist="0" type="varchar" default="''" />
    <v:variable name="t_msgs" persist="0" type="any" default="''" />
    <v:variable name="s_msgs" persist="0" type="any" default="''" />
    <v:variable name="v_msgs" persist="0" type="any" default="''" />
    <v:variable name="p_msgs" persist="0" type="any" default="''" />
    <vm:menu>
      <vm:menuitem name="dsns_url" type="hot" value="Known Datasources" format="%s" url="vdb_dsns.vspx" />
      <vm:menuitem name="linked_url" type="hot" value="Known Remote Resources" format="%s" url="vdb_resources.vspx" />
      <vm:menuitem value="Link Remote Resources" />
      <vm:menuitem name="main_url" type="hot" value="Main Remote Resources" format="%s" url="vdb_main.vspx" />
    </vm:menu>
    <vm:rawheader>
      <td>
        <?vsp
          declare caption varchar;
          caption := case self.p_mode when '1' then 'Link From' when '2' then sprintf('Resources from "%s" / %s',self.ds_name, self.ds_login) when '3' then sprintf('Link selected resources from "%s" / %s',self.ds_name, self.ds_login) when '4' then sprintf('Change Primary Key') else 'Link From' end;
          http(caption);
        ?>
      </td>
    </vm:rawheader>
    <vm:pagebody vdb_check="1">
      <v:before_render>
        <?vsp  -- some checking for consistency
          if (get_keyword('mode', params,'') <> '')
            self.p_mode := get_keyword('mode', params);
          if (self.p_mode = '4' and (length(get_keyword('idx', params,'')) = 0 or length(get_keyword('class', params,'')) = 0 ))
            self.p_mode := '3';
          if (self.p_mode = '3' and length(self.s_tables) = 0 and length(self.s_stables) = 0 and length(self.s_views) = 0 and length(self.s_procs) = 0)
            self.p_mode := '2';
          if (length(self.ds_name) = 0 or length(self.ds_login) = 0 or length(self.ds_pwd) = 0)
            self.p_mode := '1';
        ?>
      </v:before_render>
      <?vsp
      ?>
      <v:template name="error_temp1" type="simple" condition="self.sql_stt <> ''">
        <?vsp
        ?>
        <v:include url="vdb_error_inc.vspx"/>
      </v:template>
      <v:template name="error_temp2" type="simple" condition="self.sql_stt = ''">
        <v:template name="mode_temp1" type="simple" condition="self.p_mode = '1'">
          <?vsp
            self.return_path := sprintf('vdb_link.vspx?sid=%s&realm=%s',self.sid, self.realm);
            /* some cleanup */
            self.s_tables := vector();
            self.pks_t := vector();
            self.s_stables := vector();
            self.pks_st := vector();
            self.s_views := vector();
            self.pks_v := vector();
            self.s_procs := vector();
            self.t_msgs := vector();
            self.s_msgs := vector();
            self.v_msgs := vector();
            self.p_msgs := vector();
            self.tbl_no := 0;
            self.tbl_type := '';
          ?>
          <v:form name="dsn_form" type="simple" method="POST" action="--self.return_path">
            <table border="0" cellspacing="0" cellpadding="0">
              <tr>
                <td>
                  <table class="MainSubData" border="0" cellspacing="0" cellpadding="3">
                    <tr>
		      <td>Data Source<span class="attention_marker">*</span></td>
                      <td>
                        <select name="ds_names">
                          <?vsp
                            for (select ds_dsn, ds_uid from sys_data_source) do
                            {
                              http(sprintf('<option value="%s">%s</option>', ds_dsn, ds_dsn ));
                            }
                          ?>
                        </select>
                      </td>
                    </tr>
                    <tr>
		      <td>Username<span class="attention_marker">*</span></td>
                      <td><v:text name="user_name"/></td>
                    </tr>
                    <tr>
		      <td>Password<span class="attention_marker">*</span></td>
                      <td><v:text name="new_pass" type="password"/></td>
                    </tr>
                  </table>
                </td>
                <td>&nbsp;</td>
                <td>
                  <table class="MainSubData" border="0" cellspacing="0" cellpadding="3">
                    <tr>
                      <td></td>
                      <td align="left">
                        <v:check-box name="cb_show_tables" initial-checked="1" value="on" xhtml_id="cb_show_tables"/>
                        <label for="cb_show_tables">Show Tables</label>
                      </td>
                    </tr>
                    <tr>
                      <td></td>
                      <td align="left">
                        <v:check-box name="cb_show_stables" initial-checked="0" value="on" xhtml_id="cb_show_stables"/>
                        <label for="cb_show_stables">Show System Tables</label>
                      </td>
                    </tr>
                    <tr>
                      <td></td>
                      <td align="left">
                        <v:check-box name="cb_show_views" initial-checked="0" value="on" xhtml_id="cb_show_views"/>
                        <label for="cb_show_views">Show Views</label>
                      </td>
                    </tr>
                    <tr>
                      <td></td>
                      <td align="left">
                        <v:check-box name="cb_show_procs" initial-checked="0" value="on" xhtml_id="cb_show_procs"/>
                        <label for="cb_show_procs">Show Procedures</label>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
              <tr align="center">
                <td colspan="3">
                  <v:button action="simple" name="list" value="List Resources">
                    <v:on-post>
                      <v:script>
                        <![CDATA[
                          self.ds_name := get_keyword('ds_names', self.vc_page.vc_event.ve_params, '');
                          self.ds_login := get_keyword('user_name', self.vc_page.vc_event.ve_params, '');
                          self.ds_pwd := get_keyword('new_pass', self.vc_page.vc_event.ve_params, '');
                          if (self.ds_name is null or self.ds_name = '')
                            return;
                          exec('vd_remote_data_source(?,?,?,?)', self.sql_stt, self.sql_msg, vector(self.ds_name, '', self.ds_login, self.ds_pwd));
                          if ('' = self.sql_stt)
                          {
                            self.p_mode := '2';
                            if( sys_stat('vdb_attach_autocommit') > 0)
                              vd_autocommit (self.ds_name, 1);
                            self.sh_t := case get_keyword('cb_show_tables', self.vc_page.vc_event.ve_params) when 'on' then 1 else 0 end;
                            self.sh_st:= case get_keyword('cb_show_stables', self.vc_page.vc_event.ve_params) when 'on' then 1 else 0 end;
                            self.sh_v := case get_keyword('cb_show_views', self.vc_page.vc_event.ve_params) when 'on' then 1 else 0 end;
                            self.sh_p := case get_keyword('cb_show_procs', self.vc_page.vc_event.ve_params) when 'on' then 1 else 0 end;
                          }
                          else
                          {
                            http_request_status('HTTP/1.1 302 Found');
                            http_header(sprintf('Location: %U\r\n', self.return_path));
                          }
                        ]]>
                      </v:script>
                    </v:on-post>
                  </v:button>
                </td>
              </tr>
            </table>
          </v:form>
        </v:template>
        <v:template name="mode_temp2" type="simple" condition="self.p_mode = '2'">
          <?vsp
            self.return_path := sprintf('vdb_link.vspx?sid=%s&realm=%s',self.sid, self.realm);
          ?>
          <v:form name="list_form" type="simple" method="POST" action="--self.return_path">
            <table class="MainSubData" border="1" cellspacing="0" cellpadding="3">
              <tr class="SubSubInfo">
                <th>Name</th>
                <th>Link</th>
              </tr>
              <?vsp
                declare n, i,  _deni integer;
                declare _name, _value, _den varchar;
                _deni := 0;
                if (self.sh_t <> 0)
                {
                  http('<tr><th colspan="2" align="center">Tables</th></tr>');
                  declare l_tables any;
                  l_tables := sql_tables (self.ds_name, NULL, NULL, NULL, 'TABLE');
                  n := length(l_tables);
                  i := 0;
                  while (i < n)
                  {
                    _name := concat( aref(aref(l_tables,i),0), '.', aref(aref(l_tables,i),1), '.', aref(aref(l_tables,i),2));
                    _value := encode_base64(serialize( vector(aref(aref(l_tables,i),0), aref(aref(l_tables,i),1), aref(aref(l_tables,i),2)) ));
                    if (exists(select RT_NAME from SYS_REMOTE_TABLE where RT_DSN = self.ds_name and RT_REMOTE_NAME = _name ))
                    {
                      _den := '<span class="attention_marker">*</span>';
                      _deni := _deni + 1;
                    }
                    else
                      _den := '';
                    http(sprintf('<tr class="SubAction"><td>%s%s</td><td align="center"><input type="checkbox" name="cbt_%d" value="%s"/></td></tr>', _den, _name, i, _value ));
                    i := i+1;
                  }
                }
                if (self.sh_st <> 0)
                {
                  http('<tr><th colspan="2" align="center">System Tables</th></tr>');
                  declare l_stables any;
                  l_stables := sql_tables (self.ds_name, NULL, NULL, NULL, 'SYSTEM TABLE');
                  n := length(l_stables);
                  i := 0;
                  while (i < n)
                  {
                    _name := concat(aref(aref(l_stables,i),0), '.', aref(aref(l_stables,i),1), '.', aref(aref(l_stables,i),2));
                    _value := encode_base64(serialize( vector(aref(aref(l_stables,i),0), aref(aref(l_stables,i),1), aref(aref(l_stables,i),2)) ));
                    if (exists(select RT_NAME from SYS_REMOTE_TABLE where RT_DSN = self.ds_name and RT_REMOTE_NAME = _name))
                    {
                      _den := '<span class="attention_marker">*</span>';
                      _deni := _deni + 1;
                    }
                    else
                      _den := '';
                    http(sprintf('<tr class="SubAction"><td>%s%s</td><td align="center"><input type="checkbox" name="cbs_%d" value="%s"/></td></tr>', _den, _name, i, _value));
                    i := i+1;
                  }
                }
                if (self.sh_v <> 0)
                {
                  http('<tr><th colspan="2" align="center">Views</th></tr>');
                  declare l_views any;
                  l_views := sql_tables (self.ds_name, NULL, NULL, NULL, 'VIEW');
                  n := length(l_views);
                  i := 0;
                  while (i < n)
                  {
                    _name := concat(aref(aref(l_views,i),0), '.', aref(aref(l_views,i),1), '.', aref(aref(l_views,i),2));
                    _value := encode_base64(serialize( vector(aref(aref(l_views,i),0), aref(aref(l_views,i),1), aref(aref(l_views,i),2)) ));
                    if (exists (select RT_NAME from SYS_REMOTE_TABLE where RT_DSN = self.ds_name and RT_REMOTE_NAME = _name))
                    {
                      _den := '<span class="attention_marker">*</span>';
                      _deni := _deni + 1;
                    }
                    else
                      _den := '';
                    http(sprintf('<tr class="SubAction"><td>%s%s</td><td align="center"><input type="checkbox" name="cbv_%d" value="%s"/></td></tr>', _den, _name, i, _value ));
                    i := i+1;
                  }
                }
                if (self.sh_p <> 0)
                {
                  http('<tr><th colspan="2" align="center">Procedures</th></tr>');
                  declare l_procs any;
                  l_procs := sql_procedures(self.ds_name, NULL, NULL, NULL);
                  n := length(l_procs);
                  i := 0;
                  while( i < n )
                  {
                    _name := concat(aref(aref(l_procs,i),0), '.', aref(aref(l_procs,i),1), '.', aref(aref(l_procs,i),2));
                    _value := encode_base64(serialize( vector(aref(aref(l_procs,i),0), aref(aref(l_procs,i),1), aref(aref(l_procs,i),2)) ));
                    declare _p_pat varchar;
                    _den := '';
                    _p_pat := _name;
                    _p_pat := replace (_p_pat, '*', '\\*');
                    _p_pat := replace (_p_pat, '+', '\\+');
                    _p_pat := replace (_p_pat, ']', '\\]');
                    _p_pat := replace (_p_pat, '[', '\\[');
                    _p_pat := replace (_p_pat, '(', '\\(');
                    _p_pat := replace (_p_pat, ')', '\\)');
                    _p_pat := replace (_p_pat, '.', '\\.');
                    if( exists (select 1 from SYS_PROCEDURES where
                        regexp_match (sprintf ('\-\-"DSN:%s PROCEDURE:%s"', self.ds_name, _p_pat),
                        coalesce (P_TEXT, blob_to_string(P_MORE))) is not null)) {
                        _den := '<span class="attention_marker">*</span>';
                        _deni := _deni + 1;
                    }
                    http(sprintf( '<tr class="SubAction"><td>%s%s</td><td align="center"><input type="checkbox" name="cbp_%d" value="%s"/></td></tr>',
                                  _den, _name, i, _value ));
                    i := i+1;
                  }
                }
              ?>
              <tr>
                <td colspan="2" align="center">
                  <v:button action="simple" name="cancel" value="Cancel">
                    <v:on-post>
                      <v:script>
                        <![CDATA[
                          self.p_mode := '1';
                        ]]>
                      </v:script>
                    </v:on-post>
                  </v:button>
                  <v:button action="simple" name="link" value="Link Selected">
                    <v:on-post>
                      <v:script>
                        <![CDATA[
                          declare n, i integer;
                          declare _data any;
                          declare _param varchar;
                          if (self.sh_t <> 0)
                          {
                            n := length(sql_tables (self.ds_name, NULL, NULL, NULL, 'TABLE'));
                            i := 0;
                            self.s_tables := vector();
                            self.pks_t := vector();
                            while (i < n)
                            {
                              _param := get_keyword( sprintf('cbt_%d',i), self.vc_page.vc_event.ve_params,'');
                              if (_param <> '')
                              {
                                _data := deserialize(decode_base64(_param));
                                self.s_tables := vector_concat( self.s_tables, vector(_data) );
                                self.pks_t := vector_concat(self.pks_t, vector(adm_lt_getRPKeys2(self.ds_name, _data[0], _data[1], _data[2])));
                              }
                              i := i+1;
                            }
                          }
                          if (self.sh_st <> 0)
                          {
                            n := length(sql_tables (self.ds_name, NULL, NULL, NULL, 'SYSTEM TABLE'));
                            i := 0;
                            self.s_stables := vector();
                            self.pks_st := vector();
                            while (i < n)
                            {
                              _param := get_keyword( sprintf('cbs_%d',i), self.vc_page.vc_event.ve_params,'');
                              if (_param <> '')
                              {
                                _data := deserialize(decode_base64(_param));
                                self.s_stables := vector_concat( self.s_stables, vector(_data) );
                                self.pks_st := vector_concat(self.pks_st, vector(adm_lt_getRPKeys2(self.ds_name, _data[0], _data[1], _data[2])));
                              }
                              i := i+1;
                            }
                          }
                          if (self.sh_v <> 0)
                          {
                            n := length(sql_tables(self.ds_name, NULL, NULL, NULL, 'VIEW'));
                            i := 0;
                            self.s_views := vector();;
                            self.pks_v := vector();
                            while (i < n)
                            {
                              _param := get_keyword(sprintf('cbv_%d',i), self.vc_page.vc_event.ve_params,'');
                              if( _param <> '' ) {
                                _data := deserialize(decode_base64(_param));
                                self.s_views := vector_concat(self.s_views, vector(_data));
                                self.pks_v := vector_concat(self.pks_v, vector(adm_lt_getRPKeys2(self.ds_name, _data[0], _data[1], _data[2])));
                              }
                              i := i+1;
                            }
                          }
                          if (self.sh_p <> 0)
                          {
                            n := length(sql_procedures(self.ds_name, NULL, NULL, NULL));
                            i := 0;
                            self.s_procs := vector();
                            while( i < n )
                            {
                              _param := get_keyword( sprintf('cbp_%d',i), self.vc_page.vc_event.ve_params,'');
                              if (_param <> '')
                              {
                                _data := deserialize(decode_base64(_param));
                                self.s_procs := vector_concat( self.s_procs, vector(_data) );
                              }
                              i := i+1;
                            }
                          }
                          self.t_msgs := vector();
                          self.s_msgs := vector();
                          self.v_msgs := vector();
                          self.p_msgs := vector();
                          self.p_mode := '3';
                        ]]>
                      </v:script>
                    </v:on-post>
                  </v:button>
                </td>
              </tr>
            </table>
          </v:form>
        </v:template>
        <v:template name="mode_temp3" type="simple" condition="self.p_mode = '3'">
          <?vsp
            self.return_path := sprintf('vdb_link.vspx?sid=%s&realm=%s',self.sid, self.realm);
          ?>
          <v:form name="link_form" type="simple" method="POST" action="--self.return_path">
            <?vsp
              declare type1, type2 any;
              type1 := vector('INTEGER','NUMERIC','DECIMAL','DOUBLE PRECISION','REAL','CHAR','CHARACTER','VARCHAR', 'NVARCHAR','ANY','NCHAR','SMALLINT','FLOAT','DATETIME','DATE','TIME','BINARY');
              type2 := vector( '*none*', '', 'xsd:string', 'http://www.w3.org/2001/XMLSchema:string', 'xsd:int', 'http://www.w3.org/2001/XMLSchema:int', 'xsd:float','http://www.w3.org/2001/XMLSchema:float', 'xsd:double','http://www.w3.org/2001/XMLSchema:double', 'xsd:decimal','http://www.w3.org/2001/XMLSchema:decimal', 'xsd:dateTime', 'http://www.w3.org/2001/XMLSchema:dateTime', 'void', '__VOID__');
              for select SDT_NAME from SYS_SOAP_DATATYPES do
              {
                type2 := vector_concat (type2, vector(SDT_NAME, concat ('services.wsdl:', SDT_NAME)));
              }
              declare infos, dbms, driv any;
              infos := vector ();
              if (self.ds_name <> '')
              {
                whenever not found goto nfnd;
                select deserialize (DS_CONN_STR) into infos from DB.DBA.SYS_DATA_SOURCE where DS_DSN = self.ds_name;
                nfnd:;
              }
              dbms := upper (get_keyword (17, infos, ''));
              driv := upper (get_keyword (6, infos, ''));
              declare n, i, _deni integer;
              declare tblv any;
              declare tbl_qual, tbl_user, tbl_name, _den varchar;
              declare tbl_name_local varchar;
              _deni := 0;
              n := length(self.s_tables);
              if( n > 0 )
              {
            ?>
            <table class="MainSubData" width="100%" border="1" cellspacing="0" cellpadding="1">
              <tr>
                <th colspan="6" align="center">Tables</th>
              </tr>
              <tr class="SubSubInfo">
                <th rowspan="2">Remote Name<span class="attention_marker"></span></th>
                <th colspan="3">Link As</th>
                <th rowspan="2" colspan="2">Primary Key<span class="attention_marker">*</span></th>
              </tr>
              <tr class="SubSubInfo">
                <th>Catalog<span class="attention_marker">*</span></th>
                <th>Schema(Owner)<span class="attention_marker">*</span></th>
                <th>Name<span class="attention_marker">*</span></th>
              </tr>
              <?vsp
                i := 0;
                while (i < n)
                {
                  tblv := aref (self.s_tables, i);
                  tbl_qual := aref (tblv, 0); tbl_user := aref (tblv, 1); tbl_name := aref (tblv, 2);
                  tbl_name_local := replace (tbl_name, '.', '_');
                  if (exists (select RT_NAME from SYS_REMOTE_TABLE where RT_DSN = self.ds_name and RT_REMOTE_NAME = concat( tbl_qual, '.', tbl_user, '.', tbl_name ) ))
                  {
                    _den := '<span class="attention_marker">*</span>';
                    _deni := _deni + 1;
                  }
                  else _den := '';
              ?>
              <tr class="SubAction">
                <td>
                  <?vsp
                    http(_den);
                  ?>
                  <?V concat( tbl_qual, '.', tbl_user, '.', tbl_name ) ?>
                </td>
                <td align="center">
                  <input type="text" name="<?V sprintf('t_qual_%d',i)?>" value="<?V dbname() ?>"/>
                </td>
                <td align="center">
                  <input type="text" name="<?V sprintf('t_user_%d',i)?>" value="<?V self.ds_name ?>"/>
                </td>
                <td align="center">
                  <input type="text" name="<?V sprintf('t_name_%d',i)?>" value="<?V tbl_name_local ?>"/>
                </td>
                <td align="center">
                  <?V vector_print(aref(self.pks_t, i)) ?>
                </td>
                <td align="center">
                  <a href="<?V sprintf('%s&mode=4&class=t&idx=%d',self.return_path,i)?>">
                    <?vsp
                      if (length(aref(self.pks_t, i)) > 0)
                        http('Change Key'); else http('Define key');
                    ?>
                  </a>
                </td>
              </tr>
              <?vsp
                if (length(self.t_msgs) > i)
                {
              ?>
              <tr class="AttentionData">
                <td colspan="6">ERROR: <?V aref(self.t_msgs, i) ?></td>
              </tr>
              <?vsp
                }
                i := i + 1;
              }
              ?>
            </table>
            <p/>
            <?vsp
              }
              n := length(self.s_stables);
              if (n > 0)
              {
            ?>
            <table class="MainSubData" width="100%" border="1" cellspacing="0" cellpadding="1">
              <tr>
                <th colspan="6" align="center">System Tables</th>
              </tr>
              <tr class="SubSubInfo">
                <th rowspan="2">Remote Name<span class="attention_marker"></span></th>
                <th colspan="3">Link As</th>
                <th rowspan="2" colspan="2">Primary Key<span class="attention_marker">*</span></th>
              </tr>
              <tr class="SubSubInfo">
                <th>Catalog<span class="attention_marker">*</span></th>
                <th>Schema(Owner)<span class="attention_marker">*</span></th>
                <th>Name<span class="attention_marker">*</span></th>
              </tr>
              <?vsp
                i := 0;
                while (i < n)
                {
                  tblv := aref(self.s_stables, i);
                  tbl_qual := aref(tblv, 0);
                  tbl_user := aref(tblv, 1);
                  tbl_name := aref(tblv, 2);
                  tbl_name_local := replace(tbl_name, '.', '_');
                  if (exists(select RT_NAME from SYS_REMOTE_TABLE where RT_DSN = self.ds_name and RT_REMOTE_NAME = concat(tbl_qual, '.', tbl_user, '.', tbl_name)))
                  {
                    _den := '<span class="attention_marker">*</span>';
                    _deni := _deni + 1;
                  }
                  else
                    _den := '';
              ?>
              <tr class="SubAction">
                <td><?vsp http(_den); ?><?V concat( tbl_qual, '.', tbl_user, '.', tbl_name ) ?></td>
                <td align="center">
                  <input type="text" name="<?V sprintf('s_qual_%d',i)?>" value="<?V dbname() ?>"/>
                </td>
                <td align="center">
                  <input type="text" name="<?V sprintf('s_user_%d',i)?>" value="<?V self.ds_name ?>"/>
                </td>
                <td align="center">
                  <input type="text" name="<?V sprintf('s_name_%d',i)?>" value="<?V tbl_name_local ?>"/>
                </td>
                <td align="center"><?V vector_print(aref(self.pks_st, i)) ?></td>
                <td align="center"><a href="<?V sprintf('%s&mode=4&class=s&idx=%d',self.return_path,i)?>">
                    <?vsp if(length(aref(self.pks_st, i)) > 0) http('Change Key'); else http('Define key');?></a>
                </td>
              </tr>
              <?vsp
                if (length(self.s_msgs) > i)
                {
              ?>
              <tr class="AttentionData">
                <td colspan="6">ERROR: <?V aref(self.s_msgs, i) ?></td>
              </tr>
              <?vsp
                }
                i := i + 1;
              }
              ?>
            </table>
            <p/>
            <?vsp
            }
            n := length(self.s_views);
            if (n > 0)
            {
            ?>
            <table class="MainSubData" width="100%" border="1" cellspacing="0" cellpadding="1">
              <tr><th colspan="6" align="center">Views</th></tr>
              <tr class="SubSubInfo">
                <th rowspan="2">Remote Name<span class="attention_marker"></span></th>
                <th colspan="3">Link As</th>
                <th rowspan="2" colspan="2">Primary Key<span class="attention_marker">*</span></th>
              </tr>
              <tr class="SubSubInfo">
                <th>Catalog<span class="attention_marker">*</span></th>
                <th>Schema(Owner)<span class="attention_marker">*</span></th>
                <th>Name<span class="attention_marker">*</span></th>
              </tr>
              <?vsp
                i := 0;
                while (i < n)
                {
                  tblv := aref (self.s_views, i);
                  tbl_qual := aref (tblv, 0); tbl_user := aref (tblv, 1); tbl_name := aref (tblv, 2);
                  tbl_name_local := replace (tbl_name, '.', '_');
                  if (exists (select RT_NAME from SYS_REMOTE_TABLE where RT_DSN = self.ds_name and RT_REMOTE_NAME = concat( tbl_qual, '.', tbl_user, '.', tbl_name ) )) {
                    _den := '<span class="attention_marker">*</span>';
                    _deni := _deni + 1;
                  }
                  else _den := '';
              ?>
              <tr class="SubAction">
                <td><?vsp http(_den); ?><?V concat( tbl_qual, '.', tbl_user, '.', tbl_name ) ?></td>
                <td align="center">
                  <input type="text" name="<?V sprintf('v_qual_%d',i)?>" value="<?V dbname() ?>"/>
                </td>
                <td align="center">
                  <input type="text" name="<?V sprintf('v_user_%d',i)?>" value="<?V self.ds_name ?>"/>
                </td>
                <td align="center">
                  <input type="text" name="<?V sprintf('v_name_%d',i)?>" value="<?V tbl_name_local ?>"/>
                </td>
                <td align="center"><?V vector_print(aref(self.pks_v, i)) ?></td>
                <td align="center"><a href="<?V sprintf('%s&mode=4&class=v&idx=%d',self.return_path,i)?>">
                    <?vsp if(length(aref(self.pks_v, i)) > 0) http('Change Key'); else http('Define key');?></a>
                </td>
              </tr>
              <?vsp
                if (length(self.v_msgs) > i)
                {
              ?>
              <tr class="AttentionData">
                <td colspan="6">ERROR: <?V aref(self.v_msgs, i) ?></td>
              </tr>
              <?vsp
                }
                i := i + 1;
              }
              ?>
            </table>
            <p/>
            <?vsp
              }
            ?>
            <table width="100%" border="1" cellspacing="0" cellpadding="1">
              <tr>
                <th align="center">Procedures</th>
              </tr>
              <?vsp
                declare pro, q,o,n, q1,o1,n1, lname any;
                declare i, j, l, m integer;
                i := 0;
                m := length( self.s_procs );
                while( i < m )
                {
                  q := aref( aref( self.s_procs, i), 0);
                  o := aref( aref( self.s_procs, i), 1);
                  n := aref( aref( self.s_procs, i), 2);
                  pro := concat(q,'.',o,'.',n);
                  lname := att_local_name (self.ds_name, n);
                  q1 := name_part (lname, 0);
                  o1 := name_part (lname, 1);
                  n1 := SYS_ALFANUM_NAME(n);
                  declare cols, ncols, k, wrapit any;
                  declare pars varchar;
                  if (q = '') q := NULL;
                  cols := sql_procedure_cols (self.ds_name, q, o, n, NULL);
                  j := 0; l := length (cols); k := 0;
                  ncols := make_array (l, 'any');
                  wrapit := '';
                  while (j < l)
                  {
                    declare stype, sprec, sscale any;
                    declare type, prec, scale, ty, nam any;
                    stype := cols[j][5];
                    sprec := cols[j][7];
                    sscale := cols[j][10];
                    att_sql_to_dv_type (stype, sprec, sscale, type, prec, scale);
                    ty := case cols[j][4]
                           when 1 then 'IN'
                           when 4 then 'OUT'
                           when 2 then 'INOUT'
                           when 3 then 'RESULTSET'
                           when 5 then 'RETURNS'
                           else 'UNDEFINED'
                          end;
                    if (ty = 'OUT' and cols[j][6] = 'PL/SQL TABLE')
                    {
                      ty := 'RESULTSET';
                    }
                    wrapit := 'checked';
                    nam := SYS_ALFANUM_NAME (cols[j][3]);
                    if (cols[j][4] <> 5 and length (cols[j]) > 16 and cols[j][17] <= l)
                    {
                      aset (ncols, cols[j][17] - 1, vector( ty, nam, dv_type_title(type) ));
                    }
                    else if (cols[j][4] <> 5)
                    {
                      aset (ncols, k, vector (ty, nam, dv_type_title (type)));
                      k := k + 1;
                    }
                    else
                      aset (ncols, l - 1, vector (ty, nam, dv_type_title (type)));
                    j:=j+1;
                  }
                  declare s_procs any;
                  s_procs := self.s_procs;
                  aset( s_procs, i, vector_concat( aref(s_procs, i), vector(ncols)) );
                  self.s_procs := s_procs;
                  declare _p_pat varchar;
                  _den := '';
                  _p_pat := pro;
                  _p_pat := replace (_p_pat, '*', '\\*');
                  _p_pat := replace (_p_pat, '+', '\\+');
                  _p_pat := replace (_p_pat, ']', '\\]');
                  _p_pat := replace (_p_pat, '[', '\\[');
                  _p_pat := replace (_p_pat, '(', '\\(');
                  _p_pat := replace (_p_pat, ')', '\\)');
                  _p_pat := replace (_p_pat, '.', '\\.');
                  if( exists (select 1 from SYS_PROCEDURES where regexp_match (sprintf ('\-\-"DSN:%s PROCEDURE:%s"', self.ds_name, _p_pat), coalesce (P_TEXT, blob_to_string(P_MORE))) is not null))
                  {
                    _den := '<span class="attention_marker">*</span>';
                    _deni := _deni + 1;
                  }
              ?>
      <tr>
        <td class="SubData">
          <table class="MainSubData" BORDER="0" CELLPADDING="0" CELLSPACING="0">
            <tr class="SubSubInfo">
              <th>Remote Name</th>
              <th>Catalog</th>
              <th>Schema (Owner)</th>
              <th>Local Name</th>
              <th>Description</th>
            </tr>
            <tr class="SubAction">
              <td><?vsp http(_den); ?><?V q ?>.<?V o ?>.<?V n ?></td>
              <td><input type="text" name="<?V sprintf('Q_%d',i) ?>" value="<?V q1 ?>"/></td>
              <td><input type="text" name="<?V sprintf('O_%d',i) ?>" value="<?V o1 ?>"/></td>
              <td><input type="text" name="<?V sprintf('N_%d',i) ?>" value="<?V n1 ?>"/></td>
              <td><input type="text" name="<?V sprintf('COMMENT_%d',i) ?>" value=""/></td>
            </tr>
            <tr>
              <th class="SubSubInfo">PL Wrapper Requirements</th>
              <td class="SubAction" colspan="4" align="left">
                  <input type="radio" name="<?V sprintf('wrap_%d',i) ?>" value="wrap" checked="true"/>SOAP Execution&nbsp;&nbsp;
                  <input type="radio" name="<?V sprintf('wrap_%d',i) ?>" value="rset"/>SQL Execution&nbsp;&nbsp;
                  <input type="radio" name="<?V sprintf('wrap_%d',i) ?>" value="attach"/>None
              </td>
            </tr>
          </table>
          <table class="MainSubData" BORDER="0" CELLPADDING="0" CELLSPACING="0">
            <tr class="SubSubInfo"><th COLSPAN="4" align="center">Parameters</th></tr>
            <tr class="SubSubInfo">
              <th>Type</th>
              <th>Name</th>
              <th>Data Type</th>
              <th>SOAP Type</th>
            </tr>
<?vsp
          j := 0;
          pars := '(';
          declare cl integer;
          cl := 0;
          while (j < l) {
            declare dt_type varchar;
            if (not isarray(ncols[j]))
               goto next_j;
            dt_type := ncols[j][2];
            if( dt_type = 'NVARCHAR'
                and (driv like 'OPL%' or driv like 'SQL_%')
                and upper (sys_stat ('st_build_opsys_id')) <> 'WIN32') {
                dt_type := 'VARCHAR';
            }
            if (ncols[j][0] <> 'RETURNS') {
               pars := concat (pars, ncols[j][0], ' ', ncols[j][1], ' ', dt_type, ', ');
?>
            <tr class="SubAction">
              <td>
<?vsp
               if (ncols[j][0] = 'RESULTSET') {
?>
                  <?V ncols[j][0] ?>
<?vsp
               }
               else {
?>
                <select name="<?V sprintf('parm_%d_%s_io',i, ncols[j][1]) ?>">
                  <option name="IN" selected="<?V true_if('IN', ncols[j][0]) ?>">IN</option>
                  <option name="OUT" selected="<?V true_if('OUT', ncols[j][0]) ?>">OUT</option>
                  <option name="INOUT" selected="<?V true_if('INOUT', ncols[j][0]) ?>">INOUT</option>
                </select>
<?vsp
               }
?>
              </td>
              <td><?V ncols[j][1] ?></td>
              <td><?vsp adm_make_option_list (type1, sprintf('parm_%d_%s_t', i, ncols[j][1]), dt_type, 0); ?></td>
              <td><?vsp adm_make_option_list (type2, sprintf('parm_%d_%s_s', i, ncols[j][1]), '', 1); ?></td>
            </tr>
<?vsp
            }
            else {
              pars := trim (pars, ', ');
              pars := concat (pars, ') RETURNS ', dt_type);
              cl := 1;
?>
            <tr class="SubAction">
              <td><?V initcap(lcase(ncols[j][0]))?></td>
              <td></td>
              <td><?vsp adm_make_option_list (type1, sprintf('parm_%d_%s_t', i, ncols[j][1]), dt_type, 0); ?></td>
              <td><?vsp adm_make_option_list (type2, sprintf('parm_%d_%s_s', i, ncols[j][1]), '', 1); ?></td>
            </tr>
<?vsp
            }
next_j:;
            j:=j+1;
          } -- end while ncols
          if (not cl) {
             pars := trim (pars, ', ');
             pars := concat (pars, ')');
          }
?>
          </table>
        </td>
      </tr>
<?vsp
          if( length(self.p_msgs) > i ) {
?>
      <tr class="AttentionData">
        <td colspan="6">ERROR: <?V aref(self.p_msgs, i) ?></td>
      </tr>
<?vsp
          }
          i := i + 1;
     }
?>
    </table>
<?vsp
     if (_deni) {
?>
      <!--tr><td--><span class="attention_marker">*</span> Denotes resource already linked.<br/>
              You must select a primary key before VIEWS can be linked.<br/><!--/td></tr-->
<?vsp
     }
?>
     <!--tr><td align="center"-->
              <v:button action="simple" name="cancel2" value="Cancel">
                <v:on-post><v:script><![CDATA[
                    self.p_mode := '1';
                ]]></v:script></v:on-post>
              </v:button>
              <v:button action="simple" name="link2" value="Link">
                <v:on-post><v:script><![CDATA[

                    declare err_tables, err_messages, err_pks any;

                    err_tables := vector(); err_messages := vector(); err_pks := vector();
                    vdb_link_tables( 't', self.vc_page.vc_event.ve_params, self.ds_name, self.s_tables, self.pks_t, err_tables, err_pks, err_messages );
                    self.s_tables := err_tables; self.t_msgs := err_messages; self.pks_t := err_pks;
                    err_tables := vector(); err_messages := vector(); err_pks := vector();
                    return;
                    vdb_link_tables( 's', self.vc_page.vc_event.ve_params, self.ds_name, self.s_stables, self.pks_st, err_tables, err_pks, err_messages );
                    self.s_stables := err_tables; self.s_msgs := err_messages; self.pks_st := err_pks;
                    err_tables := vector(); err_messages := vector(); err_pks := vector();
                    vdb_link_tables( 'v', self.vc_page.vc_event.ve_params, self.ds_name, self.s_views, self.pks_v, err_tables, err_pks, err_messages );
                    self.s_views := err_tables; self.v_msgs := err_messages; self.pks_v := err_pks;
                    err_tables := vector(); err_messages := vector(); err_pks := vector();
                    vdb_link_procedures( self.vc_page.vc_event.ve_params, self.ds_name, self.s_procs, err_tables, err_messages );
                    self.s_procs := err_tables; self.p_msgs := err_messages;

                    if( length(self.s_tables) + length(self.s_stables) + length(self.s_views) + length(self.s_procs) = 0 )
                      self.p_mode := '1';
                    else
                      self.p_mode := '3'; -- stay on the same screen to show and fix errors
                ]]></v:script></v:on-post>
              </v:button>
      <!--/td></tr-->
    <!--/table-->
      </v:form>
  </v:template>
  <v:template name="mode_temp4" type="simple" condition="self.p_mode = '4'">
  <?vsp
        self.return_path := sprintf('vdb_link.vspx?sid=%s&realm=%s',self.sid, self.realm);
  ?>
      <v:form name="pk_form" type="simple" method="POST" action="--self.return_path">
        <?vsp
          declare i, n integer;
          declare num integer;
          declare tables, all_pks, pks, fields, col_s any;
          self.tbl_no := atof(get_keyword( 'idx', self.vc_page.vc_event.ve_params, '' ));
          self.tbl_type := get_keyword( 'class', self.vc_page.vc_event.ve_params, '' );
          tables := case self.tbl_type
                       when 't' then self.s_tables
                       when 's' then self.s_stables
                       when 'v' then self.s_views
                       else vector()
                     end;
          all_pks := case self.tbl_type
                       when 't' then self.pks_t
                       when 's' then self.pks_st
                       when 'v' then self.pks_v
                       else vector()
                     end;
          pks := all_pks[self.tbl_no];
          fields := vector();
          col_s := sql_columns (self.ds_name, tables[self.tbl_no][0], tables[self.tbl_no][1], tables[self.tbl_no][2], NULL);
          n := length (col_s);
          i := 0;
          while (i < n) {
            fields := vector_concat (fields, vector(col_s[i][3]));
            i := i + 1;
          }
        ?>
        <table class="MainSubData" border="0" cellspacing="0" cellpadding="3">
          <tr>
            <th>Available Fields for
                <?V make_full_name( tables[self.tbl_no][0], tables[self.tbl_no][1], tables[self.tbl_no][2] ) ?>
                <span class="attention_marker">*</span>
            </th>
          </tr>
          <tr>
            <td>
              <select name="pk_fields" multiple="true">
                  <?vsp
                    i := 0;
                    n := length (fields);
                    while (i < n) {
                      declare j, m integer;
                      declare selected varchar;
                      selected := '';
                      j := 0;
                      m := length(pks);
                      while( j < m ) {
                        if( fields[i] = pks[j] ) { selected := ' selected="true"'; goto next_; }
                        j := j + 1;
                      }
                    next_:
                      http( sprintf('<option value="%s"%s>%s</option>', fields[i], selected, fields[i] ) );
                      i := i + 1;
                    }
                  ?>
              </select>
            </td>
          </tr>
          <tr>
            <td align="center">
              <v:button action="simple" name="cancel3" value="Cancel">
                <v:on-post>
                  <v:script><![CDATA[
                      self.p_mode := '3';
                    ]]>
                  </v:script>
                </v:on-post>
              </v:button>
              <v:button action="simple" name="ok_pk" value="OK">
                <v:on-post>
                  <v:script><![CDATA[
                    declare pos integer;
                    declare all_pks, pks any;
                    pks := vector();
                    pos := position ('pk_fields', self.vc_page.vc_event.ve_params, 0, 2);
                    while( pos > 0 ) {
                      pks := vector_concat( pks, vector(aref(self.vc_page.vc_event.ve_params, pos)) );
                      pos := pos + 2;
                      pos := position ('pk_fields', self.vc_page.vc_event.ve_params, pos, 2);
                    }

                    all_pks := case self.tbl_type
                             when 't' then self.pks_t
                             when 's' then self.pks_st
                             when 'v' then self.pks_v
                             else vector()
                           end;
                    aset( all_pks, self.tbl_no, pks );
                    if( self.tbl_type = 't' )
                      self.pks_t := all_pks;
                    else if( self.tbl_type = 's' )
                      self.pks_st := all_pks;
                    else if( self.tbl_type = 'v' )
                      self.pks_v := all_pks;
                    self.p_mode := '3';
                    ]]>
                  </v:script>
                </v:on-post>
              </v:button>
            </td>
          </tr>
        </table>
      </v:form>
  </v:template>
</v:template>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
