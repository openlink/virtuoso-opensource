<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="event_edit_page" decor="yacutia_decor.vspx" style="yacutia_style.xsl" fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
  <vm:pagetitle>Virtuoso HTTP Database Replication</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable persist="0" name="ename" type="varchar" default="''"/>
      <v:variable persist="0" name="_item" type="varchar" default="''"/>
      <v:variable persist="0" name="_item_type" type="integer" default="0"/>
      <v:variable persist="1" name="error_str198" type="varchar" default="''"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="Bidirectional Snapshot Replication"/>
    </vm:menu>
    <vm:header caption="Bidirectional Snapshot Conflict Resolvers"/>
    <vm:rawheader>
      <?vsp
        declare _item varchar;
        _item := get_keyword('item', self.vc_page.vc_event.ve_params);
        if (_item)
          self._item := cast(deserialize(decode_base64(_item)) as varchar);
        self._item_type := atoi(get_keyword('item_type', self.vc_page.vc_event.ve_params, '0'));
        http ('<div> for ');
        if (self._item_type = 1)
          http(sprintf('WebDAV collection <b>%s</b>', self._item));
        else
          http(sprintf('Table <b>%s</b>', self._item));
        http('</div><br/>');
      ?>
    </vm:rawheader>
    <vm:pagebody vdb_check="1">
      <v:form name="event_form1" type="simple" method="POST" action="">
        <v:before-data-bind>
          <v:script>
            <![CDATA[
              declare _item varchar;
              _item := get_keyword('item', self.vc_page.vc_event.ve_params);
              if (_item)
                self._item := cast(deserialize(decode_base64(_item)) as varchar);
              self._item_type := atoi(get_keyword('item_type', self.vc_page.vc_event.ve_params, '0'));
            ]]>
          </v:script>
        </v:before-data-bind>
        <input type="hidden" name="item" value="<?V get_keyword('item', self.vc_page.vc_event.ve_params) ?>"/>
        <input type="hidden" name="item_type" value="<?V get_keyword('item_type', self.vc_page.vc_event.ve_params) ?>"/>

        <?vsp
          declare _count integer;
          _count := 0;
          if (self._item_type = 1)
          {
        ?>
          <table class="listing" rules="groups">
            <thead>
              <tr class="listing_header_row">
                <th class="checkbox"/>
                <th width="16px"/>
                <th>Procedure</th>
                <th>Order</th>
              </tr>
            </thead>
            <?vsp
              for select cr_id, cr_col_name, cr_proc, cr_order from db.dba.sys_dav_cr where cr_col_name = self._item order by cr_order do
              {
                _count := _count + 1;
                declare _cr_proc varchar;
                _cr_proc := replace(cr_proc, '"', '');
            ?>
            <tr>
              <td class="listing_col"><input type="checkbox" name="CB_<?V cr_id ?>"/></td>
              <td class="listing_col">
                <img src="images/icons/script_16.png" alt="Stored procedure" title="Stored procedure"/>
              </td>
              <td class="listing_col"><a href="db_repl_bi_cr_edit.vspx?item=<?V encode_base64(serialize(self._item)) ?>&item_type=<?V self._item_type ?>&proc=<?V encode_base64(serialize(_cr_proc)) ?>&sid=<?V self.sid ?>&realm=<?V self.realm ?>"><?V _cr_proc ?></a></td>
              <td class="listing_col_num"><?V cr_order ?></td>
            </tr>
            <?vsp
              }
              if (_count = 0)
              {
                http ('<tr><td colspan="4" class="Attention">No conflict resolvers defined for this collection</td></tr>');
              }
            ?>
          </table>
        <?vsp
          }
          else
          {
        ?>
          <table class="listing" rules="groups">
            <colgroup/><colgroup/><colgroup/><colgroup/>
            <thead>
              <tr class="listing_header_row">
                <th class="checkbox"/>
                <th width="16px"/>
                <th>Type</th>
                <th>Procedure</th>
                <th>Order</th>
              </tr>
            </thead>
            <?vsp
              for select cr_id, cr_table_name, cr_type, cr_proc, cr_order from db.dba.sys_snapshot_cr where cr_table_name = self._item order by cr_type, cr_order do
              {
                _count := _count + 1;
                declare _cr_proc varchar;
                _cr_proc := replace (cr_proc, '"', '');

                http (sprintf ('<tr class="%s">', case when mod (_count, 2) then 'listing_row_odd' else 'listing_row_even' end));
            ?>
              <td class="listing_col"><input type="checkbox" name="CB_<?V cr_id ?>"/></td>
              <td class="listing_col">
                <img src="images/icons/script_16.png" alt="Stored procedure" title="Stored procedure"/>
              </td>
              <td class="listing_col"><?V cr_type ?></td>
              <td class="listing_col"><a href="db_repl_bi_cr_edit.vspx?item=<?V encode_base64(serialize(self._item)) ?>&item_type=<?V self._item_type ?>&proc=<?V encode_base64(serialize(_cr_proc)) ?>&sid=<?V self.sid ?>&realm=<?V self.realm ?>"><?V _cr_proc ?></a></td>
              <td class="listing_col_num"><?V cr_order ?></td>
              <?vsp
                  http ('</tr>');
                }
                if (_count = 0)
                  http('<tr><td colspan="5" class="Attention">No conflict resolvers defined for this table</td></tr>');
              ?>
            </table>
          <?vsp
            }
          ?>
          <div class="listing_bot_ctl_grp">
            <v:button action="simple" name="cancel3" value="Cancel">
              <v:on-post>
                <v:script>
                  <![CDATA[
                    http_request_status('HTTP/1.1 302 Found');
                    http_header(sprintf('Location: db_repl_bi.vspx?sid=%s&realm=%s&item=%s&item_type=%s\r\n', self.sid, self.realm, encode_base64(serialize(self._item)), cast(self._item_type as varchar)));
                  ]]>
                </v:script>
              </v:on-post>
            </v:button>
            <?vsp
              if (_count > 0)
              {
            ?>
              <v:button action="simple" name="remove_conflict" value="Remove">
                <v:on-post>
                  <v:script>
                    <![CDATA[
                      declare _cr_id varchar;
                      declare _idx integer;
                      _idx := 0;
                      declare _state, _msg varchar;
                      while (_cr_id := adm_next_checkbox('CB_', self.vc_page.vc_event.ve_params, _idx))
                      {
                        _state := '00000';
                        _msg := '';
                        declare _crtbl varchar;
                        if (self._item_type = 1)
                          _crtbl := 'DB.DBA.SYS_DAV_CR';
                        else
                          _crtbl := 'DB.DBA.SYS_SNAPSHOT_CR';
                        exec(sprintf('delete from %s where CR_ID = ?', _crtbl), _state, _msg, vector(_cr_id));
                        if (_state <> '00000')
                        {
                          self.error_str198 := concat(self.error_str198, '<tr><td>', _msg, '</td></tr>');
                        }
                      }
                    ]]>
                  </v:script>
                </v:on-post>
              </v:button>
            <?vsp
              }
            ?>
            <v:button action="simple" name="add_conflict" value="New Resolver">
              <v:on-post>
                <v:script>
                  <![CDATA[
                    http_request_status('HTTP/1.1 302 Found');
                    http_header(sprintf('Location: db_repl_cr_edit.vspx?sid=%s&realm=%s&item=%s&item_type=%s\r\n', self.sid, self.realm, encode_base64(serialize(self._item)), cast(self._item_type as varchar)));
                  ]]>
                </v:script>
              </v:on-post>
            </v:button>
          </div>
      </v:form>
      <?vsp
        if (self.error_str198 <> '' and self.error_str198 is not null)
          http(sprintf('<table class="warning">%s</table>', self.error_str198));
        self.error_str198 := '';
       ?>
       <!--
       <span class="listing_hdr_qual">
   Notes:
   <ul>
     <li>To add new subscriber server, press the "New Subscriber" button.</li>
     <li>To initialize the subscription select some subscriber(s) and press "Initial copy" button.</li>
     <li>To remove some subscriber server (stops replication on it)
       from this publication, select some subscriber(s) and press
       "Delete" button.</li>
     <li>The "Last pull time" are timestamps when last time
       data changes was readed from subscriber and stored locally.
     </li>
     <li>The "Last push time" are timestamps when last time
       local data changes was stored on the subscriber.
     </li>
     <li>To change the interval for automatic synchronization of this publication, fill
       the "Update Interval" (in minutes) and press button "Set".</li>
     <li>To define a new conflict resolver procedure press "New Resolver" button.</li>
     <li>To delete a conflict resolver procedure select some and press "Remove" button.</li>
     <li>To edit the conflict resolver procedure, click over procedure's name link.</li>
     <li>To return to the publications page, press any of "Cancel" buttons or click the
       "Bidirectional Snapshot" link on tab desk.</li>
   </ul>
      </span>-->
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
