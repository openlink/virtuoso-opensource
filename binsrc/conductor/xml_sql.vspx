<?xml version="1.0" ?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="xml_sql_query_execute_page"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        vm:owner="yacutia_sql_xml_page"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>SQL-XML Queries</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="for_xml_query" default="null" type="varchar" persist="0"/>
      <v:variable name="xml_auto_error" default="null" type="varchar" persist="0"/>
      <v:variable name="save_path_value" default="null" type="varchar" persist="0"/>
      <v:variable name="xslt_path_value" default="null" type="varchar" persist="0"/>
      <v:variable name="doc_def" default="null" type="varchar" persist="0"/>
      <v:variable name="xslt_include_flag" default="null" type="varchar" persist="0"/>
      <v:variable name="flag" default="0" type="integer" persist="0"/>
      <v:variable name="crpath" default="null" type="varchar" persist="temp" param-name="created"/>
      <v:variable name="qtype" default="0" type="int" persist="temp" param-name="qtype"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="SQL-XML"/>
    </vm:menu>
    <vm:header caption="SQL - XML"/>
    <vm:pagebody>
    <v:template name="for_xml_query_result_template"
                type="simple"
                enabled="--case when (get_keyword('page', self.vc_event.ve_params) = '0' and
                                       get_keyword('mode', self.vc_event.ve_params)='result' ) then 1 else 0 end">
      <table class="main_page_area">
        <tr>
          <td >
            <div>
	      <img class="dialog_icon" src="images/icons/about_32.png" alt="Stop" title="Stop"/>
              <?vsp
                http('The');
		if (self.qtype = 2)
                  http(' FOR-XML query ');
                else if (self.qtype = 0)
                  http(' SQLX query ');
                else
                  http(' XML VIEW, based on mapping schema ');
                http('has been stored');
	      ?>
	      as a WebDAV resource "<v:url name="test_link1" value="--self.crpath" url="--self.crpath"
		xhtml_target="_blank">
		<v:before-render>
		  control.vu_l_pars := '';
		</v:before-render>
	      </v:url>".
            </div>
          </td>
        </tr>
        <tr>
          <td>
            <table>
              <v:form name="account_form" type="simple" method="POST" action="">
                <v:on-post>
                  <![CDATA[
		    self.vc_redirect ('xml_sql.vspx?page=1');
                  ]]>
                </v:on-post>
                <tr>
                  <td align="center">
                    <v:button action="submit" name="apply" value="Back" xhtml_style="size:64;"/>
                  </td>
                </tr>
              </v:form>
            </table>
          </td>
        </tr>
      </table>
    </v:template>
    <v:template name="for_xml_query_remove_template"
                type="simple" enabled="--case when (get_keyword ('mode', control.vc_page.vc_event.ve_params) = 'delete' and
                                                    get_keyword ('page', control.vc_page.vc_event.ve_params) = '0') then 1 else 0 end">
          <div class="confirm_dialog">
            <img class="dialog_icon" src="images/icons/stop_32.png" alt="Stop" title="Stop"/>
            <div class="confirm_text">
            The FOR XML query
              <?vsp
                if ( get_keyword ('res', control.vc_page.vc_event.ve_params) is not null)
                  {
                    http(' <span style="{color:blue}">');
                    http(get_keyword ('res', control.vc_page.vc_event.ve_params));
                    http(' </span>');
                  }
              ?>
will be removed permanently.
            </div>
            <div class="dialog_buttons">
              <v:form name="query_remove_form" type="simple" method="POST" action="">
                <input type="hidden" name="res" value="<?= get_keyword('res', control.vc_page.vc_event.ve_params) ?>"/>
                <v:on-post>
                    <![CDATA[
                      if (get_keyword ('xml_view_delete', params) is not null)
                        {
                          declare res varchar;
                          res := get_keyword ('res', params);
                          DAV_DELETE_INT (res, 0, null, null, 0);
                        }
                      http_request_status ('HTTP/1.1 302 Found');
                      http_header (sprintf('Location: xml_sql.vspx?page=2&mode=list&sid=%s&realm=%s\r\n',self.sid ,self.realm));
                    ]]>
                </v:on-post>
                     <v:button action="submit" name="xml_view_delete" value="Delete" xhtml_style="size:64;"/>
                     <v:button action="submit" name="xml_view_cancel" value="Cancel" xhtml_style="size:64;"/>
		   </v:form>
		 </div>
	       </div>
    </v:template>
    <v:template name="for_xml_query_template"
                type="simple"
                enabled="--case when (get_keyword('page', control.vc_page.vc_event.ve_params) is null or
                                      get_keyword('page', control.vc_page.vc_event.ve_params)<> '0') then 1 else 0 end">



      <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
        <tr valign='top'>
          <td>
            <table cellpadding='10' cellspacing='0' border='0' width='100%'>
              <tr>
                <td>
                  <table cellpadding="0" cellspacing="0" border="0">
                    <colgroup>
                      <col/>
                      <col/>
                      <col/>
                      <col/>
                   </colgroup>
                   <tr> <!-- 1  page Query is active -->
                     <v:template name="tabTemplate1"
                                 type="simple"
                                 enabled="--case when (get_keyword('page', control.vc_page.vc_event.ve_params) = '1' or
                                                       get_keyword('page', control.vc_page.vc_event.ve_params) is null) then 1 else 0 end">
                       <td class="page_tab_selected" align="center">
                         &nbsp;&nbsp;Query&nbsp;&nbsp;
                       </td>
                       <td class="page_tab" align="center">
                         &nbsp;&nbsp;
                         <v:url name="b_url12" value="--'Stored&nbsp;Queries'" format="%s"
                                url="--'xml_sql.vspx?page=2&mode=list'" xhtml_class="uddi"/>
                         &nbsp;&nbsp;
                       </td>
                       <td class="page_tab_empty" width="100%">
                         <table cellpadding="0" cellspacing="0">
                           <tr>
                             <td width="100%">
                             </td>
                           </tr>
                         </table>
                       </td>
                     </v:template>
                     <!-- 2 page List is active -->
                     <v:template name="tabTemplate2"
                                 type="simple"
                                 enabled="--case when ( get_keyword('page', control.vc_page.vc_event.ve_params) ='2' ) then 1 else 0 end">
                       <td class="page_tab">

                           &nbsp;&nbsp;
                           <v:url name="b_url21"
                                  value="Query"
                                  format="%s"
                                  url="xml_sql.vspx?page=1"
                                  xhtml_class="uddi"/>
                           &nbsp;&nbsp;

                       </td>
                       <td class="page_tab_selected">
                         &nbsp;&nbsp;Stored&nbsp;Queries&nbsp;&nbsp;
                       </td>
                       <td class="page_tab_empty" align="center" width="100%">
                          &amp;nbsp;
                       </td>
                     </v:template>
                   </tr>
                 </table>
                 <table class="tab_page">
                   <tr>
                     <td valign="top">
                       <!-- -->
                         <v:template name="for_xml_query_compose_template"
                                     type="simple"
                                     enabled="--case when ((get_keyword('page',
                                                                        control.vc_page.vc_event.ve_params) = '1' or
                                                            get_keyword('page',
                                                                        control.vc_page.vc_event.ve_params) is null ) and
                                                           (get_keyword('mode',
                                                                        control.vc_page.vc_event.ve_params) = 'edit' or
                                                            get_keyword('mode',
                                                                        control.vc_page.vc_event.ve_params) is null)) then 1 else 0 end">
                           <vm:form name="xml_sql_execute_form" type="simple" method="POST" action="">
                             <vm:attrs border="0"
                                       class="main_page_area"
                                       width="100%"
                                       cellspacing="0"
                                       cellpadding="5"
                                       align="center"/>
                             <vm:events>
			       <v:after-data-bind><![CDATA[
				  declare pat, is_sqlxml any;

				  pat := get_keyword ('res', params);
                                  if (get_keyword('mode', params) = 'edit' and pat is not null)
                                    {
				      declare id, perms, owner, grp, len, uname, gname, content any;

				      whenever not found goto nf;

				      select RES_ID, RES_PERMS, RES_OWNER, RES_GROUP, length (RES_CONTENT), RES_CONTENT into
				       id, perms, owner, grp, len, content from WS.WS.SYS_DAV_RES
				       where RES_FULL_PATH = pat;

				       uname :=coalesce((select U_NAME from SYS_USERS where U_ID = owner), 'none');
				       gname :=coalesce((select U_NAME from SYS_USERS where U_ID = grp), 'none');

				       self.owner.ufl_value := uname;
				       self.owner.vs_set_selected ();
				       self."group".ufl_value := gname;
				       self."group".vs_set_selected ();

				       self.save_path.ufl_value := pat;
				       self.replace_existing.ufl_selected := 1;

				       if (len = 0)
				         {
				           self.realtime_enable.ufl_selected := 1;
					 }
				       else
				         {
					   self.persist_enable.ufl_selected := 1;
					 }

				       is_sqlxml := 0;

				       for select blob_to_string (PROP_VALUE) as PROP_VALUE, PROP_NAME
				         from WS.WS.SYS_DAV_PROP
					 where PROP_PARENT_ID = id and PROP_TYPE = 'R'
					 and PROP_NAME in ('xml-sql', 'xml-sql-schema', 'xml-sql-dtd',
					  'sqlx-sql', 'sqlx-sql-root', 'xml-stylesheet',
					  'xml-sql-root', 'xml-template', 'xml-sql-description')
					do
					 {
					   if (PROP_NAME = 'xml-sql')
					     is_sqlxml := 1;

					   if (PROP_NAME in ('sqlx-sql-root', 'xml-sql-root'))
					     {
					       self.t_root_node.ufl_value := PROP_VALUE;
					     }
					   else if (PROP_NAME in ('xml-sql', 'sqlx-sql'))
					     {
					       self.query_text.ufl_value := PROP_VALUE;
					     }
					   else if (PROP_NAME = 'xml-sql-schema')
					     {
					       self.doc_definition_case_2.ufl_selected := 1;
					     }
					   else if (PROP_NAME = 'xml-sql-dtd')
					     {
					       if (PROP_VALUE = 'on')
					         self.doc_definition_case_4.ufl_selected := 1;
					       else
					         self.doc_definition_case_3.ufl_selected := 1;
					     }
					   else if (PROP_NAME = 'xml-stylesheet')
					     {
					       declare pos int;
					       if (length (PROP_VALUE) > 51 and PROP_VALUE like 'virt:%')
					         self.style_path_control.ufl_value :=
					              substring (PROP_VALUE, 52, length (PROP_VALUE));
					       else
					         self.style_path_control.ufl_value := PROP_VALUE;
					       self.xslt_include.ufl_selected := 1;
					       -- Remove the disabled attribute
					     }
					     else if (PROP_NAME = 'xml-template' and len > 0)
					     {
					       declare xt, map, sqlx, sqlq, pars any;

					       self.template_enable.ufl_selected := 1;
					       self.realtime_enable.ufl_selected := 0;
					       self.persist_enable.ufl_selected := 0;
					       xt := xtree_doc (content);
					       map := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:xquery[@mapping-schema]/text()', xt);
					       sqlx := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:sqlx/text()', xt);
					       sqlq := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:query/text()', xt);
					       pars := xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:param', xt);
					       if (sqlx is not null)
					         {
					           self.query_text.ufl_value := sqlx;
						   self.t_root_node.ufl_value := xpath_eval ('local-name(/*[1])', xt);
						 }
					       else if (sqlq is not null)
					         {
					           self.query_text.ufl_value := sqlq;
				                 }
					       else if (map is not null)
					         {
					           self.query_text.ufl_value := map;
						   self.t_root_node.ufl_value := xpath_eval ('local-name(/*[1])', xt);
						   self.apply_mapping_schema.ufl_value := 'map';
						   self.apply_mapping_schema.vs_set_selected ();
						   self.mapping_schema_control.ufl_value := cast (xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:xquery/@mapping-schema' , xt ) as varchar);
						   self.mapping_schema_control.vs_set_selected ();
						 }
					       if (pars)
					         {
					           self.vc_is_valid := 0;
						   self.vc_error_message := 'The XML Template contains parameters, which is not supported in this utility.\r\nPlease replace the parameters with constants in the query before trying it.';
				                 }
					     }
					   else if (PROP_NAME = 'xml-sql-description')
					     {
					       self.t_desc.ufl_value := PROP_VALUE;
					     }
					 }
					if (self.persist_enable.ufl_selected and is_sqlxml)
					  {
					    self.update_interval.ufl_value :=
					    coalesce ((select SE_INTERVAL from DB.DBA.SYS_SCHEDULED_EVENT
					       where SE_NAME = pat), 10);
					  }
					if (not self.xslt_include.ufl_selected)
					  self.style_path_control.vc_add_attribute ('disabled', '1');
				      nf:;
                                    }

				 ]]></v:after-data-bind>
                               <v:on-post>
                                 <![CDATA[
	       {
		 declare r, xst  , r_node, doc, user_perm, apply_mapping_schema varchar;
		 declare query_text long varchar;
		 declare st, ses, lexems any;
		 declare path,  doc_def, dtd_body, schema_body,res_string varchar;
		 declare dtd_name, dtd_content, schema_name, style_path varchar;
		 declare i, len, pos,  nrow, rows, cols, ncol, mflag  integer;
		 declare lexems any;
		 declare lex_text varchar;
		 declare  sqlx_result, row_data, xquery_eval_result  any;
		 declare err_sqlstate, err_msg  varchar;
		 declare m_dta any;

		 if (get_keyword ('cancel', params) is not null)
		   {
		     http_request_status ('HTTP/1.1 302 Found');
		     http_header (sprintf ('Location: xml_sql.vspx?page=2&mode=list&sid=%s&realm=%s\r\n',
					   self.sid ,self.realm));
		     return;
		   }

		 declare exit handler for sqlstate '*' {
		   self.vc_is_valid := 0;
		   control.vc_error_message := regexp_match ('[^\r\n]*', __SQL_MESSAGE);
		   rollback work;
		   return;
	         };


		 if (e.ve_button = control)
		   {
		     -- automatic post
		     if (e.ve_initiator = self.apply_mapping_schema)
		       {
		         if (self.apply_mapping_schema.ufl_value = 'sql')
		           self.query_text.ufl_value := '';
			 else
			   self.query_text.ufl_value := '/*';
			 self.trx.vc_data_bind (e);
		       }
		     return;
		   }


		 r_node := get_keyword ('t_root_node', params);
		 query_text:= trim (get_keyword ('query_text',params));
		 len := length (query_text);

		 if (len > 1 and  chr (aref (query_text, len - 1)) = ';' )
		   query_text := substring (query_text, 1, len -1);

		 doc_def := get_keyword ('doc_definition_case',params);
		 path := get_keyword ('save_path',params);
		 style_path := get_keyword ('style_path_control',params);
		 doc := get_keyword ('choice_source',params);
		 apply_mapping_schema := get_keyword('apply_mapping_schema',params);
		 if (apply_mapping_schema = 'sql')
		   apply_mapping_schema := null;
		 else
		   apply_mapping_schema := '1';

		 self.for_xml_query := query_text;
		 self.save_path_value := path;
		 self.xslt_path_value := style_path;
		 self.doc_def := doc_def;
		 self.xslt_include_flag := get_keyword ('xslt_include',params) ;

		 if (query_text = '' and apply_mapping_schema is null)
		   {
		     signal ('22023',  'The statement is empty.');
		   }

		 if (apply_mapping_schema is null)
		   self.flag := y_check_query_type (query_text);

		 if (self.flag <> 0 and self.flag <> 2 and apply_mapping_schema is null)
		   {
		     signal ('22023',  'Statement should be FOR XML or SQLX.');
		   }
		 if (path = '')
		   {
		   signal ('22023', 'To execute this query a path to a WebDAV resource is required, Please enter the path next to the WebDAV resource path prompt.');
		   }

		 declare _dotp, _slp, dav_folder_owner, dav_folder_group integer;
		 declare file_perms, folders_message varchar;


		 _dotp := coalesce (strrchr (path, '.'), 0);
		 _slp := coalesce (strrchr (path, '/'), 0);

		 if (dav_path_validate (path,
					dav_folder_owner,
					dav_folder_group,
					file_perms,
					folders_message) <> 1 )
		   {
		     signal('22023', sprintf ('Storage path validation failed with error: %s',
						     folders_message));
		   }
		 else if (dav_check_permissions (connection_get ('vspx_user'),
					      file_perms,
					      '010',
					      dav_folder_owner,
					      dav_folder_group,
					      folders_message) <> 1)
		     {
		       signal ('22023', sprintf ('No permission to store in this folder. Error: %s',
						       folders_message));
		     }

		 if (r_node = '')
		   {
		     signal ('22023', 'Root XML Element is empty.');
		   }

		 if (get_keyword ('xslt_include', params) = '1')
		   {
		     if (style_path = '')
		       {
		         signal ('22023',
		             'XSLT transformation is requested, but no stylesheet file path was provided.');
		       }
		     else if (check_dav_file_permissions (style_path, connection_get ('vspx_user'), '100',
						       folders_message) <> 1)
			 {
			   signal ('22023', sprintf('Cannot access XSL Stylesheet: "%s".', folders_message));
			 }
		   }

		 if (doc = '1' and self.flag = 2 and apply_mapping_schema is null)
		   {
		     if (get_keyword ('update_interval', params) = '')
		       {
		         signal ('22023',
		           'Create XML in Real Time is requested, but no interval value is provided.');
		       }

		     if (regexp_match ('^[0-9]+$', get_keyword ('update_interval', params)) is null)
		       {
			 signal ('22023', 'The Persistent XML update interval must a number.');
		       }
		   }

		 user_perm := '';
		 user_perm := concat(user_perm, chr(self.user_permitions_own_r.ufl_selected + 48));
		 user_perm := concat(user_perm, chr(self.user_permitions_own_w.ufl_selected + 48));
		 user_perm := concat(user_perm, chr(self.user_permitions_own_x.ufl_selected + 48));
		 user_perm := concat(user_perm, chr(self.user_permitions_group_r.ufl_selected + 48));
		 user_perm := concat(user_perm, chr(self.user_permitions_group_w.ufl_selected + 48));
		 user_perm := concat(user_perm, chr(self.user_permitions_group_x.ufl_selected + 48));
		 user_perm := concat(user_perm, chr(self.user_permitions_other_r.ufl_selected + 48));
		 user_perm := concat(user_perm, chr(self.user_permitions_other_w.ufl_selected + 48));
		 user_perm := concat(user_perm, chr(self.user_permitions_other_x.ufl_selected + 48));
		 if (self.user_permitions_4_index.ufl_selected)
		   user_perm := concat(user_perm, 'R');
		 else
		   user_perm := concat(user_perm, 'N');


		 declare r_id int;
		 whenever not found goto nfr;

		 select RES_ID into r_id from WS.WS.SYS_DAV_RES where RES_FULL_PATH = path;

		 if (not self.replace_existing.ufl_selected)
		   signal ('22023', sprintf ('The WebDAV resource "%s" already exists.\nTo replace it select "Replace the existing resource" and retry.', path));

		 -- delete all existing related properties
		 delete from WS.WS.SYS_DAV_PROP
					 where PROP_PARENT_ID = r_id and PROP_TYPE = 'R'
					 and PROP_NAME in ('xml-sql', 'xml-sql-schema', 'xml-sql-dtd',
					  'sqlx-sql', 'sqlx-sql-root', 'xml-stylesheet',
					  'xml-sql-root', 'xml-template', 'xml-sql-description');
		 nfr:



		 if (self.flag = 2 and apply_mapping_schema is null )
		   {
		     if (doc <> '2')
		       {
			 st := string_output ();
			 xml_auto (query_text, vector (), st);
			 result_names (query_text);
			 ses :=   string_output ();
			 ses := string_output_string(st);

		       }

		     dtd_body :='';

		     if ((doc_def ='2' or doc_def ='3') and doc <> '2')
		       {
			 dtd_body := xml_auto_dtd (query_text, r_node);
			 dtd_content := dtd_body;

			 if (_dotp > _slp and _dotp > 0)
			   dtd_name := concat (substring (path, 1, _dotp), '.dtd');
			 else
			   dtd_name := concat (path, '.dtd');

			 if (doc_def ='3')
			   dtd_body := concat ('<!DOCTYPE ', r_node, ' [', dtd_body, ']>\n');
			 else
			   {
			     YAC_DAV_RES_UPLOAD (dtd_name, dtd_body, 'text/xml',user_perm, 'dav', 'administrators');
			     dtd_body := concat ('<!DOCTYPE ' , r_node, ' SYSTEM ''', dtd_name, '''>\n');
			   }
			 ses := concat(dtd_body,'<',r_node,'>',string_output_string(st),'</',r_node,'>');
		       }
		     else if (doc_def = '1' and doc <> '2')
		       {
			   schema_body := xml_auto_schema (query_text, r_node);

			   if (_dotp > _slp and _dotp > 0)
			     schema_name := concat (substring (path, 1, _dotp), '.xsd');
			   else
			     schema_name := concat (path, '.xsd');


			   YAC_DAV_RES_UPLOAD (schema_name, schema_body, 'text/xml', user_perm, 'dav', 'administrators');

			   ses := concat (dtd_body,
					  '\n<', r_node,
			  ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="',
					  schema_name, '">\n',
					  ses,
					  '</', r_node, '>\n');
			 }
		       else
			 if (doc_def ='0' and doc <> '2')
			   ses := concat('<',r_node,'>',string_output_string(st),'</',r_node,'>');

		     if (doc = '2')
		       {
			 schema_body  := xml_auto_schema (query_text, r_node);

			 res_string := '<?xml version="1.0" encoding="UTF-8"?>';
			 res_string := concat(res_string, '<', r_node, ' xmlns:sql="urn:schemas-openlink-com:xml-sql"');

			 if (length(style_path) > 0)
			   res_string := concat (res_string,' sql:xsl="', style_path,'">');
			 else
			   res_string := concat (res_string, '>');

			 res_string := concat (res_string, '<sql:query>');
			 res_string := concat (res_string, query_text, '</sql:query>');
			 res_string := concat (res_string, '</', r_node, '>');


			 YAC_DAV_RES_UPLOAD (path,  res_string, 'text/xml',user_perm, 'dav', 'administrators');
			 YAC_DAV_PROP_SET (path, 'xml-template','execute');
			 YAC_DAV_PROP_SET (path, 'xml-sql-root', r_node);
		       }
		     else
		       {
			 ses := concat (sprintf ('<?xml version="1.0" encoding="%s" ?>\n',
						 current_charset ()), ses);

			 if (get_keyword ('xslt_include', params) = '1')
			   {
			     r := xslt ('virt://WS.WS.SYS_DAV_RES.RES_FULL_PATH.RES_CONTENT:'||style_path,
			       xml_tree_doc (ses));
			   }

			   {
			     if (doc = '1' and self.flag = 2)
			       ses := '';
			     YAC_DAV_RES_UPLOAD (path,
					     ses,
					     'text/xml',
					     user_perm,
					     get_keyword ('owner', params),
					     get_keyword ('group', params));
			   }


			YAC_DAV_PROP_SET (path, 'xml-sql', query_text);


			 if (doc_def = '1')
			   YAC_DAV_PROP_SET (path, 'xml-sql-schema', schema_name);

		         if (doc_def = '2' or doc_def = '3')
			   {
			     declare prop varchar;
			     prop := 'on';
			     if (doc_def ='2')
			       prop := dtd_name;
			     YAC_DAV_PROP_SET (path, 'xml-sql-dtd', prop);
			   }

			 YAC_DAV_PROP_SET (path, 'xml-sql-root', r_node);

			 if (get_keyword ('xslt_include', params) = '1')
			   {
			     YAC_DAV_PROP_SET (path, 'xml-stylesheet',
				  sprintf ('virt://WS.WS.SYS_DAV_RES.RES_FULL_PATH.RES_CONTENT:%s', style_path));
			   }

			 delete from DB.DBA.SYS_SCHEDULED_EVENT where SE_NAME = path;
			 if (doc = '0')
			   {
			     declare _interval  integer;
			     _interval := atoi (get_keyword ('update_interval', params, '10'));

			     if (_interval > 0)
			       insert replacing DB.DBA.SYS_SCHEDULED_EVENT (SE_NAME, SE_START, SE_SQL, SE_INTERVAL)
				 values (path, now (), sprintf ('WS.WS.XML_AUTO_SCHED (''%s'')', path), _interval);
			   }

			}
		   }
		   else if (self.flag = 0  and apply_mapping_schema is null)
		     {
		         err_sqlstate := '00000';
			 exec (query_text, err_sqlstate, err_msg, vector(), 100, m_dta, sqlx_result);
			 if (err_sqlstate <> '00000' )
			   {
			     signal (err_sqlstate, err_msg);
			   }


	             if (doc = '2')
		       {
			 res_string := '<?xml version="1.0" encoding="UTF-8"?>';
			 res_string := concat(res_string, '<', r_node, ' xmlns:sql="urn:schemas-openlink-com:xml-sql"');

			 if (length(style_path) > 0)
			   res_string := concat (res_string,' sql:xsl="', style_path,'">');
			 else
			   res_string := concat (res_string, '>');

			 -- a trick to put CDATA
			 res_string := concat (res_string, sprintf ('<sql:sqlx><![%s[', 'CDATA'));
			 res_string := concat (res_string, query_text, sprintf ('%s></sql:sqlx>', ']]'));
			 res_string := concat (res_string, '</', r_node, '>');
			 YAC_DAV_RES_UPLOAD (path,  res_string, 'text/xml', user_perm, 'dav', 'administrators');
			 YAC_DAV_PROP_SET (path, 'xml-template','execute');
		       }
		    else if (doc = '1')
		       {
			  signal ('22023', 'Resources based on SQLX query can be persisted or stored as a template.');
		       }
		     else
		       {

			 rows :=  length (sqlx_result);
			 nrow := 0; mflag := 0;

			 while (nrow < rows)
			   {
			     row_data := sqlx_result[nrow];
			     cols :=  length(row_data);
			     ncol := 0;

			     while (ncol < cols)
			       {
				 if (aref (row_data, ncol) is not null )
				   {
				     if (mflag = 0)
				       {
					 ses := aref(row_data, ncol);
					 mflag := 1;
				       }
				     else
				       ses := XMLCONCAT (ses, aref (row_data, ncol));
				   }
				 ncol := ncol + 1;
			       }
			     nrow := nrow + 1;
			   }

			 st := string_output ();
			 http_value (ses, 0, st);

			 ses := concat (sprintf ('<?xml version="1.0" encoding="%s" ?>\n', current_charset ()),
					'<', r_node, '>',
					string_output_string (st),
					'</', r_node, '>');

			 if (get_keyword ('xslt_include', params) = '1' and doc = '0')
			   {
			     select blob_to_string (RES_CONTENT)
			       into xst
			       from WS.WS.SYS_DAV_RES
			       where RES_FULL_PATH = style_path;
			     xslt_sheet (xst, xml_tree_doc (xml_tree (xst)));
			     r := xslt (xst, xml_tree_doc (ses));
			     ses := string_output ();
			     http_value(r, 0, ses);
			     YAC_DAV_RES_UPLOAD (path,
					     string_output_string (ses),
					     'text/xml',
					     user_perm,
					     get_keyword ('owner', params),
					     get_keyword ('group', params));
			   }
			 else
			   YAC_DAV_RES_UPLOAD (path,
					   ses,
					   'text/xml',
					   user_perm,
					   get_keyword('owner', params),
					   get_keyword('group', params));

			 if (get_keyword ('xslt_include',params) = '1' and doc <> '0')
			   YAC_DAV_PROP_SET ( path, 'xml-stylesheet',
			   		sprintf('virt://WS.WS.SYS_DAV_RES.RES_FULL_PATH.RES_CONTENT:%s',
			     		style_path));
			 YAC_DAV_PROP_SET (path, 'sqlx-sql', query_text);
			 YAC_DAV_PROP_SET (path, 'sqlx-sql-root', r_node);

		         }

		       }
		     else if (apply_mapping_schema is not null)
		       {
			 if (doc = '2')
			   {
			     res_string := '<?xml version="1.0" encoding="UTF-8"?>';
			     res_string := concat(res_string, '<', r_node, ' xmlns:sql="urn:schemas-openlink-com:xml-sql"');

			     if (length(style_path) > 0)
			       res_string := concat (res_string,' sql:xsl="', style_path,'">');
			     else
			       res_string := concat (res_string, '>');

			     -- a trick to put CDATA
			     res_string := concat (res_string,
			     	sprintf ('<sql:xquery sql:context="" sql:mapping-schema="%V"><![%s[',
				  get_keyword('mapping_schema_control', params), 'CDATA'));
			     res_string := concat (res_string, query_text, sprintf ('%s></sql:xquery>', ']]'));
			     res_string := concat (res_string, '</', r_node, '>');
			     YAC_DAV_RES_UPLOAD (path,  res_string, 'text/xml', user_perm, 'dav', 'administrators');
			     YAC_DAV_PROP_SET (path, 'xml-template','execute');
			   }
			 else if (doc = '1')
			   {
			     signal ('22023', 'Resources based on XPath over mapping schema xmlview can be persisted or stored as a template.');
			   }
			 else
			   {
			       declare xp any;
			       xp := query_text;
			       if (not length (query_text))
				 xp := '/*';
			       self.flag := -1;
			       query_text := sprintf('<%s>{for $r in xmlview("%s")%s return $r}</%s>',
						     r_node,
						     get_keyword('mapping_schema_control', params) ,
						     xp,
						     r_node );


			       query_text := sprintf('select xquery_eval (%s, xtree_doc (\'<q/>\'), 0)',
				  WS.WS.STR_SQL_APOS (query_text) );
				 err_sqlstate := '00000';
				 exec (query_text,
				       err_sqlstate,
				       err_msg,
				       vector(),
				       100,
				       m_dta,
				       xquery_eval_result);
			       if (err_sqlstate <> '00000' )
				 {
				   signal (err_sqlstate, err_msg);
				 }


			       st := string_output ();

			       if (length (xquery_eval_result) > 0 and
				   length (aref (xquery_eval_result, 0)) > 0 and
				   length (aref (aref(xquery_eval_result, 0),0)) > 0)
				 ses :=  aref(aref(aref(xquery_eval_result, 0),0),0);
			       else
				 {
				   signal ('22023', 'Query execution gives an empty result');
				 }

			       if (get_keyword('xslt_include',params) ='1'  and doc='0' )
				 {
				   select blob_to_string (RES_CONTENT)
				     into xst
				     from WS.WS.SYS_DAV_RES
				     where RES_FULL_PATH = style_path;
				   xslt_sheet (xst, xml_tree_doc (xml_tree (xst)));

				   r := xslt (xst, xml_tree_doc (ses));
				   ses :=   string_output ();
				   http_value (r, 0, ses);
				 }
			       http_value(ses,0,st);

			       if (get_keyword ('xslt_include',params) = '1' and doc <> '0')
				 YAC_DAV_PROP_SET (path, 'xml-stylesheet',
						sprintf ('virt://WS.WS.SYS_DAV_RES.RES_FULL_PATH.RES_CONTENT:%s',
							 style_path));

			       YAC_DAV_RES_UPLOAD (path,
					       concat (sprintf ('<?xml version="1.0" encoding="%s" ?>\n',
								current_charset ()),
								string_output_string (st) ),
								'text/xml',
								user_perm,
								get_keyword ('owner', params),
								get_keyword ('group', params));
			    }

			 }
		  if (length (self.t_desc.ufl_value))
		    {
		      YAC_DAV_PROP_SET (path, 'xml-sql-description', self.t_desc.ufl_value);
		    }
		 -- self.for_xml_query := null;
		 commit work;
		 self.save_path := null;
		 self.xml_auto_error := null;
		 self.xslt_path_value := null;
		 self.vc_redirect (sprintf ('xml_sql.vspx?page=0&mode=result&result=ok&created=%U&qtype=%d', path, self.flag));
	       }

                               ]]>
                             </v:on-post>
                           </vm:events>
                           <!--vm:row>
                             <vm:raw>
                               <td align="left" colspan="4">
                                 <?vsp
                                   if (self.xml_auto_error is null)
                                     {
                                       http('Please input a FOR-XML or SQLX statement or apply a mapping schema.');
                                     }
                                   else
                                     {
                                       http('<span style="{color:red}">');
                                       http(self.xml_auto_error);
                                       http('</span>');
                                     }
                                 ?>
                               </td>
                             </vm:raw>
			   </vm:row-->
			   <vm:row>
			     <vm:raw>
			     <td>
			           Choose Query Type &nbsp;
                                   <v:select-list name="apply_mapping_schema"
                                                group-name="apply_mapping_schema"
						xhtml_id="apply_mapping_schema"
						value="--coalesce (control.ufl_value, 'sql')"
						auto-submit="1">
				     <v:item name="SQLX or XML-SQL" value="sql"/>
				     <v:item name="Apply Mapping Schema" value="map"/>
			           </v:select-list>
                                   <!--v:on-post>
                                     <![CDATA[
                                       if (get_keyword('b_reset', params) is  not null)
                                         control.ufl_selected := 0;
                                     ]]>
                                   </v:on-post-->
				 </td>
                                 <td>
				 </td>
			       </vm:raw>
			       </vm:row>
			       <vm:row>
				 <td style="border-width:0" colspan="4">
				   <table border="0" width="100%">
				     <tr><td>
					 <v:label name="q_lab"
					   value="--case when self.apply_mapping_schema.ufl_value = 'map'
					   then 'XPath' else 'SQLX or SQL-XML' end" format="%s Query"
					   render-only="1"/>
				     </td></tr>
				     <tr><td>
				 <v:textarea name="query_text" type="textarea" colspan="4" xhtml_style="width:100%"
				   xhtml_rows="6"
                                   >
                                 <v:before-data-bind>
                                   <![CDATA[
                                     {
                                       declare dav_res_id  integer;
                                       declare query_value  varchar;

                                       if (get_keyword('mode', params) = 'edit' and
                                           get_keyword('res', params) is not null)
                                         {
                                           select RES_ID
                                             into dav_res_id
                                             from WS.WS.SYS_DAV_RES
                                             where RES_FULL_PATH = get_keyword('res', params);

                                           if (exists (select 1
                                                         from WS.WS.SYS_DAV_PROP
							 where (PROP_NAME = 'xml-sql' or PROP_NAME = 'sqlx-sql')
							 and
                                                         PROP_TYPE = 'R' and
                                                         PROP_PARENT_ID = dav_res_id))
                                             {
                                               select blob_to_string (PROP_VALUE)
                                                 into query_value
                                                 from WS.WS.SYS_DAV_PROP
                                                 where PROP_NAME in ('xml-sql', 'sqlx-sql') and
                                                       PROP_TYPE = 'R' and
                                                       PROP_PARENT_ID = dav_res_id;

                                               control.ufl_value := query_value;
                                             }
                                         }
                                       else
                                         if (self.for_xml_query is not null and self.for_xml_query <> '')
                                           control.ufl_value := self.for_xml_query;
                                     }
                                   ]]>
                                 </v:before-data-bind>
                                 <v:on-post>
                                   <![CDATA[
                                     if (get_keyword('b_reset', params) is  not null)
                                       control.ufl_value := '';
                                   ]]>
                                 </v:on-post>
                             </v:textarea>
				     </td></tr>
				   </table>
				 </td>
                           </vm:row>
                           <vm:row>
                             <td>
                               <v:browse-button name="trx"
                                                action="browse"
                                                value="Check Query"
                                                selector="xml_sql_check.vspx"
                                                xhtml_id="check_qry_btn"
						child-window-options="resizable=yes, scrollbars=yes, menubar=no, height=630, width=600"
					   enabled="--case when self.apply_mapping_schema.ufl_value = 'map'
					   then 0 else 1 end"

						>
                                 <v:field name="query_text"/>
                                 <v:field name="t_root_node"/>
                               </v:browse-button>
                             </td>
                           </vm:row>
                           <vm:row>
			     <vm:container width="100%" border="0" colspan="2" class="listing">
			       <vm:row class="listing_header_row">
				 <th colspan="2">Creation</th>
			       </vm:row>
                               <vm:row>
                  <!--
                   -->
                                 <td>
                                   <label>
                                    Mapping Schema:
                                   </label>
				 </td>
                                 <td>
				   <v:select-list name="mapping_schema_control" xhtml_style="width:160" xhtml_id="mapping_schema_list" >
				     <v:before-render><![CDATA[
				      declare e vspx_event;
				      e := self.vc_event;
				      if (self.apply_mapping_schema.ufl_value <> 'map')
				        control.vc_add_attribute ('disabled', '1');
				       ]]></v:before-render>
                                     <v:after-data-bind>
                                       <![CDATA[
                                         declare view_name, text, lex_text  varchar;
                                         declare lexems any;
                                         declare len, i, flag, pos integer;

                                         (control as vspx_select_list).vsl_items:= vector ();
                                         (control as vspx_select_list).vsl_item_values := vector ();
                                         (control as vspx_select_list).vsl_selected_inx := 0;

                                         for select v_name, v_text, v_ext from sys_views do
                                           {
                                             view_name := name_part (v_name,2);
                                             text := blob_to_string (v_text);

                                             if (v_text is null)
                                             text := blob_to_string (v_ext);

                                             lexems := sql_lex_analyze (text);
                                             len := length (lexems);
                                             flag := 0; -- "schema" case

                                             if ( len > 2)
                                               {
                                                 i := 0;

                                                 while (i <  len -1)
                                                   {
                                                     lex_text := upper(aref(aref(lexems,i),1));

                                                     if (lex_text = 'CREATE' and flag = 0)
                                                       {
                                                         flag:=1;
                                                         pos := i;
                                                       }
                                                     else
                                                       if (lex_text = 'VIEW' and flag = 1 and (pos = (i - 1) or pos = (i - 2) ) )
                                                         {
                                                           flag := 2;
                                                         }
                                                     i := i + 1;
                                                   }
                                               }

                                             if (flag <> 2)
                                               {
                                                 (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items,
                                                                                                           vector (view_name));
                                                 (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values,
                                                                                                                 vector (view_name));
                                               }
                                           }
                                         ]]>
                                       </v:after-data-bind>
				     </v:select-list>
				     <v:button action="browse" name="brws_map" value="View definition..."
				       selector="xml_sql_view_show.vspx"
				       child-window-options="scrollbars=yes, menubar=no, height=630, width=1000">
				       <v:field name="mapping_schema_control"/>
				     <v:before-render><![CDATA[
				      declare e vspx_event;
				      e := self.vc_event;
				      if (self.apply_mapping_schema.ufl_value <> 'map')
				        control.vc_enabled := 0;
				       ]]></v:before-render>
				     </v:button>
                                   </td>
                                 </vm:row>
				 <vm:row>
				   <td nowrap="1">
				     Root Element
				   </td>
				   <td class="SubInfo">
				  <v:text name="t_root_node" default_value="document">
                                     <v:before-data-bind>
                                       <![CDATA[
                                         declare dav_res_id  integer;
                                         declare root_value  varchar;

					 if (get_keyword('mode', params) = 'edit' and
					     get_keyword('res', params) is not null)
                                           {
					   select RES_ID  into dav_res_id  from
					   WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);

                                           if (exists (select 1 from WS.WS.SYS_DAV_PROP
                                                           where PROP_NAME = 'xml-sql-root' and
                                                                 PROP_TYPE = 'R' and
                                                                 PROP_PARENT_ID = dav_res_id))
                                               {
                                                 select blob_to_string (PROP_VALUE)
                                                   into root_value
                                                   from WS.WS.SYS_DAV_PROP
                                                   where PROP_NAME = 'xml-sql-root' and
                                                         PROP_TYPE = 'R' and
                                                         PROP_PARENT_ID = dav_res_id;
                                                 control.ufl_value := root_value;
                                               }
                                           }
                                       ]]>
                                     </v:before-data-bind>
                                     <v:on-post>
                                       <![CDATA[
                                         if (get_keyword('b_reset', params) is  not null)
                                           control.ufl_value := 'document';
                                       ]]>
				     </v:on-post>
				     <v:validator test="regexp" regexp="(^[A-Za-z].*)|(^$)" message="The document root element must start with character." runat="client"/>
				   </v:text>
				 </td>
                                 </vm:row>
                                 <vm:row>
                                   <vm:raw>
                                     <td>
                                       <v:check-box name="xslt_include"
                                                    group-name="xslt_include"
                                                    value="1"
                                                    xhtml_id="xslt_include"
                                                    xhtml_onchange="javascript: y_tg_enabled(''t_xslt_path'')">
                                         <v:on-post>
                                           <![CDATA[
                                             if (get_keyword('b_reset', params) is not null)
                                               control.ufl_selected := 0;
                                           ]]>
                                         </v:on-post>
                                         <v:before-data-bind>
                                           <![CDATA[
				   declare dav_res_id integer;
				   control.ufl_selected := 0;

				   if (get_keyword('mode', params) = 'edit' and
				       get_keyword('res', params) is not null)
				     {
				       select RES_ID  into dav_res_id from WS.WS.SYS_DAV_RES
				         where RES_FULL_PATH = get_keyword('res', params);

				       if (exists (select 1
						     from WS.WS.SYS_DAV_PROP
						     where PROP_NAME = 'xml-stylesheet' and
							   PROP_TYPE = 'R' and
							   PROP_PARENT_ID = dav_res_id) )
					 {
					   control.ufl_selected := 1;
					 }
				     }
                                           ]]>
                                         </v:before-data-bind>
                                       </v:check-box>
                                     </td>
                                     <td ><label for="xslt_include">XSLT transformation</label></td>
                                   </vm:raw>
                                 </vm:row>
                                 <vm:row>
                                   <vm:raw>
                                     <td >Stylesheet</td>
                                       <td nowrap="1">
                                         <v:text name="style_path_control" xhtml_size="40" xhtml_id="t_xslt_path" >
                                           <v:before-data-bind>
                                             <![CDATA[
                                               declare dav_res_id integer;

                                               if (self.vc_event.ve_is_post = 0 and self.xslt_path_value is not null)
                                                 {
                                                   control.ufl_value := self.xslt_path_value;
                                                 }

                                               if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null)
                                                 {

                                                   declare p_value varchar;
                                                   declare pos integer;

                                                   select RES_ID
                                                     into dav_res_id
                                                     from WS.WS.SYS_DAV_RES
                                                     where RES_FULL_PATH = get_keyword('res', params);

                                                   if (exists (select 1 from WS.WS.SYS_DAV_PROP
                                                                        where PROP_NAME = 'xml-stylesheet' and
                                                                        PROP_TYPE = 'R' and
                                                                        PROP_PARENT_ID = dav_res_id))
                                                     {
                                                       select blob_to_string (PROP_VALUE)
                                                         into p_value
                                                         from WS.WS.SYS_DAV_PROP
                                                         where PROP_NAME = 'xml-stylesheet' and
                                                               PROP_TYPE = 'R' and
                                                               PROP_PARENT_ID = dav_res_id;

                                                       pos := locate (':',p_value);

                                                       if (pos > 0 )
                                                         {
                                                           pos := locate (':',p_value, pos +1);

                                                           if (pos > 0 )
                                                             control.ufl_value := substring(p_value, pos + 1, length(p_value) - pos);
                                                         }
                                                     }
						  }
						else
						  {
						    if (get_keyword ('xslt_include', e.ve_params) is null)
						      control.vc_add_attribute ('disabled', '1');
						  }

                                             ]]>
                                           </v:before-data-bind>
                                         </v:text>
                                         <vm:dav_browser ses_type    = "yacutia"
                                                         render      = "popup"
                                                         list_type   = "details"
                                                         flt         = "yes"
                                                         flt_pat     = ""
                                                         path        = "DAV"
                                                         browse_type = "res"
                                                         w_title     = "DAV Browser"
                                                         title       = "DAV Browser"
                                                         lang        = "en"
                                                         return_box  = "style_path_control"/>
                                       </td>
                                     </vm:raw>
                                   </vm:row>
                                   <!--
                                   <vm:row>
                                     <vm:control name="output_to" type="radiobox" dir="horiz">
                                       <vm:attrs width="0" border="0"/>
                                       <vm:caption value="Output to" pos="left" class="SubInfo"/>
                                       <vm:items left-margin="12" right-margin="12" class="SubInfo">
                                         <vm:group>
                                           <vm:item value="1" label="Screen"/>
                                           <vm:item value="0" label="DAV Repository" initial-checked="1"/>
                                         </vm:group>
                                       </vm:items>
                                     </vm:control>
                                   </vm:row>
                                    -->
                                   <vm:row>
                                     <vm:raw>
				       <td nowrap="1"><label class="req">
					   WebDAV resource path <br /> for the result
				       </label></td>
                                       <td nowrap="1">
                                         <v:text name="save_path" xhtml_size="40">
                                           <v:before-data-bind>
                                             <![CDATA[
                                               if (get_keyword('mode', params) = 'edit' and
                                                   get_keyword('res', params) is not null)
                                                 control.ufl_value := get_keyword('res', params);
                                               else
                                                 if (self.vc_event.ve_is_post = 0 and self.save_path_value is not null)
                                                   {
                                                     control.ufl_value := self.save_path_value;
                                                   }
                                             ]]>
                                           </v:before-data-bind>
                                           <v:on-post>
                                             <![CDATA[
                                               if (get_keyword('b_reset', params) is not null)
                                                 control.ufl_value := '';
                                             ]]>
                                           </v:on-post>

                                         </v:text>
                                         <vm:dav_browser ses_type="yacutia"
                                                         render="popup"
                                                         list_type="details"
                                                         flt="yes"
                                                         flt_pat="*.xml"
                                                         path="DAV"
                                                         browse_type="col"
                                                         w_title="DAV Browser"
                                                         title="DAV Browser"
                                                         lang="en"
                                                         return_box="save_path"/>
                                       </td>
                                     </vm:raw>
                                   </vm:row>
                                   <vm:row>
                                     <vm:raw>
				       <td nowrap="1">
					 <v:check-box name="replace_existing" value="1" xhtml_id="replace_existing_id"/>
                                       </td>
				       <td nowrap="1"><label for="replace_existing_id" class="req">Replace the existing resource</label></td>
                                     </vm:raw>
                                   </vm:row>
                                 </vm:container>
                                 <vm:space width="30%"/>
                                   <vm:container width="100%" border="0"
				     class="listing" valign="top">
				     <vm:row class="listing_header_row">
				       <th colspan="2">Permissions</th>
				     </vm:row>
                                     <vm:row>
                                       <vm:container width="100%" border="0">
                                         <vm:row>
                                           <vm:raw>
                                             <td >Owner</td>
                                             <td>
                                               <v:select-list name="owner" xhtml_style="width:160">
                                                 <v:after-data-bind>
                                                   <![CDATA[
                                                     declare indx, user_ident integer;
                                                     declare user_name varchar;
                                                     user_ident := -1;
                                                     indx :=0;
                                                     (control as vspx_select_list).vsl_items:= vector();
                                                     (control as vspx_select_list).vsl_item_values:= vector();
                                                     (control as vspx_select_list).vsl_selected_inx :=0;

                                                     for select U_ID, U_NAME, U_FULL_NAME
                                                           from SYS_USERS
                                                           where U_IS_ROLE = 0 and
                                                                 U_DAV_ENABLE = 1 and
                                                                 U_ACCOUNT_DISABLED = 0 do
                                                       {
                                                         user_name:= U_NAME;
                                                         if (check_grants (connection_get ('vspx_user'), '') = 1  or
                                                             (check_grants(connection_get ('vspx_user'), '') <> 1  and
                                                             connection_get ('vspx_user') = user_name ))
                                                           {
                                                             if (user_ident >= 0 and user_ident = U_ID)
                                                               (control as vspx_select_list).vsl_selected_inx :=indx;

                                                             (control as vspx_select_list).vsl_items
                                                               := vector_concat ((control as vspx_select_list).vsl_items,
                                                                                 vector (user_name));
                                                             (control as vspx_select_list).vsl_item_values
                                                               := vector_concat ((control as vspx_select_list).vsl_item_values,
                                                                                 vector(user_name));
                                                             indx := indx +1;
                                                           }
                                                       }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </v:select-list>
                                               </td>
                                             </vm:raw>
                                           </vm:row>
                                           <vm:row>
                                             <vm:raw>
                                               <td >Group</td>
                                               <td>
                                                 <v:select-list name="group" xhtml_style="width:160">
                                                   <v:before-data-bind>
                                                     <![CDATA[
                                                       declare indx, user_ident integer;
                                                       declare user_name varchar;

                                                       user_ident := -1;
                                                       indx := 0;
                                                       (control as vspx_select_list).vsl_items:= vector ();
                                                       (control as vspx_select_list).vsl_item_values:= vector ();
                                                       (control as vspx_select_list).vsl_selected_inx := 0;

                                                   -- if (get_keyword('mode', params) ='edit' and get_keyword('business_key', params) is not null) {}

                                                       for select U_ID, U_NAME, U_FULL_NAME
                                                             from SYS_USERS where U_IS_ROLE = 1 and
                                                                  U_DAV_ENABLE =1 and
                                                                  U_ACCOUNT_DISABLED = 0 do
                                                         {
                                                           user_name:= U_NAME;

                                                           if (user_ident >= 0 and user_ident = U_ID)
                                                             (control as vspx_select_list).vsl_selected_inx :=indx;

                                                           (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items,
                                                                                                                     vector(user_name));
                                                           (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values,
                                                                                                                     vector(user_name));
                                                           indx := indx +1;
                                                         }
                                                     ]]>
                                                   </v:before-data-bind>
                                                 </v:select-list>
                                               </td>
                                             </vm:raw>
                                           </vm:row>
                                         </vm:container>
                                       </vm:row>
                                       <vm:row>
                                         <vm:control name="user_permitions" type="checkbox" dir="horiz">
                                           <vm:attrs width="0" border="0"/>
                                           <!--vm:caption value="Permissions" align="top" class="SubInfo"/-->
                                           <vm:items left-margin="12" right-margin="12" >
                                             <vm:group name="own" label="Owner" each="y">
                                               <vm:item name="r" value="1" label="r" initial-checked="1">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post=0)
                                                         {
                                                           if (get_keyword ('mode', params) = 'edit' and
                                                               get_keyword('res', params) is not null )
                                                             {
                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES
                                                                 where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 0) = ascii('1'))
                                                                 control.ufl_selected:= 1;
                                                             }
                                                           else
                                                             control.ufl_selected:= 1;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                               <vm:item name="w" value="1" label="w" initial-checked="1">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post=0)
                                                         {
                                                           if (get_keyword ('mode', params) = 'edit' and get_keyword ('res', params) is not null )
                                                             {
                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES
                                                                 where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 1) = ascii('1'))
                                                                 control.ufl_selected:= 1;

                                                             }
                                                           else
                                                             control.ufl_selected := 1;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                               <vm:item name="x" value="1" label="x" initial-checked="1">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post = 0)
                                                         {
                                                           if (get_keyword ('mode', params) = 'edit' and
                                                               get_keyword('res', params) is not null )
                                                             {

                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES
                                                                 where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 2) = ascii ('1'))
                                                                 control.ufl_selected:= 1;
                                                             }
                                                           else
                                                             control.ufl_selected:= 1;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                             </vm:group>
                                             <vm:group name="group" label="Group" each="y">
                                               <vm:item name="r" value="1" label="r">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                      if (self.vc_event.ve_is_post = 0)
                                                         {
                                                           if (get_keyword('mode', params) = 'edit' and
                                                               get_keyword('res', params) is not null )
                                                             {
                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 3) = ascii('1'))
                                                                 control.ufl_selected:= 1;
                                                             }
                                                           else
                                                             control.ufl_selected:= 0;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                               <vm:item name="w" value="1" label="w">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post = 0)
                                                         {
                                                           if (get_keyword('mode', params) = 'edit' and
                                                               get_keyword('res', params) is not null )
                                                             {
                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 4) = ascii ('1'))
                                                                 control.ufl_selected:= 1;
                                                             }
                                                           else
                                                             control.ufl_selected:= 0;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                               <vm:item name="x" value="1" label="x">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post = 0)
                                                         {
                                                           if (get_keyword('mode', params) = 'edit' and
                                                               get_keyword('res', params) is not null )
                                                             {
                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES
                                                                 where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 5) = ascii ('1'))
                                                                 control.ufl_selected:= 1;
                                                             }
                                                           else
                                                             control.ufl_selected:= 0;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                             </vm:group>
                                             <vm:group name="other" label="Users" each="y">
					       <vm:item name="r" value="1" label="r">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post = 0)
                                                         {
                                                           if (get_keyword ('mode', params) = 'edit' and
                                                               get_keyword ('res', params) is not null)
                                                             {
                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES
                                                                 where RES_FULL_PATH = get_keyword ('res', params);

                                                               if (aref (perm, 6) = ascii ('1') )
                                                                 control.ufl_selected:= 1;
                                                             }
                                                           else
                                                             control.ufl_selected := 0;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                               <vm:item name="w" value="1" label="w">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post = 0)
                                                         {
                                                           if (get_keyword ('mode', params) = 'edit' and
                                                               get_keyword('res', params) is not null )
                                                             {
                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES
                                                                 where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 7) = ascii ('1') )
                                                                 control.ufl_selected := 1;
                                                             }
                                                           else
                                                             control.ufl_selected:= 0;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                               <vm:item name="x" value="1" label="x">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post=0)
                                                         {
                                                           if (get_keyword('mode', params) = 'edit' and
                                                               get_keyword('res', params) is not null )
                                                             {
                                                               declare perm varchar;

                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES
                                                                 where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 8) = ascii ('1') )
                                                                 control.ufl_selected := 1;
                                                             }
                                                           else
                                                             control.ufl_selected := 0;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                             </vm:group>
                                             <vm:group label="Index" each="y">
                                               <vm:item name="index" value="1" label="t">
                                                 <vm:events>
                                                   <v:after-data-bind>
                                                     <![CDATA[
                                                       if (self.vc_event.ve_is_post=0)
                                                         {
                                                           if (get_keyword('mode', params) = 'edit' and
                                                               get_keyword('res', params) is not null )
                                                             {
                                                               declare perm varchar;
                                                               select RES_PERMS
                                                                 into perm
                                                                 from WS.WS.SYS_DAV_RES
                                                                 where RES_FULL_PATH = get_keyword('res', params);

                                                               if (aref (perm, 9) = ascii ('R'))
                                                                 control.ufl_selected := 1;
                                                             }
                                                           else
                                                             control.ufl_selected :=0;

                                                           control.vc_data_bound := 1;
                                                         }
                                                     ]]>
                                                   </v:after-data-bind>
                                                 </vm:events>
                                               </vm:item>
                                             </vm:group>
                                           </vm:items>
                                         </vm:control>
                                       </vm:row>
                                     </vm:container>
                                   </vm:row>
                                   <vm:row>
				     <vm:container width="100%" border="0" colspan="2" nowrap="1"
				       class="listing"
                                                   >
				     <vm:row class="listing_header_row">
				       <th colspan="4">Sensitivity To Database Changes (FOR-XML queries only)</th>
				     </vm:row>
                                       <vm:row>
                                         <vm:control name="persist_enable" group-name="choice_source" type="radiobutton" initial-checked="1" value="0"/>
                                         <vm:static cell="yes" >Persist XML</vm:static>
                                       </vm:row>
                                       <vm:row>
                                         <vm:raw>
                                           <td colspan="4" bgcolor="CCCCCC"/>
                                         </vm:raw>
                                       </vm:row>
                                       <vm:row>
                                         <vm:space/>
                                         <vm:control name="update_interval" type="edit">
                                           <vm:caption value="Update every" pos="left" />
                                           <vm:attrs default_value="10"/>
                                         </vm:control>
                                         <vm:static cell="yes" >minutes</vm:static>
                                       </vm:row>
                                       <vm:row>
                                         <vm:control name="realtime_enable" group-name="choice_source" type="radiobutton" value="1"/>
                                         <vm:static cell="yes" colspan="2" >Create XML in Real Time</vm:static>
                                       </vm:row>
                                       <vm:row>
                                         <vm:raw>
                                           <td colspan="4" bgcolor="CCCCCC"/>
                                         </vm:raw>
                                       </vm:row>
                                       <vm:row>
                                         <vm:control name="template_enable" group-name="choice_source" type="radiobutton" value="2"/>
                                         <vm:static cell="yes" colspan="2" >Create as XML Template</vm:static>
                                       </vm:row>
                                       <vm:row>
                                         <vm:space/>
                                         <vm:control name="t_desc" type="edit">
                                           <vm:caption value="Description" pos="left" />
                                         </vm:control>
                                       </vm:row>
                                     </vm:container>
                                     <vm:space width="30%"/>
				     <vm:container width="100%" border="0" colspan="2" nowrap="1"
				       class="listing" valign="top" >
				     <vm:row class="listing_header_row">
				       <th colspan="4">Document Definition (FOR-XML queries only)</th>
				     </vm:row>
                                     <vm:control name="doc_definition" type="radiobox" dir="vert">
                                       <vm:attrs width="0" border="0"/>
                                       <vm:items left-margin="12" right-margin="12" >
                                         <vm:group name="case">
                                           <vm:item value="0" label="None" initial-checked="1"/>
                                           <vm:item value="1" label="Create XML Schema"/>
                                           <vm:item value="2" label="Create External DTD"/>
                                           <vm:item value="3" label="Insert Inline DTD"/>
                                         </vm:group>
                                       </vm:items>
				     </vm:control>
				   </vm:container>
                                   </vm:row>
                                   <vm:row>
                                     <vm:bgroup colspan="4" align="center">
                                       <v:button action="submit" name="cancel" value="Cancel" xhtml_style="{width:64pt}">
                                         <v:before-render>
                                           <![CDATA[
                                             if ( get_keyword ('mode', control.vc_page.vc_event.ve_params ) = 'edit')
                                               control.vc_enabled := 1;
                                             else
                                               control.vc_enabled := 0;
                                           ]]>
                                         </v:before-render>
                                       </v:button>
                                       <!-- v:button action="submit" name="b_reset" value="Reset"/ -->
                                       <input type="reset" name="b_reset"  value="Reset"/>
                                       <v:button action="submit" name="b_execute" value="Execute" xhtml_id="exec_save_btn"/>
                                     </vm:bgroup>
                                   </vm:row>
                                 </vm:form>
                               </v:template>

                               <v:template name="for_xml_query_list_template"
                                           type="simple"
                                           enabled="--case when (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'list' and
					   get_keyword('page', control.vc_page.vc_event.ve_params)='2') then 1 else 0 end">
			         <div class="scroll_area">
                                 <table class="listing">
                                   <tr class="listing_header_row">
				     <th>
				       <v:button name="refresh1" style="image" action="simple"
					 value="images/icons/ref_16.png"
					 xhtml_alt="Refresh page"
					 xhtml_title="Refresh page"
					 url="xml_sql.vspx?page=2&amp;mode=list">
				       </v:button>
				     </th>
                                     <th>XML File</th>
                                     <th>Descripton</th>
                                     <th>Update Interval</th>
                                     <th>Action</th>
                                   </tr>
                                   <?vsp
                                     declare rintl, fnd, descr integer;
                                     declare rupd varchar;
                                     declare row_cnt integer;

                                     row_cnt := 0; fnd := 0;
                                     for select PROP_PARENT_ID as PARENT_ID, PROP_NAME
                                         from WS.WS.SYS_DAV_PROP
                                         where PROP_NAME in ('xml-sql', 'sqlx-sql', 'xml-template') and PROP_TYPE = 'R' do
                                       {
                                         for select RES_ID, RES_FULL_PATH, length (RES_CONTENT) as rlen, RES_CONTENT
                                               from WS.WS.SYS_DAV_RES
                                               where RES_ID = PARENT_ID do
                                           {
					     rintl := null;
					     declare xt any;

					     if (PROP_NAME = 'xml-template' and rlen > 0)
					       {
					         xt := xtree_doc (RES_CONTENT);
					         if (xpath_eval ('[ xmlns:sql="urn:schemas-openlink-com:xml-sql" ]//sql:xquery[not (@mapping-schema)]', xt) is not null)
						 goto nextxt;
					       }
					     if (PROP_NAME = 'xml-template' and rlen = 0)
					       goto nextxt;
                                             whenever not found goto nfi;

                                             select SE_INTERVAL
                                               into rintl
                                               from DB.DBA.SYS_SCHEDULED_EVENT
                                               where SE_NAME = RES_FULL_PATH;
                                            nfi:
  					     descr := coalesce ((select PROP_VALUE from WS.WS.SYS_DAV_PROP
					     	where PROP_NAME = 'xml-sql-description' and PROP_TYPE = 'R'
					     	and PROP_PARENT_ID = PARENT_ID), '');

                                             if (exists (select 1
                                                           from WS.WS.SYS_DAV_PROP
                                                           where PROP_NAME = 'xml-template' and
                                                                 PROP_TYPE = 'R' and
                                                                 PROP_PARENT_ID = RES_ID))
                                               rupd := 'template';

                                             else if (rlen > 0 and rintl is not null)
                                               rupd := sprintf ('%d',rintl);
                                             else if (rlen = 0)
                                               rupd := 'immediate';
					     else if (PROP_NAME = 'sqlx-sql')
					       rupd := 'sqlx';
					     else
                                               rupd := '';

                                             fnd := 1;

                                             if (mod (row_cnt, 2))
                                               http ('<tr class="listing_row_even">');
                                             else
                                               http ('<tr class="listing_row_odd">');
                                           ?>
                                               <td class="listing_col">
                                                 <img src="images/icons/apps_16.png" alt="Persisted XML Query" title="Persisted XML Query"/>
                                               </td>
                                               <td class="listing_col">
                                                 <a href="<?= WS.WS.STR_TO_URI (RES_FULL_PATH)?>" target="_blank">
                                                   <?vsp http (RES_FULL_PATH); ?>
                                                 </a>
                                               </td>
                                               <td class="listing_col">
                                                 <?vsp http(descr); ?>
                                               </td>
                                               <td class="listing_col">
                                                 <?vsp http(rupd); ?>
                                               </td>
                                               <td  class="listing_col_action">
                                               <?vsp
					       http (sprintf ('<a class="" href="xml_sql.vspx?page=1&mode=edit&res=%s&sid=%s&realm=%s"><img src="images/icons/edit_16.png" border="0" />&nbsp;Edit</a>',
						 RES_FULL_PATH, self.sid ,self.realm ));
					       ?>

				               <?vsp
                                                 http (sprintf ('<a class="" href="xml_sql.vspx?page=0&mode=delete&res=%s&sid=%s&realm=%s"><img src="images/icons/trash_16.png" border="0" />&nbsp;Delete</a>',
                                                                RES_FULL_PATH, self.sid ,self.realm ));
                                               ?>
                                             </td>
                                         <?vsp
                                         http ('</tr>');
                                         row_cnt := row_cnt + 1;
					 nextxt:;
                                       }
                                   }

                                 if (fnd = 0)
                                   http ('<tr><td CLASS="SubInfo" colspan=4 align=center><b>*** No queries defined ***</b></td></tr>');
                               ?>
			     </table>
			   </div>
                          </v:template>
                        </td>
                      </tr>
                    </table>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
        </table>
      </v:template>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
