<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="vad_install_page"
  decor="yacutia_decor.vspx"
  style="yacutia_style.xsl"
  fast-render="1"
  xmlns:v="http://www.openlinksw.com/vspx/"
  xmlns:vm="http://www.openlinksw.com/vspx/macro"
  doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
  <vm:pagetitle>Virtuoso Application Deployment</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="packs_param" persist="0" type="varchar" default="null" param-name="packs" />
      <v:variable name="packs" persist="0" type="varchar" default="null" />
      <v:variable name="packs_arr" persist="0" type="varchar" default="null" />
      <v:variable name="pack_mode" persist="0" type="integer" default="1" param-name="mode" />
      <v:variable name="pack_src_mode" persist="0" type="integer" default="1" param-name="dirmode" />
      <v:variable name="pack_src" persist="0" type="varchar" default="null" param-name="dir" />
      <v:variable name="pack_ready" persist="0" type="integer" default="0"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="Virtuoso Application Deployment"/>
    </vm:menu>
    <vm:header caption="Install or Upgrade new Packages"/>
    <vm:pagebody>
      <v:on-init>
        <![CDATA[
          if (self.packs is null and self.packs_param is not null)
          {
            declare deps, allVads any;

            allVads := vector ();
            self.packs := deserialize (decode_base64 (self.packs_param));
            for (declare i,l int, i:=0, l := length (self.packs); i < l; i := i + 1)
            {
              declare exit handler for sqlstate '*', not found
              {
                self.pack_ready := 0;
                self.vc_error_message := self.packs[i] || ':' || __SQL_MESSAGE;
                self.vc_is_valid := 0;
                return;
              };

              -- Gather all dependencies for the vads to install
              deps := VAD.DBA.VAD_FLATTEN_DEPENDENCY_TREE (VAD.DBA.VAD_RESOLVE_DEPENDENCY_TREE (self.packs[i], self.pack_mode, self.pack_src, self.pack_src_mode));
              for (declare i int, i := 0; i < length (deps); i := i+1)
              {
                if (get_keyword (get_keyword ('name', deps[i]), allVads) is null)
                {
                  allVads := vector_concat (allVads, vector (get_keyword ('name', deps[i]), deps[i]));
                }
              }
            }

            self.packs_arr := vector ();
            for (declare i int, i := 0; i < length (allVads); i := i+2)
            {
              self.packs_arr := vector_concat (self.packs_arr, vector (vector (
                get_keyword ('name', allVads[i+1]),
                get_keyword ('version', allVads[i+1]),
                get_keyword ('title', allVads[i+1]),
                get_keyword ('date', allVads[i+1]),
                get_keyword ('path', allVads[i+1]),
                get_keyword ('pathType', allVads[i+1]))
              ));
            }
            self.pack_ready := 1;
          }
        ]]>
      </v:on-init>
      <v:template type="simple" name="list_tmpl" condition="self.pack_ready = 1">
      <div class="clear">
        <img class="dialog_icon" src="images/icons/about_32.png" alt="Stop" title="Stop"/>
        Installing a VAD package will put the database in atomic mode, halting other client threads
        <br/>
        for duration of the installation. If the installation encounters a fatal error such as running
        <br/>
        out of disk, you will get an error message and the server will exit. If this happens:
        <br/>
        <ul>
          <li>Virtuoso server will have to be restarted manually</li>
          <li>the Virtuoso Conductor will not be available until the server has restarted</li>
          <li>after server has restarted it will be in the state it was in before VAD installation was started</li>
        </ul>
      </div>
      </v:template>

      <v:form name="install_form" type="simple" method="POST">
        <table class="listing">
          <v:template type="simple" condition="self.pack_ready = 1">
            <tr>
              <th nowrap="nowrap" width="25%">Application title</th>
              <th nowrap="nowrap" width="25%">New Version</th>
              <th nowrap="nowrap" width="25%">Old Version</th>
              <th nowrap="nowrap">Short name</th>
            </tr>
            <?vsp for (declare i,l int, i := 0, l := length (self.packs_arr); i < l; i := i + 1) { ?>
            <tr class="<?V case when mod(i,2) then 'listing_row_odd' else 'listing_row_even' end ?>">
              <td nowrap="nowrap"><?V self.packs_arr[i][2] ?></td>
              <td><?V self.packs_arr[i][1] ?></td>
              <td><?V coalesce (DB.DBA.VAD_CHECK_VERSION (self.packs_arr[i][0]), 'N/A') ?></td>
              <td><?V self.packs_arr[i][0] ?></td>
            </tr>
            <?vsp } ?>
          </v:template>
          <tr>
            <td colspan="4">
              <v:template type="simple" condition="self.pack_ready = 1">
                <v:button action="simple" value="Proceed">
                  <v:on-post>
                    <![CDATA[
                      declare res varchar;

                      res := '';
                      for (declare i, l int, i := 0, l := length (self.packs_arr); i < l; i := i + 1)
                      {
                        declare state, message, meta, result, pack_path, path_type any;
                        declare pfull, pver, pdate, isdav any;

                        pfull := self.packs_arr[i][2];
                        pver  := self.packs_arr[i][1];
                        pdate := self.packs_arr[i][3];
                        pack_path := self.packs_arr[i][4];
                        path_type := self.packs_arr[i][5];

                        isdav := 0;
                        if (pack_path like '%_dav.vad')
                          isdav := 1;

                        log_message ('Installing '||pfull||' version '||pver||'/'||pdate|| ' '||case when isdav then '(DAV)' else '' end);
                        res := res || 'Installing: ' || pfull || ' ' || pver || ' (' || pack_path || ')\r\n';
                        exec ('DB.DBA.VAD_INSTALL(?, ?, ?)', state, message, vector (pack_path, path_type, 1), 0, meta, result);
                        set_qualifier ('DB');
                        if (result[0][0] <> '00000')
                        {
                          res := res || result[0][1];
                        }
                        else
                        {
                          res := res || 'Installation complete\n';
                        }
                        if (result[length(result)-2][1] = 'FATAL')
                        {
                          http_rewrite ();
                          http_header ('Content-Type: text/plain\r\n');
                          foreach (any elm in result) do
                          {
                            declare stat, msg any;

                            stat := case when (not isstring (elm[0])) then '' else elm[0] end;
                            msg := case when  (not isstring (elm[1])) then '' else elm[1] end;
                            http (sprintf ('%5s', stat) || ' ' || msg || '\r\n');
                          }
                          http_flush();
                          raw_exit(1);
                        }
                      }
                      self.vc_redirect (sprintf('vad_status.vspx?res=%U', res));
                      return;
                    ]]>
                  </v:on-post>
                </v:button>
              </v:template>
              <v:button action="simple" value="Cancel">
                <v:on-post>
                  <![CDATA[
                    self.vc_redirect ('vad.vspx');
                  ]]>
                </v:on-post>
              </v:button>
            </td>
          </tr>
        </table>
      </v:form>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
