<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="soap_services_edit_page"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1"
        xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <script type="text/javascript">
    <![CDATA[
      function defineOpts (val)
      {
        if ('ssl' == val.options[val.selectedIndex].value)
        {
          if (document.frm_edit_path.t_auth_opt.value == '')
          {
            document.frm_edit_path.t_auth_opt.value =
              'https_cert=[file_with_certificate].pem;\nhttps_key=[file_with_private_key].pem;';
          }
        }
      }
    ]]>
  </script>
  <vm:pagetitle>Virtuoso Web Services Authentication Service</vm:pagetitle>
  <vm:pagewrapper>
    <vm:menu>
      <vm:menuitem value="SOAP Services"/>
    </vm:menu>
    <vm:variables>
      <v:variable name="mode" persist="0" type="varchar" default="''" param-name="mode"/>
      <v:variable name="referer" persist="0" type="varchar" default="''" />
      <v:variable name="edit_host" persist="0" type="varchar" default="''" />
      <v:variable name="edit_port" persist="0" type="varchar" default="''" />
      <v:variable name="edit_httphost" persist="0" type="varchar" default="''" />
      <v:variable name="_host" persist="0" type="varchar" default="''" />
      <v:variable name="_host1" persist="0" type="varchar" default="''" />
      <v:variable name="_httphost" persist="0" type="varchar" default="''" />
      <v:variable name="caption" persist="0" type="varchar" default="''" />
      <v:variable name="defdir" persist="0" type="integer" default="0" />
      <v:variable name="lpath" persist="0" type="varchar" default="''" />
      <v:variable name="ppath" persist="0" type="varchar" default="'/SOAP/'" />
      <v:variable name="defpage" persist="0" type="varchar" default="''" />
      <v:variable name="tab" persist="0" type="integer" default="1" />
      <v:variable name="dirbrowsing" persist="0" type="integer" default="0" />
      <v:variable name="xmlexec" persist="0" type="integer" default="0" />
      <v:variable name="ovrexec" persist="0" type="integer" default="0" />
      <v:variable name="persistvars" persist="0" type="integer" default="0" />
      <v:variable name="vspuser" persist="0" type="varchar" default="''" />
      <v:variable name="soapuser" persist="0" type="varchar" default="''" />
      <v:variable name="security" persist="0" type="varchar" default="''" />
      <v:variable name="auth_realm" persist="0" type="varchar" default="''" />
      <v:variable name="auth_func" persist="0" type="varchar" default="''" />
      <v:variable name="after_func" persist="0" type="varchar" default="''" />
      <v:variable name="soap_opt" persist="0" type="varchar" default="''" />
      <v:variable name="auth_opt" persist="0" type="varchar" default="''" />
      <v:variable name="global_opts" persist="0" type="any" default="null" />
      <v:variable name="is_dav" persist="0" type="varchar" default="'0'" />
      <v:variable name="browse_cat" persist="0" type="varchar" default="'DB'"/>
      <v:variable name="browse_ucat" persist="0" type="varchar" default="'DB'"/>
      <v:variable name="ws_sec" persist="0" type="varchar" default="''" />
      <v:variable name="wss_key" persist="0" type="varchar" default="''" />
      <v:variable name="wss_template" persist="0" type="varchar" default="''" />
      <v:variable name="wss_vs" persist="0" type="varchar" default="''" />
      <v:variable name="servicename" persist="0" type="varchar" default="''" />
      <v:variable name="namespace" persist="0" type="varchar" default="''" />
      <v:variable name="headerns" persist="0" type="varchar" default="''" />
      <v:variable name="faultns" persist="0" type="varchar" default="''" />
      <v:variable name="_use1" persist="0" type="varchar" default="'literal'" />
      <v:variable name="methodinsoapaction" persist="0" type="varchar" default="''" />
      <v:variable name="cr_escape" persist="0" type="varchar" default="''" />
      <v:variable name="elementformdefault" persist="0" type="varchar" default="''" />
      <v:variable name="dime_enc" persist="0" type="varchar" default="''" />
      <v:variable name="ws_pr" persist="0" type="varchar" default="''" />
      <v:variable name="wsrp_from" persist="0" type="varchar" default="''" />
      <v:variable name="roles_grant_list" persist="0" type="any" default="null"/>
      <v:variable name="mod_grant_list" persist="0" type="any" default="null"/>
      <v:variable name="udt_grant_list" persist="0" type="any" default="null"/>
      <v:variable name="xml_grant_list" persist="0" type="any" default="null"/>

      <v:variable name="sp_desc" persist="0" type="int" default="0"/>
      <v:variable name="sp_add" persist="0" type="int" default="0"/>
      <v:variable name="subtab" persist="0" type="int" default="1"/>
      <v:variable name="xml_desc" persist="0" type="int" default="0"/>
      <v:variable name="cors" persist="0" type="varchar" default="''" param-name="t_cors"/>
      <v:variable name="cors_rej" persist="0" type="integer" default="0" param-name="c_cors_rej"/>
    </vm:variables>
    <vm:header caption="Options for Web Service Endpoint"/>
    <vm:pagebody>
      <v:method name="astyle" arglist="in cmp varchar">
        if (self.tab1.tb_active is not null and self.tab1.tb_active.vc_name = cmp)
          return 'page_tab_selected';
        return 'page_tab';
      </v:method>

      <v:method name="ensure_soapuser" arglist="">
        self.soapuser := self.dl_soapuser.ufl_value;
        if (self.soapuser = ' __none' or self.soapuser = '')
          {
            if (
               length (self.roles_grant_list) > 0 or
               length (self.mod_grant_list) > 0 or
               length (self.udt_grant_list) > 0 or
               length (self.xml_grant_list)
              )
            {
              declare ui int;

              select max(U_ID) into ui from DB.DBA.SYS_USERS;
              self.soapuser := sprintf ('SOAP_%d', ui);
              USER_CREATE (self.soapuser, md5 (datestring (now())), vector ('DISABLED', 1));
              self.dl_soapuser.ufl_value :=  self.soapuser;
              USER_SET_QUALIFIER (self.soapuser, self.soapuser);
            }
          else
            {
              self.soapuser := NULL;
            }
        }
      </v:method>
      <v:before-data-bind>
        <![CDATA[
          declare idx integer;

          if (self.roles_grant_list is null)
            self.roles_grant_list := vector ();

          if (self.udt_grant_list is null)
            self.udt_grant_list := vector ();

          if (self.xml_grant_list is null)
            self.xml_grant_list := vector ();

          if (self.mod_grant_list is null)
            self.mod_grant_list := vector ();

          if (get_keyword ('_host', self.vc_event.ve_params) is not null)
          {
            declare i integer;

            for (i := 0;i < length(self.vc_event.ve_lines); i := i + 1)
            {
              if ('Referer: ' = left(self.vc_event.ve_lines[i],9) )
              {
                self.referer := subseq(self.vc_event.ve_lines[i],9);
                self.referer := replace(self.referer, 'http_add_path.vspx', 'http_serv_mgmt.vspx');
              }
            }
            self.edit_host := get_keyword('_host', self.vc_page.vc_event.ve_params, self.edit_host);
            self.edit_port := get_keyword('_port', self.vc_page.vc_event.ve_params, self.edit_port);
            self.edit_httphost := get_keyword('_httphost', self.vc_page.vc_event.ve_params, self.edit_httphost);
            self._host := concat(self.edit_host, case when length(self.edit_port)>0 then ':' else '' end, self.edit_port);
            if (self._host = '*ini*')
              self._host1 := '0.0.0.0';
            else if (self._host = '*sslini*')
              self._host1 := '0.0.0.0';

            self._httphost := self.edit_httphost;
            if( self.edit_httphost = '*ini*' )
              self.caption := '{Default Web Site}';
            else if( self.edit_httphost = '*sslini*' )
              self.caption := '{Default SSL Web Site}';
            else
              self.caption := self._httphost;

            self.lpath := get_keyword('path', self.vc_page.vc_event.ve_params, self.lpath);
            self.roles_grant_list := vector();

            -- load settings from choosen path
            if( self.mode = 'edit' )
            {
              select HP_PPATH, HP_DEFAULT, HP_DIR_BROWSEABLE, HP_RUN_VSP_AS, HP_RUN_SOAP_AS,
                     HP_SECURITY, HP_REALM, HP_AUTH_FUNC, HP_POSTPROCESS_FUNC, HP_PERSIST_SES_VARS,
                     HP_STORE_AS_DAV, deserialize (HP_SOAP_OPTIONS), deserialize (HP_AUTH_OPTIONS),
                     HP_IS_DEFAULT_HOST, deserialize(HP_OPTIONS)
                into self.ppath, self.defpage, self.dirbrowsing, self.vspuser, self.soapuser,
                     self.security, self.auth_realm, self.auth_func, self.after_func, self.persistvars,
                     self.is_dav, self.soap_opt, self.auth_opt,
                     self.defdir, self.global_opts
              from DB.DBA.HTTP_PATH
              where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_LPATH = self.lpath;

              if (isarray(self.global_opts) and not mod(length(self.global_opts),2))
              {
                if (self.xmlexec = '')
                  self.xmlexec := get_keyword('xml_templates', self.global_opts);

                if (self.ovrexec = '')
                  self.ovrexec := get_keyword('executable', self.global_opts);

                self.cors := get_keyword ('cors', self.global_opts, '');
                self.cors_rej := get_keyword ('cors_restricted', self.global_opts, 0);
              }
            }
            else if( self.mode = 'add1' )
            {
              self.lpath := '';
              self.defdir := 0;
              self.ppath := '';
              self.defpage := '';

              self.dirbrowsing := 0;
              self.xmlexec := 0;
              self.ovrexec := 0;
              self.persistvars := 0;
              self.vspuser := '';
              self.soapuser := '';
            }
            self.roles_grant_list := vector();
            self.mod_grant_list := vector();
            if (isstring(self.soapuser))
            {
              declare _u_id integer;
              declare plist any;
              whenever not found goto nf_user;

              select U_ID into _u_id from SYS_USERS where U_NAME = self.soapuser;
              self.xml_grant_list := get_granted_xml_templates (_u_id, plist);
              for (select P_NAME
                     from DB.DBA.SYS_PROCEDURES, DB.DBA.SYS_GRANTS
                    where G_USER = _u_id and G_OP = 32 and G_OBJECT = P_NAME and P_TYPE is null) do
              {
                if (0 = position (P_NAME, plist))
                  self.roles_grant_list := vector_concat(self.roles_grant_list, vector(P_NAME));
              }

              for (select P_NAME
                     from DB.DBA.SYS_PROCEDURES, DB.DBA.SYS_GRANTS
                    where G_USER = _u_id and G_OP = 32 and G_OBJECT = P_NAME and P_TYPE = 3) do
              {
                if (0 = position (P_NAME, plist))
                  self.mod_grant_list := vector_concat(self.mod_grant_list, vector(P_NAME));
              }

              for (select UT_NAME
                     from DB.DBA.SYS_USER_TYPES, DB.DBA.SYS_GRANTS
                    where G_USER = _u_id and G_OP = 32 and G_OBJECT = UT_NAME) do
              {
                self.udt_grant_list := vector_concat(self.udt_grant_list, vector(UT_NAME));
              }
            }
            nf_user: ;
            if (isarray(self.soap_opt))
            {
              declare _name, _value varchar;

              for (idx := 0; idx < length (self.soap_opt); idx := idx + 2)
              {
                _name := cast (self.soap_opt[idx] as varchar);
                _value := cast (self.soap_opt[idx+1] as varchar);
                if (_name = 'ServiceName')
                  self.servicename := _value;
                else if (_name = 'Namespace')
                  self.namespace := _value;
                else if (_name = 'HeaderNS')
                  self.headerns := _value;
                else if (_name = 'FaultNS')
                  self.faultns := _value;
                else if (_name = 'MethodInSoapAction')
                  self.methodinsoapaction := _value;
                else if (_name = 'CR-escape')
                  self.cr_escape := _value;
                else if (_name = 'elementFormDefault')
                  self.elementformdefault := _value;
                else if (_name = 'DIME-ENC')
                  self.dime_enc := _value;
                else if (_name = 'WS-SEC')
                  self.ws_sec := _value;
                else if (_name = 'WSS-KEY')
                  self.wss_key := _value;
                else if (_name = 'WSS-Template')
                  self.wss_template := _value;
                else if (_name = 'WSS-Validate-Signature')
                  self.wss_vs  := _value;
                else if (_name = 'WS-RP')
                  self.ws_pr := _value;
                else if (_name = 'wsrp-from')
                  self.wsrp_from := _value;
                else if (_name = 'Use')
                  self._use1 := _value;
              }
            }
          }
          -- load initial values if not a post
          if (not self.vc_event.ve_is_post)
          {
            self.t_lpath.ufl_value := self.lpath;
            self.t_auth_realm.ufl_value := self.auth_realm;
            self.t_auth_func.ufl_value := self.auth_func;
            self.t_after_func.ufl_value := self.after_func;
            if (isarray(self.auth_opt))
            {
              declare opts varchar;

              opts := '';
              for (idx := 0; idx < length(self.auth_opt); idx := idx + 2)
              {
                opts := concat(opts, sprintf('%s=%s;\r\n', cast(self.auth_opt[idx] as varchar), cast(self.auth_opt[idx+1] as varchar)));
              }
              self.t_auth_opt.ufl_value := opts;
                  }
            for (idx := 0; idx < length (self.soap_opt); idx := idx + 2)
                  {
              if (cast(self.soap_opt[idx] as varchar) = 'XML-RPC' and cast(self.soap_opt[idx+1] as varchar) = 'yes')
                self.c_xml_rpc.ufl_selected := 1;
            }
            self._servicename.ufl_value := self.servicename;
            self._namespace.ufl_value := self.namespace;
            self._headerns.ufl_value := self.headerns;
            self._faultns.ufl_value := self.faultns;
            self._wsrp_from.ufl_value := self.wsrp_from;
            self._wss_key.ufl_value := self.wss_key;
            self._wss_template.ufl_value := self.wss_template;
          }

          if (self.vc_event.ve_button is not null and
              (self.vc_event.ve_button.vc_name = 'next' or
               self.vc_event.ve_button.vc_name = 'back' or
               self.vc_event.ve_button.vc_name = 'finish'))
          {
            -- Get all tabs
            declare tabs any;
            declare pos integer;

            tabs := vector();
            foreach (vspx_control c in self.tab1.vc_children) do
            {
              if (c is not null)
                tabs := vector_concat(tabs,vector(c.vc_name));
            }
            -- find the active one
            pos := position(self.tab1.tb_active.vc_name,tabs);
            if (self.vc_event.ve_button.vc_name = 'back')
              pos := pos - 2;
            else if (self.vc_event.ve_button.vc_name = 'finish')
              pos := length(tabs) - 1;

            declare new_tab_switch_button vspx_button;
            new_tab_switch_button := self.frm_edit_path.vc_find_control ('tab1_switch_' || tabs[pos]);
            new_tab_switch_button.vc_focus := 1;
            new_tab_switch_button.vc_set_childs_focus (1, e);
            self.vc_event.ve_button := new_tab_switch_button;
          }
          else
          {
            self.t_cors.ufl_value := self.cors;
            self.c_cors_rej.ufl_selected := self.cors_rej;
          }
        ]]>
      </v:before-data-bind>
      <v:after-data-bind>
        <![CDATA[
          if (strstr(self.referer, 'sid=') is null and strstr(self.referer, 'realm=') is null)
          {
            self.referer := rtrim(self.referer, '\r\n');
            if (strchr(self.referer, '?') is null)
              self.referer := concat(self.referer, '?');
            self.referer := concat(self.referer, sprintf('sid=%s&realm=%s\r\n', self.sid, self.realm));
          }
        ]]>
      </v:after-data-bind>

      <v:template name="t_template" type="simple" enabled="-- equ(self.mode, 'add1')">
        <v:form name="frm_add_templ2" action="soap_services_edit.vspx" method="POST" type="simple">
          <table class="sub_page" align="left" border="0" cellspacing="0" cellpadding="3" >
            <tr class="listing_header_row">
              <th colspan="3">
                Select template to fill standard options into next form
              </th>
            </tr>
            <tr>
              <td>
                <v:radio-button name="rb_templ" group-name="radio_gr" value="none" initial-checked="1" />
              </td>
                <td>Create as new (blank form)</td>
              <td/>
            </tr>
            <tr>
              <td>
                <v:radio-button name="rb_path" group-name="radio_gr" value="path" initial-checked="0" />
              </td>
              <td>Copy options from existing path</td>
              <td>
                <v:data-list name="dl_temppaths"
                  sql="select HP_LPATH from DB.DBA.HTTP_PATH where HP_HOST=self._httphost and HP_LISTEN_HOST = self._host and HP_PPATH like '/SOAP/%' order by HP_LPATH"
                  key-column="HP_LPATH" value-column="HP_LPATH" width="235" height="24"/>
              </td>
            </tr>
            <tr>
              <td colspan="3" align="center">
                <v:button action="simple" name="cancel_templ" value="Cancel">
                  <v:on-post>
                    <![CDATA[
                      self.mode := '';
                      http_request_status ('HTTP/1.1 302 Found');
                      if( self.referer <> '' )
                        http_header (sprintf('Location: %s', self.referer));
                      else
                        http_header (sprintf('Location: soap_services_list.vspx?sid=%s&realm=%s&_host=%s&_port=%s&_httphost=%s\r\n',self.sid ,self.realm, self.edit_host,self.edit_port,self.edit_httphost));
                    ]]>
                  </v:on-post>
                </v:button>
                <v:button action="simple" name="next_templ" value="Next>>">
                  <v:on-post>
                    <![CDATA[
                      if( self.rb_path.ufl_selected )
                      {
                        declare t_mode varchar;
                        declare exit handler for sqlstate '*'
                        {
                          self.vc_is_valid := 0;
                          self.vc_error_message := __SQL_MESSAGE;
                          return;
                        };

                        -- load settings from choosen path
                        t_mode := self.dl_temppaths.ufl_value;
                        select HP_PPATH, HP_DEFAULT, HP_DIR_BROWSEABLE, HP_RUN_VSP_AS, HP_RUN_SOAP_AS,
                               HP_SECURITY, HP_REALM, HP_AUTH_FUNC, HP_POSTPROCESS_FUNC, HP_PERSIST_SES_VARS,
                               HP_STORE_AS_DAV, deserialize (HP_SOAP_OPTIONS), deserialize (HP_AUTH_OPTIONS),
                               HP_IS_DEFAULT_HOST, deserialize(HP_OPTIONS)
                          into self.ppath, self.defpage, self.dirbrowsing, self.vspuser, self.soapuser,
                               self.security, self.auth_realm, self.auth_func, self.after_func, self.persistvars,
                               self.is_dav, self.soap_opt, self.auth_opt,
                               self.defdir, self.global_opts
                        from DB.DBA.HTTP_PATH
                        where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_LPATH = t_mode;

                        if (isarray (self.global_opts) and not mod (length (self.global_opts), 2))
                        {
                          if (self.xmlexec = '')
                            self.xmlexec := get_keyword ('xml_templates', self.global_opts);

                          if (self.ovrexec = '')
                            self.ovrexec := get_keyword ('executable', self.global_opts);

                          self.cors := get_keyword ('cors', self.global_opts, '');
                          self.cors_rej := get_keyword ('cors_restricted', self.global_opts, 0);
                        }
                      }
                      else if (self.rb_templ.ufl_selected )
                      {
                        self.lpath := '';
                        self.ppath := '/SOAP/';
                        self.defpage := '';
                        self.dirbrowsing  := 0;
                        self.xmlexec  := 0;
                        self.vspuser  := '';
                        self.soapuser := 'SOAP';
                        self.security := '';
                        self.auth_realm := '';
                        self.auth_func := '';
                        self.after_func := '';
                        self.persistvars := 0;
                        self.is_dav := 0;
                        self.soap_opt := vector (
                            'ServiceName','<SERVICE_NAME>',
                            'Namespace','http://openlinksw.com/virtuoso/soap/schema',
                            'MethodInSoapAction','yes',
                            'HeaderNS','http://openlinksw.com/virtuoso/soap/schema',
                            'FaultNS','http://openlinksw.com/virtuoso/soap/schema',
                            'CR-escape','no',
                            'elementFormDefault','unqualified',
                            'DIME-ENC','no',
                            'WS-SEC','no',
                            'WSS-KEY','<KEY_NAME>',
                            'WSS-Validate-Signature','2',
                            'WS-RP','no',
                            'wsrp-from','some@example.domain' );
                        self.auth_opt := '';
                      }
                      self.mode := 'add2';
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
        </v:form>
      </v:template>
      <v:template name="t_template2" type="simple" enabled="-- neq(self.mode, 'add1')">
      <vm:help id="soap_services_edit" sect=""/>
        <v:form name="frm_edit_path" action="soap_services_edit.vspx" method="POST" type="simple">
      <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
        <tr valign='top'>
          <td>
                <br />
                  <table cellpadding="0" cellspacing="0" border="0">
                    <tr>
		      <td class="<?V self.astyle ('opt_tab1') ?>" align="center">
			<v:button name="tab1_switch_opt_tab1" action="simple" value="Virtual Directory Information" style="url" xhtml_style="uddi">
			  <v:after-data-bind>
			    if (not control.vc_focus)
			      return;
			    self.sp_desc := 0;
			    self.xml_desc := 0;
			    self.tab1.tb_active.vc_focus := 1;
			    self.tab1.tb_active.vc_set_childs_focus (1, e);
			  </v:after-data-bind>
			</v:button>
		        </td>
			<td class="<?V self.astyle ('opt_tab2') ?>" align="center">
			<v:button name="tab1_switch_opt_tab2" action="simple" value="Authentication" style="url" xhtml_style="uddi">
			  <v:after-data-bind>
			    if (not control.vc_focus)
			      return;
			    self.sp_desc := 0;
			    self.xml_desc := 0;
			    self.tab1.tb_active.vc_focus := 1;
			    self.tab1.tb_active.vc_set_childs_focus (1, e);
			  </v:after-data-bind>
			</v:button>
                        </td>
			<td class="<?V self.astyle ('opt_tab3') ?>" align="center">
			<v:button name="tab1_switch_opt_tab3" action="simple" value="Web Service Options" style="url" xhtml_style="uddi">
			  <v:after-data-bind>
			    if (not control.vc_focus)
			      return;
			    self.sp_desc := 0;
			    self.xml_desc := 0;
			    self.tab1.tb_active.vc_focus := 1;
			    self.tab1.tb_active.vc_set_childs_focus (1, e);
			  </v:after-data-bind>
			</v:button>
                        </td>
			<td class="<?V self.astyle ('opt_tab4') ?>" align="center">
			<v:button name="tab1_switch_opt_tab4" action="simple" value="WS Security" style="url" xhtml_style="uddi">
			  <v:after-data-bind>
			    if (not control.vc_focus)
			      return;
			    self.sp_desc := 0;
			    self.xml_desc := 0;
			    self.tab1.tb_active.vc_focus := 1;
			    self.tab1.tb_active.vc_set_childs_focus (1, e);
			  </v:after-data-bind>
			</v:button>
                        </td>
			<td class="<?V self.astyle ('opt_tab10') ?>" align="center">
			<v:button name="tab1_switch_opt_tab10" action="simple" value="Publish Objects" style="url" xhtml_style="uddi">
			  <v:after-data-bind>
			    if (not control.vc_focus)
			      return;
			    self.sp_desc := 0;
			    self.xml_desc := 0;
			    self.tab1.tb_active.vc_focus := 1;
			    self.tab1.tb_active.vc_set_childs_focus (1, e);
			  </v:after-data-bind>
			</v:button>
                        </td>
                        <td class="page_tab_empty" align="center" width="100%">
                      &nbsp;
                        </td>
                    </tr>
                  </table>

                  <table class="tab_page">
                    <tr>
		      <td valign="top">
			<!-- MAIN -->
			<v:tab name="tab1" style="custom" initial-active="opt_tab1">
			  <v:template type="simple" name="opt_tab1">
                          <br />
                          <table class="SubData">
                  <tr>
                              <th width="100px">Host</th>
                          <td>
                            <v:label name="l_host" value="--self.caption"/>
                          </td>
                        </tr>
                        <tr>
                              <th>Interface</th>
                          <td>
                            <v:label name="l_iface" value="--self._host1"/>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="t_lpath">Path</label></th>
                          <td>
                            <v:text name="t_lpath" xhtml_size="40" xhtml_id="t_lpath" xhtml_disabled="--case when self.mode='edit' then 'true' else '@@hidden@@' end"/>
                          </td>
                        </tr>
                        <tr>
                          <td/>
                          <td>
                                <label>
                            <v:check-box name="c_xml_rpc" value="on" xhtml_id="c_xml_rpc"/>
                                  <strong>XML-RPC enabled</strong>
                                </label>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="dl_soapuser">SOAP User</label></th>
                          <td>
                                            <v:data-list
                                              xhtml_id="dl_soapuser"
                                              name="dl_soapuser"
                                              sql="select ' __none' as UNAME, 'none' as UFNAME from DB.DBA.SYS_USERS union select U_NAME, U_NAME from DB.DBA.SYS_USERS where U_IS_ROLE=0 and U_SQL_ENABLE = 1 order by UNAME"
                                         key-column="UNAME" value-column="UFNAME"
                                         defvalue="--case when self.soapuser='' then ' __none' else self.soapuser end"
                                              xhtml_onchange="javascript:doPost(\'frm_edit_path\', \'reload1\');"
                                            />
                            <v:button action="simple" name="reload1" value="Reload">
                              <v:on-post>
                                <![CDATA[
				  declare plist any;

                                  self.soapuser := self.dl_soapuser.ufl_value;
                                      if (self.soapuser = ' __none' or self.soapuser = '')
                                        self.soapuser := NULL;

                                  self.roles_grant_list := vector();
                                  self.mod_grant_list := vector();
                                  self.udt_grant_list := vector();
                                  if( isstring(self.soapuser))
                                  {
                                    declare _u_id integer;

                                    select U_ID into _u_id from SYS_USERS where U_NAME = self.soapuser;
				    self.xml_grant_list := get_granted_xml_templates (_u_id, plist);
                                        for (select P_NAME
                                               from DB.DBA.SYS_PROCEDURES, DB.DBA.SYS_GRANTS
                                              where G_USER = _u_id and G_OP = 32 and G_OBJECT = P_NAME and P_TYPE is null) do
                                    {
				      if (0 = position (P_NAME, plist))
                                        self.roles_grant_list := vector_concat(self.roles_grant_list, vector(P_NAME));
                                    }
                                        for (select P_NAME
                                               from DB.DBA.SYS_PROCEDURES, DB.DBA.SYS_GRANTS
                                              where G_USER = _u_id and G_OP = 32 and G_OBJECT = P_NAME and P_TYPE = 3) do
                                    {
				      if (0 = position (P_NAME, plist))
                                        self.mod_grant_list := vector_concat(self.mod_grant_list, vector(P_NAME));
                                    }
                                        for (select UT_NAME
                                               from DB.DBA.SYS_USER_TYPES, DB.DBA.SYS_GRANTS
                                              where G_USER = _u_id and G_OP = 32 and G_OBJECT = UT_NAME) do
				    {
				      self.udt_grant_list := vector_concat(self.udt_grant_list, vector(UT_NAME));
				    }
				  }
                                ]]>
                              </v:on-post>
                            </v:button>
                          </td>
                        </tr>
                      </table>
				  </v:template>

				  <v:template type="simple" name="opt_tab2">
                          <br />
                          <table class="SubData">
                        <tr>
                              <th width="200px"><label for="s_authmethod">Method</label></th>
                          <td>
                                <v:select-list name="s_authmethod" xhtml_id="s_authmethod" xhtml_onchange="defineOpts(this);" value="--coalesce (control.ufl_value, self.security)">
				<v:item name="None" value="none"/>
				<v:item name="Basic" value="basic"/>
				<v:item name="Digest" value="digest"/>
				<v:item name="SSL" value="ssl"/>
			    </v:select-list>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="t_auth_realm">Realm</label></th>
                          <td>
                                <v:text name="t_auth_realm" xhtml_size="40" xhtml_id="t_auth_realm" />
                          </td>
                        </tr>
                        <tr>
                              <th><label for="t_auth_func">Authentication function</label></th>
                          <td>
                            <v:text name="t_auth_func" xhtml_size="40" xhtml_id="t_auth_func"/>
                            <v:browse-button name="br_authook" value="Browse..."
                              selector="vdir_browser.vspx"
                              child-window-options="scrollbars=yes, resizable=yes, menubar=no, height=630, width=600"
                              browser-options="caption=Choose+authentification+function&amp;dir-separator=.&amp;quote-char=&amp;filter-char=%25&amp;content-proc=db.dba.vproc_browse_proc&amp;content-meta-proc=db.dba.vproc_browse_proc_meta&amp;multi-sel=0&amp;dir-sel=0&amp;&amp;retname=t_auth_func">
                              <v:field name="t_auth_func" />
                            </v:browse-button>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="t_auth_opt">Advanced</label></th>
                          <td>
                            <v:textarea name="t_auth_opt" xhtml_cols="40" xhtml_rows="5" xhtml_id="t_auth_opt"/>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="t_after_func">Post-processing function</label></th>
                          <td>
                            <v:text name="t_after_func" xhtml_id="t_after_func" xhtml_size="40"/>
                            <v:browse-button name="br_afterhook" value="Browse..."
                              selector="vdir_browser.vspx"
                              child-window-options="scrollbars=yes, resizable=yes, menubar=no, height=630, width=600"
                              browser-options="caption=Choose+post-processing+function&amp;dir-separator=.&amp;quote-char=&amp;filter-char=%25&amp;content-proc=db.dba.vproc_browse_proc&amp;content-meta-proc=db.dba.vproc_browse_proc_meta&amp;multi-sel=0&amp;dir-sel=0&amp;&amp;retname=t_after_func">
                              <v:field name="t_after_func" />
                            </v:browse-button>
                          </td>
                        </tr>
			<tr>
                              <th valign="top"><label for="t_cors">Cross-Origin Resource Sharing</label></th>
			  <td>
                                <v:text name="t_cors" xhtml_cols="30" xhtml_rows="3" xhtml_size="70" xhtml_id="t_cors"/>
                                <br/>
                                <label>
			    <v:check-box name="c_cors_rej" value="1" xhtml_id="c_cors_rej"/>
                                  <strong>Reject Unintended CORs</strong>
                                </label>
			  </td>
			</tr>
                      </table>
				  </v:template>

				  <v:template type="simple" name="opt_tab3">
                          <br />
                          <table class="SubData">
                        <tr>
                              <th width="200px"><label for="_servicename">ServiceName</label></th>
                          <td>
                            <v:text name="_servicename" xhtml_size="40" xhtml_id="_servicename"/>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_namespace">Namespace</label></th>
                          <td>
                            <v:text name="_namespace" xhtml_size="40" xhtml_id="_namespace"/>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_headerns">HeaderNS</label></th>
                          <td>
                            <v:text name="_headerns" xhtml_size="40" xhtml_id="_headerns"/>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_faultns">FaultNS</label></th>
                          <td>
                            <v:text name="_faultns" xhtml_size="40" xhtml_id="_faultns"/>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_use">Use</label></th>
                          <td>
                                <v:select-list name="_use" xhtml_id="_use" value="--coalesce (control.ufl_value, self._use1)">
			      <v:item name="Document/literal with parameters" value="literal"/>
			      <v:item name="RPC encoded" value="encoded"/>
			    </v:select-list>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_methodinsoapaction">MethodInSoapAction</label></th>
			  <td>
			    <v:select-list name="_methodinsoapaction"
			      value="--coalesce (control.ufl_value, self.methodinsoapaction)">
			      <v:item name="Yes" value="yes"/>
			      <v:item name="No" value="no"/>
			      <v:item name="Empty" value="empty"/>
			      <v:item name="Only" value="only"/>
			    </v:select-list>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_cr_escape">CR-escape</label></th>
                          <td>
			    <v:select-list name="_cr_escape"
			      value="--coalesce (control.ufl_value, self.cr_escape)">
			      <v:item name="Yes" value="yes"/>
			      <v:item name="No" value="no"/>
			    </v:select-list>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_elementformdefault">elementFormDefault</label></th>
                          <td>
                                <v:select-list name="_elementformdefault" value="--coalesce (control.ufl_value, self.elementformdefault)">
			      <v:item name="unqualified" value="unqualified"/>
			      <v:item name="qualified" value="qualified"/>
			    </v:select-list>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_dime_enc">DIME-ENC</label></th>
                          <td>
                                <v:select-list name="_dime_enc" value="--coalesce (control.ufl_value, self.dime_enc)">
			      <v:item name="No" value="no"/>
			      <v:item name="Yes" value="yes"/>
			    </v:select-list>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_ws_pr">WS-RP</label></th>
                          <td>
                                <v:select-list name="_ws_pr" value="--coalesce (control.ufl_value, self.ws_pr)">
			      <v:item name="No" value="no"/>
			      <v:item name="Yes" value="yes"/>
			    </v:select-list>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_wsrp_from">wsrp-from</label></th>
                          <td>
                            <v:text name="_wsrp_from" xhtml_size="40" xhtml_id="_wsrp_from"/>
                          </td>
                        </tr>
                      </table>
				  </v:template>

				  <v:template type="simple" name="opt_tab4">
                          <br />
                          <table class="SubData">
                  <tr>
                              <th width="200px"><label for="_ws_sec">WS-Security</label></th>
                    <td>
                                <v:select-list name="_ws_sec" value="--coalesce (control.ufl_value, self.ws_sec)">
			      <v:item name="No" value="no"/>
			      <v:item name="Yes" value="yes"/>
			    </v:select-list>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_wss_key">WSS-Key</label></th>
                          <td>
                            <v:text name="_wss_key" xhtml_size="40" xhtml_id="_wss_key"/>
                            <v:browse-button name="br_wsskey" value="Browse..."
                              selector="vdir_browser.vspx"
                              child-window-options="scrollbars=yes, resizable=yes, menubar=no, height=630, width=600"
                              browser-options="caption=Choose+WSS+Key&amp;dir-separator=.&amp;quote-char=&amp;filter-char=%25&amp;content-proc=db.dba.vproc_browse_proc&amp;content-meta-proc=db.dba.vproc_browse_proc_meta&amp;multi-sel=0&amp;dir-sel=0&amp;&amp;retname=_wss_key">
                              <v:field name="_wss_key" />
                            </v:browse-button>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_wss_template">WSS-Template</label></th>
                          <td>
                            <v:text name="_wss_template" xhtml_size="40" xhtml_id="_wss_template"/>
                            <vm:file_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="" path="DAV" browse_type="col" style_css="test.css" w_title="DAV Browser" title="DAV Browser" advisory="mega advisory text" lang="en" return_box="_wss_template"/>
                          </td>
                        </tr>
                        <tr>
                              <th><label for="_wss_vs">WSS-Validate-Signature</label></th>
                          <td>
                                <v:select-list name="_wss_vs" value="--coalesce (control.ufl_value, self.wss_vs)">
			      <v:item name="Do not verify signatures" value="0"/>
			      <v:item name="Expects signature to exist" value="1"/>
			      <v:item name="Will verify signature if exists" value="2"/>
			    </v:select-list>
                          </td>
                        </tr>
                      </table>
	      </v:template>

	      <v:template type="simple" name="opt_tab10">
          <table cellpadding="0" cellspacing="0" border="0" width="100%">
            <tr>
    		      <td class="<?V case when self.subtab = 1 then 'page_tab_selected' else 'page_tab_sub' end ?>" align="center">
    			      <v:button name="sub_tab1" action="simple" value="Procedures" style="url" xhtml_style="uddi">
    			        <v:on-post>
    			          self.subtab := 1;
          			    self.opt_tab10.vc_data_bind (e);
    			        </v:on-post>
    			      </v:button>
    		      </td>
          		<td class="<?V case when self.subtab = 2 then 'page_tab_selected' else 'page_tab_sub' end ?>" align="center">
    			      <v:button name="sub_tab2" action="simple" value="PL Modules" style="url" xhtml_style="uddi">
    			        <v:on-post>
    			          self.subtab := 2;
          			    self.opt_tab10.vc_data_bind (e);
    			        </v:on-post>
          			</v:button>
              </td>
    			    <td class="<?V case when self.subtab = 3 then 'page_tab_selected' else 'page_tab_sub' end ?>" align="center">
    			      <v:button name="sub_tab3" action="simple" value="User Defined Types" style="url" xhtml_style="uddi">
    			        <v:on-post>
    			          self.subtab := 3;
          			    self.opt_tab10.vc_data_bind (e);
    			        </v:on-post>
          			</v:button>
              </td>
    			    <td class="<?V case when self.subtab = 4 then 'page_tab_selected' else 'page_tab_sub' end ?>" align="center">
          			<v:button name="sub_tab4" action="simple" value="Saved Queries" style="url" xhtml_style="uddi">
    			        <v:on-post>
    			          self.subtab := 4;
          			    self.opt_tab10.vc_data_bind (e);
    			        </v:on-post>
          			</v:button>
              </td>
            </tr>
          </table>


      		<v:template type="simple" name="pub_procs2" enabled="--case when (self.sp_add <> 1 and self.sp_desc <> 1 and self.subtab = 1) then 1 else 0 end">
  	        <h3>Publish Procedures for user <v:label name="l_add_pr_user" value="--self.soapuser" format="%s"/></h3>
            <table class="ctl_grp">
              <tr>
                <td>
                  <img src="images/icons/filter_32.png" alt="Filter" title="Filter"/>
                </td>
                <td>
                  Catalog
                </td>
                <td>
                  <v:select-list name="sl_catalog2" xhtml_style="width:200" xhtml_onchange="javascript:doPost(\'frm_edit_path\', \'reload10\');">
                    <v:after-data-bind>
                                      <![CDATA[
                        declare indx integer;

                        indx :=0;
                        (control as vspx_select_list).vsl_items:= vector();
                        (control as vspx_select_list).vsl_item_values:= vector();
                        (control as vspx_select_list).vsl_selected_inx :=0;
                                        for select distinct (name_part (p_name, 0)) as  Q_NAME  from sys_procedures where p_type is null order by 1 do
                                        {
                          if( Q_NAME = self.browse_cat )
                            (control as vspx_select_list).vsl_selected_inx :=indx;
                          (control as vspx_select_list).vsl_items :=
                            vector_concat ((control as vspx_select_list).vsl_items, vector(Q_NAME));
                          (control as vspx_select_list).vsl_item_values :=
                            vector_concat ((control as vspx_select_list).vsl_item_values, vector(Q_NAME));
                          indx := indx +1;
                        }
                                      ]]>
                    </v:after-data-bind>
                  </v:select-list>
              </td>
              <td align="right">
                  <v:button action="simple" name="reload10" value="Update Display">
                    <v:on-post>
                      <![CDATA[
                        self.browse_cat :=  get_keyword('sl_catalog2', params, self.browse_cat);
                        self.ds_add_procedures.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
              </td>
            </tr>
          </table>
                                  <v:data-set
                                    name="ds_add_procedures"
                                    sql="select P_NAME
                                           from DB.DBA.SYS_PROCEDURES
                                          where self.browse_cat = name_part (P_NAME, 0) and p_name not like '%.vsp' and P_TYPE is null
                                          order by P_NAME"
                                    nrows="1000"
                                    scrollable="1"
                                    edit="1">
              <v:column name="P_NAME"/>
              <v:before-data-bind>
                                      if (isnull (self.browse_cat) or self.browse_cat = '' or not exists(select 1 from DB.DBA.SYS_PROCEDURES where P_TYPE is null and name_part (P_NAME, 0) = self.browse_cat) )
                                      {
                                        self.browse_cat := (select top 1 name_part (P_NAME, 0) from DB.DBA.SYS_PROCEDURES where P_TYPE is null);
			          }
              </v:before-data-bind>

              <v:template name="temp_ds_add_procedures_header" type="simple" name-to-remove="table" set-to-remove="bottom">
  	      <?vsp http('<div class="scroll_area">'); ?>
                <table class="listing" rules="groups">
                  <thead>
                    <tr class="listing_header_row">
                       <th style="width:5px;" nowrap="1">
                         <input type="checkbox" name="select_all" value="Select All" onClick="selectAllCheckboxes(this.form, this, 'cb_add_pr')"/>
                       </th>
                       <th style="width:60px;" nowrap="1">State</th>
                       <th>Procedure</th>
                       <th>Description</th>
                    </tr>
                  </thead>
                </table>
              </v:template>
              <v:template name="temp_ds_add_procedures_repeat" type="repeat" name-to-remove="" set-to-remove="">
                <v:template name="temp_ds_add_procedures_empty" type="if-not-exists" name-to-remove="table" set-to-remove="both">
                  <table> <!-- dummy -->
                    <tr>
                      <td colspan="4" class="Attention">No procedures</td>
                    </tr>
                  </table>
                </v:template>

                <v:template name="temp_ds_add_procedures_browse" type="browse" name-to-remove="table" set-to-remove="both">
                  <table> <!-- dummy -->
  		              <tr class="<?V case when mod (control.te_ctr, 2) then 'listing_row_odd' else 'listing_row_even' end ?>">
                      <td class="listing_col">
                        <input type="checkbox" name="cb_add_pr" value="<?V (control as vspx_row_template).te_rowset[0] ?>"/>
                      </td>
                      <td class="listing_col">
                                              <v:label name="l_add_pr" value="--case when position ((control.vc_parent as vspx_row_template).te_rowset[0], self.roles_grant_list) then 'Published' else '' end" format="%s" />
                      </td>
                      <td class="listing_col">
                        <img src="images/icons/script_16.png" alt="Stored procedure" title="Stored procedure"/>
                        <v:label name="l_add_pr" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" format="%s"/>
                      </td>
                      <td class="listing_col">
                        <v:label name="l_add_pr_desc" value="" >
                			    <v:after-data-bind>
                    		      declare descr, body any;
                    		      body := (select coalesce (P_TEXT, blob_to_string (P_MORE)) from SYS_PROCEDURES where P_NAME = (control.vc_parent as vspx_row_template).te_rowset[0]);
                    			    descr := regexp_match ('--##.*', body);
                    			    if (descr is not null)
                    			      descr := substring (descr, 5, length (descr));
                    			    else
                    			      descr := '';
                    			    control.ufl_value := descr;
              			       </v:after-data-bind>
              			     </v:label>
                      </td>
                    </tr>
                  </table>
                </v:template>
              </v:template>
              <v:template name="temp_ds_add_procedures_footer" type="simple" name-to-remove="table" set-to-remove="top">
                <table>
                  <tr>
                    <td colspan="4"  class="listing_col_action">
              		    <vm:ds-navigation data-set="ds_add_procedures"/>
                    </td>
                  </tr>
                </table>

  	      <?vsp http ('</div>'); ?>
                <div class="listing_bot_ctl_grp">
            			<v:button name="bt_add_proc2" value="Publish Selected" action="simple">
            			  <v:on-post>
            			    <![CDATA[
                      declare inx integer;
                      declare item, q, o, n, fn, tmp varchar;
                      declare _params any;

                      _params := control.vc_page.vc_event.ve_params;
                                        for (inx := 0; inx < length (_params); inx := inx + 2)
                                        {
                                          if (_params[inx] = 'cb_add_pr')
                      {
                          if (not(position(_params[inx + 1],self.roles_grant_list)))
                          {
                            self.roles_grant_list := vector_concat(self.roles_grant_list,vector(_params[inx + 1]));
                            self.ensure_soapuser();
			    fn := _params[inx + 1];
			    q := name_part (fn, 0);
			    o := name_part (fn, 1);
			    tmp := q || '.' || o || '.';
			    n := subseq (fn, length (tmp));
			    exec (sprintf ('GRANT EXECUTE ON "%I"."%I"."%I" TO %s', q, o, n, self.soapuser));
                          }
                        }
                      }
            			    self.sp_add := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]>
            			  </v:on-post>
            			</v:button>
            			<v:button name="bt_revoke_proc" value="Un-Publish Selected" action="simple">
            			  <v:on-post>
            			    <![CDATA[
                      declare inx integer;
                      declare item, q, o, n, fn, tmp varchar;
                      declare _params any;
                      declare indx integer;

                      _params := control.vc_page.vc_event.ve_params;
                                        for (inx := 0; inx < length (_params); inx := inx + 2)
                                        {
                                          if (_params[inx] = 'cb_add_pr')
                      {
                          indx := position(_params[inx + 1], self.roles_grant_list);
                          if (indx)
                          {
			    self.roles_grant_list := vector_concat (subseq (self.roles_grant_list, 0, indx - 1),
			            subseq (self.roles_grant_list, indx, length (self.roles_grant_list)));
			    fn := _params[inx + 1];
			    q := name_part (fn, 0);
			    o := name_part (fn, 1);
			    tmp := q || '.' || o || '.';
			    n := subseq (fn, length (tmp));
			    exec (sprintf ('REVOKE EXECUTE ON "%I"."%I"."%I" FROM %s', q, o, n, self.soapuser));
                          }
                        }
                      }
            			    self.sp_add := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]>
            			  </v:on-post>
            			</v:button>
            			<v:button name="bt_desc_def10" value="Edit Descriptions" action="simple">
            			  <v:on-post>
            			    self.sp_desc := 1;
            			    self.opt_tab10.vc_data_bind (e);
            			  </v:on-post>
            			</v:button>
                </div>
              </v:template>
            </v:data-set>
  	      </v:template>

        	<v:template type="simple" name="desc_procs2" enabled="--case when (self.sp_desc and self.subtab = 1) then 1 else 0 end">
            <table class="SubData" width="100%">
              <tr>
		            <th colspan="2">Descriptions for Published Stored Procedures</th>
		          </tr>
      		    <?vsp
      		      declare sps, descr, body any;
      		      sps := self.roles_grant_list;
      		      foreach (any sp in sps) do
      		        {
      		          body := (select coalesce (P_TEXT, blob_to_string (P_MORE)) from SYS_PROCEDURES where P_NAME = sp);
            			  descr := regexp_match ('--##.*', body);
            			  if (descr is not null)
            			    descr := substring (descr, 5, length (descr));
            			  else
            			    descr := '';
      		    ?>
		            <tr><td><?V sp ?></td><td width="80%"><input type="text" name="desc_<?V sp ?>" size="70" value="<?V descr ?>" /></td></tr>
      		    <?vsp
      		         }
	            ?>
		          <tr>
		            <td colspan="2">
            			<v:button name="bt_desc_def42" value="Cancel" action="simple">
            			  <v:on-post><![CDATA[
            			    self.sp_desc := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]></v:on-post>
            			</v:button>
            			<v:button name="bt_desc_def41" value="Save Descriptions" action="simple">
            			  <v:on-post><![CDATA[
            			    declare sps, descr, body, tmp, stat, msg, ex_grants, ptxt, pmore any;
            			    sps := self.roles_grant_list;
            			    foreach (any sp in sps) do
          			      {
          			        descr := get_keyword ('desc_'||sp, e.ve_params);
                				if (length (descr))
              				  {
              				    whenever not found goto nfp;
              				    select P_TEXT, P_MORE into ptxt, pmore
              				    from SYS_PROCEDURES where P_NAME = sp;

              				    body := coalesce (ptxt, blob_to_string (pmore));
              				    tmp := sql_split_text (body);
              				    body := tmp[0];
              				    tmp := concat ('--##', descr,'\r\n', body);
              				    if (ptxt)
              				      update SYS_PROCEDURES set P_TEXT = tmp where P_NAME = sp;
              				    else
              				      update SYS_PROCEDURES set P_MORE = tmp where P_NAME = sp;
              				    __proc_changed (sp);
              				    nfp:;
              				  }
          			      }
            			    self.sp_desc := 0;
            			    self.opt_tab10.vc_data_bind (e);
          			    ]]></v:on-post>
            			</v:button>
		            </td>
		          </tr>
		        </table>
		      </v:template>

      		<v:template type="simple" name="pub_mod2" enabled="--case when (self.sp_add <> 1 and self.sp_desc <> 1 and self.subtab = 2) then 1 else 0 end">
  	        <h3>Publish PL Modules for user <v:label name="l_add_mod_user" value="--self.soapuser" format="%s"/></h3>
            <table class="ctl_grp">
              <tr>
                <td>
                  <img src="images/icons/filter_32.png" alt="Filter" title="Filter"/>
                </td>
                <td>
                  Catalog
                </td>
                <td>
                  <v:select-list name="sl_catalog20" xhtml_style="width:200" xhtml_onchange="javascript:doPost(\'frm_edit_path\', \'reload20\');">
                    <v:after-data-bind>
                                      <![CDATA[
                        -- select distinct name_part (key_table, 0) as  Q_NAME from sys_keys
                        declare indx integer;

                        indx :=0;
                        (control as vspx_select_list).vsl_items:= vector();
                        (control as vspx_select_list).vsl_item_values:= vector();
                        (control as vspx_select_list).vsl_selected_inx :=0;
                                        for select distinct (name_part (p_name, 0)) as Q_NAME from sys_procedures where P_TYPE = 3 order by 1 do
                                        {
                          if( Q_NAME = self.browse_cat )
                            (control as vspx_select_list).vsl_selected_inx :=indx;
                          (control as vspx_select_list).vsl_items :=
                            vector_concat ((control as vspx_select_list).vsl_items, vector(Q_NAME));
                          (control as vspx_select_list).vsl_item_values :=
                            vector_concat ((control as vspx_select_list).vsl_item_values, vector(Q_NAME));
                          indx := indx +1;
                        }
                                      ]]>
                    </v:after-data-bind>
                  </v:select-list>
                </td>
                <td align="right">
                  <v:button action="simple" name="reload20" value="Update Display">
                    <v:on-post>
                      <![CDATA[
                        self.browse_cat :=  get_keyword('sl_catalog20', params, self.browse_cat);
                        self.ds_add_modules.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                </td>
              </tr>
            </table>
                                  <v:data-set
                                    name="ds_add_modules"
                                    sql="select P_NAME
                                           from DB.DBA.SYS_PROCEDURES
                                          where self.browse_cat = name_part (P_NAME, 0) and p_name not like '%.vsp' and P_TYPE = 3
                                          order by P_NAME"
                                    nrows="1000"
                                    scrollable="1"
                                    edit="1">
              <v:column name="P_NAME"/>
              <v:before-data-bind>
                                      if (isnull(self.browse_cat) or self.browse_cat = '' or not exists(select 1 from DB.DBA.SYS_PROCEDURES where P_TYPE = 3 and name_part (P_NAME, 0) = self.browse_cat) )
                                      {
                                        self.browse_cat := (select top 1 name_part (P_NAME, 0) from DB.DBA.SYS_PROCEDURES where P_TYPE = 3);
			          }
              </v:before-data-bind>

              <v:template name="temp_ds_add_modules_header" type="simple" name-to-remove="table" set-to-remove="bottom">
  	      <?vsp http('<div class="scroll_area">'); ?>
                <table class="listing" rules="groups">
                  <thead>
                    <tr class="listing_header_row">
                       <th style="width:5px;" nowrap="1">
                         <input type="checkbox" name="select_all" value="Select All" onClick="selectAllCheckboxes(this.form, this, 'cb_add_mod')"/>
                       </th>
                       <th style="width:60px;" nowrap="1">State</th>
                       <th>PL Module</th>
                       <th>Description</th>
                    </tr>
                  </thead>
                </table>
              </v:template>
              <v:template name="temp_ds_add_modules_repeat" type="repeat" name-to-remove="" set-to-remove="">
                <v:template name="temp_ds_add_modules_empty" type="if-not-exists" name-to-remove="table" set-to-remove="both">
                  <table> <!-- dummy -->
                    <tr>
                      <td colspan="4" class="Attention">No PL modules</td>
                    </tr>
                  </table>
                </v:template>

                <v:template name="temp_ds_add_modules_browse" type="browse" name-to-remove="table" set-to-remove="both">
                  <table> <!-- dummy -->
  		              <tr class="<?V case when mod (control.te_ctr, 2) then 'listing_row_odd' else 'listing_row_even' end ?>">
                      <td class="listing_col">
                        <input type="checkbox" name="cb_add_mod" value="<?V (control as vspx_row_template).te_rowset[0] ?>"/>
                      </td>
                      <td class="listing_col">
                                              <v:label name="l_add_pr" value="--case when position ((control.vc_parent as vspx_row_template).te_rowset[0], self.mod_grant_list) then 'Published' else '' end" format="%s" />
                      </td>
                      <td class="listing_col">
                        <img src="images/icons/script_16.png" alt="PL Module" title="PL Module"/>
                        <v:label name="l_add_mod" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" format="%s"/>
                      </td>
                      <td class="listing_col">
                        N/A
                      </td>
                    </tr>
                  </table>
                </v:template>
              </v:template>
              <v:template name="temp_ds_add_modules_footer" type="simple" name-to-remove="table" set-to-remove="top">
                <table>
                  <tr>
                    <td colspan="4"  class="listing_col_action">
              		    <vm:ds-navigation data-set="ds_add_modules"/>
                    </td>
                  </tr>
                </table>
  	      <?vsp http ('</div>'); ?>
                <div class="listing_bot_ctl_grp">
            			<v:button name="bt_add_mod2" value="Publish Selected" action="simple">
            			  <v:on-post>
            			    <![CDATA[
                      declare inx integer;
                      declare item varchar;
                      declare _params any;
                      _params := control.vc_page.vc_event.ve_params;
                      while (inx < length(_params))
                      {
                        if (_params[inx] = 'cb_add_mod') {
                          if (not(position(_params[inx + 1],self.mod_grant_list)))
                          {
                            self.mod_grant_list := vector_concat(self.mod_grant_list,vector(_params[inx + 1]));
                            self.ensure_soapuser();
			    exec (sprintf ('GRANT EXECUTE ON %s TO %s',_params[inx + 1], self.soapuser));
                          }
                        }
                        inx := inx + 2;
                      }
            			    self.sp_add := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]>
            			  </v:on-post>
            			</v:button>
            			<v:button name="bt_revoke_mod" value="Un-Publish Selected" action="simple">
            			  <v:on-post>
            			    <![CDATA[
                      declare inx integer;
                      declare item varchar;
                      declare _params any;
                      declare indx integer;

                      _params := control.vc_page.vc_event.ve_params;
                                      for (inx := 0; inx < length (_params); inx := inx + 2)
                                      {
                                        if (_params[inx] = 'cb_add_mod')
                      {
                          indx := position(_params[inx + 1], self.mod_grant_list);
                          if (indx)
                          {
                            self.mod_grant_list := vector_concat(subseq(self.mod_grant_list,0,indx - 1),subseq(self.mod_grant_list,indx,length(self.mod_grant_list)));
                			      exec(sprintf('REVOKE EXECUTE ON %s FROM %s',_params[inx + 1], self.soapuser));
                          }
                        }
                      }
            			    self.sp_add := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]>
            			  </v:on-post>
            			</v:button>
                </div>
              </v:template>
            </v:data-set>
  	      </v:template>

      		<v:template type="simple" name="pub_udt2" enabled="--case when (self.sp_add <> 1 and self.sp_desc <> 1 and self.subtab = 3) then 1 else 0 end">
  	        <h3>Publish User Defined Types for user <v:label name="l_add_udt_user" value="--self.soapuser" format="%s"/></h3>
            <table class="ctl_grp">
              <tr>
                <td>
                  <img src="images/icons/filter_32.png" alt="Filter" title="Filter"/>
                </td>
                <td>
                  Catalog
                </td>
                <td>
                  <v:select-list name="sl_catalog30" xhtml_style="width:200" xhtml_onchange="javascript:doPost(\'frm_edit_path\', \'reload30\');">
                    <v:after-data-bind>
                                      <![CDATA[
                        -- select distinct name_part (key_table, 0) as  Q_NAME from sys_keys
                        declare indx integer;

                        indx :=0;
                        (control as vspx_select_list).vsl_items:= vector();
                        (control as vspx_select_list).vsl_item_values:= vector();
                        (control as vspx_select_list).vsl_selected_inx :=0;
                                        for select distinct (name_part (UT_NAME, 0)) as Q_NAME from SYS_USER_TYPES order by 1 do
                                        {
                          if( Q_NAME = self.browse_cat )
                            (control as vspx_select_list).vsl_selected_inx :=indx;
                          (control as vspx_select_list).vsl_items :=
                            vector_concat ((control as vspx_select_list).vsl_items, vector(Q_NAME));
                          (control as vspx_select_list).vsl_item_values :=
                            vector_concat ((control as vspx_select_list).vsl_item_values, vector(Q_NAME));
                          indx := indx +1;
                        }
                                      ]]>
                    </v:after-data-bind>
                  </v:select-list>
                </td>
                <td align="right">
                  <v:button action="simple" name="reload30" value="Update Display">
                    <v:on-post>
                      <![CDATA[
                        self.browse_cat :=  get_keyword('sl_catalog30', params, self.browse_cat);
                        self.ds_add_udt.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                </td>
              </tr>
            </table>
                                  <v:data-set
                                    name="ds_add_udt"
                                    sql="select distinct UT_NAME
                                           from DB.DBA.SYS_USER_TYPES
			  where self.browse_cat = name_part (UT_NAME, 0)
                                          order by UT_NAME"
                                    nrows="1000" scrollable="1" edit="1">
              <v:column name="UT_NAME"/>
              <v:before-data-bind>
                if (isnull(self.browse_cat) or self.browse_cat = '' or
                    not exists(select 1 from SYS_USER_TYPES where name_part (UT_NAME, 0) = self.browse_cat) ) {
			            self.browse_cat := (select top 1 name_part (UT_NAME, 0) from SYS_USER_TYPES order by 1);
			          }
              </v:before-data-bind>

              <v:template name="temp_ds_add_udt_header" type="simple" name-to-remove="table" set-to-remove="bottom">
  	      <?vsp http('<div class="scroll_area">'); ?>
                <table class="listing" rules="groups">
                  <thead>
                    <tr class="listing_header_row">
                       <th style="width:5px;" nowrap="1">
                         <input type="checkbox" name="select_all" value="Select All" onClick="selectAllCheckboxes(this.form, this, 'cb_add_udt')"/>
                       </th>
                       <th style="width:60px;" nowrap="1">State</th>
                       <th>User Defined Type</th>
                       <th>Description</th>
                    </tr>
                  </thead>
                </table>
              </v:template>
              <v:template name="temp_ds_add_udt_repeat" type="repeat" name-to-remove="" set-to-remove="">
                <v:template name="temp_ds_add_udt_empty" type="if-not-exists" name-to-remove="table" set-to-remove="both">
                  <table> <!-- dummy -->
                    <tr>
                      <td colspan="4" class="Attention">No user defined type</td>
                    </tr>
                  </table>
                </v:template>

                <v:template name="temp_ds_add_udt_browse" type="browse" name-to-remove="table" set-to-remove="both">
                  <table> <!-- dummy -->
  		              <tr class="<?V case when mod (control.te_ctr, 2) then 'listing_row_odd' else 'listing_row_even' end ?>">
                      <td class="listing_col">
                        <input type="checkbox" name="cb_add_udt" value="<?V (control as vspx_row_template).te_rowset[0] ?>"/>
                      </td>
                      <td class="listing_col">
                                            <v:label name="l_add_pr" value="--case when position ((control.vc_parent as vspx_row_template).te_rowset[0], self.udt_grant_list) then 'Published' else '' end" format="%s" />
                      </td>
                      <td class="listing_col">
                        <img src="images/icons/apps_16.png" alt="User-defined Type" title="User-defined type"/>
                        <v:label name="l_add_udt" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" format="%s"/>
                      </td>
                      <td class="listing_col">
                        N/A
                      </td>
                    </tr>
                  </table>
                </v:template>
              </v:template>
              <v:template name="temp_ds_add_udt_footer" type="simple" name-to-remove="table" set-to-remove="top">
                <table>
                  <tr>
                    <td colspan="4"  class="listing_col_action">
              		    <vm:ds-navigation data-set="ds_add_udt"/>
                    </td>
                  </tr>
                </table>
  	      <?vsp http ('</div>'); ?>
                <div class="listing_bot_ctl_grp">
            			<v:button name="bt_add_udt2" value="Publish Selected" action="simple">
            			  <v:on-post>
            			    <![CDATA[
                      declare inx integer;
                      declare item varchar;
                      declare _params any;

                      _params := control.vc_page.vc_event.ve_params;
                      while (inx < length(_params))
                      {
                                      if (_params[inx] = 'cb_add_udt')
                                      {
                          if (not(position(_params[inx + 1],self.udt_grant_list)))
                          {
                            self.udt_grant_list := vector_concat(self.udt_grant_list,vector(_params[inx + 1]));
                            self.ensure_soapuser();
                			      exec(sprintf('GRANT EXECUTE ON %s TO %s',_params[inx + 1], self.soapuser));
                			      declare vho, lho, lp varchar;
                			      vho := self._httphost;
                			      lho := self._host;
                		        lp := self.lpath;

                			      if (not exists (select 1 from DB.DBA.SYS_SOAP_UDT_PUB where
                				          SUP_CLASS = _params[inx + 1] and
                				          SUP_HOST = vho and SUP_LHOST = lho and SUP_END_POINT = lp)
                				        and
                				        exists (select 1 from DB.DBA.HTTP_PATH
	                                where HP_LISTEN_HOST = lho and HP_HOST = vho and HP_LPATH = lp)
                				      )
                				      {
                				        insert into DB.DBA.SYS_SOAP_UDT_PUB (SUP_CLASS,SUP_HOST,SUP_LHOST,SUP_END_POINT)
                				        values (_params[inx + 1], vho, lho, lp);
                				      }
                          }
                        }
                        inx := inx + 2;
                      }
            			    self.sp_add := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]>
            			  </v:on-post>
            			</v:button>
            			<v:button name="bt_revoke_udt" value="Un-Publish Selected" action="simple">
            			  <v:on-post>
            			    <![CDATA[
                      declare inx integer;
                      declare item varchar;
                      declare _params any;
                      declare indx integer;

                      _params := control.vc_page.vc_event.ve_params;
                                    for (inx := 0; inx < length (_params); inx := inx + 2)
                                    {
                                      if (_params[inx] = 'cb_add_udt')
                      {
                          indx := position(_params[inx + 1], self.udt_grant_list);
                          if (indx)
                          {
                            self.udt_grant_list := vector_concat(subseq(self.udt_grant_list,0,indx - 1),subseq(self.udt_grant_list,indx,length(self.udt_grant_list)));
                			      exec(sprintf('REVOKE EXECUTE ON %s FROM %s',_params[inx + 1], self.soapuser));
                          }
                        }
                      }
            			    self.sp_add := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]>
            			  </v:on-post>
            			</v:button>
                </div>
              </v:template>
            </v:data-set>
  	      </v:template>

      		<v:template type="simple" name="pub_xml2" enabled="--case when (self.sp_add <> 1 and self.sp_desc <> 1 and self.subtab = 4) then 1 else 0 end">
  	        <h3>Publish Saved Queries for user <v:label name="l_add_xml_user" value="--self.soapuser" format="%s"/></h3>
                                  <v:data-set
                                    name="ds_add_xml"
                                    sql="select RES_FULL_PATH
                                           from WS.WS.SYS_DAV_RES, WS.WS.SYS_DAV_PROP
                                          where PROP_NAME = 'xml-template' and RES_ID = PROP_PARENT_ID and PROP_TYPE = 'R' and length (RES_FULL_PATH)"
                                    nrows="1000"
                                    scrollable="1"
                                    edit="1">
              <v:column name="RES_FULL_PATH"/>
              <v:template name="temp_ds_add_xml_header" type="simple" name-to-remove="table" set-to-remove="bottom">
  	      <?vsp http('<div class="scroll_area">'); ?>
                <table class="listing" rules="groups">
                  <thead>
                    <tr class="listing_header_row">
                       <th style="width:5px;" nowrap="1">
                         <input type="checkbox" name="select_all" value="Select All" onClick="selectAllCheckboxes(this.form, this, 'cb_add_xml')"/>
                       </th>
                       <th style="width:60px;" nowrap="1">State</th>
                       <th>Saved Query</th>
                       <th>Description</th>
                    </tr>
                  </thead>
                </table>
              </v:template>
              <v:template name="temp_ds_add_xml_repeat" type="repeat" name-to-remove="" set-to-remove="">
                <v:template name="temp_ds_add_xml_empty" type="if-not-exists" name-to-remove="table" set-to-remove="both">
                  <table> <!-- dummy -->
                    <tr>
                      <td colspan="4" class="Attention">No saved queries</td>
                    </tr>
                  </table>
                </v:template>

                <v:template name="temp_ds_add_xml_browse" type="browse" name-to-remove="table" set-to-remove="both">
                  <table> <!-- dummy -->
  		              <tr class="<?V case when mod (control.te_ctr, 2) then 'listing_row_odd' else 'listing_row_even' end ?>">
                      <td class="listing_col">
                        <input type="checkbox" name="cb_add_xml" value="<?V (control as vspx_row_template).te_rowset[0] ?>"/>
                      </td>
                      <td class="listing_col">
                                              <v:label name="l_add_pr" value="--case when position ((control.vc_parent as vspx_row_template).te_rowset[0], self.xml_grant_list) then 'Published' else '' end" format="%s" />
                      </td>
                      <td class="listing_col">
                        <img src="images/icons/apps_16.png" alt="Saved Query" title="Saved Query"/>
                        <v:label name="l_add_xml" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" format="%s"/>
                      </td>
                      <td class="listing_col">
                        <v:label name="l_add_xml_desc" value="" >
                			    <v:after-data-bind>
                  		      declare descr, dav_pwd any;
                  		      dav_pwd := (select pwd_magic_calc (U_NAME, U_PASSWORD, 1) from SYS_USERS where U_ID = http_dav_uid ());
    		      		          descr := coalesce (DAV_PROP_GET ((control.vc_parent as vspx_row_template).te_rowset, 'xml-sql-description', 'dav', dav_pwd), '');
              		          if (not(isstring(descr)))
              		            descr := '';
                  			    control.ufl_value := descr;
              			      </v:after-data-bind>
              			    </v:label>
                      </td>
                    </tr>
                  </table>
                </v:template>
              </v:template>
              <v:template name="temp_ds_add_xml_footer" type="simple" name-to-remove="table" set-to-remove="top">
                <table>
                  <tr>
                    <td colspan="4"  class="listing_col_action">
              		    <vm:ds-navigation data-set="ds_add_xml"/>
                    </td>
                  </tr>
                </table>
  	      <?vsp http ('</div>'); ?>
                <div class="listing_bot_ctl_grp">
            			<v:button name="bt_add_xml2" value="Publish Selected" action="simple">
            			  <v:on-post>
            			    <![CDATA[
                      declare inx integer;
                      declare item varchar;
                      declare _params any;

                      _params := control.vc_page.vc_event.ve_params;
                      while (inx < length(_params))
                      {
                                          if (_params[inx] = 'cb_add_xml')
                                          {
                          if (not(position(_params[inx + 1],self.xml_grant_list)))
                          {
                            self.xml_grant_list := vector_concat(self.xml_grant_list,vector(_params[inx + 1]));
                            self.ensure_soapuser();
                			      grant_xml_template (_params[inx + 1], self.soapuser);
                          }
                        }
                        inx := inx + 2;
                      }
            			    self.sp_add := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]>
            			  </v:on-post>
            			</v:button>
            			<v:button name="bt_revoke_xml" value="Un-Publish Selected" action="simple">
            			  <v:on-post>
            			    <![CDATA[
                      declare inx integer;
                      declare item varchar;
                      declare _params any;
                      declare indx integer;
                      declare obj varchar;

                      _params := control.vc_page.vc_event.ve_params;
                                      for (inx := 0; inx < length (_params); inx := inx + 2)
                                      {
                                        if (_params[inx] = 'cb_add_xml')
                      {
                          indx := position(_params[inx + 1], self.xml_grant_list);
                          if (indx)
                          {
                            self.xml_grant_list := vector_concat(subseq(self.xml_grant_list,0,indx - 1),subseq(self.xml_grant_list,indx,length(self.xml_grant_list)));
                            select blob_to_string (PROP_VALUE) into obj
                              from WS.WS.SYS_DAV_PROP, WS.WS.SYS_DAV_RES
                              where PROP_TYPE = 'R' and PROP_NAME = 'xml-soap-method' and RES_ID = PROP_PARENT_ID
                              and RES_FULL_PATH = _params[inx + 1];
                			      exec(sprintf('REVOKE EXECUTE ON %s FROM %s',obj, self.soapuser));
                          }
                        }
                      }
            			    self.sp_add := 0;
            			    self.opt_tab10.vc_data_bind (e);
            			    ]]>
            			  </v:on-post>
            			</v:button>
            			<v:button name="bt_desc_def40" value="Edit Descriptions" action="simple">
            			  <v:on-post>
            			    self.sp_desc := 1;
            			    self.subtab := 4;
            			    self.opt_tab10.vc_data_bind (e);
            			  </v:on-post>
            			</v:button>
                </div>
              </v:template>
            </v:data-set>
  	      </v:template>

        	<v:template type="simple" name="desc_xml2" enabled="--case when (self.sp_desc and self.subtab = 4) then 1 else 0 end">
            <table class="SubData" width="100%">
              <tr>
		            <th colspan="2">Descriptions for Published XML Templates</th>
		          </tr>
      		    <?vsp
      		      declare sps, descr, body, dav_pwd any;
      		      sps := self.xml_grant_list;
      		      dav_pwd := (select pwd_magic_calc (U_NAME, U_PASSWORD, 1) from SYS_USERS where U_ID = http_dav_uid ());
      		      foreach (any sp in sps) do
      		        {
      		           descr := coalesce (DAV_PROP_GET (sp, 'xml-sql-description', 'dav', dav_pwd), '');
      		           if (not(isstring(descr)))
      		             descr := '';
      		    ?>
        		    <tr><td><?V sp ?></td><td width="80%"><input type="text" name="xdesc_<?V sp ?>" size="70" value="<?V descr ?>" /></td></tr>
      		    <?vsp
      		         }
	            ?>
		          <tr>
		            <td colspan="2">
            			<v:button name="bt_desc_def12" value="Cancel" action="simple">
                                    <v:on-post>
                                      <![CDATA[
            			    self.sp_desc := 0;
            			    self.opt_tab10.vc_data_bind (e);
                                      ]]>
                                    </v:on-post>
            			</v:button>
            			<v:button name="bt_desc_def11" value="Save Descriptions" action="simple">
            			  <v:on-post><![CDATA[
            			    declare sps, descr, body, tmp, stat, msg, ex_grants, ptxt, pmore, dav_pwd, exis any;

            			    sps := self.xml_grant_list;
            			    dav_pwd := (select pwd_magic_calc (U_NAME, U_PASSWORD, 1) from SYS_USERS where U_ID = http_dav_uid ());
            			    foreach (any sp in sps) do
            			      {
            			        descr := get_keyword ('xdesc_'||sp, e.ve_params);
            				if (length (descr))
            				  {
            				    DAV_PROP_REMOVE (sp, 'xml-sql-description', 'dav', dav_pwd);
            		                    exis := coalesce (DAV_PROP_GET (sp, 'xml-soap-method', 'dav', dav_pwd), '');
            				    if (isstring (exis) and __proc_exists (exis) is not null)
            				      {
            					whenever not found goto nfp;

                                            select P_TEXT, P_MORE into ptxt, pmore from SYS_PROCEDURES where P_NAME = exis;
            					body := coalesce (ptxt, blob_to_string (pmore));
            					tmp := sql_split_text (body);
            					body := tmp[0];
            					tmp := concat ('--##', descr,'\r\n', body);
            					if (ptxt)
            					  update SYS_PROCEDURES set P_TEXT = tmp where P_NAME = exis;
            					else
            					  update SYS_PROCEDURES set P_MORE = tmp where P_NAME = exis;
            					__proc_changed (exis);
            					nfp:;
            				      }
            				  }
            			      }
            			    self.sp_desc := 0;
            			    self.opt_tab10.vc_data_bind (e);
          			    ]]></v:on-post>
            			</v:button>
		            </td>
		          </tr>
		        </table>
		      </v:template>

	      </v:template>

	      </v:tab>

                        <br />
		  <table>
            <tr>
                            <td>
		<?vsp if (not (self.sp_desc or self.xml_desc or self.sp_add)) { ?>
                <v:button action="simple" name="cancel" value="Cancel">
                  <v:on-post>
                      <![CDATA[
                      http_request_status ('HTTP/1.1 302 Found');
                      if( self.referer <> '' )
                        http_header (sprintf('Location: %s', self.referer));
                      else
                        http_header (sprintf('Location: soap_services_list.vspx?sid=%s&realm=%s&_host=%s&_port=%s&_httphost=%s\r\n',self.sid ,self.realm, self.edit_host,self.edit_port,self.edit_httphost));
                      ]]>
                  </v:on-post>
                </v:button>
                <v:button action="simple" name="back" value="Back" enabled="--neq(self.tab1.tb_active.vc_name,'opt_tab1')">
                </v:button>
                <v:button action="simple" name="next" value="Next" enabled="--neq(self.tab1.tb_active.vc_name,'opt_tab10')">
                </v:button>
                <v:button action="simple" name="finish" value="Finish" enabled="--case when self.tab1.tb_active.vc_name in ('opt_tab1','opt_tab10') then 0 else 1 end">
                </v:button>
                <v:button action="simple" name="save" value="Save Changes" enabled="--equ(self.tab1.tb_active.vc_name,'opt_tab10')">
		  <v:after-data-bind>
		    if (not control.vc_focus)
		      return;

		    self.tab1.tb_active.vc_focus := 1;
		    self.tab1.tb_active.vc_set_childs_focus (1, e);
		  </v:after-data-bind>
                  <v:on-post>
                      <![CDATA[
                        declare st, msg varchar;
                                    declare sl integer;
                        declare exit handler for sqlstate '*', not found
                        {
                          st := __SQL_STATE;
                          msg := __SQL_MESSAGE;
                          goto catch;
                        };

                        commit work;
                                    st := '00000';
                                    msg := '';
                        self.lpath := self.t_lpath.ufl_value;
                        self.lpath := replace( self.lpath, '\\', '/');
                        if( "RIGHT"(self.lpath, 1) = '/')
                          self.lpath := rtrim (self.lpath, '/');

                        if( "LEFT"(self.lpath, 1) <> '/')
                          self.lpath := concat ('/', self.lpath);

                          self.defpage := replace( self.defpage, '\\', '/');
                          sl := strrchr (self.defpage , '/');
                          if (sl is not null)
                            self.defpage := substring (self.defpage, sl + 2, length (self.defpage));

                          if( self.defpage = '' )
                            self.defpage := 'index.html';

			self.ws_sec := coalesce (self._ws_sec.ufl_value, 'no');
                        self.servicename := self._servicename.ufl_value;
                        self.namespace := self._namespace.ufl_value;
                        self.headerns := self._headerns.ufl_value;
                        self.faultns := self._faultns.ufl_value;

                        self.wss_key := self._wss_key.ufl_value;
                        self.wss_template := self._wss_template.ufl_value;
                        self.wss_vs  := coalesce (self._wss_vs.ufl_value, '0');
			self.methodinsoapaction  := coalesce (self._methodinsoapaction.ufl_value, '');
			self.cr_escape  := coalesce (self._cr_escape.ufl_value, '');
                        self.elementformdefault  := coalesce (self._elementformdefault.ufl_value, '');
                        self.dime_enc  := coalesce (self._dime_enc.ufl_value, '');
			self.ws_pr  := coalesce (self._ws_pr.ufl_value, '');
			self._use1  := coalesce (self._use.ufl_value, '');

                        if (self.vspuser = ' __none' or self.vspuser = '')
                          self.vspuser := NULL;

                        self.ensure_soapuser();

			 self.security := self.s_authmethod.ufl_value;
                                    if (self.security = 'none')
                                      self.security := NULL;

                        self.auth_realm := self.t_auth_realm.ufl_value;
                                    if (self.auth_realm = '')
                                      self.auth_realm := NULL;

                        self.auth_func := self.t_auth_func.ufl_value;
                                    if (self.auth_func = '')
                                      self.auth_func := NULL;

                        self.after_func := self.t_after_func.ufl_value;
                                    if (self.after_func = '')
                                      self.after_func := NULL;

                        self.auth_opt := self.t_auth_opt.ufl_value;
                        if (self.auth_opt = '' or self.auth_opt = 0)
                                    {
                          self.auth_opt := NULL;
                                    }
                                            else if(isstring (self.auth_opt) )
                                            {
                            self.auth_opt := replace (self.auth_opt, '\r', '');
                            self.auth_opt := replace (self.auth_opt, '\n', '');
                            self.auth_opt := trim (self.auth_opt);
                            self.auth_opt := replace (self.auth_opt, ';', '&');
                            if ("RIGHT" (self.auth_opt, 1) = '&')
                              self.auth_opt := "LEFT" (self.auth_opt, length (self.auth_opt) - 1);
                            self.auth_opt := split_and_decode (self.auth_opt);
                        }

                        self.soap_opt := vector();
                        if (self.servicename <> '')
                        {
			  self.soap_opt := vector_concat(self.soap_opt, vector('ServiceName', self.servicename));
			}
			  if (self.namespace <> '')
			    {
                              self.soap_opt := vector_concat(self.soap_opt, vector('Namespace', self.namespace));
                              self.soap_opt := vector_concat(self.soap_opt, vector('SchemaNS', self.namespace));
			    }
                          if (self.headerns <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('HeaderNS', self.headerns));
                          if (self.faultns <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('FaultNS', self.faultns));
                          if (self.methodinsoapaction <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('MethodInSoapAction', self.methodinsoapaction));
                          if (self.cr_escape <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('CR-escape', self.cr_escape));
                          if (self.elementformdefault <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('elementFormDefault', self.elementformdefault));
                          if (self.dime_enc <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('DIME-ENC', self.dime_enc));
                          if (self.ws_sec <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('WS-SEC', self.ws_sec));
                          if (self.wss_key <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('WSS-KEY', self.wss_key));
                          if (self.wss_template <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('WSS-Template', self.wss_template));
                          if (self.wss_vs <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('WSS-Validate-Signature', self.wss_vs));
                          if (self.ws_pr <> '')
                            self.soap_opt := vector_concat(self.soap_opt, vector('WS-RP', self.ws_pr));
                          if (self.wsrp_from <> '')
			    self.soap_opt := vector_concat(self.soap_opt, vector('wsrp-from', self.wsrp_from));

                          if (self._use1 <> '')
			    self.soap_opt := vector_concat(self.soap_opt, vector('Use', self._use1));

                        declare idx, xml_rpc integer;
                        declare soap_opts any;

                        soap_opts := vector();
                        xml_rpc := 0;
                                    for (idx := 0; idx < length (self.soap_opt); idx := idx + 2)
                        {
                          if (cast (self.soap_opt[idx] as varchar) = 'XML-RPC')
                          {
                            xml_rpc := 1;
                            if (cast(self.soap_opt[idx+1] as varchar) = 'yes')
                            {
                              if (self.c_xml_rpc.ufl_selected = 0)
                                soap_opts := vector_concat(soap_opts, vector('XML-RPC', 'no'));
                            }
                                        else if (cast(self.soap_opt[idx+1] as varchar) = 'no')
                            {
                              if (self.c_xml_rpc.ufl_selected = 1)
                                soap_opts := vector_concat(soap_opts, vector('XML-RPC', 'yes'));
                            }
                          }
                          else
                                      {
                            soap_opts := vector_concat(soap_opts, vector(self.soap_opt[idx], self.soap_opt[idx + 1]));
                                      }
                        }
                        self.soap_opt := soap_opts;
                        if (xml_rpc = 0)
                        {
                          if (self.c_xml_rpc.ufl_selected = 0)
                            self.soap_opt := vector_concat(self.soap_opt, vector('XML-RPC', 'no'));

                                      else if (self.c_xml_rpc.ufl_selected = 1)
                            self.soap_opt := vector_concat(self.soap_opt, vector('XML-RPC', 'yes'));

                        }
			if (length (self.cors) > 0)
			  {
                                      self.global_opts := vector_concat (self.global_opts, vector('cors', self.cors, 'cors_restricted', self.cors_rej));
                                    }
                        commit work;
                                            if (exists (select 1 from DB.DBA.HTTP_PATH where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_LPATH = self.lpath) )
                                            {
                          declare _soapuser varchar;
                          whenever not found goto nf_user2;
                          select HP_RUN_SOAP_AS into _soapuser from DB.DBA.HTTP_PATH where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_LPATH = self.lpath;
                                              if( isstring(_soapuser) )
                                              {
                            declare _u_id integer;
                            select U_ID into _u_id from SYS_USERS where U_NAME = _soapuser;
			    for select G_OBJECT from DB.DBA.SYS_GRANTS
			    where G_USER = _u_id and G_OP = 32 do
			    {
			      declare fn, q, o, n, tmp any;
			      fn := G_OBJECT;
			      q := name_part (fn, 0);
			      o := name_part (fn, 1);
			      tmp := q || '.' || o || '.';
			      n := subseq (fn, length (tmp));
			      exec (sprintf ('REVOKE EXECUTE ON "%I"."%I"."%I" FROM %s', q, o, n, _soapuser));
                            }
                          }
                          nf_user2:
                                      VHOST_REMOVE (self._httphost, self._host, self.lpath);
                          commit work;
                        }
                        self.is_dav := '0';
                                    exec ('VHOST_DEFINE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
                                          st,
                                          msg,
                              vector( self._httphost, self._host, self.lpath, self.ppath,
                              atoi(self.is_dav), self.dirbrowsing, self.defpage,
                              self.auth_func, self.auth_realm, self.after_func, self.vspuser,
                              self.soapuser, self.security, self.persistvars, self.soap_opt,
                                            self.auth_opt, self.global_opts, self.defdir
                                          )
                                    );
                        commit work;

                      catch:
                        if (msg <> '')
                        {
                          rollback work;
                          self.vc_is_valid := 0;
                          self.vc_error_message := msg;
                          return;
                        }
                        else
                        {
                                              if( not isnull(self.soapuser) )
                                              {
			    declare vho, lho, lp varchar;
                            declare inx integer;
                            inx := 0;
			    while( inx < length(self.roles_grant_list) )
			     {
			       declare fn, q, o, n, tmp varchar;

			       fn := self.roles_grant_list[inx];
			       q := name_part (fn, 0);
			       o := name_part (fn, 1);
			       tmp := q || '.' || o || '.';
			       n := subseq (fn, length (tmp));
			       exec (sprintf ('GRANT EXECUTE ON "%I"."%I"."%I" TO %s', q, o, n, self.soapuser));
                               inx := inx + 1;
                             }
                            inx := 0;
			    while( inx < length(self.mod_grant_list) )
			     {
                                                 exec(sprintf('GRANT EXECUTE ON %s TO %s', self.mod_grant_list[inx], self.soapuser));
                               inx := inx + 1;
                             }
                            inx := 0;
			    while( inx < length (self.udt_grant_list))
			     {
                                                exec(sprintf('GRANT EXECUTE ON %s TO %s', self.udt_grant_list[inx], self.soapuser));
			       vho := self._httphost;
			       lho := self._host;
		               lp := self.lpath;
			       if (not exists (select 1 from DB.DBA.SYS_SOAP_UDT_PUB where
				  SUP_CLASS = self.udt_grant_list[inx] and
				  SUP_HOST = vho and SUP_LHOST = lho and SUP_END_POINT = lp))
				  {
				    insert into DB.DBA.SYS_SOAP_UDT_PUB (SUP_CLASS,SUP_HOST,SUP_LHOST,SUP_END_POINT)
				    values (self.udt_grant_list[inx], vho, lho, lp);
				  }
                               inx := inx + 1;
                             }
                            inx := 0;
			    while( inx < length(self.xml_grant_list) )
			     {
			       grant_xml_template (self.xml_grant_list[inx], self.soapuser);
                               inx := inx + 1;
                             }
                          }
                          commit work;
                          http_request_status ('HTTP/1.1 302 Found');
                          if (self.referer <> '')
                            http_header (sprintf('Location: %s', self.referer));
                          else
                            http_header (sprintf('Location: soap_services_list.vspx?sid=%s&realm=%s&_host=%s&_port=%s&_httphost=%s\r\n',self.sid ,self.realm, self.edit_host,self.edit_port,self.edit_httphost));
                        }
                      ]]>
                  </v:on-post>
		</v:button>
		<?vsp } ?>
              </td>
	    </tr>
	  </table>
	  <!-- END -->
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
        </v:form>
      </v:template>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
