<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="db_repl_page"
  decor="yacutia_decor.vspx"
  style="yacutia_style.xsl"
  doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
  xhtml-owner="my_page_owner"
  fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
  xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Virtuoso HTTP Database Replication</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="template_to_open" type="any" default="null"/>
      <v:variable name="qual" type="any" persist="1" default="null"/>
      <v:variable name="own" type="any" persist="1" default="null"/>
      <v:variable name="errors" type="any" persist="1" default="null"/>
      <v:variable name="dsn" type="varchar" persist="1" default="''"/>
      <v:variable name="acct" type="varchar" persist="1" default="''"/>
      <v:variable name="srv" type="varchar" persist="1" default="''"/>
      <v:variable name="error_str" type="varchar" persist="1" default="''"/>
      <v:variable name="username_str" type="varchar" persist="1" default="''"/>
      <v:variable name="password_str" type="varchar" persist="1" default="''"/>
      <v:variable name="repl_addr" type="varchar" persist="1" default="''"/>
      <v:variable name="result_str" type="varchar" persist="1" default="''"/>
      <v:variable name="stage" type="integer" persist="0" default="0"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem name="subscribe" value="Transactional (subscribe)"/>
    </vm:menu>
    <vm:header caption="Create Transactional Replication Subscription"/>
    <vm:pagebody vdb_check="1">

      <v:before-data-bind>
          <![CDATA[
        if (self.stage <> 0)
        {
          if (get_keyword('pub', control.vc_page.vc_event.ve_params, '') = '' and get_keyword('pub_list', control.vc_page.vc_event.ve_params, '') <> 'Publications list' and get_keyword('add_sub', control.vc_page.vc_event.ve_params, '') <> 'Subscribe' and get_keyword('list_items', control.vc_page.vc_event.ve_params, '') <> 'List items')
            self.stage := 0;
        }
        if (get_keyword('er', control.vc_page.vc_event.ve_params, '') = '2')
          self.stage := 0;
          ]]>
      </v:before-data-bind>

      <table class="form_layout">
        <tr>
          <td class="page_tab">
            <v:url name="b_url13" value="Publications" url="db_repl_trans.vspx?page=1"/>
          </td>
          <td class="page_tab_selected">Subscriptions
          </td>
        <td class="page_tab_empty"></td>
      </tr>
    </table>
    <table class="tab_page">
      <tr>
        <td>
      <v:template name="dsn_template" type="simple" enabled="-- equ(self.stage, 0)">
        <v:form name="link_form" action="db_repl_sub_create.vspx" method="POST" type="simple">
          <h3>Select existing or define new Data Source</h3>
          <table class="ctl_grp">
            <tr class="ctl_grp_title">
              <th colspan="2">Connected Data Sources</th>
            </tr>
            <tr>
              <td class="ctl_lbl_ctr" colspan="2">Select target data source for replication</td>
            </tr>
            <tr>
              <?vsp
                declare _tbl, _dsn, _uid, _pwd, _snplog, _dsn1 varchar;
                _dsn := get_keyword('dsn', control.vc_page.vc_event.ve_params, '');
                _dsn1 := get_keyword('dsns1', control.vc_page.vc_event.ve_params, '');
                if (_dsn = '')
                  _dsn := _dsn1;
                if (_dsn = '')
                  _dsn := get_keyword ('dsns', control.vc_page.vc_event.ve_params, '');
                _uid := get_keyword('uid', control.vc_page.vc_event.ve_params, 'dba');
                _pwd := get_keyword('pwd', control.vc_page.vc_event.ve_params, 'dba');
                if (self.error_str <> '')
                  _dsn := self.dsn;
              ?>
              <td class="ctl_ctr">
                <select name="dsns1" size="5" onchange="this.form.submit();">
                  <?vsp
                    declare i integer;
                    i := 0;
                    for select DS_DSN from SYS_DATA_SOURCE do
                    {
                      declare sel varchar;
                      sel := '';
                      if (_dsn = DS_DSN)
                        sel := 'selected';
                      http(sprintf('<option value="%s" %s>%s</option>', DS_DSN, sel, DS_DSN));
                      i := i + 2;
                    }
                  ?>
                </select>
              </td>
              <td>
                <?vsp
                  if (_dsn <> '')
                  {
                    self.dsn := _dsn;
                    declare _n_uid, _n_pwd varchar;
                    _n_uid := '';
                    _n_pwd := '';
                    whenever not found goto nfd;
                    select DS_UID, pwd_magic_calc(DS_UID, DS_PWD, 1) into _n_uid, _n_pwd from SYS_DATA_SOURCE where DS_DSN = _dsn;
                    self.username_str := _n_uid;
                    self.password_str := _n_pwd;
                    nfd:
                ?>
                <table>
                  <tr>
                    <td>Data Source</td>
                    <td><?V _dsn ?></td>
                  </tr>
                  <tr>
                    <td>User Name</td>
                    <td><input type="text" name="n_uid" value="<?=_n_uid?>"/></td>
                  </tr>
                  <tr>
                    <td>Password</td>
                    <td><input type="password" name="n_pwd" value="<?=_n_pwd?>"/></td>
                  </tr>
                </table>
                <?vsp
                  }
                ?>
              </td>
            </tr>
            <?vsp
              if (_dsn <> '')
              {
            ?>
            <tr class="form_cmd_row">
              <td>
                <v:button action="simple" value="Publications list" name="pub_list">
                  <v:on-post>
                      <![CDATA[
                        self.stage := 1;
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
              </td>
              <td>
                <v:button action="simple" value="Save" name="dsn_save">
                  <v:on-post>
                      <![CDATA[
                        self.stage := 0;
                        declare _uid, _pwd varchar;
                        _uid := get_keyword('n_uid', control.vc_page.vc_event.ve_params, 'dba');
                        _pwd := get_keyword('n_pwd', control.vc_page.vc_event.ve_params, 'dba');
                        if (self.dsn <> '')
                        {
                          declare state, msg, m_dta, res varchar;
                          state := '00000';
                          exec('DB..vd_remote_data_source(?, ?, ?, ?)', state, msg, vector(self.dsn, '', _uid, _pwd), m_dta, res);
                          if (state <> '00000')
                            self.error_str := msg;
                        }
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
            <?vsp
              }
            ?>
          </table>
          <table class="ctl_grp">
            <tr class="ctl_grp_title">
              <th colspan="2">Specify new data source</th>
            </tr>
            <tr>
              <td class="ctl_lbl_ctr" colspan="2">
                If the required target Data Source is not connected,<br/>
                you must specify a new Data Source...
              </td>
            </tr>
            <tr>
              <td class="ctl_ctr">
                <select name="dsns" onchange="javascript:dsns_chg(this);" size="5">
                  <?vsp
                    adm_lt_dsn_options(_dsn);
                  ?>
                </select>
              </td>
              <td>
                <table>
                  <tr>
                    <td>Data Source</td>
                    <td>
                      <input type="text" name="dsn"/>
                    </td>
                  </tr>
                  <tr>
                    <td>User Name</td>
                    <td><input type="text" name="uid"/></td>
                  </tr>
                  <tr>
                    <td>Password</td>
                    <td><input type="password" name="pwd"/></td>
                  </tr>
                </table>
              </td>
            </tr>
            <tr class="form_cmd_row">
              <td colspan="2">
                <v:button action="simple" value="Clear" name="dsn_clr">
                  <v:on-post>
                      <![CDATA[
                        self.stage := 0;
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
                <v:button action="simple" value="Add Data Source" name="dsn_add">
                  <v:on-post>
                      <![CDATA[
                        self.stage := 0;
                        declare _dsn, _uid, _pwd varchar;
                        _dsn := get_keyword('dsn', control.vc_page.vc_event.ve_params, '');
                        _uid := get_keyword('uid', control.vc_page.vc_event.ve_params, 'dba');
                        _pwd := get_keyword('pwd', control.vc_page.vc_event.ve_params, 'dba');
                        if (_dsn <> '')
                        {
                          declare state, msg, m_dta, res varchar;
                          state := '00000';
                          exec('DB..vd_remote_data_source(?, ?, ?, ?)', state, msg, vector(_dsn, '', _uid, _pwd), m_dta, res);
                          if (state <> '00000')
                            self.error_str := msg;
                        }
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
          <?vsp
            if (self.error_str <> '')
            {
          ?>
            <table class="warning">
              <tr>
                <td align="center">
                  <?V self.error_str ?>
                </td>
              </tr>
            </table>
          <?vsp
              self.error_str := '';
            }
          ?>
        </v:form>
      </v:template>
      <v:template name="link_template" type="simple" enabled="-- equ(self.stage, 1)">
        <v:form name="link2_form" action="db_repl_sub_create.vspx" method="POST" type="simple">
          <?vsp
            declare _stat, _res, _msg varchar;

                  self.error_str := '';
            _stat := '00000';
            _msg := '';
            exec('vd_remote_data_source(?,?,?,?)', _stat, _msg, vector(self.dsn, '', self.username_str, self.password_str));
            if (_stat = '00000')
            {
              declare s_ver varchar;
              s_ver := sys_stat('st_dbms_ver');
              s_ver := substring(s_ver, strrchr(s_ver, '.') + 2, length(s_ver));
              if (atoi(s_ver) > 1937)
              {
                declare idn, o_idn any;

                _stat := '00000';
                      _msg := '';
                      rexecute (self.dsn, 'select identify_self()[0], identify_self()[1], identify_self()[2], identify_self()[3]', _stat, _msg, null, null, null, _res);
                if (_stat = '00000')
                {
                  if (_res is not null and __tag(_res) = 193)
                  {
                          o_idn := _res[0];
                    if (o_idn is not null and length(o_idn) > 3)
                    {
                            idn := identify_self();
                            if ((o_idn[0] = idn[0]) and (o_idn[1] = idn[1]) and (o_idn[2] = idn[2]) and (o_idn[3] = idn[3]))
                      {
                        self.error_str := 'Cannot subscribe into the same server';
                        goto draw_label;
                      }
                    }
                  }
                }
              }
              _res := null;
              _stat := '00000';
              _msg := '';
                    self.repl_addr := case when (__proc_exists ('sql_get_private_profile_string', 2) is not null) then REPL_GET_ADDR_FROM_DSN (self.dsn) else self.dsn end;
              rexecute(self.dsn, 'select ACCOUNT from DB.DBA.SYS_REPL_ACCOUNTS where SERVER = repl_this_server() and ACCOUNT <> repl_this_server()', _stat, _msg, null, null, null, _res);
              if (_stat = '00000' and _res is not null)
                self.result_str := _res;
              else
                self.error_str := 'Replication cannot be found on selected Data Source';
            }
            else
                  {
              self.error_str := _msg;
                  }
            draw_label:;
            if (self.error_str = '')
            {
          ?>
          <table class="ctl_grp">
            <tr>
              <td class="ctl_lbl_ctr">
                Replication address(host:port)
              </td>
              <td class="ctl_ctr">
                <input type="text" name="repl_addr" value="<?V self.repl_addr ?>"/>
              </td>
            </tr>
            <tr>
              <?vsp
                declare _len integer;
                declare _ix integer;
                declare _pub varchar;
                declare _pubs any;
                _pubs := self.result_str;
                _ix := 0;
                _len := length (_pubs);
                if (__tag(self.result_str) = 193 and _len <> 0)
                {
              ?>
              <td class="ctl_lbl_ctr">
                Choose publication
              </td>
              <td class="ctl_ctr">
                <select name="pub" size="5">
                  <?vsp
                    while (_ix < _len)
                    {
                      if (__tag(aref(_pubs, _ix)) = 193)
                        _pub := aref(aref(_pubs, _ix), 0);
                      else
                        _pub := aref(_pubs, _ix);
                  ?>
                  <option value="<?V _pub ?>"><?V case when _pub = '__rdf_repl' then 'RDF Publication' else _pub end ?></option>
                  <?vsp
                      _ix := _ix + 1;
                    }
                  ?>
                </select>
              </td>
              <?vsp
                }
                else
                {
              ?>
              <td class="ctl_lbl_ctr" colspan="2">
                There are no publications
              </td>
              <?vsp
                }
              ?>
            </tr>
            <tr class="form_cmd_row">
              <td colspan="2">
                <v:button action="simple" value="Back" name="cancel_button2">
                  <v:on-post>
                      <![CDATA[
                        self.stage := 0;
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
                <?vsp
                  if (_len > 0)
                  {
                ?>
                <v:button action="simple" value="List items" name="list_items">
                  <v:on-post>
                      <![CDATA[
                        if (get_keyword('pub', control.vc_page.vc_event.ve_params, '') = '')
                        {
                          self.error_str := 'Please, select publication';
                          self.stage := 1;
                        }
                        else
                          self.stage := 2;
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
                <?vsp
                  }
                ?>
              </td>
            </tr>
          </table>
          <?vsp
            }
            else
            {
          ?>
          <table class="warning">
            <th>
                Error during connection
            </th>
            <tr>
              <td>
                <?V self.error_str ?>
              </td>
            </tr>
            <tr>
              <td>
                <v:button action="simple" value="Back" name="cancel_button1">
                  <v:on-post>
                      <![CDATA[
                        self.stage := 0;
                        self.error_str := '';
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
          <?vsp
            }
          ?>
        </v:form>
      </v:template>
      <v:template name="link2_template" type="simple" enabled="-- equ(self.stage, 2)">
        <v:form name="link3_form" action="db_repl_sub_create.vspx" method="POST" type="simple">
          <?vsp
            declare _stat, _res, _msg, _srv varchar;
            declare _item varchar;
            self.acct := get_keyword('pub', control.vc_page.vc_event.ve_params, '');
            if (self.acct = '')
              self.acct := get_keyword('acct', control.vc_page.vc_event.ve_params, '');
              _stat := '00000';
              _msg := '';
	    if (self.acct = '__rdf_repl')  
	    {
	      rexecute (self.dsn, 'select __id2i (RGGM_MEMBER_IID), \'RDF Graph\' from RDF_GRAPH_GROUP_MEMBER where RGGM_GROUP_IID = __i2id (?)', _stat, _msg, vector ('http://www.openlinksw.com/schemas/virtrdf#rdf_repl_graph_group'), null, null, _item);
	    }
            else if (self.acct <> '')
            {
              rexecute(self.dsn, 'select TI_ITEM, TI_TYPE from DB.DBA.SYS_TP_ITEM where TI_SERVER = repl_this_server() and TI_ACCT = ?', _stat, _msg, vector(self.acct), null, null, _item);
            }
	    if (_stat = '00000' and self.acct <> '')
              {
                _stat := '00000';
                _msg := '';
                rexecute(self.dsn, 'select distinct (SERVER) from DB.DBA.SYS_REPL_ACCOUNTS where SERVER = repl_this_server()', _stat, _msg, null, null, null, _srv);
                if (_stat = '00000')
                  self.srv := aref(aref(_srv, 0), 0);
              }
          ?>
          <h3>Confirm subscription</h3>
          <p>Click on <b>Subscribe</b> to create local schema and sync with source server</p>
          <p>To load data after subscription check <b>Load data</b> box or load data manually from main menu using <b>Load image</b> button</p>
          <p>To define scheduled synchronization after subscription input interval in minutes in <b>Sync every</b> box (zero "0" means no schedule)  or define manually using subscription properties menu</p>
          <table class="listing" rules="groups">
            <thead>
                    <tr class="listing_header_row">
                      <th width="16px"/>
                <th>Item</th>
                <th>Type</th>
              </tr>
            </thead>
            <?vsp
              declare _idx, _ilen, _itp integer;
              declare _iname, _itype varchar;
              _idx := 0;
              if (_item is not null)
                _ilen := length(_item);
              else
                _ilen := 0;
              while (_idx < _ilen)
              {
                _itp := aref(aref(_item, _idx), 1);
                _iname := aref(aref(_item, _idx), 0);
                if (_itp = 1)
                  _itype := 'DAV Collection';
                else if (_itp = 2)
                  _itype := 'Table';
                else if (_itp = 3)
                  _itype := 'PL/SQL Procedure';
		else
                  _itype := _itp;
                _idx := _idx + 1;
            ?>
                  <tr>
              <td class="listing_col">
                <?vsp
                  if (_itp = 1)
                    http('<img src="images/icons/foldr_16.png" alt="Collection" title="Collection"/>');
                  else if (_itp = 2)
                    http('<img src="images/icons/table_16.png" alt="Table" title="Table"/>');
                  else if (_itp = 3)
                    http('<img src="images/icons/script_16.png" alt="Procedure" title="Procedure"/>');
                ?>
              </td>
              <td class="listing_col">
                <?V _iname ?>
              </td>
              <td class="listing_col">
                <?V _itype ?>
              </td>
                  </tr>
            <?vsp
              }
            ?>
          </table>

          <table class="ctl_grp">
            <tr>
                    <td />
                    <td>
                      <label>
                <input type="checkbox" name="load_data" id="load_data"/>
                        <strong>Load data</strong>
                      </label>
              </td>
            </tr>
            <tr>
                    <th>
                Synchronize subscription every
                    </th>
                    <td>
                <input type="text" name="sched_int" value="10" size="4" align="right"/>
                min
              </td>
            </tr>
            <tr>
                    <th>
                Run sync process as
                    </th>
                    <td>
                <select name="sync_user">
                  <?vsp
                          for select U_NAME from DB.DBA.SYS_USERS where U_IS_ROLE = 0 and U_SQL_ENABLE = 1 order by U_NAME do
                      {
                        declare _sel varchar;
                        if (U_NAME = 'dba')
                          _sel := ' selected="true"';
                        else
                          _sel := '';
                            http (sprintf ('<option value="%V"%V>%V</option>', U_NAME, _sel, U_NAME));
                     }
                  ?>
                </select>
              </td>
            </tr>
            <tr class="ctl_grp_title">
                    <td align="center" colspan="2"><br /><strong>Permissions</strong></td>
            </tr>
            <tr>
                    <th class="ctl_lbl_ctr">WebDAV owner</th>
              <td class="ctl_ctr">
                <select name="dav_own">
                  <option value="">nobody</option>
                  <?vsp
                    for select U_NAME, U_ID from WS.WS.SYS_DAV_USER do
                    {
                  ?>
                  <option value="<?V U_NAME ?>"><?V U_NAME ?></option>
                  <?vsp
                    }
                  ?>
                </select>
              </td>
            </tr>
            <tr>
                    <th class="ctl_lbl_ctr">WebDAV group</th>
              <td class="ctl_ctr">
                <select name="dav_grp">
                  <option value="">nogroup</option>
                  <?vsp
                    for select G_NAME, G_ID from WS.WS.SYS_DAV_GROUP do
                    {
                  ?>
                  <option value="<?V G_NAME ?>"><?V G_NAME ?></option>
                  <?vsp
                    }
                  ?>
                </select>
              </td>
            </tr>
            <tr class="form_cmd_row">
                    <td align="center" colspan="2">
                <input type="hidden" name="acct" value="<?V self.acct ?>"/>
                <input type="hidden" name="srv" value="<?V self.srv ?>"/>
                <v:button action="simple" value="Back" name="cancel_button3">
                  <v:on-post>
                      <![CDATA[
                        self.stage := 1;
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
                <v:button action="simple" value="Subscribe" name="add_sub">
                  <v:on-post>
                      <![CDATA[
                        declare dav_u, dav_g varchar;
                        self.error_str := '';
                        dav_u := get_keyword('dav_own', control.vc_page.vc_event.ve_params);
                        if (dav_u = '')
                          dav_u := NULL;
                        dav_g := get_keyword('dav_grp', control.vc_page.vc_event.ve_params);
                        if (dav_g = '')
                          dav_g := NULL;
                        if (self.srv <> '' and self.acct <> '' and self.repl_addr <> '')
                        {
                          declare _intl integer;
                          declare _stat, _res, _msg varchar;
                          _stat := '00000';
                          exec('REPL_SERVER(?,?,?)', _stat, _msg, vector(self.srv, self.dsn, self.repl_addr));
                          if (_stat = '00000')
                          {
                            declare _sync_user varchar;
                            _sync_user := get_keyword ('sync_user', control.vc_page.vc_event.ve_params);
                            exec('REPL_SUBSCRIBE(?,?,?,?,?,?,?)', _stat, _msg, vector(self.srv, self.acct, dav_u, dav_g, self.username_str, self.password_str, _sync_user));
                            if (_stat = '00000')
                            {
                              if ('' <> get_keyword('load_data', control.vc_page.vc_event.ve_params, ''))
                              {
                                self.errors := vector();
                                self.errors := REPL_INIT_COPY(self.srv, self.acct, 1);
                              }
                              _intl := atoi(get_keyword('sched_int', control.vc_page.vc_event.ve_params, '0'));
                              exec('DB.DBA.SUB_SCHEDULE(?,?,?)', _stat, _msg, vector(self.srv, self.acct, _intl));
                              if (_stat <> '00000')
                                self.error_str := _msg;
                            }
                            else
                            {
                              self.error_str := _msg;
                              return;
                            }
                          }
                          else
                            self.error_str := _msg;
                        }
                        if (isarray(self.errors))
                          self.stage := 3;
                        if (self.error_str = '')
                        {
                          self.stage := 0;
                          http_request_status('HTTP/1.1 302 Found');
                          http_header(sprintf('Location: db_repl_trans.vspx?page=2&sid=%s&realm=%s\r\n', self.sid , self.realm));
                        }
                        else
                          self.stage := 2;
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
          <table class="warning">
            <?vsp
              if (self.error_str <> '')
              {
            ?>
            <tr>
              <td>
                <?V self.error_str ?>
              </td>
            </tr>
            <?vsp
                self.error_str := '';
              }
            ?>
          </table>
        </v:form>
      </v:template>
      <v:template name="link3_template" type="simple" enabled="-- equ(self.stage, 3)">
        <table class="warning">
         <v:form name="link4_form" action="db_repl_sub_create.vspx" method="POST" type="simple">
           <?vsp
             declare _ix, _len integer;
             _ix := 0;
             _len := length(self.errors);
             while (_ix < _len)
             {
           ?>
           <tr>
             <td colspan="2">Error on: <b><?V self.errors[_ix] ?></b></td>
           </tr>
           <tr>
             <td>SQL state</td>
             <td><?V self.errors[_ix+1] ?></td>
           </tr>
           <tr>
             <td>Message</td>
             <td><?V self.errors[_ix+2] ?></td></tr>
           <?vsp
               _ix := _ix + 3;
             }
             self.stage := 0;
           ?>
         </v:form>
       </table>
     </v:template>

     <div>
             <hr />
       <vm:url name="db_repl_sub_ref" format="%s" value="--'Back to Transactional Replications'" url="--'db_repl_trans.vspx?page=2'" />
     </div>
        </td>
      </tr>
    </table>
   </vm:pagebody>
 </vm:pagewrapper>
</v:page>
