<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="db_repl_page"
  decor="yacutia_decor.vspx"
  style="yacutia_style.xsl"
  vm:owner="yacutia_db_repl_page"
  doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
  fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
  xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Virtuoso HTTP Database Replication</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="template_to_open" type="any" default="null"/>
      <v:variable name="qual" type="any" persist="0" default="null"/>
      <v:variable name="own" type="any" persist="0" default="null"/>
      <v:variable name="repl_snap_pull_dsn" type="varchar" persist="1" default="''"/>
      <v:variable name="repl_snap_pull_result_str" type="varchar" persist="1" default="''"/>
      <v:variable name="repl_snap_pull_tables" type="varchar" persist="1" default="''"/>
      <v:variable name="repl_snap_pull_stage" type="integer" persist="1" default="0"/>
      <v:variable name="repl_snap_pull_running" type="integer" persist="1" default="0"/>
      <v:variable name="repl_snap_pull_autorefresh" type="integer" persist="1" default="5"/>
      <v:variable persist="temp" name="r_count" type="integer" default="0"/>

      <v:variable persist="1" name="repl_snap_pull_browse_cat" type="varchar" default="'%'"/>
      <v:variable persist="1" name="repl_snap_pull_browse_sch" type="varchar" default="'%'"/>
      <v:variable persist="1" name="repl_snap_pull_browse_mask" type="varchar" default="'%'"/>
      <v:variable persist="1" name="repl_snap_pull_browse_table" type="integer" default="1"/>
      <v:variable persist="temp" name="row_count" type="integer" default="1"/>

      <!-- keep the previous page rows -->
      <v:variable name="dsrws" type="any" default="null" />
      <!-- keep the selection -->
      <v:variable name="selcust" type="any" default="null" />
      <v:variable name="selcustall" type="any" default="null" />      
    </vm:variables>
    <vm:menu>
      <vm:menuitem name="vers" value="Snapshot"/>
    </vm:menu>
    <vm:header caption="Create Incremental Snapshot Replication"/>
    <vm:pagebody vdb_check="1">

    <v:on-init>
      if (self.repl_snap_pull_tables is null)
        self.repl_snap_pull_tables := vector ();
    </v:on-init>

      <!-- Stage 0 -->

      <v:template name="tree_db_template" type="simple" enabled="-- equ(self.repl_snap_pull_stage, 0)">
        <h3>Step 1: Choose Source Tables</h3>
        <div class="note">
          To replicate remote tables locally you must attach them first.
          Go to <v:url name="ext" value="External Database Sources" url="vdb_conn_dsn.vspx"/> to attach tables.
        </div>

        <v:form name="db_filter_form" type="simple" method="POST" action="db_repl_snap_pull_create.vspx">
          <v:on-post>
              <![CDATA[
              self.repl_snap_pull_stage := 0;

if (self.repl_snap_pull_browse_cat <> self.dl_catalog.ufl_value)
  self.dl_schema.ufl_value := '%';

self.repl_snap_pull_browse_cat := self.dl_catalog.ufl_value;
self.repl_snap_pull_browse_sch := self.dl_schema.ufl_value;
self.repl_snap_pull_browse_mask := case when self.t_mask.ufl_value='' then '%' else self.t_mask.ufl_value end;
self.selcust := vector();
self.dsrws  := vector();
self.dl_schema.vc_data_bind(e);
self.ds_tables.vc_reset();
self.ds_tables.vc_data_bind(e);
self.vc_data_bind(e);
              ]]>
          </v:on-post>
          <table class="ctl_grp">
            <tr>
              <td rowspan="3">
                <img src="images/icons/filter_32.png" alt="Filter" title="Filter"/>
              </td>
              <td>
                Catalog
              </td>
              <td>
                <v:data-list name="dl_catalog"
                             sql="select TOP 1 '%' AS cat_name FROM DB.DBA.SYS_KEYS
                                  union
                                  select distinct name_part (KEY_TABLE, 0)
                                    from DB.DBA.SYS_KEYS
                                   where exists (select 1 from DB.DBA.SYS_REMOTE_TABLE where RT_NAME = KEY_TABLE)
                                   order by cat_name"
                             key-column="cat_name" value-column="cat_name" defvalue="--self.repl_snap_pull_browse_cat"
                             xhtml_style="width: 250px;"
                             xhtml_onchange="javascript:doPost(\'db_filter_form\', \'apply_filter\');"
                />
              </td>
              <td align="right">
                <v:button action="simple" name="apply_filter" value="Update Display" />
              </td>
            </tr>
            <tr>
              <td>
                Schema
              </td>
              <td>
                <v:data-list name="dl_schema"
                             sql="select TOP 1 '%' AS sch_name FROM DB.DBA.SYS_KEYS
                                  union
                                  select distinct name_part (KEY_TABLE, 1)
                                    from DB.DBA.SYS_KEYS
                                   where name_part (KEY_TABLE, 0) LIKE self.repl_snap_pull_browse_cat
                                     and exists (select 1 from DB.DBA.SYS_REMOTE_TABLE where RT_NAME = KEY_TABLE)
                                   order by sch_name"
                             key-column="sch_name" value-column="sch_name" defvalue="--self.repl_snap_pull_browse_sch"
                             xhtml_style="width: 250px;"
                             xhtml_onchange="javascript:doPost(\'db_filter_form\', \'apply_filter\');"
                />
              </td>
              <td/>
            </tr>
            <tr>
              <td>
                Name mask
              </td>
              <td>
                <v:text name="t_mask" value="--self.repl_snap_pull_browse_mask" xhtml_style="width: 250px;"/>
              </td>
              <td/>
            </tr>
          </table>
        </v:form>

        <v:form name="frm1" action="db_repl_snap_pull_create.vspx" method="POST" type="simple">
          <v:data-set name="ds_tables"
            sql="select distinct KEY_TABLE as table_name
                   from DB.DBA.SYS_KEYS,
                        DB.DBA.SYS_REMOTE_TABLE
                  where upper(name_part (KEY_TABLE, 0)) like upper(:self.repl_snap_pull_browse_cat)
                    and upper(name_part (KEY_TABLE, 1)) like upper(:self.repl_snap_pull_browse_sch)
                    and upper(name_part (KEY_TABLE, 2)) like upper(:self.repl_snap_pull_browse_mask)
                    and KEY_IS_MAIN = 1
                    and KEY_MIGRATE_TO is NULL
                    and not exists (select 1 from DB.DBA.SYS_VIEWS where V_NAME = KEY_TABLE)
                    and RT_NAME = KEY_TABLE
             order by 1"
            nrows="20"
            scrollable="1"
            cursor-type="keyset"
            edit="0"
            width="80"
            initial-enable="1">

    	      <v:on-init>
      	      if (self.selcust is null)
      	        self.selcust := vector ();
    	      </v:on-init>
      	    <v:before-render>
      	      -- we save here the rowset
      	      self.dsrws := self.ds_tables.ds_row_data;
      	    </v:before-render>
      	    <v:on-post>
      	      <![CDATA[
        	      declare rows, pars, sel, i, l any;
        	      pars := e.ve_params;
        	      rows := self.dsrws;
        	      l := length (rows);
        	      sel := self.selcust;
        	      -- 1-st we take out from rowset in the selection list
        	      for (i := 0; i < l; i := i + 1)
      	        {
      	          declare elm, pos, lef, rig any;
            		  elm := rows[i];
            		  pos := position (elm[0], sel);
            		  if (pos)
          		    {
          		      lef := subseq (sel, 0, pos - 1);
          		      rig := subseq (sel, pos, length (sel));
          		      sel := vector_concat (lef, rig);
          		    }
            		}
        	      l := length (pars);
        	      -- secondly we put all that are selected in the selection list
        	      for (i := 0; i < l; i := i + 2)
      	        {
            		  if (pars[i] = 'tbl' and not(position(pars[i+1],sel)))
          		      sel := vector_concat (sel, vector (pars[i+1]));
            		}
        	      self.selcust := sel;
      	      ]]>
      	    </v:on-post>

            <v:template name="temp_ds_tables_header" type="simple" name-to-remove="table" set-to-remove="bottom">
              <table class="listing" rules="groups">
                <thead>
                  <tr class="listing_header_row">
                     <th class="checkbox">
                       <input type="checkbox" name="select_all" value="Select All" onClick="selectAllCheckboxes(this.form, this)"/>
                     </th>
                     <th width="16px"/>
                     <th>Name</th>
                  </tr>
                </thead>
              </table>
            </v:template>
            <v:template name="temp_ds_tables_repeat" type="repeat" name-to-remove="" set-to-remove="">
              <v:template name="temp_ds_tables_empty" type="if-not-exists" name-to-remove="table" set-to-remove="both">
                <table> <!-- dummy -->
                  <tr>
                    <td colspan="3" class="Attention">No tables match the criteria</td>
                  </tr>
                </table>
              </v:template>

              <v:template name="temp_ds_tables_browse" type="browse" name-to-remove="table" set-to-remove="both">
                <table> <!-- dummy -->
                  <tr>
                    <td class="listing_col">
                			<v:check-box name="cb01" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" group-name="tbl">
                			  <v:before-render>
                			    -- this is needed because 'checked' attribute is set via post
                			    -- but we need to set it explicitly
                			    -- this is also could be done via xhtml_checked="--(..)"
                			    control.ufl_selected := case when position ((control.vc_parent as vspx_row_template).te_rowset[0], self.selcust) then 1 else 0 end;
                			  </v:before-render>
                			</v:check-box>
                    </td>
                    <td class="listing_col">
                      <img src="images/icons/table_16.png" alt="Table" title="Table"/>
                    </td>
                    <td class="listing_col">
                      <v:label name="l_table_name" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" format="%s"/>
                    </td>
                  </tr>
                </table>
              </v:template>

            </v:template>

            <v:template name="temp_ds_tables_footer" type="simple" name-to-remove="table" set-to-remove="top">
              <table>
                <tr>
                  <td colspan="3"  class="listing_col_action">
            		    <vm:ds-navigation data-set="ds_tables"/>
                  </td>
                </tr>
              </table>
              <div class="listing_bot_ctl_grp">
                <v:button name="can1_repl" action="simple" value="Cancel">
                  <v:on-post>
                    <![CDATA[
                      self.repl_snap_pull_stage := 0;
                      self.repl_snap_pull_result_str := '';
                      self.vc_redirect('db_repl_snap_pull.vspx');
                    ]]>
                  </v:on-post>
                </v:button>
                <v:button name="add_sel" action="simple" value="Add selected to snapshot">
                  <v:on-post>
                    <![CDATA[
                      self.vc_user_post_ds_tables (self.ds_tables, e);
            		      if (length(self.selcust) < 1)
          		        {
          		          self.vc_is_valid := 0;
                			  self.vc_error_message := 'No tables selected';
                			}
                		  else
                      {
                        self.repl_snap_pull_stage := 2;
                        self.vc_data_bind(e);
                      };
                    ]]>
                  </v:on-post>
                </v:button>
                <v:button name="add_all" action="simple" value="Add all filtered to snapshot">
                  <v:on-post>
                    <![CDATA[
                      self.selcust := vector();
                      self.dsrws  := vector();

                      for (select distinct KEY_TABLE as table_name
                             from DB.DBA.SYS_KEYS,
                                  DB.DBA.SYS_REMOTE_TABLE
                           where upper(name_part (KEY_TABLE, 0)) like upper(self.repl_snap_pull_browse_cat)
                             and upper(name_part (KEY_TABLE, 1)) like upper(self.repl_snap_pull_browse_sch)
                             and upper(name_part (KEY_TABLE, 2)) like upper(self.repl_snap_pull_browse_mask)
                              and KEY_IS_MAIN = 1 and KEY_MIGRATE_TO is NULL
                              and not exists (select 1 from DB.DBA.SYS_VIEWS where V_NAME = KEY_TABLE)
                              and RT_NAME = KEY_TABLE
                           order by 1) do
                      {
                  		  self.selcust := vector_concat (self.selcust, vector (table_name));
                      }

            		      if (length(self.selcust) < 1)
          		        {
          		          self.vc_is_valid := 0;
                			  self.vc_error_message := 'No tables selected';
                			}
                		  else
                		  {
                        self.repl_snap_pull_stage := 2;
                        self.vc_data_bind(e);
                      }
                    ]]>
                  </v:on-post>
                </v:button>
              </div>
            </v:template>
          </v:data-set>
        </v:form>

      </v:template>

      <!-- Stage 2 -->

      <v:template name="link_template" type="simple" enabled="-- equ(self.repl_snap_pull_stage, 2)">
        <h3>Step 2: Choose Destinations Parameters</h3>
        <v:form name="link2_form" action="db_repl_snap_pull_create.vspx" method="POST" type="simple">
          <div class="listing_top_ctl_grp">
            <v:text name="mass_tbq" xhtml_size="3" value="">
              <v:before-render>
                control.ufl_value := '';
              </v:before-render>
            </v:text>.
            <v:text name="mass_tbo" xhtml_size="15" value="">
              <v:before-render>
                control.ufl_value := '';
              </v:before-render>
            </v:text>.[TABLE]
            <v:button name="mass_set" action="simple" value="Set To All">
              <v:on-post>
                <![CDATA[
                  declare i, l,dst_arr,tmp_arr any;
                  declare _views integer;
                  declare p1, p2, p3 varchar;
            
                  _views := 0;
                  if (self.mass_tbq.ufl_value <> '' or self.mass_tbo.ufl_value <> '')
                  {
                    _loop:;
            	      i := 0;
            	        dst_arr := self.selcust;
            	      l := length(dst_arr);
                    while (i < l)
                    {
            	        tmp_arr := dst_arr[i];
            	        
            	        p1 := name_part(tmp_arr, 0);   
            	        p2 := name_part(tmp_arr, 1); 
            	        p3 := name_part(tmp_arr, 2);   
            	                                  	        
            	        if (self.mass_tbq.ufl_value <> '')
            	          p1 := self.mass_tbq.ufl_value;
            	        if (self.mass_tbo.ufl_value <> '')
            	          p2 := self.mass_tbo.ufl_value;
            	        aset(dst_arr,i,concat(p1,'.',p2,'.',p3));  
            	        i:= i + 1;
            	      };
              	    
              	    self.selcustall := dst_arr;
            	      if (_views = 0)
            	      {
            	        _views := 1;
            	        goto _loop;
            	      };
            	      self.vc_data_bind(e);
                  }
                ]]>
              </v:on-post>
            </v:button>
          </div>  
          <table class="listing" rules="groups">
            <thead>
              <tr class="listing_header_row">
                <th width="16px"/>
                <th>Attached Table</th>
                <th><input type="checkbox" name="select_all" value="Select All" onClick="selectAllCheckboxes(this.form, this)" checked="checked"/>[Create] Local Destination Table Name</th>
              </tr>
            </thead>
            <?vsp
              declare _idx integer;
              declare _tblname varchar;
                declare l1 integer;
                declare _tblname2 any;
                declare _attached_name1, _attached_name2 varchar;
                
              _idx := 0;
              while (_idx < length(self.selcust))
              {
                _tblname := self.selcust[_idx];
                l1 := length(self.selcustall);
                if (l1 ) 
                {
                  _tblname2 := self.selcustall[_idx];  
                  _attached_name1 := name_part(_tblname2, 0);                  
                  _attached_name2 := name_part(_tblname2, 1);                                    
                }
                else
                {
                   _attached_name1 := coalesce (user_get_option(connection_get ('vspx_user'),'LOGIN_QUALIFIER'), 'DB');
                   _attached_name2 := connection_get ('vspx_user');
                }
                
                _idx := _idx + 1;
                http('<tr>');
                http ('<td class="listing_col"><img src="images/icons/table_16.png" alt="Table" title="Table"/></td>');
                http(sprintf ('<td>%V</td>', _tblname));
                http(sprintf ('<td><input type="checkbox" name="LTB_cr_%s" value="on" checked="checked"/>', _tblname));
                http(sprintf ('<input type="text" size="3" name="LTBQ_%s" value="%s"/>.', _tblname, _attached_name1));
                http(sprintf ('<input type="text" size="15" name="LTBO_%s" value="%s">.', _tblname, _attached_name2));
                http(sprintf ('<input type="text" size="30" name="LTBN_%s" value="%s">', _tblname, name_part(_tblname, 2)));
                http(sprintf ('<input type="hidden" name="tbls" value="%s"></td>', _tblname));
                http('</tr>');
              }
            ?>
            <tr class="listing_header_row">
              <td colspan="3" align="center">

                <v:button action="simple" value="Cancel" name="Cancel">
                  <v:on-post>
                      <![CDATA[
                        self.repl_snap_pull_stage := 0;
                        self.repl_snap_pull_result_str := '';
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                </v:button>

                <v:button action="simple" value="Create" name="snap">
                  <v:on-post>
                      <![CDATA[
                        declare _idx integer;
                        declare _tables any;
                        declare _error, _chk_idx integer;
                        declare _tbl,_local_qual, _local_owner, _local_name, _local_fqtb varchar;
                        declare _local_create integer;

                        _tables := vector();
                        _idx := 0;
                        _error := 0;
                        while (_tbl := adm_next_keyword('tbls', control.vc_page.vc_event.ve_params, _idx))
                        {
                          _local_qual := get_keyword (sprintf ('LTBQ_%s', _tbl),
                            control.vc_page.vc_event.ve_params, '');
                          _local_owner := get_keyword (sprintf ('LTBO_%s', _tbl),
                            control.vc_page.vc_event.ve_params, '');
                          _local_name := get_keyword (sprintf ('LTBN_%s', _tbl),
                            control.vc_page.vc_event.ve_params, '');
                          _local_fqtb := sprintf('%s.%s.%s',_local_qual,_local_owner,_local_name);
                          _local_fqtb := complete_table_name(_local_fqtb,1);

                          if (_tbl = _local_fqtb)
                          {
                          self.vc_error_message := 'Source and Destination tables are the same table: ' || _tbl || '. ' || 'Please correct the error and try again.';
                            self.vc_is_valid := 0;
                            _error := 1;

                            goto _start;
                        }

                          _local_qual := (select top 1 name_part(KEY_TABLE,0) FROM DB.DBA.SYS_KEYS WHERE upper(name_part(KEY_TABLE,0)) = upper(name_part(_local_fqtb,0)));
                          if (isnull(_local_qual))
                            _local_qual := name_part(_local_fqtb,0);

                          _local_owner := (select top 1 name_part(KEY_TABLE,1) FROM DB.DBA.SYS_KEYS WHERE upper(name_part(KEY_TABLE,1)) = upper(name_part(_local_fqtb,1)));
                          if (isnull(_local_owner))
                            _local_owner := name_part(_local_fqtb,1);

                          _local_name := name_part(_local_fqtb,2);

                        _local_create := 0;
                          if (get_keyword (sprintf ('LTB_cr_%s', _tbl),control.vc_page.vc_event.ve_params) = 'on')
                            _local_create := 1;

                          -- Check for dublicates
                          _chk_idx := 0;
                          while (_chk_idx < length(_tables))
                          {
                            if (_tables[_chk_idx][1] = _local_qual and _tables[_chk_idx][2] = _local_owner and _tables[_chk_idx][3] = _local_name)
                            {
                            self.vc_error_message := 'Local table name dublicate found for tables: ' || _tbl || ' and ' || _tables[_chk_idx][0] || '. ' || 'Please correct the error and try again.';
                              self.vc_is_valid := 0;
                              _error := 1;

                              goto _start;
                          }
                            _chk_idx := _chk_idx + 1;
                        }

                          if (exists(select 1 from SYS_SNAPSHOT where SN_NAME = _local_fqtb))
                          {
                          self.vc_error_message := sprintf('Snapshot for target %s already exists', _local_fqtb) || '. ' || 'Please correct the error and try again.';
                              self.vc_is_valid := 0;
                              _error := 1;

                          goto _start;
                        }
                          _tables := vector_concat(_tables,vector(vector(_tbl,_local_qual,_local_owner,_local_name,_local_create)));
                          registry_set(sprintf('REPL_COUNT_%s_%s_%s',_local_qual,_local_owner,_local_name),'Pending');
                      }

                        _start:;
                        if (_error = 1)
                      {
                          self.vc_data_bind(e);
                      }
                        else
                        {
                          self.repl_snap_pull_tables := _tables;

                          self.repl_snap_pull_stage := 3;
                          self.repl_snap_pull_running := 1;
                          self.vc_page.vc_data_bind(e);
                          self.vc_redirect('db_repl_snap_pull_start.vspx');
                      }
                      ]]>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
        </v:form>
      </v:template>

      <!-- Stage 3 -->

      <v:template name="result_template" type="simple" enabled="-- equ(self.repl_snap_pull_stage, 3)">
        <v:form name="link3_form" action="db_repl_snap_pull_create.vspx" method="POST" type="simple">
          <v:before-render>
            <![CDATA[
              if (self.repl_snap_pull_autorefresh > 0 and self.repl_snap_pull_running = 1)
              {
                declare _header, _line varchar;
                _header := http_header_get();
                _line := sprintf('Refresh: %d;URL=db_repl_snap_pull_create.vspx?sid=%s&realm=%s&\r\n', self.repl_snap_pull_autorefresh , self.sid ,self.realm);
                if(_header is null)
                  {
                    _header := _line;
                  }
                else
                  {
                    _header := concat(_header, _line);
                }
                http_header(_header);
              }
            ]]>
          </v:before-render>
          <?vsp
            if (self.repl_snap_pull_running = 1)
            {
              http('<div class="attention_box">');
              http('Replication in progress. This process can not be stopped. Please wait');
              http('</div><br/>');
            }
            if (self.repl_snap_pull_result_str <> '')
            {
              http('<span class="error_summary">');
              http(self.repl_snap_pull_result_str);
              http('</span>');
              self.repl_snap_pull_result_str := '';
            }
          ?>
          <div class="listing_top_ctl_grp">

            <v:template name="result_template_ok" type="simple" enabled="-- equ(self.repl_snap_pull_running, 0)">
              <?vsp self.repl_snap_pull_stage := 0; ?>
              Replication done.
              <v:button action="simple" value="OK" name="ok" enabled="-- equ(self.repl_snap_pull_running , 0)">
                <v:on-post>
                    <![CDATA[
                      self.vc_redirect('db_repl_snap_pull.vspx');
                    ]]>
                </v:on-post>
              </v:button>
            </v:template>
            <v:template name="result_template_refresh" type="simple" enabled="-- equ(self.repl_snap_pull_running, 1)">
                autorefresh:
                <v:select-list name="autorefresh_list" auto-submit="1">
                  <v:on-post>
                      <![CDATA[
                        self.repl_snap_pull_autorefresh := cast(control.ufl_value as integer);
                        self.vc_data_bind(e);
                      ]]>
                  </v:on-post>
                  <v:after-data-bind>
                      <![CDATA[
                        control.ufl_value := self.repl_snap_pull_autorefresh;
                        control.vs_set_selected ();
                      ]]>
                  </v:after-data-bind>
                  <v:item name="no refresh" value="0"/>
                  <v:item name="5" value="5"/>
                  <v:item name="15" value="15"/>
                  <v:item name="30" value="30"/>
                  <v:item name="60" value="60"/>
                </v:select-list>
                <v:button action="simple" value="Manual Refresh" name="manual_refresh"/>
            </v:template>

          </div>
          <table class="listing" rules="groups">
          <thead>
              <tr class="listing_header_row">
                <th width="16px"/>
              <th>Source Table</th>
              <th>Destination Table</th>
              <th>State</th>
            </tr>
          </thead>
            <?vsp
              declare _tables any;
              declare _state varchar;

              _tables := self.repl_snap_pull_tables;
              if (_tables)
              {
                for (declare _i any, _i := 0; _i < length(_tables) ; _i := _i + 1)
                {
                  http('<tr>');
                    http('<td class="listing_col"><img src="images/icons/table_16.png" alt="Table" title="Table"/></td>');
                  http(sprintf('<td>%V</td>',_tables[_i][0]));
                  http(sprintf('<td>%V</td>', sprintf('%s.%s.%s',_tables[_i][1],_tables[_i][2],_tables[_i][3])));

                    _state := cast(registry_get(sprintf('REPL_COUNT_%s_%s_%s',_tables[_i][1],_tables[_i][2],_tables[_i][3])) as varchar);
                    if (regexp_match('^[0-9]*$',_state))
                      _state := _state || ' record processed.';

                    http(sprintf('<td>%V</td>', _state));
                    http('</tr>');
                }
              }
              else
              {
                http ('<tr><td colspan="4">No Tables in list.</td></tr>');
              }
            ?>
          </table>

        </v:form>
      </v:template>
      <div>
        <hr />
            <vm:url name="db_repl_snap_pull_ref" format="%s" value="--'Back to Snapshot Replications list'" url="--'db_repl_snap_pull.vspx'"/>
      </div>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>

