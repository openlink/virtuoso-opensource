<?xml version="1.0"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="event_edit_page"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Virtuoso Scheduled Events</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable persist="0" name="ename" type="varchar" default="''"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="Scheduled Events"/>
    </vm:menu>
    <vm:rawheader>
      <h1 class="page_title">
        <?vsp
          if (get_keyword('mode', params) = 'edit')
            http('Modify Event');
          else
            http('Create New Event');
        ?>
      </h1>
    </vm:rawheader>
    <vm:pagebody>
      <table class="ctl_grp">
        <v:form name="event_form1" type="simple" method="POST" action="">
          <input type="hidden" name="name" value="<?V get_keyword ('name', self.vc_page.vc_event.ve_params) ?>"/>
          <input type="hidden" name="mode" value="<?V get_keyword ('mode', self.vc_page.vc_event.ve_params) ?>"/>
          <tr>
            <td>
              <!--img class="page_icon" src="images/icons/alarm_32.png" alt="Event icon" title="Event"/-->
              <label class="t" for="q_evt_name">Event Name</label>
            </td>
            <td>
              <span>
                <v:text xhtml_id="q_evt_name" name="name1" xhtml_size="50">
                  <v:before-data-bind>
                    <v:script>
                      <![CDATA[
                        if (get_keyword ('mode', params) = 'edit')
                        {
                          self.ename := cast (deserialize (decode_base64 (get_keyword ('name',
                                                                                       params))) as varchar);
                          control.ufl_value := self.ename;
                          control.tf_style :=3;
                          control.vc_data_bound := 1;
                        }
                        else
                        {
                          declare ufn varchar;
                          ufn := get_keyword ('name', params);
                          if (length (ufn))
                          {
                            control.ufl_value:= ufn;
                            control.vc_data_bound := 1;
                          }
                        }
                      ]]>
                    </v:script>
                  </v:before-data-bind>
                </v:text>
              </span>
            </td>
          </tr>
          <tr>
            <td>
              <label class="t" for="e_disabled">Event is disabled</label>
            </td>
            <td>
              <span>
                <v:check-box name="e_disabled" xhtml_id="e_disabled" value="1">
                  <v:before-data-bind>
                      <![CDATA[
                        control.ufl_selected := 0;
                        if (get_keyword('mode', params) = 'edit')
                        {
                          control.ufl_selected := coalesce ((select SE_DISABLED from SYS_SCHEDULED_EVENT where SE_NAME = self.ename), 0);
                        }
                        control.vc_data_bound := 1;
                      ]]>
                  </v:before-data-bind>
                </v:check-box>
              </span>
            </td>
          </tr>
          <tr>
            <td>
              <label class="t" for="q_st_time">Start Time</label>
            </td>
            <td>
              <span>
                <v:text name="start_time" xhtml_id="q_st_time" xhtml_size="20">
                  <v:before-data-bind>
                    <![CDATA[
                      declare start_time varchar;
                      if (get_keyword ('mode', params) = 'edit')
                      {
                        select adm_date_fmt(se_start)
                          into start_time
                          from sys_scheduled_event
                         where se_name = self.ename;
                        control.ufl_value := start_time;
                        control.vc_data_bound := 1;
                      }
                      else
                      {
                        start_time := cast(now() as varchar);
                        if (start_time is not NULL)
                        {
                          control.ufl_value:= start_time;
                          control.vc_data_bound := 1;
                        }
                      }
                    ]]>
                  </v:before-data-bind>
                </v:text>
              </span>
            </td>
          </tr>
          <tr>
            <td>
              <label class="t" for="q_interval">Interval (minutes)</label>
            </td>
            <td>
              <span>
                <v:text name="interval_value" xhtml_id="q_interval">
                  <!--v:validator name="interval_value_val1"
                                  min="1"
                                  max="999999999"
                                  empty-allowed="1"
                                  test="value"
                                  regexp=""
                                  message="Interval must be a positive integer value."/>
                  <v:validator name="interval_value_val2"
                                  min="0" max="0"
                                  empty-allowed="0"
                                  test="regexp" regexp="^[0-9]+$"
                                  message="Numeric value required." / -->
                  <v:before-data-bind>
                    <v:script>
                      <![CDATA[
                        declare ufn integer;
                        if (get_keyword('mode', params) = 'edit')
                        {
                          select se_interval into ufn from SYS_SCHEDULED_EVENT where SE_NAME = self.ename;
                          control.ufl_value := cast(ufn as varchar);
                          control.vc_data_bound := 1;
                        }
                        else
                        {
                          declare pwd varchar;
                          pwd := 10;
                          if (pwd is not NULL)
                          {
                            control.ufl_value:= pwd;
                            control.vc_data_bound := 1;
                          }
                        }
                      ]]>
                    </v:script>
                  </v:before-data-bind>
                </v:text>
              </span>
            </td>
          </tr>
          <tr>
            <td>
              <label class="t" for="q_sql">SQL</label>
            </td>
            <td>
              <span>
                <v:textarea name="sql_value" xhtml_id="q_sql" xhtml_rows="7" xhtml_cols="70">
                  <v:before-data-bind>
                    <v:script>
                      <![CDATA[
                        declare ufn varchar;
                        if (get_keyword('mode', params) = 'edit')
                        {
                          select se_sql into ufn from SYS_SCHEDULED_EVENT where SE_NAME = self.ename;
                          control.ufl_value := ufn;
                          control.vc_data_bound := 1;
                        }
                        else
                        {
                          ufn := get_keyword('interval', params);
                          if (ufn is not NULL)
                          {
                            control.ufl_value:= ufn;
                            control.vc_data_bound := 1;
                          }
                        }
                      ]]>
                    </v:script>
                  </v:before-data-bind>
                </v:textarea>
              </span>
            </td>
          </tr>
          <tr>
            <td>
              <label class="t" for="e_notify">Enable Error notification</label>
            </td>
            <td>
              <span>
                <v:check-box name="e_notify" xhtml_id="e_notify" value="1">
                  <v:before-data-bind>
                      <![CDATA[
                        declare ufn integer;
                        if (get_keyword('mode', params) = 'edit')
                        {
                          select SE_ENABLE_NOTIFY into ufn from SYS_SCHEDULED_EVENT where SE_NAME = self.ename;
                          if (ufn = 1)
                          {
                            control.ufl_selected := 1;
                          }
                          control.vc_data_bound := 1;
                        }
                      ]]>
                  </v:before-data-bind>
                </v:check-box>
              </span>
            </td>
          </tr>
          <tr>
            <td>
              <label class="t" for="q_notify">E-mail address for Error notification</label>
            </td>
            <td>
              <span>
                <v:text name="q_notify" xhtml_id="q_notify" xhtml_size="70">
                  <v:before-data-bind>
                    <v:script>
                      <![CDATA[
                        declare ufn integer;
                        if (get_keyword('mode', params) = 'edit')
                        {
                          select se_notify into ufn from SYS_SCHEDULED_EVENT where SE_NAME = self.ename;
                          control.ufl_value := cast(ufn as varchar);
                          control.vc_data_bound := 1;
                        }
                        else
                        {
                          declare pwd varchar;
                          pwd := (select U_E_MAIL from SYS_USERS where U_ID = http_dav_uid ());
                          if (pwd is not NULL)
                          {
                            control.ufl_value:= pwd;
                            control.vc_data_bound := 1;
                          }
                        }
                      ]]>
                    </v:script>
                  </v:before-data-bind>
                </v:text>
              </span>
            </td>
          </tr>
          <tr>
            <td>
              <v:button action="simple" name="cancel1" value="Cancel">
                <v:on-post>
                  <v:script>
                    <![CDATA[
                      http_request_status('HTTP/1.1 302 Found');
                      http_header(sprintf('Location: sys_queues.vspx?sid=%s&realm=%s\r\n', self.sid, self.realm));
                      return;
                    ]]>
                  </v:script>
                </v:on-post>
              </v:button>
              <?vsp
                if (get_keyword('mode', self.vc_page.vc_event.ve_params) is NULL or
                    get_keyword('mode', self.vc_page.vc_event.ve_params) <> 'edit')
                {
              ?>
              <input type="reset" name="Submit2" value="Reset"/>
              <?vsp
                }
              ?>
              <v:button action="simple" name="save" value="Save">
                <v:on-post>
                  <![CDATA[
                    declare i, cnt, exist, u_ident, g_name, inter integer;
                    declare tmp, val, name, start_str, sql_str, u_notif, notif_enable, disabled varchar;

                    if (get_keyword ('cancel1', self.vc_page.vc_event.ve_params) <> '')
                    {
                    success:
                      http_request_status ('HTTP/1.1 302 Found');
                      http_header (sprintf ('Location: sys_queues.vspx?sid=%s&realm=%s\r\n', self.sid, self.realm));
                      return;
                    }

                    name := '';
                    sql_str := '';
                    inter := 0;
                    name := get_keyword ('name1', params, '');
                    start_str := get_keyword ('start_time', params, '');
                    sql_str := get_keyword ('sql_value', params, '');
                    u_notif := get_keyword ('q_notify', params, '');
                    notif_enable := atoi(get_keyword ('e_notify', params, '0'));
                    disabled := atoi(get_keyword ('e_disabled', params, '0'));
                    inter := atoi (cast (get_keyword ('interval_value', params, '') as varchar));
                    if (name is null or name = '')
                    {
                      self.vc_error_message := 'Please, enter the Event Name';
                      self.vc_is_valid := 0;
                      return;
                    }
                    if (start_str <> '' and start_str is not null)
                    {
                      declare state, msg, m_dta, res varchar;
                      state := '00000';
                      exec('stringdate(?)', state, msg, vector(start_str), m_dta, res);
                      if (state <> '00000')
                      {
                        self.vc_error_message := 'Please, enter correct the Start Time (yyyy-mm-dd hh:mm)';
                        self.vc_is_valid := 0;
                        return;
                      }
                    }
                    else
                    {
                      start_str := cast (now() as varchar);
                    }
                    if (inter <= 0)
                    {
                      self.vc_error_message := 'Interval must be a positive integer value.';
                      self.vc_is_valid := 0;
                      return;
                    }

                    if (sql_str = '' or sql_str is null)
                    {
                      self.vc_error_message := 'Please, enter SQL statement';
                      self.vc_is_valid := 0;
                      return;
                    }

                    if (get_keyword ('mode', params) = 'create')
                    {
		      insert soft DB.DBA.SYS_SCHEDULED_EVENT (SE_NAME, SE_START, SE_SQL, SE_INTERVAL, SE_NOTIFY, SE_ENABLE_NOTIFY, SE_DISABLED)
		        values (name, stringdate (start_str), sql_str, inter, u_notif, notif_enable, disabled);
                      if (row_count () = 0)
                      {
                        self.vc_is_valid := 0;
                        self.vc_error_message := 'A scheduled event with same name already exists.';
                        return;
                      }
                    }
                    else
                    {
                      if (get_keyword ('mode', params) = 'edit')
                      {
                        if (exists (select 1 from DB.DBA.SYS_SCHEDULED_EVENT where SE_NAME = name))
                        {
                          update DB.DBA.SYS_SCHEDULED_EVENT
                            set SE_START = stringdate(start_str),
                                SE_SQL = sql_str,
                                SE_INTERVAL = inter,
                                SE_NOTIFY = u_notif,
                                SE_ENABLE_NOTIFY = notif_enable,
                                SE_DISABLED = disabled
                          where SE_NAME = name;
                        }
                        else
                        {
                          insert into DB.DBA.SYS_SCHEDULED_EVENT (SE_NAME, SE_START, SE_SQL, SE_INTERVAL, SE_NOTIFY, SE_ENABLE_NOTIFY, SE_DISABLED)
                            values (name, stringdate (start_str), sql_str, inter, u_notif, notif_enable, disabled);
                        }
                      }
                    }
                    goto success;
                  ]]>
                </v:on-post>
              </v:button>
            </td>
          </tr>
        </v:form>
      </table>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
