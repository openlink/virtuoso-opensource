<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="xslt_page" decor="yacutia_decor.vspx" style="yacutia_style.xsl"  vm:owner="yacutia_xslt_page"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Virtuoso XSLT transformation</vm:pagetitle>
  <vm:pagewrapper owner="yacutia_xml">
    <vm:variables>
      <v:variable name="error_message" type="varchar" default="null" persist="1"/>
      <v:variable name="schema_text" type="varchar" default="null" persist="1"/>
      <v:variable name="schema_saved" type="integer" default="0" persist="1"/>
      <v:variable name="schema_loaded_from" type="integer" default="0" persist="1"/>
      <v:variable name="schema_state" type="integer" default="0" persist="1"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="Mapping Schema Manipulation"/>
    </vm:menu>
    <vm:header caption="Mapping Schema Manipulation"/>
    <vm:pagebody>
   <v:template name="mapped_schema_template" type="simple" enabled="-- case when (get_keyword('page', control.vc_page.vc_event.ve_params) is null  or  get_keyword('page', control.vc_page.vc_event.ve_params) = '1') then 1 else 0 end">
       <table width="100%" border="0" cellspacing="0" cellpadding="5">
       <tr><td colspan="6">Mapping Schema Editing:
       <?vsp
        if (self.schema_state = 0)
         http ('New Document');
  else if (self.schema_state = 1 or self.schema_state = 2)
    http (self.schema_loaded_from);
  if (self.schema_saved = 1)
    http ('[saved]');
       ?>
       </td></tr>
       <tr> <td colspan="6">
         <?vsp
     if  (self.error_message is  not null) {
             http('<span style="{color:red}">');
       http(self.error_message);
             http('</span>');
       self.error_message := null;
     }

   ?>
         </td>
       </tr>

        <v:form name="mapped_schema_form" type="simple" method="POST" action="">
         <input type="hidden" name="res" value="<?= get_keyword('res', control.vc_page.vc_event.ve_params) ?>"/>
         <v:on-post>
          <v:script>
           <![CDATA[
       if (get_keyword('schema_import', control.vc_page.vc_event.ve_params) is not null ) {
                    http_request_status ('HTTP/1.1 302 Found');
                   http_header (sprintf('Location: mapped_schema_xml.vspx?page=2&mode=list&sid=%s&realm=%s\r\n',self.sid ,self.realm));
        }
       if (get_keyword('schema_export', control.vc_page.vc_event.ve_params) is not null ) {
             self.schema_text :=  get_keyword('schema_text_control', control.vc_page.vc_event.ve_params);
                    http_request_status ('HTTP/1.1 302 Found');
                    http_header (sprintf('Location: mapped_schema_xml.vspx?page=3&mode=list&sid=%s&realm=%s\r\n',self.sid ,self.realm));
        }
        if (get_keyword('schema_new', control.vc_page.vc_event.ve_params) is not null ) {
          self.schema_text := null;
    self.schema_saved := 0;
    self.schema_state := 0;
                    http_request_status ('HTTP/1.1 302 Found');
                   http_header (sprintf('Location: mapped_schema_xml.vspx?page=1&mode=list&sid=%s&realm=%s\r\n',self.sid ,self.realm));
        }
        if (get_keyword('schema_declare', control.vc_page.vc_event.ve_params) is not null ) {
           if (self.schema_saved =  1 ) {
        xml_load_mapping_schema_decl ( 'virt://WS.WS.SYS_DAV_RES.RES_FULL_PATH.RES_CONTENT:', self.schema_loaded_from, 'UTF-8', 'x-any'  );

                    http_request_status ('HTTP/1.1 302 Found');
                   http_header (sprintf('Location: mapped_schema_xml.vspx?page=1&mode=list&sid=%s&realm=%s\r\n',self.sid ,self.realm));
     } else {
        self.error_message := 'Mapping Schema must be saved before to declare it.';
     }
        }
           ]]>
          </v:script>
         </v:on-post>
         <vm:row>
          <vm:control name="schema_text_control" type="textarea" colspan="4">
            <vm:caption value="Mapping schema text" pos="top" class="SubInfo"/>
            <vm:attrs xhtml_style="width:100%" xhtml_rows="12"/>
             <vm:events>
               <v:before-data-bind>
                <script><![CDATA[
      if (self.schema_text is not null)
       control.ufl_value := self.schema_text;
                ]]></script>
               </v:before-data-bind>
               <v:on-post>
                 <script><![CDATA[
            ;
                 ]]></script>
               </v:on-post>
             </vm:events>
         </vm:control>
       </vm:row>
         <tr>
          <td align="center">
           <v:button action="submit" name="schema_import" value="Import" xhtml_style="size:64;"/>
           <v:button action="submit" name="schema_export" value="Export" xhtml_style="size:64;"/>
     <v:button action="submit" name="schema_load" value="Load" xhtml_style="size:64;"/>
           <v:button action="submit" name="schema_save" value="Save" xhtml_style="size:64;"/>
           <v:button action="submit" name="schema_revert" value="Revert" xhtml_style="size:64;"/>
           <v:button action="submit" name="schema_declare" value="Declare" xhtml_style="size:64;"/>
           <v:button action="submit" name="schema_view" value="View" xhtml_style="size:64;"/>
           <v:button action="submit" name="schema_new" value="New" xhtml_style="size:64;"/>
          </td>
         </tr>
        </v:form>
       </table>
</v:template>
<v:template name="mapped_schema_import_template" type="simple" enabled="-- equ(get_keyword('page', control.vc_page.vc_event.ve_params), '2')">
    <table width="100%" border="0" cellspacing="0" cellpadding="5">
        <v:form name="mapped_schema_import_form" type="simple" method="POST" action="">
         <input type="hidden" name="res" value="<?= get_keyword('res', control.vc_page.vc_event.ve_params) ?>"/>
         <v:on-post>
          <v:script>
           <![CDATA[
       if ( get_keyword('schema_import_apply', control.vc_page.vc_event.ve_params) is not null ) {
          declare path varchar;
    path :=  get_keyword('dav_path_import', control.vc_page.vc_event.ve_params);
          select blob_to_string(RES_CONTENT) into self.schema_text  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = path;
    self.schema_state := 1;
    self.schema_saved := 0;
    self.schema_loaded_from := path;
       }
             http_request_status ('HTTP/1.1 302 Found');
              http_header (sprintf('Location: mapped_schema_xml.vspx?page=1&mode=list&sid=%s&realm=%s\r\n',self.sid ,self.realm));
           ]]>
          </v:script>
         </v:on-post>

      <tr>
            <td align="center">
              <table border="0">
                <tr>
                  <td class="SubInfo">Load from</td>
                  <td>
                <v:text name="dav_path_import" xhtml_size="40"/>
                <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="" path="DAV" browse_type="res" style_css="test.css" w_title="DAV Browser" title="DAV Browser" advisory="mega advisory text" lang="en" return_box="dav_path_import"/>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
         <tr>
          <td align="center">
           <v:button action="submit" name="schema_import_apply" value="Apply" xhtml_style="size:64;"/>
           <v:button action="submit" name="schema_import_cancel" value="Cancel" xhtml_style="size:64;"/>
          </td>
         </tr>

</v:form>
    </table>
</v:template>
<v:template name="mapped_schema_save_template" type="simple" enabled="-- equ(get_keyword('page', control.vc_page.vc_event.ve_params), '3')">
    <table width="100%" border="0" cellspacing="0" cellpadding="5">
       <tr> <td colspan="6">
         <?vsp
     if  (self.error_message is  null)
       http('Specify file name and its permissions');
     else {
             http('<span style="{color:red}">');
       http(self.error_message);
             http('</span>');
       self.error_message := null;
     }

   ?>
         </td>
       </tr>
        <v:form name="mapped_schema_save_form" type="simple" method="POST" action="">
         <input type="hidden" name="page" value="<?= get_keyword('page', control.vc_page.vc_event.ve_params) ?>"/>
         <v:on-post>
          <v:script>
           <![CDATA[
       if ( get_keyword('schema_save_apply', control.vc_page.vc_event.ve_params) is not null ) {
          declare path, file_perms, folders_message,  user_perm  varchar;
    declare  dav_folder_owner, dav_folder_group integer;
         user_perm:='';
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_r') as vspx_field).ufl_selected + 48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_w') as vspx_field).ufl_selected+48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_x') as vspx_field).ufl_selected+48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_r') as vspx_field).ufl_selected+48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_w') as vspx_field).ufl_selected+48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_x') as vspx_field).ufl_selected+48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_r') as vspx_field).ufl_selected+48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_w') as vspx_field).ufl_selected+48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_x') as vspx_field).ufl_selected+48));
         user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_4_index') as vspx_field).ufl_selected+48));

    path :=  get_keyword('dav_path_save', control.vc_page.vc_event.ve_params);
                if ( dav_path_validate(path,dav_folder_owner, dav_folder_group, file_perms, folders_message) <> 1 ) {
                   self.error_message := sprintf('Path to store into is invalid. Path validation was failed: "%s"', folders_message);
                   goto try_again;
                } else if ( dav_check_permissions(connection_get('vspx_user'), file_perms,'010' ,dav_folder_owner, dav_folder_group, folders_message) <> 1) {
                  self.error_message := sprintf('You are unable to store this file: "%s"', folders_message);
                  goto try_again;
                }
    self.schema_saved := 1;
    DAV_RES_UPLOAD (path, self.schema_text, 'text/xml',user_perm, get_keyword('owner', params), get_keyword('group', params),'dav','dav');
    self.schema_state := 2;
    self.schema_loaded_from := path;
       }
             http_request_status ('HTTP/1.1 302 Found');
             http_header (sprintf('Location: mapped_schema_xml.vspx?page=1&mode=list&sid=%s&realm=%s\r\n',self.sid ,self.realm));

       try_again: ;
           ]]>
          </v:script>
         </v:on-post>

      <tr>
            <td align="center">
              <table border="0">
                <tr>
                  <td class="SubInfo">Path to save in</td>
                  <td>
                <v:text name="dav_path_save" xhtml_size="40"/>
                <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="" path="DAV" browse_type="res" style_css="test.css" w_title="DAV Browser" title="DAV Browser" advisory="mega advisory text" lang="en" return_box="dav_path_save"/>
                  </td>
                </tr>
              </table>
            </td>
<!-- -->    <td>
                 <vm:container width="100%" class="SubData" border="0" title="Permissions" titleclass="SubInfo">
                 <vm:row>
                  <vm:container width="100%" class="SubData" border="0">
                   <vm:row>
                    <vm:raw>
                     <td class="SubInfo">Owner</td>
                     <td>
                      <v:select-list name="owner" xhtml_style="width:160">
                       <v:after-data-bind>
                        <v:script><![CDATA[
                  declare indx, user_ident integer;
                  declare user_name varchar;
                  user_ident := -1;
                  indx :=0;
                  (control as vspx_select_list).vsl_items:= vector();
                  (control as vspx_select_list).vsl_item_values:= vector();
                  (control as vspx_select_list).vsl_selected_inx :=0;

                    for select  U_ID, U_NAME, U_FULL_NAME  from SYS_USERS where U_IS_ROLE=0  and  U_DAV_ENABLE =1 and U_ACCOUNT_DISABLED = 0 do {
                        user_name:= U_NAME;
         if (check_grants(connection_get ('vspx_user'), '') = 1  or (check_grants(connection_get ('vspx_user'), '') <> 1  and connection_get ('vspx_user') = user_name )) {
                        if  (user_ident >=0 and user_ident = U_ID)
                          (control as vspx_select_list).vsl_selected_inx :=indx;
                        (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector(user_name));
                        (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(user_name));
                         indx := indx +1;
         }
                    }
                   ]]></v:script>
                       </v:after-data-bind>
                      </v:select-list>
                     </td>
                    </vm:raw>
                   </vm:row>
                   <vm:row>
                    <vm:raw>
                     <td class="SubInfo">Group</td>
                     <td>
                      <v:select-list name="group" xhtml_style="width:160">
                       <v:before-data-bind>
                        <v:script><![CDATA[
                  declare indx, user_ident integer;
                  declare user_name varchar;
                  user_ident := -1;
                  indx :=0;
                  (control as vspx_select_list).vsl_items:= vector();
                  (control as vspx_select_list).vsl_item_values:= vector();
                  (control as vspx_select_list).vsl_selected_inx :=0;
                  -- if (get_keyword('mode', params) ='edit' and get_keyword('business_key', params) is not null) {}
                    for select  U_ID, U_NAME, U_FULL_NAME  from SYS_USERS where U_IS_ROLE=1  and  U_DAV_ENABLE =1 and U_ACCOUNT_DISABLED = 0 do {
                        user_name:= U_NAME;
                      if  (user_ident >=0 and user_ident = U_ID)
                       (control as vspx_select_list).vsl_selected_inx :=indx;
                    (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector(user_name));
                    (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(user_name));
                    indx := indx +1;
                      }
                   ]]></v:script>
                       </v:before-data-bind>
                      </v:select-list>
                     </td>
                    </vm:raw>
                   </vm:row>
                  </vm:container>
                 </vm:row>
                 <vm:row>
                  <vm:control name="user_permitions" type="checkbox" dir="horiz">
                   <vm:attrs width="0" class="SubData" border="0"/>
                   <!--vm:caption value="Permissions" align="top" class="SubInfo"/-->
                   <vm:items left-margin="12" right-margin="12" class="SubInfo">
                    <vm:group name="own" label="Owner">
                     <vm:item name="r" value="1" label="r" initial-checked="1">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 0) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 1;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                     <vm:item name="w" value="1" label="w" initial-checked="1">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 1) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 1;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                     <vm:item name="x" value="1" label="x" initial-checked="1">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 2) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 1;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                    </vm:group>
                    <vm:group name="group" label="Group">
                     <vm:item name="r" value="1" label="r">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 3) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 0;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                     <vm:item name="w" value="1" label="w">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 4) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 0;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                     <vm:item name="x" value="1" label="x">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 5) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 0;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                    </vm:group>
                    <vm:group name="other" label="Users">
                     <vm:item name="r" value="1" label="r">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 6) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 0;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                     <vm:item name="w" value="1" label="w">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 7) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 0;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                     <vm:item name="x" value="1" label="x">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 8) = ascii('1') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:= 0;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                    </vm:group>
                    <vm:group label="Index">
                     <vm:item name="index" value="1" label="t">
                      <vm:events>
                       <v:after-data-bind>
                        <v:script><![CDATA[ if (self.vc_event.ve_is_post=0) {
                                      if (get_keyword('mode', params) = 'edit' and get_keyword('res', params) is not null )  {
                                               declare perm varchar;
                                     select RES_PERMS into perm  from WS.WS.SYS_DAV_RES where RES_FULL_PATH = get_keyword('res', params);
                                                if (aref(perm, 9) = ascii('R') )
                                                  control.ufl_selected:= 1;
                                       } else
                                            control.ufl_selected:=0;
                                        control.vc_data_bound := 1;
                                     }
                                            ]]></v:script>
                       </v:after-data-bind>
                      </vm:events>
                     </vm:item>
                    </vm:group>
                   </vm:items>
                  </vm:control>
                 </vm:row>
                </vm:container>
   </td>
<!--
 -->



          </tr>
         <tr>
          <td align="center">
           <v:button action="submit" name="schema_save_apply" value="Apply" xhtml_style="size:64;"/>
           <v:button action="submit" name="schema_save_cancel" value="Cancel" xhtml_style="size:64;"/>
          </td>
         </tr>

</v:form>
    </table>
</v:template>


    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
