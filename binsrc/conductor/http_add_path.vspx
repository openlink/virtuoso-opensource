<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="http_edit_path_page"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <script language="JavaScript">
    <![CDATA[
      function doBrowse(target,fld_name, startPath, isDir, isDav)
      {
        var start_p, tp;

        window._result = document.frm_edit_path[fld_name];
        if (isDav)
          target = 'popup_browser.vspx' + target;
        else
          target = 'popup2_browser.vspx' + target;

        start_p = document.frm_edit_path[fld_name].value;
        if (fld_name != startPath)
        {
          start_p = document.frm_edit_path[startPath].value;
        }

        tp = (isDir ? 'col' : 'res');
        if (document.frm_edit_path['c_inherit'].checked)
        {
          tp = 'both';
          if (start_p[start_p.length-1] != '/')
          {
            var sl = start_p.lastIndexOf ('/');
            if (sl > 0)
              start_p = start_p.substr(0, sl);
          }
        }

        window.open( target +
                    '&' + (isDav ? 'dir' : 'path') + '=' + start_p +
                    '&caption=Choose+' + (isDir ? 'location' : 'resource') +
                    '&browse_type=' + tp +
                    '&start-path='+ (isDir ? 'HTTP_ROOT' : 'FILE_ONLY') +
                    '&retname=_result',
                    'window',
                    'scrollbars=yes, resizable=yes, menubar=no, width=640, height=600');
      }

      function defineOpts (val)
      {
        if ('SSL' == val.options[val.selectedIndex].value) {
          if (document.frm_edit_path.t_auth_opt.value == '') {
            document.frm_edit_path.t_auth_opt.value = 'https_cert=[file_with_certificate].pem;\nhttps_key=[file_with_private_key].pem;';
          }
        }
      }

      function changePhysicalFolder (cb, f)
      {
        if (cb.checked)
          f.t_ppath.value = '/DAV/';
        else
          f.t_ppath.value = '/';
      }
    ]]>
  </script>
  <vm:pagetitle>Virtuoso HTTP Server Management</vm:pagetitle>
  <vm:pagewrapper>
    <vm:menu>
      <vm:menuitem value="Server Management"/>
    </vm:menu>
    <vm:variables>
      <v:variable name="edit_host" persist="0" type="varchar" default="''" />
      <v:variable name="edit_port" persist="0" type="varchar" default="''" />
      <v:variable name="edit_httphost" persist="0" type="varchar" default="''" />
      <v:variable name="ssbrow" persist="0" type="varchar" default="''" />
      <v:variable name="_host" persist="0" type="varchar" default="''" />
      <v:variable name="_httphost" persist="0" type="varchar" default="''" />
      <v:variable name="defdir" persist="0" type="integer" default="0" />
      <v:variable name="lpath" persist="0" type="varchar" default="''" />
      <v:variable name="edit_lpath" persist="0" type="varchar" default="''" />
      <v:variable name="ppath" persist="0" type="varchar" default="''" />
      <v:variable name="defpage" persist="0" type="varchar" default="''" />
      <v:variable name="mode" persist="0" type="varchar" default="''" />
      <v:variable name="tab" persist="0" type="integer" default="1" />
      <v:variable name="dirbrowsing" persist="0" type="integer" default="0" />
      <v:variable name="xmlexec" persist="0" type="integer" default="0" />
      <v:variable name="ovrexec" persist="0" type="integer" default="0" />
      <v:variable name="persistvars" persist="0" type="integer" default="0" />
      <v:variable name="noinherit" persist="0" type="varchar" default="null" />
      <v:variable name="vspuser" persist="0" type="varchar" default="''" />
      <v:variable name="soapuser" persist="0" type="varchar" default="''" />
      <v:variable name="security" persist="0" type="varchar" default="''" />
      <v:variable name="auth_realm" persist="0" type="varchar" default="''" />
      <v:variable name="auth_func" persist="0" type="varchar" default="''" />
      <v:variable name="after_func" persist="0" type="varchar" default="''" />
      <v:variable name="soap_opt" persist="0" type="varchar" default="''" />
      <v:variable name="auth_opt" persist="0" type="varchar" default="''" />
      <v:variable name="global_opts" persist="0" type="varchar" default="''" />
      <v:variable name="global_opts_misc" persist="0" type="varchar" default="''" />
      <v:variable name="is_dav" persist="0" type="integer" default="0" />
      <v:variable name="is_https" persist="0" type="integer" default="0" />
      <v:variable name="cors" persist="0" type="varchar" default="''" />
      <v:variable name="cors_rej" persist="0" type="integer" default="0" />
    </vm:variables>
    <vm:header caption="HTTP Virtual Directory"/>
    <vm:pagebody>
      <v:before-data-bind>
        <v:script>
          <![CDATA[
            self.mode := get_keyword('mode', self.vc_page.vc_event.ve_params, self.mode);
            self.edit_host := get_keyword('_host', self.vc_page.vc_event.ve_params, self.edit_host);
            self.edit_port := get_keyword('_port', self.vc_page.vc_event.ve_params, self.edit_port);
            self.edit_httphost := get_keyword('_httphost', self.vc_page.vc_event.ve_params, self.edit_httphost);
            self._host := concat(self.edit_host, case when length(self.edit_port)>0 then ':' else '' end, self.edit_port);
            self._httphost := self.edit_httphost;
            if (self.mode = 'edit')
            {
	      self.lpath := get_keyword('path', self.vc_event.ve_params, self.lpath);

	      if (length (self.edit_lpath) = 0)
	        self.edit_lpath := self.lpath;

              -- load settings from choosen path
              declare _ppath, _defpage, _vspuser, _soapuser, _security, _auth_realm, _auth_func, _after_func,
                      _sesvars, _soap_opt, _auth_opt, _global_opts varchar;
              declare _dirbrowsing, _is_dav, _defdir integer;
              whenever not found goto not_found;
              select HP_PPATH, HP_DEFAULT, HP_DIR_BROWSEABLE, HP_RUN_VSP_AS, HP_RUN_SOAP_AS,
                     HP_SECURITY, HP_REALM, HP_AUTH_FUNC, HP_POSTPROCESS_FUNC, HP_PERSIST_SES_VARS,
                     HP_STORE_AS_DAV, deserialize (HP_SOAP_OPTIONS), deserialize (HP_AUTH_OPTIONS),
                     HP_IS_DEFAULT_HOST, deserialize(HP_OPTIONS)
              into _ppath, _defpage, _dirbrowsing, _vspuser, _soapuser,
                   _security, _auth_realm, _auth_func, _after_func, _sesvars,
                   _is_dav, _soap_opt, _auth_opt,
                   _defdir, _global_opts
              from DB.DBA.HTTP_PATH
              where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_LPATH = self.lpath;
              self.ppath       := _ppath;
              self.defpage     := _defpage;
              self.vspuser     := _vspuser;
              self.soapuser    := _soapuser;
              self.security    := _security;
              self.auth_realm  := _auth_realm;
              self.auth_func   := _auth_func;
              self.after_func  := _after_func;
              self.persistvars := _sesvars;
              self.soap_opt    := _soap_opt;
              self.auth_opt    := _auth_opt;
              self.global_opts := _global_opts;
              self.dirbrowsing := _dirbrowsing;
              self.is_dav      := _is_dav;
	      self.defdir      := _defdir;

              if( isarray (self.global_opts) and not mod (length (self.global_opts),2))
	        {
                  -- defaults
		  self.xmlexec := NULL;
		  self.ovrexec := NULL;
		  self.ssbrow := '';
                  self.cors := '';
                  self.cors_rej := 0;
                  self.global_opts_misc := vector();

                  -- We leave all unknown global options in self.global_opts_misc
                  for (declare i int, i := 0; i < length(self.global_opts); i := i+2)
                    {
                      if (self.global_opts[i] = 'xml_templates')
                        self.xmlexec := self.global_opts[i+1];
                      else if (self.global_opts[i] = 'executable')
                        self.ovrexec := self.global_opts[i+1];
                      else if (self.global_opts[i] = 'browse_sheet')
                        {
                          self.ssbrow := self.global_opts[i+1];
                          if (not isstring (self.ssbrow))
                            self.ssbrow := '';
                        }
                      else if (self.global_opts[i] = 'noinherit')
                        self.noinherit := self.global_opts[i+1];
                      else if (self.global_opts[i] = 'cors')
                        self.cors := self.global_opts[i+1];
                      else if (self.global_opts[i] = 'cors_restricted')
                        self.cors_rej := self.global_opts[i+1];
                      else
                        self.global_opts_misc := vector_concat (self.global_opts_misc, vector (self.global_opts[i], self.global_opts[i+1]));
                    }
	        }
            }
            else if (self.mode = 'add1')
            {
              not_found:
              self.lpath := '';
              self.defdir := 0;
              self.ppath := '';
              self.defpage := '';

              self.dirbrowsing := 0;
              self.xmlexec := 0;
              self.ovrexec := 0;
              self.persistvars := 0;
              self.vspuser := '';
              self.soapuser := '';
            }
	  if (exists (select 1 from HTTP_PATH where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_SECURITY = 'SSL'))
            self.is_https := 1;
          ]]>
        </v:script>
      </v:before-data-bind>
      <v:before-render>
        <v:script>
          <![CDATA[
            --load controls
            --self.l_host.ufl_value := self._httphost;
            --self.l_iface.ufl_value := self._host;
            self.t_lpath.ufl_value := self.lpath;
            self.t_ppath.ufl_value := self.ppath;
            self.c_is_dav.ufl_selected := case when (self.is_dav<>0) then 1 else 0 end;
            self.t_defpage.ufl_value := self.defpage;
            self.c_defdir.ufl_selected := case when (self.defdir<>0) then 1 else 0 end;
            self.c_dirbrowsing.ufl_selected := case when (self.dirbrowsing<>0) then 1 else 0 end;
            self.c_xmlexec.ufl_selected := case when (self.xmlexec<>0) then 1 else 0 end;
            self.c_ovrexec.ufl_selected := case when (self.ovrexec<>0) then 1 else 0 end;
	    self.c_persistvars.ufl_selected := case when (self.persistvars<>0) then 1 else 0 end;
	    self.c_inherit.ufl_selected := case when self.noinherit is not null then 1 else 0 end;
            self.dl_vspuser.ufl_value := self.vspuser;
	    self.t_ssbrow.ufl_value := self.ssbrow;
            if (self.dl_vspuser.vsl_item_values is not null)
              self.dl_vspuser.vsl_selected_inx := position(cast(self.dl_vspuser.ufl_value as varchar), self.dl_vspuser.vsl_item_values) - 1;

            -- We put all unknown global options into the advanced options text field
            declare gopts varchar;
            gopts := '';
            for (declare i int, i := 0; i < length(self.global_opts_misc); i := i+2)
              {
                gopts := concat( gopts, sprintf('%s=%s;\r\n', cast(self.global_opts_misc[i] as varchar), cast(self.global_opts_misc[i+1] as varchar)));
              }
            self.t_global_opt_misc.ufl_value := gopts;

            self.t_auth_realm.ufl_value := self.auth_realm;
            self.t_auth_func.ufl_value := self.auth_func;
            self.t_after_func.ufl_value := self.after_func;
            if (isarray(self.auth_opt))
            {
              declare idx integer;
              declare opts varchar;
              opts := '';
              idx := 0;
              while (idx < length(self.auth_opt))
              {
                opts := concat( opts, sprintf('%s=%s;\r\n', cast(self.auth_opt[idx] as varchar), cast(self.auth_opt[idx+1] as varchar)));
                idx := idx + 2;
              }
              self.t_auth_opt.ufl_value := opts;
            }
	    self.t_cors.ufl_value := self.cors;
	    self.c_cors_rej.ufl_selected := self.cors_rej;
          ]]>
        </v:script>
      </v:before-render>
      <v:template name="t_template" type="simple" enabled="-- equ(self.mode, 'add1')">
        <v:form name="frm_add_templ" action="http_add_path.vspx" method="POST" type="simple">
          <div class="dialog_text">Please choose virtual directory type or an existing virtual directory to use as template.</div>
          <table class='ctl_grp'>
            <tr>
              <td>
                <v:radio-button name="rb_none" group-name="radio_gr" value="none" initial-checked="1" xhtml_id="rb_none"/>
                <label for="rb_none">None</label>
              </td>
              <td/>
            </tr>
            <tr>
              <td>
                <v:radio-button name="rb_path" group-name="radio_gr" value="path" initial-checked="0" xhtml_id="rb_path"/>
                <label for="rb_path">Existing path</label>
              </td>
              <td>
                <v:data-list
                  name="dl_temppaths"
                  sql="select HP_LPATH from DB.DBA.HTTP_PATH where HP_HOST=self._httphost and HP_LISTEN_HOST = self._host order by HP_LPATH"
                  key-column="HP_LPATH"
                  value-column="HP_LPATH"
                  width="200"
                  height="24"/>
              </td>
            </tr>
            <tr>
              <td>
                <v:radio-button name="rb_templ" group-name="radio_gr" value="template" initial-checked="0" xhtml_id="rb_templ"/>
                <label for="rb_templ">Type</label>
              </td>
              <td>
                <v:select-list name="s_templates" >
                  <v:item name="File system" value="1" />
                  <v:item name="WebDAV domain" value="2" />
                  <v:item name="Proxy server" value="3" />
                  <v:item name="SOAP access point" value="4" />
                  <v:item name="SPARQL access point" value="5" />
		  <v:after-data-bind>
		      if (self.is_https and __proc_exists ('DB.DBA.WEBID_AUTH') is not null)
		        {
		          control.vsl_items := vector_concat (control.vsl_items, vector ('WebID protection'));
		          control.vsl_item_values := vector_concat (control.vsl_item_values, vector ('6'));
		        }
		  </v:after-data-bind>
                </v:select-list>
              </td>
            </tr>
            <tr>
              <td colspan="2" align="center">
                <v:button action="simple" name="cancel_templ" value="Cancel">
                  <v:on-post>
                    <v:script>
                      <![CDATA[
                      self.mode := '';
		      self.vc_data_bind(e);
		      self.vc_redirect (sprintf ('http_serv_mgmt.vspx?openat=%s', self._host));
                      ]]>
                    </v:script>
                  </v:on-post>
                </v:button>
                <v:button action="simple" name="next_templ" value="Next>>">
                  <v:on-post>
                    <v:script>
                      <![CDATA[
                        if (self.rb_path.ufl_selected)
                        {
                          declare t_mode varchar;
                          t_mode := self.dl_temppaths.ufl_value;
                          -- load settings from choosen path
                          declare _ppath, _defpage, _vspuser, _soapuser, _security, _auth_realm, _auth_func, _after_func,
                                  _sesvars, _soap_opt, _auth_opt, _global_opts varchar;
                          declare _dirbrowsing, _is_dav, _defdir integer;
                          select HP_PPATH, HP_DEFAULT, HP_DIR_BROWSEABLE, HP_RUN_VSP_AS, HP_RUN_SOAP_AS,
                                 HP_SECURITY, HP_REALM, HP_AUTH_FUNC, HP_POSTPROCESS_FUNC, HP_PERSIST_SES_VARS,
                                 HP_STORE_AS_DAV, deserialize (HP_SOAP_OPTIONS), deserialize (HP_AUTH_OPTIONS),
                                 HP_IS_DEFAULT_HOST, deserialize(HP_OPTIONS)
                          into _ppath, _defpage, _dirbrowsing, _vspuser, _soapuser,
                               _security, _auth_realm, _auth_func, _after_func, _sesvars,
                               _is_dav, _soap_opt, _auth_opt,
                               _defdir, _global_opts
                          from DB.DBA.HTTP_PATH
                          where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_LPATH = t_mode;
                          self.ppath       := _ppath      ;
                          self.defpage     := _defpage    ;
                          self.vspuser     := _vspuser    ;
                          self.soapuser    := _soapuser   ;
                          self.security    := _security   ;
                          self.auth_realm  := _auth_realm ;
                          self.auth_func   := _auth_func  ;
                          self.after_func  := _after_func ;
                          self.persistvars := _sesvars    ;
                          self.soap_opt    := _soap_opt   ;
                          self.auth_opt    := _auth_opt   ;
                          self.global_opts := _global_opts;
                          self.dirbrowsing := _dirbrowsing;
                          self.is_dav      := _is_dav     ;
                          self.defdir      := _defdir     ;
                          if (isarray (self.global_opts) and not mod (length (self.global_opts),2))
                            self.xmlexec := get_keyword ('xml_templates', self.global_opts, NULL);
                          if (isarray (self.global_opts) and not mod (length (self.global_opts),2))
                            self.ovrexec := get_keyword ('executable', self.global_opts, NULL);
                          if (isarray (self.global_opts) and not mod (length (self.global_opts),2))
                            self.ssbrow := get_keyword ('browse_sheet', self.global_opts, '');
                        }
                        else if (self.rb_templ.ufl_selected)
                        {
                          declare t_mode integer;
                          t_mode := self.s_templates.ufl_value;
                          --fill settings like selected template
                          if (t_mode = '1')
                          {
                            self.lpath := '';
                            self.ppath := '/';
                            self.defpage := 'index.html';
                            self.dirbrowsing  := 0;
                            self.xmlexec  := 0;
                            self.vspuser  := 'dba';
                            self.soapuser := '';
                            self.security := 'none';
                            self.auth_realm := '';
                            self.auth_func := NULL;
                            self.after_func := '';
                            self.persistvars := 0;
                            self.is_dav := 0;
                            self.soap_opt := '';
                            self.auth_opt := '';
                          }
                          else if (t_mode = '2')
                          {
                            self.lpath := '';
                            self.ppath := '/DAV/';
                            self.defpage := '';
                            self.dirbrowsing  := 0;
                            self.xmlexec  := 0;
                            self.vspuser  := 'dba';
                            self.soapuser := '';
                            self.auth_realm := '';
                            self.auth_func := NULL;
                            self.after_func := '';
                            self.is_dav := 1;
                          }
                          else if (t_mode = '3')
                          {
                            self.lpath := '';
                            self.ppath := 'http://';
                            self.defpage := '';
                            self.dirbrowsing  := 0;
                            self.xmlexec  := 0;
                            self.vspuser  := '';
                            self.soapuser := '';
                            self.security := '';
                            self.auth_realm := '';
                            self.auth_func := NULL;
                            self.after_func := '';
                            self.persistvars := 0;
                            self.is_dav := 0;
                            self.soap_opt := '';
                            self.auth_opt := '';
                          }
                          else if (t_mode = '4')
                          {
                            self.lpath := '';
                            self.ppath := '/SOAP/';
                            self.defpage := '';
                            self.dirbrowsing  := 0;
                            self.xmlexec  := 0;
                            self.vspuser  := '';
                            self.soapuser := 'SOAP';
                            self.security := '';
                            self.auth_realm := '';
                            self.auth_func := NULL;
                            self.after_func := '';
                            self.persistvars := 0;
                            self.is_dav := 0;
                            self.soap_opt := vector (
                                'ServiceName','<SERVICE_NAME>',
                                'Namespace','http://openlinksw.com/virtuoso/soap/schema',
                                'MethodInSoapAction','yes',
                                'HeaderNS','http://openlinksw.com/virtuoso/soap/schema',
                                'FaultNS','http://openlinksw.com/virtuoso/soap/schema',
                                'CR-escape','no',
                                'elementFormDefault','unqualified',
                                'DIME-ENC','no',
                                'WS-SEC','no',
                                'WSS-KEY','<KEY_NAME>',
                                'WSS-Validate-Signature','2',
                                'WS-RP','no',
                                'wsrp-from','some@example.domain' );
                            self.auth_opt := '';
                            http_request_status ('HTTP/1.1 302 Found');
                            http_header (sprintf('Location: soap_services_edit.vspx?sid=%s&realm=%s&mode=add2&_host=%s&_port=%s&_httphost=%s\r\n', self.sid, self.realm, self.edit_host, self.edit_port, self.edit_httphost));
                          }
                          else if (t_mode = '5')
                          {
                            self.lpath := '';
                            self.ppath := '/!sparql/';
                            self.defpage := '';
                            self.dirbrowsing  := 0;
                            self.xmlexec  := 0;
                            self.vspuser  := 'dba';
                            self.soapuser := '';
                            self.auth_realm := '';
                            self.auth_func := NULL;
                            self.after_func := '';
			    self.is_dav := 1;
			    self.noinherit := 'yes';
                          }
                          else if (t_mode = '6')
                          {
                            self.lpath := '';
                            self.ppath := '/';
                            self.defpage := '';
                            self.dirbrowsing  := 0;
                            self.xmlexec  := 0;
                            self.vspuser  := 'dba';
                            self.soapuser := '';
                            self.auth_realm := 'GENERIC';
                            self.auth_func := 'DB.DBA.WEBID_AUTH';
                            self.after_func := '';
			    self.is_dav := 0;
			    self.security := 'SSL';
			    self.auth_opt := (select deserialize (HP_AUTH_OPTIONS) from HTTP_PATH where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_SECURITY = 'SSL' and HP_LPATH = '/');
                          }
                        }
                        self.mode := 'add2';
                        self.vc_data_bind(e);
                      ]]>
                    </v:script>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
        </v:form>
      </v:template>
      <v:template name="t_template2" type="simple" enabled="-- case when (self.mode<>'add1') then 1 else 0 end">
        <v:form name="frm_edit_path" action="http_add_path.vspx" method="POST" type="simple">
          <table class="ctl_grp" align="left" border="0" cellspacing="0" cellpadding="3">
            <tr>
              <th align="left">Virtual Directory Information</th>
              <td/>
            </tr>
            <tr>
              <td>Host</td>
              <td><v:label name="l_host" value="--self._httphost"/></td>
            </tr>
            <tr>
              <td>Interface</td>
              <td><v:label name="l_iface" value="--self._host"/></td>
            </tr>
            <tr>
              <td/>
              <td>
                <v:check-box name="c_defdir" value="on" xhtml_id="c_defdir" xhtml_disabled="--case self.edit_host when '*ini*' then 'disabled' when '*sslini*' then 'disabled' else '@@hidden@@' end"/>
                <label for="c_defdir">Default directory</label>
              </td>
            </tr>
            <tr>
              <td><label for="t_lpath">
              <?vsp
                if (left(self.ppath, 7) = 'http://')
                  http('Virtual directory path');
                else
                  http('Path');
              ?>
              </label></td>
              <td>
                <v:text name="t_lpath" xhtml_id="t_lpath" />
              </td>
            </tr>
            <tr>
              <td/>
	      <td><v:check-box name="c_is_dav" value="on" xhtml_id="c_is_dav" xhtml_onchange="javascript: changePhysicalFolder(this, this.form)"/>
              <label for="c_is_dav">Physical path is a WebDAV repository</label></td>
            </tr>
            <tr>
              <td/>
              <td>
                <v:check-box name="c_inherit" value="yes" xhtml_id="c_inherit"/>
                <label for="c_inherit">Map the logical path to a single page</label>
              </td>
            </tr>
            <tr>
              <td><label for="t_ppath">
              <?vsp
                if (left(self.ppath, 7) = 'http://')
                  http('Proxy to');
                else
                  http('Physical path');
              ?>
              </label></td>
              <td>
                <v:text name="t_ppath" xhtml_id="t_ppath"/>
                <input type="button" name="browsepath" value="Browse..."
		 onClick="javascript: doBrowse('?sid=<?V self.sid ?>&realm=<?V self.realm ?>', 't_ppath', 't_ppath', 1, document.frm_edit_path.c_is_dav.checked)" />
              </td>
            </tr>
            <tr>
              <td><label for="t_defpage">Default page</label></td>
              <td><v:text name="t_defpage" xhtml_id="t_defpage"/>
                <input type="button" name="browsedefpage" value="Browse..."
                onClick="javascript: doBrowse('?sid=<?V self.sid ?>&realm=<?V self.realm ?>', 't_defpage', 't_ppath', 0, document.frm_edit_path.c_is_dav.checked)" />
              </td>
            </tr>
            <tr>
              <th>Permissions</th>
              <td/>
            </tr>
            <tr>
              <td/>
              <td align="left">
                <v:check-box name="c_dirbrowsing" value="on" xhtml_id="c_dirbrowsing"/>
                <label for="c_dirbrowsing">Allow Directory Browsing</label>
              </td>
            </tr>
            <tr>
              <td><label for="t_ssbrow">Style Sheet for browsing</label></td>
              <td><v:text name="t_ssbrow" xhtml_id="t_ssbrow"/>
                <input type="button" name="browse_ssbrow" value="Browse..."
                onClick="javascript: doBrowse('?sid=<?V self.sid ?>&realm=<?V self.realm ?>', 't_ssbrow', 't_ssbrow', 0, document.frm_edit_path.c_is_dav.checked)" />
              </td>
            </tr>
            <tr>
              <td/>
              <td>
                <v:check-box name="c_xmlexec" value="on" xhtml_id="c_xmlexec"/>
                <label for="c_xmlexec">Allow XML template execution</label>
              </td>
            </tr>
            <tr>
              <td/>
              <td>
                <v:check-box name="c_ovrexec" value="on" xhtml_id="c_ovrexec"/>
                <label for="c_ovrexec">Override exec permission flag in WebDAV</label>
              </td>
            </tr>
            <tr>
              <td/>
              <td>
                <v:check-box name="c_persistvars" value="on" xhtml_id="c_persistvars"/>
                <label for="c_persistvars">Allow persistent session variables</label>
              </td>
            </tr>
            <tr>
              <td><label for="dl_vspuser">VSP User</label></td>
              <td>
                <v:data-list xhtml_id="dl_vspuser"
                             name="dl_vspuser"
			     sql="select ' __none' as UNAME, 'none' as UFNAME from DB.DBA.SYS_USERS union select U_NAME, U_NAME from DB.DBA.SYS_USERS where U_SQL_ENABLE = 1 and U_IS_ROLE = 0 order by UNAME" key-column="UNAME" value-column="UFNAME" defvalue="--case when self.vspuser='' then ' __none' else self.vspuser end"
                             width="235"
                             height="24"/>
              </td>
            </tr>
            <tr>
              <td valign="top"><label for="t_global_opt_misc">Advanced Options</label></td>
              <td>
                <v:textarea name="t_global_opt_misc" xhtml_cols="30" xhtml_rows="5" xhtml_id="t_global_opt_misc"/>
              </td>
            </tr>
            <tr>
              <th align="left">Authentication options</th>
              <td/>
            </tr>
            <tr>
              <td><label for="s_authmethod">Method</label></td>
              <td>
                <SELECT NAME="s_authmethod" onChange="defineOpts(this);" id="s_authmethod">
                  <?vsp
                    if (self.edit_host <> '*sslini*') {
                    http( '<OPTION VALUE="none"'); if (self.security in (NULL, 0)) http (' selected="true"'); http('>None</OPTION>');
                          http( '<OPTION VALUE="basic"'); if (isstring (self.security) and lower(self.security) = 'basic') http (' selected="true"'); http('>Basic</OPTION>');
                          http( '<OPTION VALUE="digest"'); if (isstring (self.security) and lower(self.security) = 'digest') http (' selected="true"'); http('>Digest</OPTION>');
                        }
                        http( '<OPTION VALUE="SSL"'); if (isstring (self.security) and lower(self.security) = 'ssl') http (' selected="true"'); http('>SSL</OPTION>');
                  ?>
                </SELECT>
              </td>
            </tr>
            <tr>
              <td><label for="t_auth_realm">Realm</label></td>
              <td><v:text name="t_auth_realm" xhtml_id="t_auth_realm"/></td>
            </tr>
            <tr>
              <td><label for="t_auth_func">Authentication Function</label></td>
              <td>
                <v:text name="t_auth_func" xhtml_id="t_auth_func"/>
                <v:browse-button name="br_authook" value="Browse..."
                        selector="vdir_browser.vspx"
                        child-window-options="scrollbars=yes, resizable=yes, menubar=no, height=630, width=600"
                        browser-options="caption=Choose+authentication+function&amp;dir-separator=.&amp;quote-char=&amp;filter-char=%25&amp;content-proc=db.dba.vproc_browse_proc&amp;content-meta-proc=db.dba.vproc_browse_proc_meta&amp;multi-sel=0&amp;dir-sel=0&amp;&amp;retname=t_auth_func">
                  <v:field name="t_auth_func" />
                </v:browse-button>
              </td>
            </tr>
            <tr>
              <td valign="top"><label for="t_auth_opt">Advanced Auth Options</label></td>
              <td>
                <v:textarea name="t_auth_opt" xhtml_cols="30" xhtml_rows="5" xhtml_id="t_auth_opt"/>
              </td>
            </tr>
            <tr>
              <td valign="top"><label for="t_cors">Cross-Origin Resource Sharing</label></td>
              <td>
		  <v:text name="t_cors" xhtml_cols="30" xhtml_rows="3" xhtml_size="70" xhtml_id="t_cors"/><br/>
                <v:check-box name="c_cors_rej" value="on" xhtml_id="c_cors_rej"/>
                <label for="c_cors_rej">Reject Unintended CORs</label>
              </td>
            </tr>
            <tr>
              <td/>
              <td>
              </td>
            </tr>
            <tr>
              <td><label for="t_after_func">Post-processing Function</label></td>
              <td>
                <v:text name="t_after_func" xhtml_id="t_after_func"/>
                <v:browse-button name="br_afterhook" value="Browse..."
                  selector="vdir_browser.vspx"
                  child-window-options="scrollbars=yes, resizable=yes, menubar=no, height=630, width=600"
                  browser-options="caption=Choose+post-processing+function&amp;dir-separator=.&amp;quote-char=&amp;filter-char=%25&amp;content-proc=db.dba.vproc_browse_proc&amp;content-meta-proc=db.dba.vproc_browse_proc_meta&amp;multi-sel=0&amp;dir-sel=0&amp;&amp;retname=t_after_func">
                  <v:field name="t_after_func" />
                </v:browse-button>
              </td>
            </tr>
            <tr>
              <td colspan="2" align="center">
                <v:button action="simple" name="cancel" value="Cancel">
                  <v:on-post>
                    <v:script>
                      <![CDATA[
                      self.mode := '';
                      self.vc_data_bind(e);
		      self.vc_redirect (sprintf ('http_serv_mgmt.vspx?openat=%s', self._host));
                      ]]>
                    </v:script>
                  </v:on-post>
                </v:button>
                <v:button action="simple" name="save" value="Save Changes">
                  <v:on-post>
                    <v:script>
                      <![CDATA[
                      declare st, msg varchar;
                      msg := '';

                      st := '00000'; msg := '';
                      declare exit handler for sqlstate '*', not found {
                        st := __SQL_STATE; msg := __SQL_MESSAGE;
                        goto catch;
                      };

                      commit work;

                      --httphost := self.t_httphost.ufl_value;
                      --host := self.t_host.ufl_value;
                      --port := self.t_port.ufl_value;
                      self.is_dav := self.c_is_dav.ufl_selected;
                      self.lpath := coalesce(self.t_lpath.ufl_value,self.lpath);
                      self.lpath := replace( self.lpath, '\\', '/');
                      if( "RIGHT"(self.lpath, 1) = '/')
                        self.lpath := rtrim(self.lpath, '/');
                      if( "LEFT"(self.lpath, 1) <> '/')
                        self.lpath := concat('/', self.lpath);
                      self.ppath := self.t_ppath.ufl_value;
		      self.ppath := replace( self.ppath, '\\', '/');

		      if ("LEFT"(self.ppath, 1) <> '/' and self.ppath not like 'http%://%')
		        self.ppath := concat ('/', self.ppath);

                      if( "RIGHT"(self.ppath, 1) <> '/' and not self.c_inherit.ufl_selected)
                        self.ppath := concat (self.ppath, '/');
                      self.defpage := self.t_defpage.ufl_value;
                      self.ssbrow := self.t_ssbrow.ufl_value;
                      {
                        declare sl integer;
                        self.defpage := replace( self.defpage, '\\', '/');
                        sl := strrchr (self.defpage , '/');
                        if (sl is not null)
                          self.defpage := substring (self.defpage, sl + 2, length (self.defpage));
                        if( self.defpage = '' )
                          self.defpage := '';
                      }
                      self.defdir := self.c_defdir.ufl_selected;

                      self.dirbrowsing := self.c_dirbrowsing.ufl_selected;
                      self.xmlexec := self.c_xmlexec.ufl_selected;
                      self.ovrexec := self.c_ovrexec.ufl_selected;
		      self.persistvars := self.c_persistvars.ufl_selected;
		      if (self.c_inherit.ufl_selected)
		        self.noinherit := 'yes';
	              else
		        self.noinherit := null;
                      self.vspuser := self.dl_vspuser.ufl_value;
                      if( self.vspuser = ' __none' or self.vspuser = '' ) self.vspuser := NULL;
                      if( self.soapuser = ' __none' or self.soapuser = '' ) self.soapuser := NULL;
                      self.security := get_keyword ('s_authmethod', params, NULL);
                      if ( self.security = 'none') self.security := NULL;
                      self.auth_realm := self.t_auth_realm.ufl_value;
                      if(self.auth_realm = '') self.auth_realm := NULL;
                      self.auth_func := self.t_auth_func.ufl_value;
                      if(self.auth_func = '') self.auth_func := NULL;
                      self.after_func := self.t_after_func.ufl_value;
                      if(self.after_func = '') self.after_func := NULL;
		      if (self.c_cors_rej.ufl_selected)
		        self.cors_rej := 1;
	              else
		        self.cors_rej := 0;
	              self.cors := get_keyword ('t_cors', params, NULL);
                      self.auth_opt := self.t_auth_opt.ufl_value;
                      if (self.auth_opt = '' or self.auth_opt = 0)
                        self.auth_opt := NULL;
                      else if(isstring (self.auth_opt) ) {
		          declare tmp, inx any;
                          self.auth_opt := replace (self.auth_opt, '\r', '');
                          self.auth_opt := replace (self.auth_opt, '\n', '');
                          self.auth_opt := trim (self.auth_opt);
                          self.auth_opt := replace (self.auth_opt, ';', '&');
                          if ("RIGHT" (self.auth_opt, 1) = '&')
                            self.auth_opt := "LEFT" (self.auth_opt, length (self.auth_opt) - 1);
                          tmp := split_and_decode (self.auth_opt);
			  for (inx := 0; inx < length (tmp); inx := inx + 2)
			     {
                                if (tmp[inx] in ('https_verify', 'https_cv_depth'))
				  tmp[inx+1] := atoi (tmp[inx+1]);
			     }
			  self.auth_opt := tmp;
                      }

                      if (self.soap_opt = '' or self.soap_opt = 0)
                        self.soap_opt := NULL;
                      else if( isstring (self.soap_opt) ) {
                        declare spath any;
                        spath := WS.WS.HREF_TO_ARRAY (self.lpath,'');
                        if( length(spath) < 1 )
                          spath := vector ('SOAP');
                        self.soap_opt := replace (self.soap_opt, '\r', '');
                        self.soap_opt := replace (self.soap_opt, '\n', '');
                        self.soap_opt := trim (self.soap_opt);
                        self.soap_opt := replace (self.soap_opt, ';', '&');

                        if( "RIGHT"(self.soap_opt, 1) = '&' )
                          self.soap_opt := "LEFT"(self.soap_opt, length (self.soap_opt) - 1);

                        self.soap_opt := replace (self.soap_opt, '<SERVICE_NAME>', spath[0]);
                        self.soap_opt := split_and_decode (self.soap_opt);
                      }

                      self.global_opts := split_and_decode (rtrim (trim (replace (replace (self.t_global_opt_misc.ufl_value, '\r', ''), '\n', '')), ';'), 0, '\0\0;=');
                      if( self.xmlexec <> 0 )
                        self.global_opts := vector_concat (self.global_opts, vector ('xml_templates', 'yes'));
                      if (self.ovrexec <> 0)
                        self.global_opts := vector_concat ( coalesce (self.global_opts, vector()), vector('executable', 'yes'));
                      if (self.ssbrow <> 0)
		        self.global_opts := vector_concat ( coalesce (self.global_opts, vector()), vector('browse_sheet', self.ssbrow));
			if (self.noinherit is not null or self.ppath = '/!sparql/')
		        self.global_opts := vector_concat ( coalesce (self.global_opts, vector()), vector('noinherit', 'yes'));
		      else if (get_keyword ('noinherit', self.global_opts) is not null)
		        {
			  declare new_opts any;
			  declare i, l, j int;
			  l := length (self.global_opts);
			  new_opts := make_array (l - 2);
			  for (i := 0, j := 0; i < l; i := i + 2)
			    {
			      if (self.global_opts[i] <> 'noinherit')
			        {
			          new_opts [j] := self.global_opts[i];
				  new_opts [j+1] := self.global_opts[i+1];
				  j := j + 2;
				}
			    }
			  self.global_opts := new_opts;
		        }
	              if (length (self.cors))
		        {
			  self.global_opts := vector_concat ( coalesce (self.global_opts, vector()),
			    vector('cors', self.cors, 'cors_restricted', self.cors_rej));
			}

		      if (self.lpath <> self.edit_lpath and exists (select 1 from DB.DBA.HTTP_PATH where HP_HOST = self._httphost and HP_LISTEN_HOST = self._host and HP_LPATH = self.lpath))
		        {
                              self.vc_is_valid := 0;
                              self.vc_error_message := 'Virtual directory ' || self.lpath || ' already exists.';
                              return;
                        }

                      commit work;
		      if (length (self.edit_lpath))
		        VHOST_REMOVE (self._httphost, self._host, self.edit_lpath, 0);

                      exec( 'VHOST_DEFINE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', st, msg,
                            vector( self._httphost, self._host, self.lpath, self.ppath,
                            self.is_dav, self.dirbrowsing, self.defpage,
                            self.auth_func, self.auth_realm, self.after_func, self.vspuser,
                            self.soapuser, self.security, self.persistvars, self.soap_opt,
                            self.auth_opt, self.global_opts, self.defdir));
                    catch:
                      if (msg <> '') {
                        rollback work;
                        self.vc_is_valid := 0;
                        self.vc_error_message := msg;
                      }
                      else {
                        self.mode := '';
			self.vc_data_bind(e);
			self.vc_redirect (sprintf ('http_serv_mgmt.vspx?openat=%s', self._host));
                      }
                      ]]>
                    </v:script>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
        </v:form>
      </v:template>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
