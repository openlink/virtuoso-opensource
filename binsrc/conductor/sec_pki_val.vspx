<?xml version="1.0"?>
<!--
 -
 -  $Id: sec_pki_val.vspx,v 1.4 2013/06/14 13:17:59 trueg Exp $
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="pki_1" decor="yacutia_decor.vspx" style="yacutia_style.xsl"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1"
        xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Public Key Infrastructure</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="inst" type="db.dba.web_app" default="null" persist="0" />
      <v:variable name="wa_name" type="varchar" default="null" persist="0" param-name="wa_name"/>
      <v:variable name="is_public" type="int" default="null" persist="0"/>
      <v:variable name="is_visible" type="int" default="null" persist="0"/>
      <v:variable name="iid" type="int" default="null" persist="0" param-name="wai_id"/>
      <v:variable name="iname" type="varchar" default="null" persist="0"/>
      <v:variable name="idesc" type="varchar" default="null" persist="0"/>
      <v:variable name="_app" type="varchar" default="null" persist="0"/>
      <v:variable name="_host" type="varchar" default="null" persist="0"/>
      <v:variable name="sslHosts" type="any" default="null" persist="0"/>
      <v:variable name="hosts" type="any" default="null" persist="0"/>
      <v:variable name="sslHostLabels" type="any" default="null" persist="0"/>
      <v:variable name="hostLabels" type="any" default="null" persist="0"/>
      <v:variable name="remove_mode" type="integer" default="0" persist="0"/>
      <v:variable persist="temp" name="r_count" type="integer" default="0"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem name="PKI" value="Public Key Infrastructure"/>
    </vm:menu>
    <vm:header caption="Public Key Infrastructure">
    </vm:header>
    <vm:pagebody>
      <vm:help id="sec_pki" sect=""/>
      <v:form name="form1" type="simple" method="POST">
        <!-- top of security layout -->
        <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
          <tr valign='top'>
            <td>
              <table cellpadding='10' cellspacing='0' border='0' width='100%'>
                <tr>
                  <td>
                    <table cellpadding="0" cellspacing="0" border="0">
                      <tr>
                        <td class="page_tab_selected" align="center">
                          Public Key Infrastructure
                        </td>
                        <td class="page_tab" align="center">
                          <v:url xhtml_style="page_tab" url="sec_auth_serv.vspx" value="Access Control" render-only="1"/>
                        </td>
                        <td class="page_tab_empty" align="right" width="100%">
                        </td>
                      </tr>
                    </table>
                    <table class="tab_page">
                      <tr>
                        <td valign="top">
                          <h3>Configure Virtuoso Authentication Layer (VAL) Endpoints</h3>
                          <p>VAL provides OpenID, BrowserID (aka Mozilla Persona), and OAuth authentication support to Virtuoso, the Sponger, and ODS. Some of these authentication systems require an https callback URL (for example Box.com).
                            To this end VAL requires a mapping between an http and an https virtual directory. This mapping can be setup here.</p>
                          <!-- end of top security layout -->
                          <v:data-source name="vdds" expression-type="sql" nrows="-1" initial-offset="0">
                            <v:expression>
                              <![CDATA[
                                select
                                  VH_HTTP_HOST,
                                  VH_HTTPS_HOST
                                from
                                  VAL.DBA.VAL_HOSTS
                              ]]>
                            </v:expression>
                            <v:column name="VH_HTTP_HOST" label="Http Virtual Dir" />
                            <v:column name="VH_HTTPS_HOST" label="Https Virtual Dir" />
                          </v:data-source>
                          <table class="listing">
                            <v:template name="header11" type="simple">
                              <thead>
                                <tr class="listing_header_row">
                                  <th>HTTP Virtual Directory</th>
                                  <th>HTTPS Virtual Directory</th>
                                  <th>Actions</th>
                                </tr>
                              </thead>
                            </v:template>
                            <v:data-set name="vd" scrollable="1" edit="1" data-source="self.vdds" width="80">
                              <v:template type="repeat">
                                <v:template type="if-not-exists">
                                  <tr class="listing_count">
                                    <td class="listing_count" colspan="3">
                                      No VAL Virtual Directory mappings have been created yet
                                    </td>
                                  </tr>
                                </v:template>
                                <v:template type="browse">
                                  <?vsp
                                    self.r_count := self.r_count + 1;
                                    http (sprintf ('<tr class="%s">', case when mod (self.r_count, 2) then 'listing_row_odd' else 'listing_row_even' end));
                                  ?>
                                  <td class="listing_col">
                                    <v:label name="http_host" value="--(control.vc_parent as vspx_row_template).te_rowset[0]" />
                                  </td>
                                  <td class="listing_col">
                                    <v:label name="https_host" value="--(control.vc_parent as vspx_row_template).te_rowset[1]" />
                                  </td>
                                  <td class="listing_col_action">
                                    <b>
                                      <v:button action="simple" style="image" name="vd_delete" value="images/icons/trash_16.png" xhtml_alt="Delete" xhtml_title="Delete" xhtml_hspace="3" text="Remove">
                                        <v:on-post>
                                          <v:script>
                                            <![CDATA[
                                              commit work;
                                              declare exit handler for sqlstate '*'
                                              {
                                                self.vc_is_valid := 0;
                                                self.vc_error_message := concat (__SQL_STATE,' ',__SQL_MESSAGE);
                                                rollback work;
                                                return;
                                              };
                                              delete from VAL.DBA.VAL_HOSTS
                                                where
                                                  VH_HTTP_HOST = cast((control.vc_parent as vspx_row_template).te_rowset[0] as varchar) and
                                                  VH_HTTPS_HOST = cast((control.vc_parent as vspx_row_template).te_rowset[1] as varchar);
                                              self.vc_redirect ('sec_pki_val.vspx');
                                            ]]>
                                          </v:script>
                                        </v:on-post>
                                      </v:button>
                                    </b>
                                  </td>
                                  <?vsp
                                    http ('</tr>');
                                  ?>
                                </v:template>
                              </v:template>
                            </v:data-set>
                          </table>
                          <div>

                            <v:before-data-bind>
                              <![CDATA[
                                -- Get a list of all possible hosts
                                self.hosts := vector ();
                                self.sslHosts := vector ();
                                self.hostLabels := vector ();
                                self.sslHostLabels := vector ();
                                for (select distinct HP_SECURITY, HP_HOST, HP_LISTEN_HOST, VAL.DBA.normalize_host(HP_HOST,HP_LISTEN_HOST) as host from HTTP_PATH) do
                                {
                                  if (HP_SECURITY is null)
                                  {
                                    if (not strcontains (host, ':'))
                                      host := host || ':80';
                                    self.hostLabels :=  vector_concat (self.hostLabels, vector (host));
                                    self.hosts := vector_concat (self.hosts, vector (HP_HOST || '|' || HP_LISTEN_HOST));
                                  }
                                  else if(HP_SECURITY = 'SSL')
                                  {
                                    -- if not default ssl port is defined the *sslini* listeners are useless
                                    if (HP_LISTEN_HOST <> '*sslini*' or server_https_port () is not null)
                                    {
                                      if (not strcontains (host, ':'))
                                        host := host || ':443';
                                      self.sslHostLabels := vector_concat (self.sslHostLabels, vector (host));
                                      self.sslHosts := vector_concat (self.sslHosts, vector (HP_HOST || '|' || HP_LISTEN_HOST));
                                    }
                                  }
                                }
                                ]]>
                            </v:before-data-bind>

                            <div>
                              <h4>Add a new VAL SSL host mapping:</h4>
                                <v:form name="form_new_val_host" type="simple" method="POST">
                                <p>Create or update a mapping from HTTP host
                                  <v:select-list name="http_host">
                                    <v:after-data-bind>
                                      <![CDATA[
                                        (control as vspx_select_list).vsl_items := self.hostLabels;
                                        (control as vspx_select_list).vsl_item_values := self.hosts;
                                      ]]>
                                    </v:after-data-bind>
                                  </v:select-list>

                                  to HTTPS host

                                  <v:select-list name="https_host">
                                    <v:after-data-bind>
                                      <![CDATA[
                                        (control as vspx_select_list).vsl_items := self.sslHostLabels;
                                        (control as vspx_select_list).vsl_item_values := self.sslHosts;
                                      ]]>
                                    </v:after-data-bind>
                                  </v:select-list>
                                  <v:button action="simple" name="val_create" value="Create mapping">
                                    <v:on-post>
                                      <v:script>
                                        <![CDATA[
                                          declare _http_host, _https_host, _http_vhost, _http_lhost, _https_vhost, _https_lhost, _cert, _key varchar;
                                          _http_host := get_keyword('http_host', self.vc_event.ve_params);
                                          _https_host := get_keyword('https_host', self.vc_event.ve_params);

                                          -- above we encoded the vhost and lhost values into the select values separated by "|"
                                          _http_vhost := split_and_decode (_http_host, 0, '\0\0|')[0];
                                          _http_lhost := split_and_decode (_http_host, 0, '\0\0|')[1];
                                          _https_vhost := split_and_decode (_https_host, 0, '\0\0|')[0];
                                          _https_lhost := split_and_decode (_https_host, 0, '\0\0|')[1];

                                          -- Get the cert and key which is used for this https listener. HTTPS listeners are setup implicitely by using the same auth options in all vhosts. So if the setup is not broken we can use any of the vhosts.
                                          _cert := (select top 1 get_keyword('https_cert', deserialize(HP_AUTH_OPTIONS)) from DB.DBA.HTTP_PATH where get_keyword('https_cert', deserialize(HP_AUTH_OPTIONS)) is not null and HP_LISTEN_HOST = _https_lhost and HP_HOST = _https_vhost);
                                          _key := (select top 1 get_keyword('https_key', deserialize(HP_AUTH_OPTIONS)) from DB.DBA.HTTP_PATH where get_keyword('https_cert', deserialize(HP_AUTH_OPTIONS)) is not null and HP_LISTEN_HOST = _https_lhost and HP_HOST = _https_vhost);

                                          VAL.DBA.setup_val_host (_http_vhost, _http_lhost, _https_vhost, _https_lhost, _cert, _key);

                                          self.vc_redirect ('sec_pki_val.vspx');
                                        ]]>
                                      </v:script>
                                    </v:on-post>
                                  </v:button>
                                </p>
                              </v:form>
                            </div>

                            <v:button action="simple" name="back" value="Back">
                              <v:on-post><![CDATA[
                                self.vc_redirect ('sec_pki_2.vspx');
                              ]]></v:on-post>
                            </v:button>
                          </div>
                        <!-- bottom of security layout -->
                        </td>
                      </tr>
                    </table>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
        </table>
        <!-- end of bottom security layout -->
      </v:form>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>

