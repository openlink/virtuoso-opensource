<?xml version="1.0"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="ie_page" decor="yacutia_decor.vspx" style="yacutia_style.xsl" vm:owner="yacutia_trans_page" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN" fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Export Schema</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="qual" persist="0" type="varchar" default="'%'" param-name="cat"/>
      <v:variable name="sch" persist="0" type="varchar" default="'%'" param-name="sch"/>
      <v:variable name="is_dav_src" persist="0" type="integer" default="0" />
    </vm:variables>
    <vm:menu>
      <vm:menuitem value="Export Schema"/>
    </vm:menu>
    <vm:header caption="Export Schema"/>
    <vm:pagebody>
      <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
	<tr valign='top'>
	  <td>
	    <v:template type="simple" name="sc_1" enabled="0">
      <tr>
	<td colspan="3">
	  <img class="dialog_icon" src="images/icons/about_32.png" alt="Stop" title="Stop"/>
	  The Schema was exported successfully.<br />
	  <v:url name="back1" value="Back to Schema Objects" url="databases.vspx"/>
	</td>
      </tr>
	    </v:template>
	    <v:template type="simple" name="sc_2">
	    <v:form name="form1" type="simple" method="POST">
	      <v:on-post>
		if (e.ve_button = control and e.ve_initiator = self.src_type)
		{
		self.is_dav_src := 0;
		if (get_keyword ('src_type', e.ve_params))
		self.is_dav_src := 1;
		}
		else if (e.ve_button = control and e.ve_initiator = self.t_fqual)
		{
		  self.qual := self.t_fqual.ufl_value;
		  self.t_fuser.vc_data_bind (e);
		  self.t_fname.vc_data_bind (e);
		}
		else if (e.ve_button = control and e.ve_initiator = self.t_fuser)
		{
		  self.sch := self.t_fuser.ufl_value;
		  self.t_fname.vc_data_bind (e);
		}
	      </v:on-post>
	      <table class="ctl_grp" align="left" border="0" cellspacing="0" cellpadding="3">
		<tr>
		  <td align="left">
		    <img src="images/icons/filter_32.png" alt="Filter" title="Filter"/>
		  </td>
		  <td>
		    <table>
		      <tr>
			<td>Match Catalog</td>
			<td>
			  <v:data-list name="t_fqual" value="--self.qual"
			    sql="
			    select top 1 '%' as TABLE_QUAL from SYS_KEYS union all
			    select distinct name_part (KEY_TABLE, 0) as TABLE_QUAL from SYS_KEYS
			    union select distinct name_part (P_NAME, 0) as TABLE_QUAL from SYS_PROCEDURES
			    "
			    key-column="TABLE_QUAL" value-column="TABLE_QUAL"
			    auto-submit="1"
			     />
			  <!--v:text name="t_fqual" value="-#-self.qual" type="simple"></v:text-->
			</td>
		      </tr>
		      <tr>
			<td>Match Schema</td>
			<td>
			  <v:data-list name="t_fuser" value="--self.sch"
			    sql="
			    select top 1 '%' as TABLE_OWNER from SYS_KEYS union all
			    select distinct name_part (KEY_TABLE, 1) as TABLE_OWNER from SYS_KEYS
			    where name_part (KEY_TABLE, 0) like self.qual
			    union select distinct name_part (P_NAME, 1) as TABLE_OWNER from SYS_PROCEDURES
			    where name_part (P_NAME, 0) like self.qual
			    "
			    key-column="TABLE_OWNER" value-column="TABLE_OWNER"
			    auto-submit="1"
			     />
			  <!--v:text name="t_fuser" value="-#-self.sch" type="simple"></v:text-->
			</td>
		      </tr>
		      <tr>
			<td>Match Name</td>
			<td>
			  <v:data-list name="t_fname"
			    default_value="%"
			    sql="
			    select top 1 '%' as TABLE_NAME from SYS_KEYS union all
			    select distinct name_part (KEY_TABLE, 2) as TABLE_NAME from SYS_KEYS
			    where name_part (KEY_TABLE, 0) like self.qual and name_part (KEY_TABLE, 1) like self.sch
			    "
			    key-column="TABLE_NAME" value-column="TABLE_NAME"
			     />

			  <!--v:text name="t_fname" default_value="%" type="simple">
			  </v:text-->
		        </td>
		      </tr>
		    </table>
		  </td>
		</tr>
		<tr>
		  <td>Path for result</td>
		  <td><v:text name="t_dumpdir" value="" xhtml_size="70" type="simple"></v:text>
		    <?vsp
		    if (self.is_dav_src)
		    {
		    ?>
		    <vm:dav_browser
		      ses_type="yacutia"
		      render="popup"
		      list_type="details"
		      flt="yes" flt_pat=""
		      path="DAV"
		      browse_type="both"
		      w_title="DAV Browser"
		      title="DAV Browser"
		      advisory="Choose resource to store."
		      lang="en" return_box="t_dumpdir"/>
		    <?vsp
		    }
		    else
		    {
		    ?>
		    <vm:file_browser ses_type="yacutia"
		      render="popup"
		      list_type="details"
		      flt="yes"
		      flt_pat=""
		      path="."
		      browse_type="both"
		      w_title="File Browser"
		      title="File Browser"
		      advisory="Choose file to store."
		      lang="en"
		      return_box="t_dumpdir"/>
		    <?vsp
		    }
		    ?>
		  </td>
		</tr>
		<tr>
		  <td colspan="2" align="left">
		    <v:check-box xhtml_id="t_src" name="src_type" value="1" auto-submit="1">
		      <v:before-render>
			control.ufl_selected := self.is_dav_src;
		      </v:before-render>
		    </v:check-box>
		    <label for="t_src">WebDAV source</label>
		  </td>
		</tr>
		<tr>
		  <td colspan="3" align="left">Export Objects:</td>
		  <td/>
		</tr>
		<tr>
		  <td/>
		  <td>
		    <v:check-box name="cb_tdef" initial-checked="1" value="1" xhtml_id="cb_tdef"/>
		    <label for="cb_tdef">Table Definitions</label>
		  </td>
		</tr>
		<tr>
		  <td/>
		  <td>
		    <v:check-box name="cb_trig" initial-checked="1" value="1" xhtml_id="cb_trig"/>
		    <label for="cb_trig">Triggers</label>
		  </td>
		</tr>
		<tr>
		  <td/>
		  <td>
		    <v:check-box name="cb_fks" initial-checked="1" value="1" xhtml_id="cb_fks"/>
		    <label for="cb_fks">Foreign Keys</label>
		  </td>
		</tr>
		<tr>
		  <td/>
		  <td>
		    <v:check-box name="cb_sps" initial-checked="1" value="1" xhtml_id="cb_sps"/>
		    <label for="cb_sps">Stored Procedures</label>
		  </td>
		</tr>
		<tr>
		  <td/>
		  <td>
		    <v:check-box name="cb_views" initial-checked="1" value="1" xhtml_id="cb_views"/>
		    <label for="cb_views">Views</label>
		  </td>
		</tr>
	    <tr>
	      <td colspan="2" align="right">
		<v:button name="b_export" action="simple" value="Export">
		  <v:on-post><![CDATA[
		    declare ses any;
		    declare q, o, n varchar;

		    q := self.t_fqual.ufl_value;
		    o := self.t_fuser.ufl_value;
		    n := self.t_fname.ufl_value;

		    ses := string_output ();
		    if (self.cb_tdef.ufl_selected)
		      {
		        for select distinct KEY_TABLE from SYS_KEYS where
		             name_part (KEY_TABLE, 0) like q and
		             name_part (KEY_TABLE, 1) like o and
		             name_part (KEY_TABLE, 2) like n
		          do
			    {
			      http (create_table_sql (KEY_TABLE, self.cb_fks.ufl_selected), ses);
			      http ('\n\n', ses);
			    }
		      }
		    if (self.cb_trig.ufl_selected)
		      {
		        for select distinct KEY_TABLE from SYS_KEYS where
		             name_part (KEY_TABLE, 0) like q and
		             name_part (KEY_TABLE, 1) like o and
		             name_part (KEY_TABLE, 2) like n
		          do
			    {
			      for select coalesce (T_TEXT, blob_to_string (T_MORE)) PTEXT from SYS_TRIGGERS where
			         0 = casemode_strcmp (T_TABLE, KEY_TABLE) do
			       {
			         http (PTEXT, ses);
			         http (';\n\n', ses);
			       }
			    }
		      }
		    if (self.cb_sps.ufl_selected)
		      {
		        for select coalesce (P_TEXT, blob_to_string (P_MORE)) PTEXT from SYS_PROCEDURES where
			  name_part (P_NAME, 0) like q and name_part (P_NAME, 1) like o and name_part (P_NAME, 2) like n do
			  {
			    http (PTEXT, ses);
			    http (';\n\n', ses);
			  }
		      }
		    if (self.cb_views.ufl_selected)
		      {
		        for select coalesce (V_TEXT, blob_to_string (V_EXT)) VTEXT from SYS_VIEWS where
			  name_part (V_NAME, 0) like q and name_part (V_NAME, 1) like o and name_part (V_NAME, 2) like n do
			  {
			    http (VTEXT, ses);
			    http (';\n\n', ses);
			  }
		      }
                     commit work;
  declare exit handler for sqlstate '*'
    {
      if (__SQL_STATE = '42000' and left (__SQL_MESSAGE, 5) = 'FA023')
        self.vc_error_message := concat ('Current Virtuoso configuration does not allow write access to',
                                         'given filesystem path. Please see documentation for DirsAllowed directive',
                                         'in virtuoso ini file.');
      else
        self.vc_error_message := __SQL_MESSAGE;
        self.vc_is_valid := 0;
        return;
    };
  if (not length (self.t_dumpdir.ufl_value))
    {
      self.vc_is_valid := 0;
      self.vc_error_message := 'The path to the file to save must not be empty.';
      return;
    }
              if (self.is_dav_src)
	        {
		  declare own, grp, perms, msg any;
		  if (dav_path_validate (self.t_dumpdir.ufl_value, own, grp, perms, msg) <> 1)
		    {
		      self.vc_error_message := msg;
		      self.vc_is_valid := 0;
		      return;
		    }
		  if (dav_check_permissions(connection_get('vspx_user'), perms, '110', own, grp, msg) <> 1)
		    {
		      self.vc_error_message := msg;
		      self.vc_is_valid := 0;
		      return;
		    }
		  YAC_DAV_RES_UPLOAD (self.t_dumpdir.ufl_value, string_output_string (ses), 'text/plain', '110100000N',
		    connection_get('vspx_user'), null, connection_get('vspx_user'));
		}
              else
	        {
		  declare _u_id, _u_group int;
		  _u_id := -1; _u_group := -1;
		  whenever not found goto nfuser;
		  select U_ID, U_GROUP into _u_id, _u_group from DB.DBA.SYS_USERS where U_NAME = connection_get ('vspx_user');
		  nfuser:
		  if (not (_u_id = 0 or _u_group = 0))
		    {
		      self.vc_is_valid := 0;
		      self.vc_error_message := 'Saving in the file system is allowed to dba only.';
		      return;
		    }
	 	  string_to_file ( self.t_dumpdir.ufl_value, ses, -2 );
		}
		self.sc_2.vc_enabled := 0;
		self.sc_1.vc_enabled := 1;
		self.sc_1.vc_data_bind (e);
		    ]]>
		  </v:on-post>
	      </v:button></td>
	    </tr>
	  </table>
	</v:form>
      </v:template>
      </td>
    </tr>
  </table>
</vm:pagebody>
  </vm:pagewrapper>
</v:page>
