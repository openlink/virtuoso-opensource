<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="db_rdf_view_3"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        fast-render="1"
        xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
  <vm:pagetitle>Linked Data View definition</vm:pagetitle>
  <vm:pagewrapper>
  <vm:menu>
  </vm:menu>
  <vm:variables>
    <v:variable name="is_popup" persist="0" type="integer" default="0" />

      <v:variable persist="0" name="db_object_to_process" type="any" default="null"/>
    <v:variable persist="0" name="view_used" type="int" default="0"/>
      <v:variable persist="0" name="base_url" type="any" default="null" param-name="host"/>
      <v:variable persist="0" name="voidst" type="int" default="0" param-name="st"/>
      <v:variable name="exec_ret" type="any" default="null" persist="temp"/>
      <v:variable name="sync_ret" type="any" default="null" persist="temp"/>
      <v:variable persist="0" name="body_v" type="any" default="null" param-name="cr_view"/>
      <v:variable persist="0" name="body_r2rml" type="any" default="null" param-name="r2rml"/>
      <v:variable persist="0" name="body_o" type="any" default="null" param-name="cr_owl"/>
      <v:variable persist="0" name="text_e" type="integer" default="0"/>
      <v:variable persist="0" name="owl" type="int" default="0" param-name="owl"/>
      <v:variable persist="0" name="_view" type="int" default="0" param-name="view"/>
      <v:variable persist="0" name="st" type="int" default="0" param-name="st"/>
      <v:variable persist="0" name="owl_vd" type="int" default="0" param-name="owl_vd"/>
      <v:variable persist="0" name="view_vd" type="int" default="0" param-name="view_vd"/>
      <v:variable persist="0" name="exist_sql" type="int" default="0" />
      <v:variable persist="0" name="exec_it" type="int" default="0" param-name="exec" />
      <v:variable persist="0" name="cols" type="any" default="null" param-name="cols"/>
      <v:variable persist="0" name="pklist" type="any" default="null" param-name="pk"/>
      <v:variable persist="0" name="pgraphv" type="varchar" default="''" param-name="pgraph"/>
  </vm:variables>

  <vm:header caption="Linked Data View definition"/>
  <vm:pagebody>
    <script type="text/javascript">
      <![CDATA[
    function saveSQL ()
    {
      var lf = document.forms ['admin_login'];
      var f = document.forms['account_form'];
          window.open (f.fsave.value+'&sid='+lf.sid.value, 'file_save', 'scrollbars=yes,resizable=yes,status=no,menubar=no,height=600,width=600');
      return false;
    }
    function saveOwl ()
    {
      var lf = document.forms ['admin_login'];
      var f = document.forms['account_form'];
          window.open (f.osave.value+'&sid='+lf.sid.value, 'file_save', 'scrollbars=yes,resizable=yes,status=no,menubar=no,height=600,width=600');
      return false;
    }
      ]]>
    </script>
<table>
      <v:method name="exec_all" arglist="inout control vspx_control">
        <![CDATA[
	      declare stat, msg varchar;
	      declare res, arr, data, meta, gr, path, ret any;
	      declare inx int;

	      path := concat('/DAV/temp/', self.sid, '.sql');
	      DB.DBA.YACUTIA_DAV_DELETE (path, 1, 0);
	      DB.DBA.YACUTIA_DAV_COL_CREATE('/DAV/temp/', '110110000NN', 'dav', 'administrators');
	      DB.DBA.YACUTIA_DAV_RES_UPLOAD (path, Y_RDF_VIEW_DROP_STMT (self.base_url) || self.body_v, '', '110110000NN', 'dav', 'administrators', now(), now(), null);

	      arr := sql_split_text (Y_RDF_VIEW_DROP_STMT (self.base_url) || self.body_v);
	      res := make_array (length (arr) + 1, 'any');

	      inx := 0;
	      foreach (varchar q in arr) do
	        {
		  stat := '00000';
		  exec (q, stat, msg, vector (), 0, meta, data);
                  if (stat = '00000')
                    res[inx] := data;
	          else
                    res[inx] := vector (vector (stat, msg));
		  inx := inx + 1;
		}
             if (self.rdb_sync.ufl_selected)
	       {
	         self.sync_ret := RDF_VIEW_DO_SYNC (self.base_url, self.fill.ufl_selected, self.pgraph.ufl_value, 3, 0);
                 if (0 = length (self.sync_ret))
		   self.sync_ret := vector (vector ('00000', 'OK'));
  	       }	       
             if (self.owl)
               {
	         path := concat('/DAV/temp/', self.sid, '.n3');
	         DB.DBA.YACUTIA_DAV_DELETE (path, 1, 0);
	         DB.DBA.YACUTIA_DAV_COL_CREATE('/DAV/temp/', '110110000NN', 'dav', 'administrators');
	         DB.DBA.YACUTIA_DAV_RES_UPLOAD (path, self.body_o, '', '110110000NN', 'dav', 'administrators', now(), now(), null);
		 gr := sprintf ('http://%s/schemas/%s#', cfg_item_value(virtuoso_ini_path(), 'URIQA','DefaultHost'), self.base_url);
		 stat := '00000';
		 msg := 'OK';
		 sparql clear graph iri (?:gr);
		 exec ('DB.DBA.TTLP (?, \'\', ?, 255, 1, 1)', stat, msg, vector (self.body_o, gr), 0, meta, data);
		 res [length(arr)] := vector (vector (stat, msg));
		 exec (sprintf ('sparql
		 prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		 prefix virtrdf: <http://www.openlinksw.com/schemas/virtrdf#>
		 insert into <virtrdf-label> { ?s rdfs:subPropertyOf virtrdf:label }
	         from <%S> { ?s rdfs:subPropertyOf virtrdf:label }', gr), stat, msg, vector (), 0, meta, data);
	         rdfs_rule_set ('virtrdf-label', 'virtrdf-label');
	       }
	     exec ('checkpoint');  
	     self.text_e := 1;
	     self.exec_ret := res;
	     self.back.vc_enabled := 1;
	     control.vc_enabled := 0;
	     self.b_loc_save1.vc_enabled := 0;
	     self.b_loc_save2.vc_enabled := 0;
        ]]>
      </v:method>

      <v:form name="account_form" type="simple" method="POST" action="">
        <v:text type="hidden" name="fsave" value="--concat ('/INLINEFILE/script.sql?VSP=', WS.WS.EXPAND_URL (http_path(), 'file_save.vsp'))"/>
        <v:text type="hidden" name="osave" value="--concat ('/INLINEFILE/ontology.nt?VSP=', WS.WS.EXPAND_URL (http_path(), 'file_save.vsp'), '&ext=.n3')"/>
        <v:before-data-bind>
          <![CDATA[
	  declare _base_url, _db_object_to_process, e_array, path any;

	  self.exist_sql := self._view + self.view_vd + self.owl_vd;
	  if (self.db_object_to_process is NULL)
	    {
	       declare tbls any;
	       self.db_object_to_process := get_keyword('list', self.vc_event.ve_params, NULL);
               if (self.db_object_to_process is null)
	         self.db_object_to_process := vector (get_keyword('name', self.vc_event.ve_params));
               else
	         self.db_object_to_process := deserialize(decode_base64(self.db_object_to_process));

	      tbls := self.db_object_to_process;
              if (exists (select 1 from SYS_VIEWS where V_NAME in (tbls)))
                self.view_used := 1;

	    }
	  _base_url := get_keyword('host', self.vc_event.ve_params, NULL);

	  if (self.body_v is NULL)
	    {
	      declare tbls, cols, pklist any;
              declare exit handler for sqlstate '*'
	      {
	        self.vc_is_valid := 0;
		self.vc_error_message := __SQL_MESSAGE;
		self.body_v := '';
		return;
	      };

              cols := null;
              if (self.cols is not null)
                cols := deserialize (decode_base64 (self.cols));

              tbls := self.db_object_to_process;
	      if (self.pklist is not null and self.pklist <> '')
	        pklist := deserialize (decode_base64 (self.pklist));
              else
	        pklist := null;

	      self.body_v := '';
	      if (self._view)
	        {
		  foreach (any tb in tbls) do
		    {
		      self.body_v := self.body_v ||
			    sprintf ('grant select on "%I"."%I"."%I" to SPARQL_SELECT;\n',
			    name_part (tb, 0), name_part (tb, 1), name_part (tb, 2));
		    }
	         }
	      if (pklist is not null)
                {
		   declare newtb any;
                   newtb := vector ();
		   foreach (any t in tbls) do
		     {
		       declare pk any;
		       pk := get_keyword (t, pklist);
		       if (pk is null)
		         pk := yac_get_pk (t);
		       newtb := vector_concat (newtb, vector (t, pk));
		     }
		   tbls := newtb;
                }
	      if (self._view)
	        {
		  self.body_v := self.body_v || '\n\n';
		  self.body_v := self.body_v || DB.DBA.RDF_VIEW_FROM_TBL (_base_url, tbls, self.voidst, cols);
		  if (__proc_exists ('DB.DBA.R2RML_FROM_TBL') is not null)
		    self.body_r2rml := R2RML_FROM_TBL (_base_url, tbls, self.voidst, cols);
		  else
		    self.body_r2rml := '### You need a new server binary in order to unlock R2RML graph generator';   
	        }
	      if (self.view_vd)
  	        self.body_v := self.body_v || '\n\n-- Virtual directories for instance data\n' || DB.DBA.RDF_VIEW_GEN_VD (_base_url);
	      if (self.owl_vd)
  	        self.body_v := self.body_v || '\n\n-- Virtual directories for ontology\n' || DB.DBA.RDF_OWL_GEN_VD (_base_url);
	      path := concat('/DAV/temp/', self.sid, '.sql');
	      DB.DBA.YACUTIA_DAV_DELETE (path, 1, 0);
	      DB.DBA.YACUTIA_DAV_COL_CREATE('/DAV/temp/', '110110000NN', 'dav', 'administrators');
	      DB.DBA.YACUTIA_DAV_RES_UPLOAD (path, Y_RDF_VIEW_DROP_STMT (self.base_url) || self.body_v, '', '110110000NN', 'dav', 'administrators', now(), now(), null);
	    }
	   if (self.body_o is null and self.owl)
             {
	       declare cols any;
	       cols := null;
	       if (self.cols is not null)
                 cols := deserialize (decode_base64 (self.cols));
	       self.body_o := DB.DBA.RDF_OWL_FROM_TBL (_base_url, self.db_object_to_process, cols);
	       path := concat('/DAV/temp/', self.sid, '.n3');
	       DB.DBA.YACUTIA_DAV_DELETE (path, 1, 0);
	       DB.DBA.YACUTIA_DAV_COL_CREATE('/DAV/temp/', '110110000NN', 'dav', 'administrators');
	       DB.DBA.YACUTIA_DAV_RES_UPLOAD (path, self.body_o, '', '110110000NN', 'dav', 'administrators', now(), now(), null);
	     }
	    if (self.exec_it = 1)
	      {
	        self.exec_all (self.exec);
                self.exec_it := 0;
	      }
	    ]]>
    </v:before-data-bind>
  <tr>
      <td>
	  <?vsp
	  if (self.text_e)
	    {
	  ?>
	  <h2>Execution Status</h2>
	  <div class="scroll_area">
	  <table class="listing">
                <tr class="listing_header_row">
                  <th>Status</th>
                  <th>Message</th>
                </tr>
	      <?vsp
	      foreach (any elm in self.exec_ret) do
                {
                    if (elm <> 0)
                    {
                      foreach (any _row in elm) do
                      {
	      ?>
                <tr>
                  <td>
                    <?V _row[0] ?></td><td><?V _row[1] ?>
                  </td>
                </tr>
	      <?vsp
	             }
	           }
	        }
	      ?>
	  </table>
          </div>
	  <?vsp
	  if (length (self.sync_ret))
	    {
	  ?>
	  <br/>
	  <h2>RDB2RDF Triggers Status</h2>
	  <table class="listing">
              <tr class="listing_header_row">
                <th>Status</th>
                <th>Message</th>
              </tr>
	      <?vsp
	      foreach (any _row in self.sync_ret) do
                {
	      ?>
              <tr>
                <td><?V _row[0] ?></td>
                <td><?V _row[1] ?></td>
              </tr>
	      <?vsp
	        }
	      ?>
	  </table>
	  <?vsp
	    }  
	  ?>
	  <h2>SQL Relations (Tables) to RDF Statements (Predicate / Property Graph) Mappings</h2>
	  <?vsp
	       declare defhost, stat, msg, data, meta, data2, meta2, qr, gr, fct_installed any;
	       stat := '00000';
	       defhost := cfg_item_value(virtuoso_ini_path(), 'URIQA','DefaultHost');
	     gr := sprintf ('http://%s/%s#', defhost, self.base_url);
	       if (exists (select 1 from VAD.DBA.VAD_REGISTRY where R_KEY like '/VAD/fct/%/resources/dav/%'))
	         fct_installed := 1;
               else 
	         fct_installed := 0;
	     for select * from (sparql define input:storage "" select ?s from virtrdf: { ?s virtrdf:qmGraphRange-rvrFixedValue `iri(?:gr)` ; virtrdf:qmUserSubMaps ?t }) x do
               {
	         http (sprintf ('<a href="/describe/?uri=%U" target="_blank">%V</a><br/>', "s", "s")); 
	       }  
	  ?>
	  <?vsp  
	  if (self.view_vd or self.owl_vd)
	    {
	  ?>
	  <h2>Sample Graph IRIs &amp; Linked Data Entity URIs</h2>
	  <?vsp
	    }
	  ?>
	  <?vsp
	       if (__proc_exists (fix_identifier_case ('shcompo_clear'), 2) is not null)
	         shcompo_clear ();
	       if (self.view_vd)
                 {
		   http_value ('RDF Document (Named Graph) IRIs: ', 'h3');
		   qr := sprintf ('sparql select distinct ?class from <%s> { ?s a ?class } limit 10', gr);
		   exec (qr, stat, msg, vector (), 0, meta, data);
		   if (stat = '00000' and length (data) and length (data[0]))
		     {
		     http (sprintf ('<div>Transient Views: <a href="/describe/?uri=%U"i target="_blank">%V</a> <br/>', gr, gr));
		       foreach (any _row in data) do
			 {
			   if (_row[0] not like '%/stat#%')
			     {
			       qr := sprintf ('sparql select ?s from <%s> { ?s a <%s> } limit 1', gr, _row[0]);
			       exec (qr, stat, msg, vector (), 1, meta2, data2);
			       if (stat = '00000' and length (data2) and length (data2[0]))
				 {
                                   if (fct_installed)
				     http (sprintf ('<a href="%s" target="_blank">%s</a><br/>', data2[0][0], data2[0][0]));
				   else
				   http (sprintf ('<a href="%s" target="_blank">%s</a><br/>', replace (data2[0][0], '#', '%01'), data2[0][0]));
				 }
			     }
			 }
		       http ('</div>');
		     }
		   if (length (self.pgraphv) and self.fill.ufl_selected)
		     {
		       qr := sprintf ('sparql select distinct ?class from <%s> { ?s a ?class } limit 10', self.pgraphv);
		       exec (qr, stat, msg, vector (), 0, meta, data);
		       if (stat = '00000' and length (data) and length (data[0]))
			 {
			   http (sprintf ('<div>Materialized Views: %V <br/>', self.pgraphv));
			   foreach (any _row in data) do
			     {
			       qr := sprintf ('sparql select ?s from <%s> { ?s a <%s> } limit 1', self.pgraphv, _row[0]);
			       exec (qr, stat, msg, vector (), 1, meta2, data2);
			       if (stat = '00000' and length (data2) and length (data2[0]))
				 {
				   if (fct_installed)
				     http (sprintf ('<a href="/describe/?url=%U" target="_blank">%s</a><br/>', data2[0][0], data2[0][0]));
				   else
				     http (sprintf ('<a href="%s" target="_blank">%s</a><br/>', replace (data2[0][0], '#', '%01'), data2[0][0]));
				 }
			     }
			   http ('</div>');
			 }
		     } 
	        }
	       if (self.st and self.view_vd)
                 {
		   gr := sprintf ('http://%s/%s#', defhost, self.base_url);
		   qr := sprintf ('sparql select ?s from <%s> { ?s a void:Dataset } limit 1', gr);
		   exec (qr, stat, msg, vector (), 1, meta, data);
		   if (stat = '00000' and length (data) and length (data[0]))
		   {
		       http ('<div>Metadata Data Document (VoiD) URI/URL: ');
		   if (fct_installed)
		     http (sprintf ('<a href="%s" target="_blank">%s</a>', data[0][0], data[0][0]));
                   else  
	           http (sprintf ('<a href="%s" target="_blank">%s</a>', replace (data[0][0], '#', '%01'), data[0][0]));
		   http ('</div>');
	           }
	        }
	       if (self.owl_vd)
                 {
		   gr := sprintf ('http://%s/schemas/%s/', defhost, self.base_url);
		   http ('<div>Linked Data Ontology URI: ');
		   if (fct_installed)
	             http (sprintf ('<a href="%V" target="_blank">%V</a>', gr, gr));
		   else
	             http (sprintf ('<a href="%V" target="_blank">%V</a>', replace (gr, '#', '%01'), gr));
		   http ('</div>');
	           }
	        }
	  ?>
      </td>
  </tr>
  <tr>
      <td>
            <?vsp
              if (self.text_e = 0)
              {
                if (self.exist_sql)
                {
            ?>
	  <h2>Definitions</h2>
	  <v:textarea name="cr_view" xhtml_cols="120" xhtml_rows="20" value="--self.body_v"/><br/>
	  <h2>R2RML Graph</h2>
	  <v:textarea name="r2rml" xhtml_cols="120" xhtml_rows="20" value="--self.body_r2rml"/><br/>
            <?vsp
                }
                if (self.owl)
                {
            ?>
	  <h2>Ontology</h2>
	  <v:textarea name="cr_owl" xhtml_cols="120" xhtml_rows="20" value="--self.body_o"/>
            <?vsp
                }
              }
            ?>
            <?vsp
              if (self.text_e = 0 and __proc_exists ('DB.DBA.RDF_VIEW_DO_SYNC'))
              {
            ?>
	  <br />
            <v:template type="simple" condition="self.view_used = 0">
              <div class="fm">
                <label style="width: 200px; text-align: left;">Default Physical Named Graph</label>
                <v:text name="pgraph" value="--sprintf ('urn:%{URIQADefaultHost}s:%s', self.base_url)" xhtml_size="70" />
                <br />
                <label style="margin-left: 200px; width: 400px; text-align: left;">
                  <v:check-box name="rdb_sync" value="1" xhtml_id="rdb_sync" />
                  Generate RDB2RDF triggers
                </label>
                <br />
                <label style="margin-left: 200px; width: 400px; text-align: left;">
                  <v:check-box name="fill" value="1" xhtml_id="fill" />
                  Enable Data Syncs with Physical Quad Store
                </label>
                <br />
              </div>
          </v:template>

            <v:template type="simple" condition="self.view_used = 1">
              <div class="warning">Note: RDB2RDF triggers to syncronize with Physical Named Graph cannot be generated on SQL views</div>
          </v:template>

            <?vsp
              }
            ?>
            <input type="hidden" name="host" value="<?V get_keyword('host', self.vc_event.ve_params) ?>"/>
            <br />
	  <v:button action="simple" name="cncl" value="Start Over">
              <v:on-post>
                <![CDATA[
	      path := concat('/DAV/temp/', self.sid, '.sql');
	      DB.DBA.YACUTIA_DAV_DELETE (path, 1, 0);
	      path := concat('/DAV/temp/', self.sid, '.n3');
	      DB.DBA.YACUTIA_DAV_DELETE (path, 1, 0);
	      self.vc_redirect ('db_rdf_objects.vspx');
                ]]>
              </v:on-post>
      </v:button>
            <?vsp
              if (self.text_e = 0)
              {
            ?>
	  <v:button action="simple" name="apply" value="Apply Changes">
              <v:on-post>
                <![CDATA[
	      declare path any;

	      path := concat('/DAV/temp/', self.sid, '.sql');
	      DB.DBA.YACUTIA_DAV_DELETE (path, 1, 0);
	      DB.DBA.YACUTIA_DAV_COL_CREATE('/DAV/temp/', '110110000NN', 'dav', 'administrators');
	      DB.DBA.YACUTIA_DAV_RES_UPLOAD (path, Y_RDF_VIEW_DROP_STMT (self.base_url) || self.body_v, '', '110110000NN', 'dav', 'administrators', now(), now(), null);
             if (self.owl)
               {
	         path := concat('/DAV/temp/', self.sid, '.n3');
	         DB.DBA.YACUTIA_DAV_DELETE (path, 1, 0);
	         DB.DBA.YACUTIA_DAV_COL_CREATE('/DAV/temp/', '110110000NN', 'dav', 'administrators');
		 DB.DBA.YACUTIA_DAV_RES_UPLOAD (path, self.body_o, '', '110110000NN', 'dav', 'administrators', now(), now(), null);
	       }
                ]]>
              </v:on-post>
      </v:button>

      <v:button action="simple" name="exec" value="Execute">
              <v:on-post>
                <![CDATA[
	      self.exec_all (control);
                ]]>
              </v:on-post>
    </v:button>

    <v:button action="simple" name="b_loc_save1" value="Save Data Mappings" xhtml_onclick="javascript:saveSQL()" enabled="--self.exist_sql"/>

    <v:button action="simple" name="b_loc_save2" value="Save Ontology Mappings" xhtml_onclick="javascript:saveOwl()" enabled="--self.owl"/>

            <?vsp
              }
            ?>
    <v:button name="back" action="simple" value="Back" enabled="--self.text_e">
              <v:on-post>
                <![CDATA[
	      self.text_e := 0;
	      control.vc_enabled := 0;
	      self.exec.vc_enabled := 1;
	     self.b_loc_save1.vc_enabled := self.exist_sql;
	     self.b_loc_save2.vc_enabled := self.owl;
                ]]>
              </v:on-post>
    </v:button>
</td>
  </tr>
        <?vsp
          if (self.text_e = 0)
          {
        ?>

  <tr>
    <td>
            <?vsp
              if (self.exist_sql)
              {
            ?>
      WebDAV location:
      <v:text width="200" type="simple" value="" name="filename" />
      <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="" path="DAV" browse_type="col" style_css="test.css" w_title="DAV Browser" title="DAV Browser" advisory="" lang="en" return_box="filename"/>
      <v:button action="submit" name="export" value="Save Data Mappings">
              <v:on-post>
                <![CDATA[
	  if (get_keyword('export', params) is not null)
            {
              if (not length (self.filename.ufl_value))
                {
                  self.vc_is_valid := 0;
                  self.vc_error_message := 'The path to the file to save must not be empty.';
                  return;
                }
              declare own, grp, perms, msg any;
              if (dav_path_validate (self.filename.ufl_value, own, grp, perms, msg) <> 1)
                {
                  self.vc_error_message := msg;
                  self.vc_is_valid := 0;
                  return;
                }
              if (dav_check_permissions(connection_get('vspx_user'), perms, '110', own, grp, msg) <> 1)
                {
                  self.vc_error_message := msg;
                  self.vc_is_valid := 0;
                  return;
                }
              declare exit handler for sqlstate '*'
                {
                  self.vc_error_message := 'Can not export definitions, please enter correct resource path in WebDAV.';
                  self.vc_is_valid := 0;
                  return;
  	        };
                    YAC_DAV_RES_UPLOAD (self.filename.ufl_value, Y_RDF_VIEW_DROP_STMT (self.base_url) || self.body_v, 'text/plain', '110100000N', connection_get('vspx_user'), null, connection_get('vspx_user'));
              self.sc_1.vc_enabled := 1;
              self.sc_1.vc_data_bind (e);
            }
                ]]>
              </v:on-post>
            </v:button>
            <br/>
            <?vsp
              }
            ?>
            <?vsp
              if (self.owl)
              {
            ?>
      WebDAV location:
      <v:text width="200" type="simple" value="" name="filename2" />
      <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="" path="DAV" browse_type="col" style_css="test.css" w_title="DAV Browser" title="DAV Browser" advisory="" lang="en" return_box="filename2"/>
      <v:button action="submit" name="export2" value="Save Ontology Mappings">
              <v:on-post>
                <![CDATA[
	  if (get_keyword('export2', params) is not null)
            {
              if (not length (self.filename2.ufl_value))
                {
                  self.vc_is_valid := 0;
                  self.vc_error_message := 'The path to the file to save must not be empty.';
                  return;
                }
              declare own, grp, perms, msg any;
              if (dav_path_validate (self.filename2.ufl_value, own, grp, perms, msg) <> 1)
                {
                  self.vc_error_message := msg;
                  self.vc_is_valid := 0;
                  return;
                }
              if (dav_check_permissions(connection_get('vspx_user'), perms, '110', own, grp, msg) <> 1)
                {
                  self.vc_error_message := msg;
                  self.vc_is_valid := 0;
                  return;
                }
              declare exit handler for sqlstate '*'
                {
                  self.vc_error_message := 'Can not export ontology, please enter correct resource path in WebDAV.';
                  self.vc_is_valid := 0;
                  return;
  	        };
                    YAC_DAV_RES_UPLOAD (self.filename2.ufl_value, self.body_o, 'text/rdf+n3', '110100000N', connection_get('vspx_user'), null, connection_get('vspx_user'));
              self.sc_2.vc_enabled := 1;
              self.sc_2.vc_data_bind (e);
            }
                ]]>
              </v:on-post>
        </v:button>
            <?vsp
              }
            ?>
      </td>
    </tr>
        <?vsp
          }
        ?>
   </v:form>

        <v:template type="simple" name="sc_1" enabled="0">
          <tr>
	    <td>
	      <img class="dialog_icon" src="images/icons/about_32.png" alt="Info" title="Info"/> The Linked Data View definition is exported successfully.
	    </td>
          </tr>
        </v:template>
        <v:template type="simple" name="sc_2" enabled="0">
          <tr>
	    <td>
	      <img class="dialog_icon" src="images/icons/about_32.png" alt="Info" title="Info"/> The Ontology is exported successfully.
	    </td>
          </tr>
        </v:template>
      </table>
  </vm:pagebody>
  </vm:pagewrapper>
</v:page>
