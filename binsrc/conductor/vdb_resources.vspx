<?xml version="1.0"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="vdb_resources_page"
   decor="yacutia_decor.vspx"
   style="yacutia_style.xsl"
   doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
   fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
   xmlns:xhtml="http://www.w3.org/1999/xhtml"
   xmlns:vm="http://www.openlinksw.com/vspx/macro">

  <vm:pagetitle>Virtuoso Remote Resources</vm:pagetitle>
  <vm:pagewrapper>
    <v:variable persist="1" name="folder_mask" type="varchar" default="''" />

    <vm:menu>
    <vm:menuitem name="dsns_url" type="hot" value="Known Datasources" format="%s" url="vdb_dsns.vspx" />
    <vm:menuitem value="Known Remote Resources" />
    <vm:menuitem name="link_url" type="hot" value="Link Remote Resources" format="%s" url="vdb_link.vspx?mode=1" />
    </vm:menu>

    <vm:rawheader>
      <td width="70%">Linked Remote Resources</td>
    </vm:rawheader>
    <vm:pagebody vdb_check="1">

  <v:form name="unlink_form" type="simple" method="POST" action="vdb_resources.vspx">
            <v:on-post>
        <v:script><![CDATA[
        if( get_keyword ('unlink', self.vc_page.vc_event.ve_params) = '' or self.vc_is_valid = 0) {
  error:
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: vdb_resources.vspx?sid=%s&realm=%s\r\n', self.sid , self.realm));
          return;
        }

      declare sname, psname varchar;
      for (select DS_DSN from DB.DBA.SYS_DATA_SOURCE) do {
        sname := sprintf('%s_remote_tbls', DS_DSN);
        psname := sprintf('%s_remote_procs', DS_DSN);
        declare tbl varchar;
        declare pos integer;
        pos := position (sname, self.vc_page.vc_event.ve_params, 0, 2);
        while( pos > 0 ) {
    tbl := aref (params, pos);
    pos := pos + 2;
    declare state, msg, m_dta, res, state1, msg1 varchar;
    state := '00000';
    exec( sprintf( 'drop table "%s"."%s"."%s"', name_part(tbl, 0, 'DB'), name_part(tbl, 1, 'DBA'), name_part(tbl, 2, null)), state, msg, vector(), m_dta, res);
    exec ('commit work', state1, msg1);
    if ('00000' <> state) {
      http_request_status ('HTTP/1.1 302 Found');
      http_header (sprintf('Location: vdb_resources.vspx?sid=%s&realm=%s\r\n', self.sid , self.realm));
      http ('<TABLE CLASS="genlist" BORDER="0" CELLPADDING="0">');
      http (sprintf ('<TR><TD CLASS="errorhead" COLSPAN="2">Remove %s failed:</TD></TR>', tbl));
      http ('<TR><TD CLASS="AdmBorders" COLSPAN="2"><IMG SRC="images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>');
      --http (sprintf ('<TR><TD CLASS="genlisthead">SQL State</TD><TD CLASS="gendata">%s</TD></TR>', coalesce (__SQL_STATE, '')));
      --http (sprintf ('<TR><TD CLASS="genlisthead">Error Message</TD><TD CLASS="gendata">%s</TD></TR>', coalesce (__SQL_MESSAGE, '')));
      http ('</TABLE>');
      return;
    }
    pos := position (sname, self.vc_page.vc_event.ve_params, pos, 2);
        }
        pos := position (psname, self.vc_page.vc_event.ve_params, 0, 2);
        while( pos > 0 ) {
    tbl := aref (params, pos);
    pos := pos + 2;
    declare state, msg, m_dta, res, state1, msg1 varchar;
    state := '00000';
    exec( sprintf( 'drop procedure "%s"."%s"."%s"', name_part(tbl, 0, 'DB'), name_part(tbl, 1, 'DBA'), name_part(tbl, 2, null)), state, msg, vector(), m_dta, res);
    exec ('commit work', state1, msg1);
    if ('00000' <> state) {
      http_request_status ('HTTP/1.1 302 Found');
      http_header (sprintf('Location: vdb_resources.vspx?sid=%s&realm=%s\r\n', self.sid , self.realm));
      http ('<TABLE CLASS="genlist" BORDER="0" CELLPADDING="0">');
      http (sprintf ('<TR><TD CLASS="errorhead" COLSPAN="2">Remove %s failed:</TD></TR>', tbl));
      http ('<TR><TD CLASS="AdmBorders" COLSPAN="2"><IMG SRC="images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>');
      --http (sprintf ('<TR><TD CLASS="genlisthead">SQL State</TD><TD CLASS="gendata">%s</TD></TR>', coalesce (__SQL_STATE, '')));
      --http (sprintf ('<TR><TD CLASS="genlisthead">Error Message</TD><TD CLASS="gendata">%s</TD></TR>', coalesce (__SQL_MESSAGE, '')));
      http ('</TABLE>');
      return;
    }
    pos := position (psname, self.vc_page.vc_event.ve_params, pos, 2);
        }
      }
    ?><!--                  for select RT_NAME from DB.DBA.SYS_REMOTE_TABLE do {
          if( get_keyword( RT_NAME, self.vc_page.vc_event.ve_params ) = '1' ) {
            declare state, msg, m_dta, res, state1, msg1 varchar;
            state := '00000';
            exec( sprintf( 'drop table "%s"."%s"."%s"', name_part(RT_NAME, 0, 'DB'), name_part(RT_NAME, 1, 'DBA'), name_part(RT_NAME, 2, null)), state, msg, vector(), m_dta, res);
            exec ('commit work', state1, msg1);
            if ('00000' <> state) {
        http ('<TABLE CLASS="genlist" BORDER="0" CELLPADDING="0">');
        http (sprintf ('<TR><TD CLASS="errorhead" COLSPAN="2">Remove %s failed:</TD></TR>', RT_NAME));
        http ('<TR><TD CLASS="AdmBorders" COLSPAN="2"><IMG SRC="images/1x1.gif" WIDTH="1" HEIGHT="2" ALT=""></TD></TR>');
  --            http (sprintf ('<TR><TD CLASS="genlisthead">SQL State</TD><TD CLASS="gendata">%s</TD></TR>', coalesce (__SQL_STATE, '')));
  --            http (sprintf ('<TR><TD CLASS="genlisthead">Error Message</TD><TD CLASS="gendata">%s</TD></TR>', coalesce (__SQL_MESSAGE, '')));
        http ('</TABLE>');
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: vdb_resources.vspx?sid=%s&realm=%s\r\n', self.sid , self.realm));
        return;
            }
          }
        }
  --><?vsp
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: vdb_resources.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
        ]]>
        </v:script>
            </v:on-post>
     <a href="vdb_resources.vspx?sid=<?V self.sid ?>&realm=<?V self.realm ?>&what=openall">Open All</a>
     <a href="vdb_resources.vspx?sid=<?V self.sid ?>&realm=<?V self.realm ?>&what=closeall">Close All</a>
    <table class="MainSubData" border="0" cellspacing="0" cellpadding="3">
      <?vsp
      declare size_of_tables, size_of_procs, cnt, dsn_no, flag, _all, total_count integer;
      declare  u_up_tmp, u_down_tmp, ha  varchar;
      ha:='';
      ha := self.folder_mask;

      dsn_no:=ascii(get_keyword ('dsn_no', self.vc_page.vc_event.ve_params, '0')) - ascii('0');

      _all := 0;
      total_count := 0;
      if( get_keyword ('what', self.vc_page.vc_event.ve_params) = 'openall' ) {
        _all := 1; flag := ascii('1');
      }
      else if( get_keyword ('what', self.vc_page.vc_event.ve_params) = 'closeall' ) {
        _all := 1; flag := ascii('0');
      }
      cnt:= 0;
      for (select DS_DSN from DB.DBA.SYS_DATA_SOURCE order by DS_DSN) do {
    cnt := cnt + 1;
    if( length(ha) < cnt )
        ha := concat( ha, '0' );

    if( _all = 1 ) {
      aset( ha, cnt-1, flag );
    }
    else {
      if( dsn_no = cnt ) {
        if (get_keyword ('what', self.vc_page.vc_event.ve_params) = 'open')
          aset (ha, cnt-1, ascii('1'));
        else
          aset (ha, cnt-1, ascii('0'));
      }
      flag:= aref( ha, cnt-1 );
    }

    select count(*) into size_of_tables  from DB.DBA.SYS_REMOTE_TABLE where RT_DSN = DS_DSN;
    select count(*) into size_of_procs   from DB.DBA.SYS_PROCEDURES where
        P_NAME not like '%.vsp' and (
          ( --proc_is_remote(P_NAME) and
      regexp_match('attach procedure', coalesce(P_TEXT, blob_to_string(P_MORE))) is not null and
      regexp_match(sprintf('from ''%s''',DS_DSN), coalesce(P_TEXT, blob_to_string(P_MORE))) is not null) or
          ( regexp_match('\-\-PL Wrapper ', coalesce(P_TEXT, blob_to_string(P_MORE))) is not null and
      regexp_match(sprintf('\-\-"DSN:%s ',DS_DSN), coalesce(P_TEXT, blob_to_string(P_MORE))) is not null));

    total_count := total_count + size_of_tables + size_of_procs;

    http(sprintf('<tr id="%d" align="center">', cnt));
    http('<td  width="32">');

    if (flag = ascii('1'))
      http(sprintf('<a href="vdb_resources.vspx?sid=%s&realm=%s&dsn_no=%d&what=close#%d"><img src="images/Open-folder.gif" border="0"/></a></td>', self.sid ,self.realm ,cnt, cnt));
    else {
      if( size_of_tables > 0 or size_of_procs > 0 )
        http(sprintf('<a href="vdb_resources.vspx?sid=%s&realm=%s&dsn_no=%d&what=open#%d"><img src="images/Folder-full.gif" border="0"/></a></td>', self.sid ,self.realm ,cnt, cnt));
      else
        http(sprintf('<a href="vdb_resources.vspx?sid=%s&realm=%s&dsn_no=%d&what=open#%d"><img src="images/Folder.gif" border="0"/></a></td>', self.sid ,self.realm ,cnt, cnt));
    }

    http(sprintf('<td align="left"><b>%s</b></td><td>&nbsp;</td>', DS_DSN ));
    http('</tr>');

    if(flag = ascii('1')) {
      if( size_of_tables > 0 or size_of_procs > 0 ) {
        http('<tr><td>&nbsp;</td>');
        http('<td width="45%">Tables</td><td width="45%">Procedures</td></tr>');
        http('<tr><td>&nbsp;</td><td valign="top">');
        if( size_of_tables = 0 ) {
          http(sprintf('<select disabled="true" name="%s_remote_tbls" multiple="true">',DS_DSN));
          http ('<option>-No Remote Tables Linked-</option>');

        }
        else {
          http(sprintf('<select name="%s_remote_tbls" multiple="true">',DS_DSN));
          for select RT_NAME from DB.DBA.SYS_REMOTE_TABLE where RT_DSN = DS_DSN do {
              http (sprintf ('<option>%s</option>', RT_NAME));
        }
        http('</select></td><td valign="top">');
        }

        if( size_of_procs = 0 ) {
          http(sprintf('<select disabled="true" name="%s_remote_procs" multiple="true">',DS_DSN));
          http ('<option>-No Remote Procedures Linked-</option>');

        }
        else {
          http(sprintf('<select name="%s_remote_procs" multiple="true">', DS_DSN));
          for select P_NAME from DB.DBA.SYS_PROCEDURES where
            P_NAME not like '%.vsp' and (
            ( --proc_is_remote(P_NAME) and
              regexp_match('attach procedure', coalesce(P_TEXT, blob_to_string(P_MORE))) is not null and
              regexp_match(sprintf('from ''%s''',DS_DSN), coalesce(P_TEXT, blob_to_string(P_MORE))) is not null) or
            ( regexp_match('\-\-PL Wrapper ', coalesce(P_TEXT, blob_to_string(P_MORE))) is not null and
              regexp_match(sprintf('\-\-"DSN:%s ',DS_DSN), coalesce(P_TEXT, blob_to_string(P_MORE))) is not null)
            ) do {
            http (sprintf ('<option>%s</option>', P_NAME));
          }
        }
        http('</select></td></tr>');
      }
      else {
        http('<tr><td/><td colspan="2">No Resources Linked</td></tr>');
      }
    }
      }
      self.folder_mask := ha;
    ?>
    <tr>
    <!--td><A href="vdb_error.vspx?sid=<?V self.sid ?>&realm=<?V self.realm ?>&message=Error unlinking tables&return=<?V encode_base64(sprintf('vdb_resources.vspx?sid=%s&realm=%s',self.sid, self.realm)) ?>">Error page</A></td-->
      <td colspan="3" align="right">
        <?vsp if( total_count > 0 ) { ?>
          <v:button action="submit" name="unlink" value="Unlink selected"/>
        <?vsp } ?>
      </td>
    </tr>

    </table>
  </v:form>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
