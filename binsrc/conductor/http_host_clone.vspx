<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="http_edit_path_page"
        decor="yacutia_decor.vspx"
        style="yacutia_style.xsl"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
        fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/"
        xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Virtuoso HTTP Server Management</vm:pagetitle>
  <vm:pagewrapper>
    <vm:menu>
      <vm:menuitem value="HTTP Host Properties"/>
    </vm:menu>
    <vm:variables>
      <v:variable name="vhost" persist="0" type="varchar" default="null" param-name="vhost"/>
      <v:variable name="lhost" persist="0" type="varchar" default="null" param-name="lhost"/>
      <v:variable name="vhosto" persist="0" type="varchar" default="null" param-name="vhost"/>
      <v:variable name="lhosto" persist="0" type="varchar" default="null" param-name="lhost"/>
      <v:variable name="lhost1" persist="0" type="varchar" default="null"/>
      <v:variable name="vhost1" persist="0" type="varchar" default="null"/>
      <v:variable name="port1" persist="0" type="varchar" default="'80'"/>
    </vm:variables>
    <vm:header caption="Virtual Host Properties"/>
    <vm:pagebody>
        <v:on-init>
	  declare pos int;
	  if (self.vhost is null or self.lhost is null)
	    return;

	  if (self.lhost = '*ini*')
            {
	      self.lhost := server_http_port ();
              if (strrchr (self.lhost, ':') is null)
	        self.lhost := ':' || self.lhost;
	    }
	  else if (self.lhost = '*ini*')
            {
              self.lhost := coalesce (server_https_port (), '');
              if (strrchr (self.lhost, ':') is null)
	        self.lhost := ':' || self.lhost;
	    }

	  pos := strrchr (self.lhost, ':');
	  if (pos is not null)
	    {
	      self.lhost1 := substring (self.lhost, 1, pos);
	      self.port1 := substring (self.lhost, pos + 2, length (self.lhost));
	    }
	  else
	    self.lhost1 := self.lhost;

	  if (length (self.lhost1) = 0)
	    self.lhost1 := '0.0.0.0';

	  pos := strrchr (self.vhost, ':');
	  if (pos is not null)
	    self.vhost1 := substring (self.vhost, 1, pos);
	  else
	    self.vhost1 := self.vhost;

	</v:on-init>
        <v:form name="frm_add_templ" method="POST" type="simple">
          <!--div class="dialog_text"></div-->
          <table class='ctl_grp'>
            <tr>
              <td>Host &amp; Domain Name</td>
	      <td>
		<v:text name="vhost_nam" value="" xhtml_size="40" error-glyph="*">
		  <v:validator test="regexp" regexp="^[\.0-9A-Za-z-]+$" empty-allowed="1"
		    message="You should provide a valid host name" />
		</v:text>
              </td>
            </tr>
            <tr>
              <td>Listening Interface</td>
              <td id="if_opt">
		  <![CDATA[
		  <script type="text/javascript">
	           function init () {
		      var sr_cl = new OAT.Combolist([],"<?V self.lhost1 ?>");
		      sr_cl.input.name = "lhost_if";
		      sr_cl.input.id = "lhost_if";
		      $("if_opt").appendChild(sr_cl.div);
		      sr_cl.addOption("0.0.0.0");
		      <?vsp
		        declare arr any;
			arr := tcpip_local_interfaces ();
			foreach (any elm in arr) do
			  http (sprintf ('sr_cl.addOption("%s");', elm));
		      ?>
		     }
		  </script>
		  ]]>
		<!--v:text name="lhost_if" value="-#-self.lhost1" xhtml_size="20" error-glyph="*">
		  <v:validator test="regexp" regexp="^[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?$"
		    message="You should provide a valid IP address" />
		</v:text-->
              </td>
            </tr>
            <tr>
              <td>TCP Port</td>
              <td>
		<v:text name="lhost_port" value="--self.port1" xhtml_size="5" error-glyph="*">
		  <v:validator test="regexp" regexp="^[0-9]+$"
		    message="You should provide a valid TCP port" />
		</v:text>
              </td>
            </tr>
            <tr>
              <td colspan="2" align="center">
                <v:button action="simple" name="cancel_templ" value="Cancel">
                  <v:on-post>
                      <![CDATA[
		      self.vc_redirect (sprintf ('http_serv_mgmt.vspx'));
                      ]]>
                  </v:on-post>
                </v:button>
                <v:button action="simple" name="save_btn" value="Save">
                  <v:on-post>
                      <![CDATA[

           if (not self.vc_is_valid)
             return;

           declare vhost_o, lhost_o, vhost, lhost, st, msg, errors, lhost_if any;
           vhost_o := self.vhosto;
	   lhost_o := self.lhosto;

	   errors := vector ();

	   declare exit handler for sqlstate '*'
	   {
	     self.vc_is_valid := 0;
	     self.vc_error_message := __SQL_MESSAGE;
	     rollback work;
	     return;
	   };

           lhost_if := get_keyword ('lhost_if', e.ve_params, '');

	   y_check_host (self.vhost_nam.ufl_value, lhost_if, self.lhost_port.ufl_value);

	   vhost := self.vhost_nam.ufl_value;
	   lhost := concat (lhost_if, ':', self.lhost_port.ufl_value);
	   lhost := replace (lhost, '0.0.0.0', '');

	   if (self.vhost = vhost and lhost = self.lhost)
	     goto same_host;

	   set triggers off;
	   for select
	       HP_HOST, HP_LISTEN_HOST, HP_PPATH, HP_LPATH,
	       HP_AUTH_FUNC, HP_AUTH_OPTIONS, HP_DEFAULT, HP_STORE_AS_DAV,
	       HP_DIR_BROWSEABLE, HP_PERSIST_SES_VARS, HP_POSTPROCESS_FUNC,
	       HP_REALM, HP_RUN_SOAP_AS, HP_RUN_VSP_AS, HP_SECURITY, HP_SOAP_OPTIONS,
	       HP_OPTIONS, HP_IS_DEFAULT_HOST
	       from DB.DBA.HTTP_PATH where HP_HOST = vhost_o and HP_LISTEN_HOST = lhost_o do
	     {
      	        st := '00000';
	        msg := '';
		exec('VHOST_DEFINE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', st, msg,
		     vector (vhost, lhost, HP_LPATH, HP_PPATH, HP_STORE_AS_DAV, HP_DIR_BROWSEABLE,
		             HP_DEFAULT, HP_AUTH_FUNC, HP_REALM, HP_POSTPROCESS_FUNC, HP_RUN_VSP_AS,
			     HP_RUN_SOAP_AS, HP_SECURITY, HP_PERSIST_SES_VARS,
			     deserialize (HP_SOAP_OPTIONS),
			     deserialize (HP_AUTH_OPTIONS), deserialize(HP_OPTIONS), HP_IS_DEFAULT_HOST));
                if (st <> '00000')
                  {
		    rollback work;
		    self.vc_is_valid := 0;
		    self.vc_error_message := msg;
		    return;
                  }
	     }
	    commit work;
	    set triggers on;
	    same_host:
            self.vc_redirect (sprintf ('http_serv_mgmt.vspx'));
                      ]]>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
          </table>
        </v:form>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
