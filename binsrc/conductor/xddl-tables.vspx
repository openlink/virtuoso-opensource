<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="xquery_create_page3" decor="yacutia_decor.vspx" style="yacutia_style.xsl" xhtml-owner="my_page_owner" fast-render="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN">
  <v:on-init>
    <script><![CDATA[
    self.column_types := vector();

    self.column_types := vector_concat(self.column_types,  vector(189,'integer'));
    self.column_types := vector_concat(self.column_types,  vector(219, 'numeric'));
    self.column_types := vector_concat(self.column_types,  vector(188, 'smallint'));
    self.column_types := vector_concat(self.column_types,  vector(190, 'real'));
    self.column_types := vector_concat(self.column_types,  vector(191, 'double precision' ));


    self.column_types := vector_concat(self.column_types,  vector(182,'varchar'));
    self.column_types := vector_concat(self.column_types,  vector(125,'long varchar'));

    self.column_types := vector_concat(self.column_types,  vector(225, 'nvarchar'));
    self.column_types := vector_concat(self.column_types,  vector(226, 'long nvarchar'));

    self.column_types := vector_concat(self.column_types,  vector(222,'varbinary'));
    self.column_types := vector_concat(self.column_types,  vector(131,'long varbinary' ));

    self.column_types := vector_concat(self.column_types,  vector(230, 'long xml'));

    self.column_types := vector_concat(self.column_types,  vector(129,  'date' ));
    self.column_types := vector_concat(self.column_types,  vector(211, 'datetime'  ));
    self.column_types := vector_concat(self.column_types,  vector(210, 'time'));
    self.column_types := vector_concat(self.column_types,  vector(210, 'timestamp'));

    self.column_types := vector_concat(self.column_types,  vector(183, 'string'));
    self.column_types := vector_concat(self.column_types,  vector(192, 'char'));
    self.column_types := vector_concat(self.column_types,  vector(125,'any'));


    self.actions := vector('','No Action');
    self.actions := vector_concat(self.actions,  vector('set null','Set NULL'));
    self.actions := vector_concat(self.actions,  vector('cascade','Cascade'));
    self.actions := vector_concat(self.actions,  vector('set default','Set Default'));

    self.column_edit_buff := xpath_eval('/column', xtree_doc('<column/>'));
    self.column_create_buff := xpath_eval('/column', xtree_doc('<column/>'));

  ]]></script>
  </v:on-init>
  <vm:pagetitle>eXtended Data Definition file processing</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="objects" default="null" type="xml" persist="1"/>
      <v:variable name="current_table" default="null" type="xml" persist="1"/>
      <v:variable name="primary_key" default="null" type="any" persist="1"/>

      <v:variable name="foreign_key" default="null" type="xml" persist="1"/>

      <v:variable name="type_name" default="null" type="varchar" persist="1"/>
      <v:variable name="type_value" default="null" type="varchar" persist="0"/>
      <v:variable name="ref_table_name" default="''" type="varchar" persist="0"/>


      <v:variable name="reference_table_value" default="null" type="varchar" persist="0"/>

      <v:variable name="column_edit_buff" default="null" type="xml" persist="1"/>
      <v:variable name="column_create_buff" default="null" type="xml" persist="1"/>
      <v:variable name="column_types" default="null" type="any" persist="1"/>
      <v:variable name="actions" default="null" type="any" persist="1"/>
      <v:variable name="wrong_entry" default="null" type="varchar" persist="1"/>
      <v:variable name="statements" default="null" type="varchar" persist="1"/>

    </vm:variables>
    <vm:menu>
      <vm:menuitem value="Tables"/>
      <vm:menuitem value="Views"/>
    </vm:menu>
    <vm:rawheader>
      <td>
        <?vsp
  {
  declare mode varchar;
   mode := get_keyword('mode', control.vc_page.vc_event.ve_params);
  if (mode  is null)
          http('Tables List');
        else if ( mode  ='edit')
          http('Edit Table');
  else if ( mode  ='column_edit')
              http('Edit Column');
  else if ( mode  ='column_create')
              http('Create New Column');
  else if ( mode  ='column_remove')
              http('Remove Column');

  else if ( mode  ='primary_key_dialog')
              http('Primary Key Dialog');

  else if ( mode  ='create')
              http('Create New Table');

  else if ( mode  ='foreign_key_edit') {
      if (get_keyword('what', control.vc_page.vc_event.ve_params) = 'edit')
              http('Edit Foreign Key');
      else  if (get_keyword('what', control.vc_page.vc_event.ve_params) = 'create')
              http('Create Foreign Key');
   }
  else if ( mode  ='xddl_save')
              http('Save XDDL to DAV');
  else if ( mode  ='xddl_load')
              http('Load XDDL from DAV');
  else if ( mode  ='foreign_key_remove')
              http('Remove Foreign Key');
  else if ( mode  ='exec_xddl')
              http('Execute');
  else if ( mode  ='xddl_execute_error')
              http('Execution error message.');
  else if ( mode  ='table_remove')
              http('Remove Table.');
  else if ( mode  ='foreign_key_actions')
              http('Foreign Key Actions Editor.');


        } ?>
      </td>
    </vm:rawheader>

    <vm:pagebody>
      <v:template name="template1" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) is null)">
            <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
            if (self.objects is null)
          self.objects := xddl_get(null);
      else
         self.objects := xml_tree_doc(self.objects);

         ]]></script>
                    </v:before-data-bind>
            </vm:events>

  <vm:form name="xddl_list_form" type="simple" method="POST" action="">
          <input type="hidden" name="table" value="<?= get_keyword('table', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
          if (get_keyword('edit_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?entry_mode=init_table&mode=%s&table_name=%s&sid=%s&realm=%s\r\n','edit',get_keyword('xddl_objects_list_contol',params),self.sid ,self.realm));
          return;
          }
          if (get_keyword('create_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?entry_mode=init_table&mode=create&sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('init_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=init_xddl&sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('save_command',params) is not null) {
              self.wrong_entry := null;
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=xddl_save&sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('load_command',params) is not null) {
              self.wrong_entry := null;
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=xddl_load&sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('exec_command',params) is not null) {
          declare res varchar;
                declare difference xml_tree;


          difference := xddl_diff(self.objects);
          res := xddl_to_ddl(xml_tree_doc(difference));
          self.statements := res;

          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=exec_xddl&sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('table_remove_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=table_remove&table_name=%s&sid=%s&realm=%s\r\n',get_keyword('xddl_objects_list_contol',params), self.sid ,self.realm));
          return;
          }



        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
            <vm:control name="xddl_objects_list_contol" type="select">
              <vm:caption value="Tables" pos="top" class="SubInfo"/>

              <vm:attrs xhtml_style="height:200; width:100%" xhtml_size="10"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[ {
        if ( get_keyword('mode',params) is null) {
           declare t_obj, t_orig xml_tree;
           declare len, i integer;

      t_obj := xpath_eval('/tables/table',self.objects,0); -- xddl_get(null)
      len := length(t_obj);
      i:=0;
          (control as vspx_select_list).vsl_items := vector();
          (control as vspx_select_list).vsl_item_values := vector();
      while (i < len) {
           declare name varchar;
            name := xpath_eval('./@name',aref(t_obj,i));
            --name := xpath_eval('/*/@name',aref(t_obj,i), i+1);
                              (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
                              (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
         i:= i + 1;
      }
              (control as vspx_select_list).vsl_selected_inx := 0;
      control.ufl_value :=  aref( (control as vspx_select_list).vsl_item_values,0);
      control.vs_set_selected();

          }
        }
        ]]></script>
                </v:before-data-bind>
              </vm:events>
            </vm:control>
          </vm:row>
          <vm:row>
            <vm:bgroup colspan="4" align="center">
              <v:button action="submit" name="init_command" value="Init" xhtml_style="width: 56px;"/>
              <v:button action="submit" name="load_command" value="Load" xhtml_style="width: 56px;"/>
              <v:button action="submit" name="save_command" value="Save" xhtml_style="width: 56px;"/>
              <v:button action="submit" name="table_remove_command" value="Remove" xhtml_style="width: 56px;"/>
              <v:button action="submit" name="create_command" value="Create" xhtml_style="width: 56px;"/>
              <v:button action="submit" name="edit_command" value="Edit" xhtml_style="width: 56px;"/>
              <v:button action="submit" name="exec_command" value="Execute" xhtml_style="width: 56px;"/>

            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template2" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'edit' )">
            <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
             if ( ( get_keyword('mode', params) = 'edit') and ( get_keyword('entry_mode', params) = 'init_table') ) {
        declare table_name varchar;
        table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);
        self.current_table :=  xml_cut( xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),xml_tree_doc(self.objects)) );
       } else if ( get_keyword('mode', params) = 'edit')
        self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));

         ]]></script>
                    </v:before-data-bind>
            </vm:events>




        <vm:form name="xddl_table_edit_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
                declare table_name, path varchar;
          table_name := get_keyword('table_name', params);
          if (get_keyword('cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('apply_command',params) is not null) {
          path := sprintf('/tables/table[@name=\'%s\']',table_name);
          self.objects:=  XMLUpdate(xml_tree_doc(self.objects),path, self.current_table);
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }

          if (get_keyword('column_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?back=edit&mode=column_create&table_name=%s&sid=%s&realm=%s\r\n',get_keyword('table_name', control.vc_page.vc_event.ve_params), self.sid ,self.realm));
          return;
          }
          if (get_keyword('pk_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?back=edit&mode=primary_key_dialog&sid=%s&realm=%s&table_name=%s\r\n',self.sid ,self.realm, get_keyword('table_name', control.vc_page.vc_event.ve_params)));
          return;
          }
          if (get_keyword('fk_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?back=edit&mode=column_select_foreign&sid=%s&realm=%s&table_name=%s\r\n',self.sid ,self.realm, get_keyword('table_name', control.vc_page.vc_event.ve_params)));
          return;
          }



        ]]></script>
            </v:on-post>
          </vm:events>
              <vm:row>
        <vm:raw><td> Table Name</td>
         <td>
           <?vsp
       http(xpath_eval('/@name', self.current_table));
     ?>
         </td>
    </vm:raw>

    <vm:raw>
      <td>Parent Table</td>
      <td>
       <v:data-list name="parent_contol"   xhtml_style="width: 200px;"  list-document="--xml_tree_doc(self.objects)" list-match="'/tables/table'" list-key-path="@name" list-value-path="@name" element-value="--self.current_table" element-place="@parent">
                    <v:after-data-bind>
                      <script><![CDATA[
            if (get_keyword('mode', params) = 'edit' ) {
                        (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('No Parent') );
                        (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('xsi:nil'));
       control.ufl_value :=  xpath_eval('/table/@parent', xml_tree_doc(self.current_table) );
       control.vs_set_selected();
       }
                    ]]></script>
                    </v:after-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
       </v:data-list>
      </td>
    </vm:raw>
          </vm:row>
    <vm:row>
    <vm:raw><td colspan="4">
    <?vsp
      { declare table_name varchar;
        table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);
        if (self.current_table is not null and (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'edit')) {
           declare objs xml_tree;
     declare buf, column_name, collation, id_by varchar;
     declare cols, refs any;
     declare len, i, len2, i2 integer;
     cols := vector();
           objs := xml_tree_doc(self.current_table);

     cols:= xpath_eval('/table/column',self.current_table,0);
     len := length(cols);
     i := 0;
      http('<table border="1" cellspacing="0" cellpadding="0" width="100%"><caption><b>Columns</b></caption>');
      http('<tr>');
      http('<td align="center">Key</td>');
      http('<td align="center" width="30%">Name</td>');
      http('<td align="center">Type</td>');
      http('<td align="center">Nullable</td>');
      http('<td align="center">Identity</td>');
      http('<td align="center">Collation</td>');
      http('<td align="center">Identified By</td>');
      http('<td colspan="2" align="center">&nbsp;</td>');
      http('</tr>');

      while (i < len) {
        column_name := xpath_eval('./@name',aref(cols,i));
        collation :=  xpath_eval('./@collation',aref(cols,i));
        id_by   :=  xpath_eval('./@identified_by',aref(cols,i));
        http('<tr>');
        http('<td align="center">');
        if ( xpath_eval(sprintf('/table/pk/field[@col = \'%s\']/@col',column_name ),self.current_table) = column_name  or
             xpath_eval(sprintf('/table/fk/reference[@col = \'%s\']/@col',column_name ),self.current_table) = column_name  ) {
              http('*');
        } else
            http('&nbsp;');
        http('</td>');
        http(sprintf('<td>%s</td>',column_name ));
        http(sprintf('<td>%s</td>',xpath_eval('./@type-text',aref(cols,i)) ));
        http(sprintf('<td align="center">%s</td>',case when ( xpath_eval('./@nullable',aref(cols,i)) = '1' ) then '*' else '&nbsp'  end ));
        http(sprintf('<td align="center">%s</td>',case when ( xpath_eval('./@identity',aref(cols,i)) = '1' ) then '*' else '&nbsp'  end ));
        http(sprintf('<td>%s</td>',case when ( collation = 'xsi:nil' or collation = '' ) then '&nbsp;' else collation  end ));
        http(sprintf('<td>%s</td>',case when ( id_by = 'xsi:nil' or id_by = '' ) then '&nbsp;' else id_by  end ));
        http(sprintf('<td  align="center"  class="listing_col_action"><a href="%s">Edit</a></td>',

        sprintf('xddl-tables.vspx?back=edit&mode=column_edit&table_name=%s&column_name=%s&sid=%s&realm=%s', table_name, column_name,self.sid ,self.realm) ));
        http(sprintf('<td  align="center"><a href="%s">Remove</a></td>',
        sprintf('xddl-tables.vspx?back=edit&mode=column_remove&table_name=%s&column_name=%s&sid=%s&realm=%s', table_name, column_name,self.sid ,self.realm) ));
        http('</tr>');
        i := i +1;
      }
      http('</table>');

     cols:= xpath_eval('/table/pk/field',self.current_table,0);
     len := length(cols);
     if (len > 0) {
      declare pk_column_name varchar;
      http('<table border="1" cellspacing="0" cellpadding="0" width="35%"><caption><b>Primary Key</b></caption>');
      http('<tr>');
      http('<td align="center">Ord</td>');
      http('<td align="center" width="100%">Column</td>');
--      http('<td colspan="2" align="center">Action</td>');
      http('</tr>');

       i := 0;

      while (i < len) {
        pk_column_name := xpath_eval('./@col',aref(cols,i));
        http('<tr>');
        http(sprintf('<td>%s</td>',xpath_eval('./@ord',aref(cols,i)) ));
        http(sprintf('<td>%s</td>', pk_column_name));

--        http(sprintf('<td  align="center"><a href="%s">Edit</a></td>',
--        sprintf('xddl-tables.vspx?mode=pk_edit&table_name=%s&column_name=%s&sid=%s&realm=%s', table_name, pk_column_name,self.sid ,self.realm) ));
--        http(sprintf('<td  align="center"><a href="%s">Remove</a></td>',
--        sprintf('xddl-tables.vspx?mode=pk_remove_column&table_name=%s&column_name=%s&sid=%s&realm=%s', table_name, pk_column_name,self.sid ,self.realm) ));
        http('</tr>');
        i := i +1;
      }
      http('</table>');
     }
     cols:= xpath_eval('/table/fk',objs,0);
    len := length(cols);
    i := 0;

     if (len > 0) {
        http('<table border="1"  width="100%" frame="box" rules="none"><caption><b>Foreign Keys</b></caption>');
      while (i < len) {
             declare ref_table_name, delete_rule, update_rule,  action_anchor varchar;
             update_rule := xpath_eval('./@update_rule',aref(cols,i));
             delete_rule := xpath_eval('./@delete_rule',aref(cols,i));
             if (update_rule='')
                update_rule := 'no action';
             if (delete_rule='')
                delete_rule := 'no action';

             ref_table_name := xpath_eval('./@ref_table',aref(cols,i));

        action_anchor:= sprintf('xddl-tables.vspx?back=%s&mode=foreign_key_actions&table_name=%s&ref_table_name=%s&sid=%s&realm=%s',
              get_keyword('mode', control.vc_page.vc_event.ve_params) ,
              table_name, ref_table_name,self.sid ,self.realm);

        http(sprintf('<tr><td>&nbsp;</td><td>%s</td><td>On Update:%s</td><td>On Delete:%s</td><td  align="left"><a href="%s">Modify</a></td> </tr>',ref_table_name, update_rule , delete_rule, action_anchor  ));
        --http('<tr><td colspan="2">Column Name</td><td colspan="2">Reference Column Name</td></tr>');
        refs := xpath_eval('./reference', aref(cols,i),0  );
        len2 := length(refs);
        i2 := 0;
        while (i2 < len2) {
          http('<tr>');
          http(sprintf('<td colspan="1">%s</td>',xpath_eval('./@col',aref(refs,i2)) ));
          http(sprintf('<td colspan="1">%s</td>',xpath_eval('./@ref_col',aref(refs,i2)) ));
          --http('<td colspan="2"></td>');
          http(sprintf('<td  align="left"  class="listing_col_action"><a href="%s">Edit</a>&nbsp;&nbsp;&nbsp;',
            sprintf('xddl-tables.vspx?back=%s&what=edit&mode=foreign_key_edit&table_name=%s&ref_table_name=%s&column_name=%s&sid=%s&realm=%s&foreign_key_reference_table_control=%s&foreign_key_reference_columns_control=%s',
              get_keyword('mode', control.vc_page.vc_event.ve_params) , table_name, xpath_eval('./@ref_table',aref(cols,i)) , xpath_eval('./@col',aref(refs,i2)),self.sid ,self.realm, xpath_eval('./@ref_table',aref(cols,i)), xpath_eval('./@ref_col',aref(refs,i2))) ));
          http(sprintf('<a href="%s">Remove</a></td>',
            sprintf('xddl-tables.vspx?back=%s&mode=foreign_key_remove&table_name=%s&ref_table_name=%s&column_name=%s&sid=%s&realm=%s',
               get_keyword('mode', control.vc_page.vc_event.ve_params), table_name, xpath_eval('./@ref_table',aref(cols,i)) , xpath_eval('./@col',aref(refs,i2)),self.sid ,self.realm) ));
          http('</tr>');
          i2 := i2 +1;
        }
        i := i +1;
      }
      http('</table>');
      }

        }
      }

    ?></td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="4" align="center">
        <v:button action="submit" name="column_command" value="Add column"/>
              <v:button action="submit" name="pk_command" value="Primary Key"/>
              <v:button action="submit" name="fk_command" value="Add Foreign Key"/>
        <v:button action="submit" name="apply_command" value="Apply"/>
              <v:button action="submit" name="cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template3" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_edit' )">
            <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
          if ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_edit' ) {
              declare path, table_name, column_name varchar;
           if (not e.ve_is_post) {
        if ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_edit' ) {
              table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);
        column_name := get_keyword('column_name', control.vc_page.vc_event.ve_params);
              path := sprintf('/table/column[@name=\'%s\']', column_name);
             self.column_edit_buff := xml_cut(xpath_eval(path,xml_tree_doc(self.current_table)) );
             self.type_value := xpath_eval('/column/@type', self.column_edit_buff);
        } else
            self.column_edit_buff := xtree_doc('<fake/>');
                       } else
                  self.column_edit_buff := xpath_eval('/column', xml_tree_doc(self.column_edit_buff));

      self.type_name := '';

         } ]]></script>
                    </v:before-data-bind>
            </vm:events>
        <vm:form name="xddl_column_edit_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="column_name" value="<?= get_keyword('column_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[

                declare path, table_name, column_nname, column_name, tmp varchar;
          declare objs xml_tree;
          table_name := get_keyword('table_name', params);
          column_name := get_keyword('column_name', params);
          column_nname := xpath_eval('/column/@name', self.column_edit_buff);

          if (get_keyword('edit_column_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&table_name=%s&sid=%s&realm=%s\r\n',get_keyword('back', params), table_name,  self.sid ,self.realm));
          return;
          }
          if (get_keyword('edit_column_apply_command',params) is not null) {
        tmp := get_keyword('column_precision_control', params);
        if (tmp='' or tmp='0')
           tmp := self.type_name;
        else
           tmp := sprintf('%s(%s)', self.type_name , tmp );

      if (  column_nname <> column_name and  xpath_eval ( sprintf('/table/column[@name=\'%s\']',column_nname),xml_tree_doc(self.current_table) ) is not null ) {
        table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);
            http_request_status ('HTTP/1.1 302 Found');
            http_header (sprintf('Location: xddl-tables.vspx?back=%s&mode=column_exist&sid=%s&realm=%s&table_name=%s&column_name=%s\r\n',get_keyword('back',params), self.sid ,self.realm, table_name, column_name));
            return;
      }  else {
        XMLAddAttribute(self.column_edit_buff, 2, 'type-text', tmp );


          path := sprintf('/table/column[@name=\'%s\']', column_name);

          self.current_table := XMLUpdate(xml_tree_doc(self.current_table),path, self.column_edit_buff);

          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n',get_keyword('back',params),self.sid ,self.realm,table_name));
          return;
       }
          }


        ]]></script>
            </v:on-post>
          </vm:events>
        <!--  element-place="@attr_name | text()"
      vc_get_value_from_element()
      vc_put_value_from_element();
      -->
    <vm:row>
    <vm:raw><td>Table Name</td><td colspan="6"><b>
    <?vsp
         http(get_keyword('table_name', control.vc_page.vc_event.ve_params));
    ?>
    </b></td>
    </vm:raw>
    </vm:row>

    <vm:row>
      <vm:container colspan="6" width="100%">
      <vm:row>
      <vm:raw>
      <td align="center"><b>Existing columns</b></td>
      <td  align="center"><b>Existing column parameters</b></td>
      </vm:raw>
      </vm:row>

      <vm:row>
      <vm:raw>
      <td>
      <table width="100%" frame="box" border="1"  rules="none">
      <?vsp {
          declare table_name, path, column_name, pk_name varchar;
          declare tables_arr  any;
          declare objs xml_tree;
           declare t_obj, t_orig xml_tree;
           declare len, i integer;
      table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);

      t_obj := xpath_eval('/table/column',xml_tree_doc(self.current_table),0);
      len := length(t_obj);
      if (len = 0 )
          http('<tr><td><b>No columns yet</b></td></tr>');
      i:=0;
      while (i < len) {
         declare name varchar;
         name := xpath_eval('./@name',aref(t_obj,i));
         http(sprintf('<tr><td>%s</td></tr>',name));
         i:= i + 1;
      }

      }?>
      </table>
      </td>
      </vm:raw>
      <vm:container width="100%">

          <vm:row>
              <vm:control name="column_name_control" type="edit">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
                  </vm:events>
                  <vm:caption value="Columm Name" pos="left"/>
      <vm:attrs element-value="--self.column_edit_buff" element-place="@name" xhtml_style="width: 200px;"/>
                </vm:control>
            <vm:control name="column_type_contol" type="select">
              <vm:caption value="Type" align="left"/>
        <vm:attrs xhtml_style="width: 200px;" element-value="--self.column_edit_buff" element-place="@type"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
          if ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_edit' ) {
          declare i, len integer;
          declare id varchar;
          len := length(self.column_types);
          i := 0;
          (control as vspx_select_list).vsl_items := vector();
          (control as vspx_select_list).vsl_item_values := vector();
              (control as vspx_select_list).vsl_selected_inx := 0;

      while (i < len) {
           id :=  sprintf('%d',aref(self.column_types, i));
           if (id = self.type_value )
        (control as vspx_select_list).vsl_selected_inx := i/2;
                             (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(aref(self.column_types, i+1)) );
                             (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(sprintf('%d',aref(self.column_types, i))));
         i:= i + 2;
      }
       self.type_name := aref((control as vspx_select_list).vsl_items, (control as vspx_select_list).vsl_selected_inx);
        } ]]></script>
                </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[

        self.type_name := aref((control as vspx_select_list).vsl_items, (control as vspx_select_list).vsl_selected_inx);
         control.vc_put_value_to_element();

                    ]]></script>
        </v:on-post>
              </vm:events>
            </vm:control>
          <vm:raw>
        <td align="left"><b>(</b><v:text xhtml_size="4" name="column_precision_control" element-value="--self.column_edit_buff" element-place="@prec">
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
    </v:text>
        <b>)</b></td>
      </vm:raw>
          </vm:row>
    <vm:row><vm:raw><td><label for="column_ident_control">Identity</label></td><td>
              <v:check-box name="column_ident_control" element-value="--self.column_edit_buff" element-place="@identity" is-boolean="1" true-value="1" false-value="0" xhtml_id="column_ident_control">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
                  </vm:events>
                </v:check-box>
    </td></vm:raw>
    <vm:raw><td><label for="column_nullable_control">Nullable</label></td><td>
              <v:check-box name="column_nullable_control" element-value="--self.column_edit_buff" element-place="@nullable" is-boolean="1" true-value="1" false-value="0" xhtml_id="column_nullable_control">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
                  </vm:events>
                </v:check-box>
    </td></vm:raw>
          </vm:row>
          <vm:row>
              <vm:control name="column_identified_control" type="edit">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>

                  </vm:events>
                  <vm:caption value="Identified By" pos="left"/>
      <vm:attrs element-value="--self.column_edit_buff" element-place="@identified_by" xhtml_style="width: 200px;"/>

                </vm:control>
              <vm:control name="column_collation_control" type="edit">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>

                  </vm:events>
                  <vm:caption value="Collation" pos="left"/>
        <vm:attrs element-value="--self.column_edit_buff" element-place="@collation" xhtml_style="width: 200px;"/>

                </vm:control>

    </vm:row>
    <vm:row>
              <vm:control name="column_default_control" type="edit">
                  <vm:events>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>

                  </vm:events>
                  <vm:caption value="Default value" pos="left"/>
        <vm:attrs element-value="--self.column_edit_buff" element-path="/column/default_value" element-place="text()" xhtml_style="width: 200px;"/>

                </vm:control>
          </vm:row>

      </vm:container>
      </vm:row>
      </vm:container>
          </vm:row>

    <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="edit_column_apply_command" value="Apply"/>
              <v:button action="submit" name="edit_column_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

<!-- -->

      <v:template name="template4" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_create' )">
            <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
           if ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_create' ) {
              declare path, table_name, column_name varchar;
           if (not e.ve_is_post) {
        if ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_create' ) {
             self.column_create_buff := xtree_doc('<column name="" type="" prec="0" identified_by="" collation="" identity=""><default_value>null</default_value></column>');
        } else
            self.column_create_buff := xpath_eval('/column', xml_tree_doc(self.column_create_buff));
                       }  else
                  self.column_create_buff := xpath_eval('/column', xml_tree_doc(self.column_create_buff));

      table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);

          } ]]></script>
                    </v:before-data-bind>
            </vm:events>
        <vm:form name="xddl_create_column_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
      declare table_name, tmp, path, column_name varchar;
      declare objs xml_tree;

      table_name := get_keyword('table_name', params);

          if (get_keyword('create_column_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&table_name=%s&sid=%s&realm=%s\r\n',get_keyword('back', params),table_name, self.sid ,self.realm));
          return;
          }
          if (get_keyword('create_column_apply_command',params) is not null) {
      tmp := get_keyword('create_column_precision_control', params);
      if (tmp='' or tmp='0')
         tmp := self.type_name;
      else
         tmp := sprintf('%s(%s)', self.type_name , tmp );

      column_name :=  get_keyword('create_column_name_control',params);

      if (  xpath_eval ( sprintf('/table/column[@name=\'%s\']',column_name),xml_tree_doc(self.current_table) ) is not null ) {
            http_request_status ('HTTP/1.1 302 Found');
            http_header (sprintf('Location: xddl-tables.vspx?back=%s&mode=column_exist&sid=%s&realm=%s&table_name=%s&column_name=%s\r\n',get_keyword('back',params), self.sid ,self.realm, table_name, column_name));
            return;
      }  else {


             XMLAddAttribute(self.column_create_buff, 2, 'type-text', tmp );
             path := sprintf('/table[@name=\'%s\']',table_name);
             objs := xpath_eval('/table',xml_tree_doc(self.current_table));
          XMLAppendChildren(objs, self.column_create_buff);
          self.current_table := objs;
          table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back',params),self.sid ,self.realm, table_name));
          return;
      }
          }
        ]]></script>
            </v:on-post>
          </vm:events>
    <vm:row>
    <vm:raw><td>Table Name</td><td colspan="6"><b>
    <?vsp
         http(get_keyword('table_name', control.vc_page.vc_event.ve_params));
    ?>
    </b></td>
    </vm:raw>
    </vm:row>

    <vm:row>
      <vm:container colspan="6" width="100%">
      <vm:row>
      <vm:raw>
      <td align="center"><b>Existing columns</b></td>
      <td  align="center"><b>New column parameters</b></td>
      </vm:raw>
      </vm:row>

      <vm:row>
      <vm:raw>
      <td>
      <table width="100%" frame="box" border="1"  rules="none">
      <?vsp {
          declare table_name, path, column_name, pk_name varchar;
          declare tables_arr  any;
          declare objs xml_tree;
           declare t_obj, t_orig xml_tree;
           declare len, i integer;
      table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);

      t_obj := xpath_eval('/table/column',xml_tree_doc(self.current_table),0);
      len := length(t_obj);
      if (len = 0 )
          http('<tr><td><b>No columns yet</b></td></tr>');
      i:=0;
      while (i < len) {
         declare name varchar;
         name := xpath_eval('./@name',aref(t_obj,i));
         http(sprintf('<tr><td>%s</td></tr>',name));
         i:= i + 1;
      }

      }?>
      </table>
      </td>
      </vm:raw>
      <vm:container width="100%">
          <vm:row>
              <vm:control name="create_column_name_control" type="edit">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;
                    ]]></script>
                    </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;
      control.vc_put_value_to_element();

                    ]]></script>
        </v:on-post>

                  </vm:events>
                  <vm:caption value="Columm Name" pos="left"/>
      <vm:attrs element-value="--self.column_create_buff" element-place="@name" xhtml_style="width: 200px;"/>

                </vm:control>
            <vm:control name="create_column_type_contol" type="select">
              <vm:caption value="Type" align="left"/><!-- xp_extenation( procedure_name, q_name) xname preffix for url :split -->
        <!-- list-document="--self.column_create_buff" list-match="./" list-key-path="@type" -->
        <vm:attrs xhtml_style="width: 200px;" element-value="--self.column_create_buff" element-place="@type"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
          if ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_create' ) {
          declare i, len integer;
          len := length(self.column_types);
          i := 0;
          (control as vspx_select_list).vsl_items := vector();
          (control as vspx_select_list).vsl_item_values := vector();

      while (i < len) {

                             (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(aref(self.column_types, i+1)) );
                             (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(sprintf('%d',aref(self.column_types, i))));
         i:= i + 2;
      }
              (control as vspx_select_list).vsl_selected_inx := 0;
          }
        ]]></script>
                </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
      self.type_name := aref((control as vspx_select_list).vsl_items, (control as vspx_select_list).vsl_selected_inx);
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>

              </vm:events>
            </vm:control>
          <vm:raw>
        <td align="left"><b>(</b><v:text xhtml_size="4" name="create_column_precision_control" element-value="--self.column_create_buff" element-place="@prec">
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
        </v:text><b>)</b></td>
      </vm:raw>
          </vm:row>
    <vm:row><vm:raw><td><label for="create_column_ident_control">Identity</label></td><td>
              <v:check-box name="create_column_ident_control" element-value="--self.column_create_buff" element-path="./@identity" xhtml_id="create_column_ident_control">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
                  </vm:events>
                </v:check-box>
    </td></vm:raw>
    <vm:raw><td><label for="create_column_nullable_control">Nullable</label></td><td>
              <v:check-box name="create_column_nullable_control" element-value="--self.column_create_buff" element-place="@nullable" xhtml_id="create_column_nullable_control">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
                  </vm:events>
                </v:check-box>
    </td></vm:raw>
          </vm:row>
          <vm:row>
              <vm:control name="create_column_identified_control" type="edit">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
                  </vm:events>
                  <vm:caption value="Identified By" pos="left"/>
      <vm:attrs xhtml_style="width: 200px;" element-value="--self.column_create_buff" element-place="@identified_by"/>

                </vm:control>
              <vm:control name="create_column_collation_control" type="edit">
                  <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
                  declare dav_res_id  integer;
                  declare root_value  varchar;

                    ]]></script>
                    </v:before-data-bind>
                  </vm:events>
                  <vm:caption value="Collation" pos="left"/>
      <vm:attrs xhtml_style="width: 200px;"/>
                </vm:control>

    </vm:row>
    <vm:row>
              <vm:control name="create_column_default_control" type="edit">
                  <vm:events>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>

                  </vm:events>
                  <vm:caption value="Default value" pos="left"/>
        <vm:attrs element-value="--self.column_create_buff" element-path="/column/default_value" element-place="text()" xhtml_style="width: 200px;"/>

                </vm:control>
          </vm:row>


      </vm:container>
      </vm:row>
      </vm:container>
          </vm:row>


          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="create_column_apply_command" value="Apply"/>
              <v:button action="submit" name="create_column_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template5" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_remove' )">
        <vm:form name="xddl_remove_column_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="column_name" value="<?= get_keyword('column_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
             declare objs xml_tree;
       declare path, table_name, column_name  varchar;
          table_name := get_keyword('table_name', params);
          column_name := get_keyword('column_name', params);
          if (get_keyword('remove_column_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('remove_column_apply_command',params) is not null) {

         objs := xml_tree_doc(self.current_table);
         path := sprintf('/table/column[@name=\'%s\']', column_name);
        self.current_table := XMLUpdate(xml_tree_doc(self.current_table),path, NULL);
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http(sprintf('You are about to remove column <b>%s</b> from %s table. Are you sure?',
            get_keyword('column_name', control.vc_page.vc_event.ve_params),
      get_keyword('table_name', control.vc_page.vc_event.ve_params)  ));
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="remove_column_apply_command" value="Apply"/>
              <v:button action="submit" name="remove_column_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>



      <v:template name="template6" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'primary_key_dialog' )">

            <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
          if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'primary_key_dialog' ) {
              declare path, table_name, column_name  varchar;
        declare tmp_arr any;
        declare i, len integer;
            table_name := get_keyword('table_name', params);
        if ( get_keyword('reload_entry', params) is null ) {
          path := '/table/pk/field';

          tmp_arr := xpath_eval(path,xml_tree_doc(self.current_table),0);
          self.primary_key := vector();
          i := 0;
          len := length(tmp_arr);
          while ( i < len) {
             column_name := xpath_eval('./@col',aref(tmp_arr,i));
             self.primary_key := vector_concat(self.primary_key,vector( column_name) );
            i := i +1;
          }
        }
       } ]]></script>
                    </v:before-data-bind>
            </vm:events>

        <vm:form name="xddl_primary_key_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="reload_entry" value="1" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[

             declare objs xml_tree;
       declare path, table_name, column_name,  pk_name, tmp_pk  varchar;
             declare tmp_array, cols any;
       declare i, len, is_found integer;

       table_name := get_keyword('table_name', params);
                if (get_keyword('primary_key_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('primary_key_apply_command',params) is not null) {
                len :=  length(self.primary_key);
          --objs := xml_tree_doc(self.current_table);
          objs := xpath_eval('/table',xml_tree_doc(self.current_table));
          path := sprintf('/table/pk/field',table_name);
          cols:= xpath_eval(path,objs,0);

          if (len > 0) { -- update pk
             declare pk_tree, field xml_tree;

             pk_tree := xml_tree_doc(sprintf('<pk is_unique="%s" is_clustered="%s" is_oid="%s"/>',
                 xpath_eval('/table/pk/@is_unique',xml_tree_doc(self.current_table)),
           xpath_eval('/table/pk/@is_clustered',xml_tree_doc(self.current_table)),
           xpath_eval('/table/pk/@is_oid',xml_tree_doc(self.current_table))));
             pk_tree := xpath_eval('/pk',pk_tree);
             i :=0;
             while (i < len) {
              tmp_pk := aref(self.primary_key,i);
        field := xml_tree_doc(sprintf('<field ord="%d" col="%s"/>',i,tmp_pk));
        XMLAppendChildren ( pk_tree, field);
              i:= i +1;
             }
             if (length( cols) = 0 ) {
                XMLAppendChildren (objs,   pk_tree);
          self.current_table := objs;
             } else {
        path := sprintf('/table/pk');
        self.current_table := XMLUpdate(objs,path, pk_tree);
        }
          } else if  (length(cols) > 0 ) { -- remove pk
              self.current_table := XMLUpdate(objs,'/table/pk', NULL);
          }

          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('primary_key_remove_command',params) is not null) {
          pk_name := get_keyword('primary_keys_columns_control', params);
          if (pk_name is not null) {
             tmp_array := vector();
             i := 0;
             len :=  length(self.primary_key);
             while (i < len) {
              tmp_pk := aref(self.primary_key,i);
              if (tmp_pk  <> pk_name)
          tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
              i:= i +1;
             }
             self.primary_key :=  tmp_array;
          }
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?reload_entry=1&mode=primary_key_dialog&back=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('primary_key_add_command',params) is not null) {
          pk_name := get_keyword('primary_keys_available_columns_control', params);
          if (pk_name is not null) {
             self.primary_key := vector_concat(self.primary_key,vector( pk_name) );
          }
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?reload_entry=1&mode=primary_key_dialog&back=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('primary_key_up_command',params) is not null) {
          pk_name := get_keyword('primary_keys_columns_control', params);
          if (pk_name is not null) {
             i := 0;
             is_found := -1;
             len :=  length(self.primary_key);
             while (i < len) {
              tmp_pk := aref(self.primary_key,i);
              if (tmp_pk  = pk_name)
             is_found := i;
              i:= i +1;
             }

             if (is_found > 0) {
                tmp_array := vector();
          i:=0;
          while (i < len) {
             tmp_pk := aref(self.primary_key,i);
             if (( is_found - 1) =  i) {
                tmp_array := vector_concat(tmp_array,vector( pk_name) );
                tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
             } else if ( is_found <>  i) {
                tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
             }
             i:= i +1;
          }
          self.primary_key :=  tmp_array;
             }
          }
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?reload_entry=1&mode=primary_key_dialog&back=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('primary_key_down_command',params) is not null) {
          pk_name := get_keyword('primary_keys_columns_control', params);
          if (pk_name is not null) {
             i := 0;
             is_found := -1;
             len :=  length(self.primary_key);
             while (i < len) {
              tmp_pk := aref(self.primary_key,i);
              if (tmp_pk  = pk_name)
             is_found := i;
              i:= i +1;
             }

             if ((is_found >= 0) and (is_found < (len -1)) ) {
                tmp_array := vector();
          i:=0;
          while (i < len) {
             tmp_pk := aref(self.primary_key,i);
             if (( is_found + 1) =  i) {
                tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
                tmp_array := vector_concat(tmp_array,vector( pk_name) );
             } else if ( is_found <>  i) {
                tmp_array := vector_concat(tmp_array,vector( tmp_pk) );
             }
             i:= i +1;
          }
          self.primary_key :=  tmp_array;
             }
          }
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?reload_entry=1&mode=primary_key_dialog&back=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }

        ]]></script>
            </v:on-post>
          </vm:events>
    <vm:row>
    <vm:raw><td>Table Name</td><td colspan="6">
    <?vsp
         http(get_keyword('table_name', control.vc_page.vc_event.ve_params));
    ?>
    </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:control name="primary_keys_available_columns_control" type="select">
              <vm:caption value="Available Columns" align="top"/>
        <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" xhtml_multiple="TRUE"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
         if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'primary_key_dialog' ) {
          declare i, len, i2, len2,  is_found integer;
          declare table_name, path, column_name, pk_name varchar;
          declare cols  any;
          declare objs xml_tree;

          table_name := get_keyword('table_name', params);
          cols := vector();

          objs := xml_tree_doc(self.current_table);

          cols:= xpath_eval('/table/column',objs,0);




          len := length(cols);
          len2 := length(self.primary_key);
          i := 0;
          (control as vspx_select_list).vsl_items := vector();
          (control as vspx_select_list).vsl_item_values := vector();

      while (i < len) {
           column_name := xpath_eval('./@name',aref(cols,i));

           i2 := 0;
           is_found := 0;
           while (i2 < len2) {
            pk_name := aref(self.primary_key,i2);

            if (column_name = pk_name)
              is_found := 1;
            i2 := i2 +1;
           }
           if (is_found = 0) {
                              (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(column_name) );
                              (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(column_name));
           }
         i:= i +1;
      }
              (control as vspx_select_list).vsl_selected_inx := 0;
         }
        ]]></script>
                </v:before-data-bind>
              </vm:events>

            </vm:control>
    <vm:raw>
    <td><table border="0"><tr> <td>
     <v:button action="submit" name="primary_key_add_command" value=">>" xhtml_style="width: 28px;"/>
    </td></tr><tr><td>
     <v:button action="submit" name="primary_key_remove_command" value="<<" xhtml_style="width: 28px;"/>
    </td></tr><tr><td>
     <v:button action="submit" name="primary_key_up_command" value="Up" xhtml_style="width: 28px;"/>
    </td></tr><tr><td>
     <v:button action="submit" name="primary_key_down_command" value="Dn" xhtml_style="width: 28px;"/>
    </td></tr>

    </table>
    </td>
    </vm:raw>
            <vm:control name="primary_keys_columns_control" type="select">
              <vm:caption value="Primary Key Columns" align="top"/>
        <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" xhtml_multiple="TRUE"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
         if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'primary_key_dialog' ) {
          declare i, len integer;
          declare table_name, path, column_name varchar;
          declare cols any;
          declare objs xml_tree;

          table_name := get_keyword('table_name', params);


          len := length( self.primary_key);
          i := 0;
          (control as vspx_select_list).vsl_items := vector();
          (control as vspx_select_list).vsl_item_values := vector();

      while (i < len) {
           column_name := aref(self.primary_key,i);
                             (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(column_name) );
                             (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(column_name));
         i:= i +1;
      }
              (control as vspx_select_list).vsl_selected_inx := 0;
         }
        ]]></script>
                </v:before-data-bind>
              </vm:events>
            </vm:control>

    </vm:row>
    <vm:row>
      <vm:container colspan="3">
         <vm:raw>
           <tr>
      <td><label for="primary_key_unique_control">Unique</label></td><td>
        <v:check-box name="primary_key_unique_control" element-value="--self.current_table" element-path="/table/pk" element-place="@is_unique" is-boolean="0" true-value="1" false-value="0" xhtml_id="primary_key_unique_control">
                    </v:check-box>
      </td>
      </tr><tr>
      <td><label for="primary_key_clustered_control">Clustered</label></td>
      <td>
        <v:check-box name="primary_key_clustered_control" element-value="--self.current_table" element-path="/table/pk" element-place="@is_clustered" xhtml_id="primary_key_clustered_control">
                    </v:check-box>
      </td>
      </tr> <tr>
      <td><label for="primary_key_objectid_control">Object ID</label></td>
      <td>
        <v:check-box name="primary_key_objectid_control" element-value="--self.current_table" element-path="/table/pk" element-place="@is_oid" xhtml_id="primary_key_objectid_control">
                    </v:check-box>
      </td>
     </tr>
         </vm:raw>
      </vm:container>
          </vm:row>

          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="primary_key_apply_command" value="Apply"/>
              <v:button action="submit" name="primary_key_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template7" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'init_xddl' )">
        <vm:form name="init_xddl_form" type="simple" method="POST" action="">
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
             declare objs xml_tree;
       declare path, table_name, column_name  varchar;
          if (get_keyword('init_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('init_apply_command',params) is not null) {
                self.objects := xddl_get(null);
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http('You are about to reload xddl data from the database. All done changes will be lost. Are you sure?' );
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="init_apply_command" value="Apply"/>
              <v:button action="submit" name="init_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template8" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'create' )">
            <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
             if ( ( get_keyword('mode', params) = 'create') and ( get_keyword('entry_mode', params) = 'init_table') ) {
        declare table_name varchar;
        table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);
        self.current_table :=  xml_tree_doc('<table name="" parent=""/>');
        self.current_table := xpath_eval('/table', self.current_table);
       } else  if ( get_keyword('mode', params) = 'create')
          self.current_table := xpath_eval('/table', xml_tree_doc( self.current_table));

         ]]></script>
                    </v:before-data-bind>
            </vm:events>




        <vm:form name="xddl_table_create_form" type="simple" method="POST" action="">
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
          declare path, table_name varchar;
          declare objs xml_tree;
          table_name := get_keyword('create_table_name_control', params);

          if (get_keyword('create_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('create_apply_command',params) is not null) {
          if (  xpath_eval ( sprintf('/tables/table[@name=\'%s\']',table_name),self.objects) is not null ) {
            http_request_status ('HTTP/1.1 302 Found');
            http_header (sprintf('Location: xddl-tables.vspx?mode=table_exist&sid=%s&realm=%s&table_name=%s\r\n',self.sid ,self.realm, table_name));
            return;
          }  else {
        objs := xpath_eval('/tables',self.objects);
        XMLAppendChildren(objs, self.current_table);
        self.objects :=  objs;
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
        return;
              }
          }




          if (get_keyword('create_column_command',params) is not null) {
                --XMLAddAttribute(self.current_table, 2, 'name', table_name );
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?back=create&mode=column_create&table_name=%s&sid=%s&realm=%s\r\n',table_name, self.sid ,self.realm));
          return;
          }
          if (get_keyword('create_pk_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?back=create&mode=primary_key_dialog&sid=%s&realm=%s&table_name=%s\r\n',self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('create_fk_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?back=create&mode=column_select_foreign&sid=%s&realm=%s&table_name=%s\r\n',self.sid ,self.realm, table_name ));
          return;
          }


        ]]></script>
            </v:on-post>
          </vm:events>
              <vm:row>

              <vm:control name="create_table_name_control" type="edit">
                  <vm:caption value="Table Name" pos="left"/>
      <vm:attrs xhtml_style="width: 200px;" element-value="--self.current_table" element-place="@name"/>
              <vm:events>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
              </vm:events>

                </vm:control>
    <vm:raw>
      <td>Parent Table</td>
      <td>
       <v:data-list name="create_table_parent_contol"   xhtml_style="width: 200px;"  list-document="--xml_tree_doc(self.objects)" list-match="'/tables/table'" list-key-path="@name" list-value-path="@name" element-value="--self.current_table" element-place="@parent">
                    <v:after-data-bind>
                      <script><![CDATA[
                        (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector('No Parent') );
                        (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector('xsi:nil'));

                    ]]></script>
                    </v:after-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
        </v:data-list>
      </td>
    </vm:raw>
<!--
            <vm:control name="create_table_parent_contol" type="select">
              <vm:caption value="parent" align="left"/>
        <vm:attrs xhtml_style="width: 200px;"  list-document="--xml_tree_doc(self.objects)" list-match="'/tables/table'" list-key-path="@name" list-value-path="@name"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
        ]]></script>
                </v:before-data-bind>
              </vm:events>
            </vm:control>
-->
          </vm:row>
    <vm:row>
    <vm:raw><td colspan="4">
    <?vsp
      { declare table_name varchar;
        table_name := get_keyword('table_name', control.vc_page.vc_event.ve_params);

        if (self.current_table is not null and (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'create')) {
           declare objs xml_tree;
     declare buf, column_name, collation, id_by varchar;
     declare cols,refs any;
     declare len, i, len2, i2 integer;
     cols := vector();
           objs := xml_tree_doc(self.current_table);

     cols:= xpath_eval('/table/column',self.current_table,0);
     len := length(cols);
     i := 0;
      http('<table border="1" cellspacing="0" cellpadding="0" width="100%"><caption><b>Columns</b></caption>');
      http('<tr>');
      http('<td align="center">Key</td>');
      http('<td align="center" width="30%">Name</td>');
      http('<td align="center">Type</td>');
      http('<td align="center">Nullable</td>');
      http('<td align="center">Identity</td>');
      http('<td align="center">Collation</td>');
      http('<td align="center">Identified By</td>');
      http('<td colspan="2" align="center">Action</td>');
      http('</tr>');

      while (i < len) {
        column_name := xpath_eval('./@name',aref(cols,i));
        collation :=  xpath_eval('./@collation',aref(cols,i));
        id_by   :=  xpath_eval('./@identified_by',aref(cols,i));
        http('<tr>');
        http('<td>&nbsp;</td>');
        http(sprintf('<td>%s</td>',column_name ));
        http(sprintf('<td>%s</td>',xpath_eval('./@type-text',aref(cols,i)) ));
        http(sprintf('<td align="center">%s</td>',case when ( xpath_eval('./@nullable',aref(cols,i)) = '1' ) then '*' else '&nbsp'  end ));
        http(sprintf('<td align="center">%s</td>',case when ( xpath_eval('./@identity',aref(cols,i)) = '1' ) then '*' else '&nbsp'  end ));
        http(sprintf('<td>%s</td>',case when ( collation = 'xsi:nil' or collation = '' ) then '&nbsp;' else collation  end ));
        http(sprintf('<td>%s</td>',case when ( id_by = 'xsi:nil' or id_by = '' ) then '&nbsp;' else id_by  end ));
        http(sprintf('<td  align="center"><a href="%s">Edit</a></td>',

        sprintf('xddl-tables.vspx?back=create&mode=column_edit&table_name=%s&column_name=%s&sid=%s&realm=%s', table_name, column_name,self.sid ,self.realm) ));
        http(sprintf('<td  align="center"><a href="%s">Remove</a></td>',
        sprintf('xddl-tables.vspx?back=create&mode=column_remove&table_name=%s&column_name=%s&sid=%s&realm=%s', table_name, column_name,self.sid ,self.realm) ));
        http('</tr>');
        i := i +1;
      }
      http('</table>');

     cols:= xpath_eval('/table/pk/field',self.current_table,0);
     len := length(cols);
     if (len > 0) {
      declare pk_column_name varchar;
      http('<table border="1" cellspacing="0" cellpadding="0" width="35%"><caption><b>Primary Key</b></caption>');
      http('<tr>');
      http('<td align="center">Ord</td>');
      http('<td align="center" width="100%">Column</td>');
--      http('<td colspan="2" align="center">Action</td>');
      http('</tr>');

       i := 0;

      while (i < len) {
        pk_column_name := xpath_eval('./@col',aref(cols,i));
        http('<tr>');
        http(sprintf('<td>%s</td>',xpath_eval('./@ord',aref(cols,i)) ));
        http(sprintf('<td>%s</td>', pk_column_name));

--        http(sprintf('<td  align="center"><a href="%s">Edit</a></td>',
--        sprintf('xddl-tables.vspx?mode=pk_edit&table_name=%s&column_name=%s&sid=%s&realm=%s', table_name, pk_column_name,self.sid ,self.realm) ));
--        http(sprintf('<td  align="center"><a href="%s">Remove</a></td>',
--        sprintf('xddl-tables.vspx?mode=pk_remove_column&table_name=%s&column_name=%s&sid=%s&realm=%s', table_name, pk_column_name,self.sid ,self.realm) ));

        i := i +1;
      }
      http('</table>');
     }
     --buf := sprintf('/tables/table[@name=\'%s\']/fk',table_name);
     cols:= xpath_eval('/table/fk',objs,0);
    len := length(cols);
    i := 0;

     if (len > 0) {
        http('<table border="1"  width="100%" frame="box" rules="none"><caption><b>Foreign Keys</b></caption>');
      while (i < len) {
             declare ref_table_name, delete_rule, update_rule,  action_anchor varchar;
             update_rule := xpath_eval('./@update_rule',aref(cols,i));
             delete_rule := xpath_eval('./@delete_rule',aref(cols,i));
             if (update_rule='')
                update_rule := 'no action';
             if (delete_rule='')
                delete_rule := 'no action';

             ref_table_name := xpath_eval('./@ref_table',aref(cols,i));

        action_anchor:= sprintf('xddl-tables.vspx?back=%s&mode=foreign_key_actions&table_name=%s&ref_table_name=%s&sid=%s&realm=%s',
              get_keyword('mode', control.vc_page.vc_event.ve_params) ,
              table_name, ref_table_name,self.sid ,self.realm);

        http(sprintf('<tr><td>&nbsp;</td><td>%s</td><td>On Update:%s</td><td>On Delete:%s</td><td  align="left"><a href="%s">Modify</a></td> </tr>',ref_table_name, update_rule , delete_rule, action_anchor  ));
        --http('<tr><td colspan="2">Column Name</td><td colspan="2">Reference Column Name</td></tr>');
        refs := xpath_eval('./reference', aref(cols,i),0  );
        len2 := length(refs);
        i2 := 0;
        while (i2 < len2) {
          http('<tr>');
          http(sprintf('<td colspan="1">%s</td>',xpath_eval('./@col',aref(refs,i2)) ));
          http(sprintf('<td colspan="1">%s</td>',xpath_eval('./@ref_col',aref(refs,i2)) ));
          --http('<td colspan="2"></td>');
          http(sprintf('<td  align="left"><a href="%s">Edit</a>&nbsp;&nbsp;&nbsp;',
            sprintf('xddl-tables.vspx?back=%s&what=edit&mode=foreign_key_edit&table_name=%s&ref_table_name=%s&column_name=%s&sid=%s&realm=%s&foreign_key_reference_table_control=%s&foreign_key_reference_columns_control=%s',
              get_keyword('mode', control.vc_page.vc_event.ve_params) , table_name, xpath_eval('./@ref_table',aref(cols,i)) , xpath_eval('./@col',aref(refs,i2)),self.sid ,self.realm, xpath_eval('./@ref_table',aref(cols,i)), xpath_eval('./@ref_col',aref(refs,i2))) ));
          http(sprintf('<a href="%s">Remove</a></td>',
            sprintf('xddl-tables.vspx?back=%s&mode=foreign_key_remove&table_name=%s&ref_table_name=%s&column_name=%s&sid=%s&realm=%s',
               get_keyword('mode', control.vc_page.vc_event.ve_params), table_name, xpath_eval('./@ref_table',aref(cols,i)) , xpath_eval('./@col',aref(refs,i2)),self.sid ,self.realm) ));
          http('</tr>');
          i2 := i2 +1;
        }
        i := i +1;
      }
      http('</table>');


      }

        }
      }

    ?></td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="4" align="center">
        <v:button action="submit" name="create_column_command" value="Add column"/>
              <v:button action="submit" name="create_pk_command" value="Primary Key"/>
    <v:button action="submit" name="create_fk_command" value="Add Foreign Key"/>
        <v:button action="submit" name="create_apply_command" value="Apply"/>
              <v:button action="submit" name="create_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>


      <v:template name="template9" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'table_exist' )">
        <vm:form name="table_exist_xddl_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
    <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?mode=create&sid=%s&realm=%stable_name=%s\r\n',self.sid ,self.realm, get_keyword('table_name', params)));
        return;
        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http(sprintf('You cannot create table %s. It already exists.',get_keyword('table_name', control.vc_page.vc_event.ve_params) ) );
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="table_exist_command" value="Ok" xhtml_style="width: 56px;"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template10" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_exist' )">
        <vm:form name="column_exist_xddl_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="column_name" value="<?= get_keyword('column_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
    <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n',get_keyword('back', params), self.sid ,self.realm, get_keyword('table_name', params)));
        return;
        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http(sprintf('You cannot create column %s for %s  table. It already exists.',get_keyword('column_name', control.vc_page.vc_event.ve_params) , get_keyword('table_name', control.vc_page.vc_event.ve_params) ) );
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="column_exist_command" value="Ok" xhtml_style="width: 56px;"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

<v:template name="template11" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'foreign_key_edit' )">

            <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
          if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'foreign_key_edit' ) {
              declare path, table_name, ref_table_name , column_name  varchar;
            table_name := get_keyword('table_name', params);
          ref_table_name := get_keyword('ref_table_name', params);
          column_name := get_keyword('column_name', params);
          if ( get_keyword('reload_entry', params) is null ) {
              if (get_keyword('what', params) = 'edit' ) {
          path := sprintf('/table/fk[@ref_table=\'%s\']/reference[@col=\'%s\']', ref_table_name, column_name);
          self.foreign_key := xpath_eval(path,xml_tree_doc(self.current_table));
                XMLAddAttribute(self.foreign_key, 2, 'ref_table', ref_table_name );

        } else
           self.foreign_key := xml_tree_doc('<reference col="" ref_col="" ref_table="" />');
          }
            else self.foreign_key := xpath_eval('/reference', xml_tree_doc(self.foreign_key));

          } ]]></script>
                    </v:before-data-bind>
            </vm:events>

        <vm:form name="xddl_foreign_key_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="ref_table_name" value="<?= get_keyword('ref_table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="column_name" value="<?= get_keyword('column_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="what" value="<?= get_keyword('what', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="reload_entry" value="1" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[

             declare objs, tmp_tree  xml_tree;
       declare path, table_name, ref_table_name, new_ref_table_name, column_name,  pk_name, tmp_pk  varchar;
             declare tmp_array, cols any;
       declare i, len, is_found integer;

       table_name := get_keyword('table_name', params);
       ref_table_name := get_keyword('ref_table_name', params);
       column_name := get_keyword('column_name', params);
                if (get_keyword('foreign_key_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }

                if (get_keyword('foreign_key_apply_command',params) is not null) {
              new_ref_table_name := xpath_eval('/reference/@ref_table',xml_tree_doc(self.foreign_key));
              -- XMLReplace(self.foreign_key, xquery_eval('/reference/@ref_table', self.foreign_key), NULL );

                if ( get_keyword('what', params) = 'edit' ) {
        if ( new_ref_table_name = ref_table_name) {
          path := sprintf('/table/fk[@ref_table=\'%s\']/reference[@col=\'%s\']', ref_table_name, column_name);
          self.current_table := XMLUpdate(xml_tree_doc(self.current_table),path, xml_tree_doc(self.foreign_key));
        } else {
            objs := xpath_eval('/table',xml_tree_doc(self.current_table));
            if ( xpath_eval(sprintf('/table/fk[@ref_table=\'%s\']', new_ref_table_name) , objs) is null ) {
              tmp_tree := xpath_eval('/fk',  xml_tree_doc (sprintf('<fk ref_table="%s"/>', new_ref_table_name)) );
              XMLAppendChildren(tmp_tree, self.foreign_key);

              XMLAppendChildren(objs, tmp_tree);
            }  else {
               tmp_tree := xpath_eval(sprintf('/table/fk[@ref_table=\'%s\']', new_ref_table_name) , objs );
               XMLAppendChildren(tmp_tree, self.foreign_key);
            }
            -- remove old instance of reference for this  column - "column_name"
            path := sprintf('/table/fk[@ref_table=\'%s\']/reference[@col=\'%s\']', ref_table_name, column_name);
            objs := XMLUpdate(objs,path, NULL);

            path := sprintf('/table/fk[@ref_table=\'%s\']/reference', ref_table_name);
                cols := vector();
            cols := xpath_eval(path, objs,0);
            if (length(cols) = 0) {
               path := sprintf('/table/fk[@ref_table=\'%s\']', ref_table_name);
               objs := XMLUpdate(objs,path, NULL);
            }
            self.current_table := objs;
        }
          } else if ( get_keyword('what', params) = 'create' ) {
                   XMLAddAttribute(self.foreign_key, 2, 'col', column_name );
             objs := xpath_eval('/table',xml_tree_doc(self.current_table));
             tmp_tree :=       xpath_eval(sprintf('/table/fk[@ref_table=\'%s\']', new_ref_table_name ),objs );
             if (tmp_tree is null) {
              tmp_tree := xpath_eval('/fk',  xml_tree_doc (sprintf('<fk ref_table="%s" update_rule="" delete_rule=""/>', new_ref_table_name)) );
              XMLAppendChildren(tmp_tree, self.foreign_key);
              XMLAppendChildren(objs, tmp_tree);

             } else {
              XMLAppendChildren(tmp_tree, self.foreign_key);
              --XMLAppendChildren(objs, tmp_tree);
             }
             self.current_table := objs;
          }
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }

        ]]></script>
            </v:on-post>
          </vm:events>
    <vm:row>
    <vm:raw><td>Table Name</td><td colspan="6">
    <?vsp
         http(get_keyword('table_name', control.vc_page.vc_event.ve_params));
    ?>
    </td>
    </vm:raw>
    </vm:row>
    <vm:row>
    <vm:raw><td>Column Name</td><td colspan="6">
    <?vsp
         http(get_keyword('column_name', control.vc_page.vc_event.ve_params));
    ?>
    </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:control name="foreign_key_reference_table_control" type="select">
              <vm:caption value="Reference Table" align="top"/>
        <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" element-value="--self.foreign_key" element-place="@ref_table"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
         if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'foreign_key_edit' ) {
          declare table_name, path, column_name, pk_name varchar;
          declare tables_arr  any;
          declare objs xml_tree;
           declare t_obj, t_orig xml_tree;
           declare len, i integer;
      table_name := get_keyword('table_name', params);
      t_obj := xpath_eval('/tables/table',self.objects,0);
      len := length(t_obj);
      i:=0;
      (control as vspx_select_list).vsl_items := vector();
      (control as vspx_select_list).vsl_item_values := vector();
              (control as vspx_select_list).vsl_selected_inx := 0;
      while (i < len) {
           declare name varchar;
            name := xpath_eval('./@name',aref(t_obj,i));
            if (name <> table_name) {
                                (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
                                (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
            }
         i:= i + 1;
      }
      if (get_keyword('foreign_key_reference_table_control', params) is null )  {
        i := (control as vspx_select_list).vsl_selected_inx;
        self.reference_table_value := aref ( (control as vspx_select_list).vsl_item_values, i );
      } else
         self.reference_table_value := get_keyword('foreign_key_reference_table_control', params);

--      control.ufl_value :=  get_keyword('foreign_key_reference_table_control', params);
--      control.vs_set_selected();
         }
        ]]></script>
                </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>

              </vm:events>

            </vm:control>

      <vm:control name="foreign_key_reference_columns_control" type="select">
              <vm:caption value="Reference Column" align="top"/>
        <vm:attrs xhtml_size="10" xhtml_style="width: 240px;" element-value="--self.foreign_key" element-place="@ref_col"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
         if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'foreign_key_edit' ) {
          declare table_name, path, column_name, pk_name varchar;
          declare tables_arr  any;
          declare objs xml_tree;
           declare t_obj, t_orig xml_tree;
           declare len, i integer;
      table_name := self.reference_table_value;
      path := sprintf('/tables/table[@name=\'%s\']/column',table_name);
      t_obj := xpath_eval(path,self.objects,0);
      len := length(t_obj);
      i:=0;
      (control as vspx_select_list).vsl_items := vector();
      (control as vspx_select_list).vsl_item_values := vector();
              (control as vspx_select_list).vsl_selected_inx := 0;
      while (i < len) {
           declare name varchar;
            name := xpath_eval('./@name',aref(t_obj,i));
            if (name <> table_name) {
                                (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
                                (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
            }
         i:= i + 1;
      }

         }
        ]]></script>
                </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
      control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>

              </vm:events>
            </vm:control>
    </vm:row>

          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="foreign_key_update_command" value="Update"/>
        <v:button action="submit" name="foreign_key_apply_command" value="Apply"/>
              <v:button action="submit" name="foreign_key_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template18" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'foreign_key_actions' )">
      <!--
            <vm:events>
                    <v:before-data-bind>
                      <script><![CDATA[
          if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'primary_key_dialog' ) {
              declare path, table_name, column_name  varchar;
        declare tmp_arr any;
        declare i, len integer;
            table_name := get_keyword('table_name', params);
        if ( get_keyword('reload_entry', params) is null ) {
          path := '/table/pk/field';

          tmp_arr := xpath_eval(path,xml_tree_doc(self.current_table),0);
          self.primary_key := vector();
          i := 0;
          len := length(tmp_arr);
          while ( i < len) {
             column_name := xpath_eval('./@col',aref(tmp_arr,i));
             self.primary_key := vector_concat(self.primary_key,vector( column_name) );
            i := i +1;
          }
        }
       } ]]></script>
                    </v:before-data-bind>
            </vm:events>
-->
        <vm:form name="xddl_foreign_key_actions_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="ref_table_name" value="<?= get_keyword('ref_table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[

             declare objs xml_tree;
       declare path, table_name, ref_table_name   varchar;
             declare tmp_array, cols any;
       declare i, len, is_found integer;

       table_name := get_keyword('table_name', params);
       ref_table_name := get_keyword('ref_table_name', params);
                if (get_keyword('foreign_key_actions_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('foreign_key_actions_apply_command',params) is not null) {
          --path := sprintf('/table/fk[@ref_table=\'%s\']/@delete_rule', ref_table_name);
          --xpath_eval(path,
          --objs := xml_tree_doc(self.current_table);
                --XMLAddAttribute(objs, 2, path, ref_table_name );

          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }

        ]]></script>
            </v:on-post>
          </vm:events>
    <vm:row>
    <vm:raw><td>Table Name</td><td colspan="6">
    <?vsp

      http(get_keyword('table_name', control.vc_page.vc_event.ve_params));
    ?>
    </td>
    </vm:raw>
    </vm:row>

    <vm:row>
    <vm:raw><td>Reference Table Name</td><td colspan="6">
    <?vsp

      http(get_keyword('ref_table_name', control.vc_page.vc_event.ve_params));
    ?>
    </td>
    </vm:raw>
    </vm:row>
    <vm:row>
            <vm:control name="reference_ondelete_action_contol" type="select">
              <vm:caption value="On Delete Action" align="left"/>
        <vm:attrs xhtml_style="width: 200px;" element-value="--self.current_table" element-path="--sprintf('/table/fk[@ref_table=\'%s\']', self.ref_table_name)" element-place="@delete_rule"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
          if ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'foreign_key_actions' ) {
          declare i, len integer;
          declare id, ref_table_name varchar;
          len := length(self.actions);
          i := 0;
          (control as vspx_select_list).vsl_items := vector();
          (control as vspx_select_list).vsl_item_values := vector();

              (control as vspx_select_list).vsl_selected_inx := 0;

      while (i < len) {
                             (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(aref(self.actions, i+1)) );
                             (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(aref(self.actions, i)));
         i:= i + 2;
      }
      self.ref_table_name := get_keyword('ref_table_name', params);
      control.ufl_value := xpath_eval (sprintf('/table/fk[@ref_table=\'%s\']/@delete_rule', self.ref_table_name), xml_tree_doc(self.current_table) );
      control.vs_set_selected();
        } ]]></script>
                </v:before-data-bind>

        <v:on-post>
                      <script><![CDATA[
         control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
              </vm:events>
            </vm:control>
            <vm:control name="reference_onupdate_action_contol" type="select">
              <vm:caption value="On Update Action" align="left"/>
        <vm:attrs xhtml_style="width: 200px;" element-value="--self.current_table" element-path="--sprintf('/table/fk[@ref_table=\'%s\']', self.ref_table_name)" element-place="@update_rule"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
          if ( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'foreign_key_actions' ) {
          declare i, len integer;
          declare id varchar;
          len := length(self.actions);
          i := 0;
          (control as vspx_select_list).vsl_items := vector();
          (control as vspx_select_list).vsl_item_values := vector();
              (control as vspx_select_list).vsl_selected_inx := 0;

      while (i < len) {
                             (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(aref(self.actions, i+1)) );
                             (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(aref(self.actions, i)));
         i:= i + 2;
      }
      self.ref_table_name := get_keyword('ref_table_name', params);
      control.ufl_value := xpath_eval (sprintf('/table/fk[@ref_table=\'%s\']/@update_rule', self.ref_table_name), xml_tree_doc(self.current_table ));
      control.vs_set_selected();
        } ]]></script>
                </v:before-data-bind>
        <v:on-post>
                      <script><![CDATA[
         control.vc_put_value_to_element();
                    ]]></script>
        </v:on-post>
              </vm:events>
            </vm:control>

    </vm:row>

          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="foreign_key_actions_apply_command" value="Apply"/>
              <v:button action="submit" name="foreign_key_actions_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>



<v:template name="template12" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_select_foreign' )">

        <vm:form name="xddl_select_column_foreign_key_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="column_name" value="<?= get_keyword('column_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="reload_entry" value="1" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[

             declare objs xml_tree;
       declare path, table_name, column_name,  pk_name, tmp_pk  varchar;
             declare tmp_array, cols any;
       declare i, len, is_found integer;

       table_name := get_keyword('table_name', params);
                if (get_keyword('column_select_foreign_key_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
                if (get_keyword('column_select_foreign_key_apply_command',params) is not null) {

                column_name :=  get_keyword('columns_list_reference_table_control',params);
          if (column_name is not null) {
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?what=create&mode=foreign_key_edit&back=%s&sid=%s&realm=%s&table_name=%s&column_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name, column_name));
        return;
          }
          }

        ]]></script>
            </v:on-post>
          </vm:events>
    <vm:row>
    <vm:raw><td>Table Name</td><td colspan="6">
    <?vsp
         http(get_keyword('table_name', control.vc_page.vc_event.ve_params));
    ?>
    </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:control name="columns_list_reference_table_control" type="select">
              <vm:caption value="Columns List" align="top"/>
        <vm:attrs xhtml_size="10" xhtml_style="width: 240px;"/>
              <vm:events>
                <v:before-data-bind>
                  <script><![CDATA[
         if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'column_select_foreign' ) {
          declare table_name, path, column_name, pk_name varchar;
          declare tables_arr  any;
          declare objs xml_tree;
           declare t_obj, t_orig xml_tree;
           declare len, i integer;
      table_name := get_keyword('table_name', params);
      path := sprintf('/tables/table[@name=\'%s\']/column',table_name);
      t_obj := xpath_eval('/table/column',xml_tree_doc(self.current_table),0);
      len := length(t_obj);
      i:=0;
      (control as vspx_select_list).vsl_items := vector();
      (control as vspx_select_list).vsl_item_values := vector();
              (control as vspx_select_list).vsl_selected_inx := 0;
      while (i < len) {
           declare name varchar;
            name := xpath_eval('./@name',aref(t_obj,i));
            column_name := xpath_eval(sprintf('/table/fk[@col=\'%s\']',name), xml_tree_doc(self.current_table) );
            if (column_name is null) {
                                (control as vspx_select_list).vsl_items :=  vector_concat ((control as vspx_select_list).vsl_items, vector(name));
                                (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector(name));
            }
         i:= i + 1;
      }

         }
        ]]></script>
                </v:before-data-bind>
              </vm:events>
            </vm:control>

    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="column_select_foreign_key_apply_command" value="Apply"/>
              <v:button action="submit" name="column_select_foreign_key_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template14" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'foreign_key_remove' )">
        <vm:form name="xddl_foreign_key_remove_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="ref_table_name" value="<?= get_keyword('ref_table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="column_name" value="<?= get_keyword('column_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
    <input type="hidden" name="back" value="<?= get_keyword('back', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
             declare objs xml_tree;
       declare path, table_name, ref_table_name, column_name  varchar;
       declare cols any;
          table_name := get_keyword('table_name', params);
          ref_table_name := get_keyword('ref_table_name', params);
          column_name := get_keyword('column_name', params);
          if (get_keyword('foreign_key_remove_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
          if (get_keyword('foreign_key_remove_apply_command',params) is not null) {

         objs := xml_tree_doc(self.current_table);
         path := sprintf('/table/fk[@ref_table=\'%s\']/reference[@col=\'%s\']', ref_table_name,  column_name);
        self.current_table := XMLUpdate(xml_tree_doc(self.current_table),path, NULL);
        path := sprintf('/table/fk[@ref_table=\'%s\']/reference', ref_table_name);
            cols := vector();
        cols := xpath_eval(path, self.current_table,0);
        if (length(cols) = 0) {
               path := sprintf('/table/fk[@ref_table=\'%s\']', ref_table_name);
              self.current_table := XMLUpdate(self.current_table,path, NULL);
        }

          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=%s&sid=%s&realm=%s&table_name=%s\r\n', get_keyword('back', params),self.sid ,self.realm, table_name));
          return;
          }
        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http(sprintf('You are about to remove foreign key <b>%s</b> from <b>%s</b> table. Are you sure?',
            get_keyword('column_name', control.vc_page.vc_event.ve_params),
      get_keyword('table_name', control.vc_page.vc_event.ve_params)  ));
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="foreign_key_remove_apply_command" value="Apply"/>
              <v:button action="submit" name="foreign_key_remove_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template15" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'exec_xddl' )">
        <vm:form name="xddl_exec_form" type="simple" method="POST" action="">
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
             declare objs xml_tree;
          if (get_keyword('xddl_execute_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
          }
          if (get_keyword('xddl_execute_apply_command',params) is not null) {

        declare err_sqlstate, err_msg, rel_path varchar;
      declare m_dta any;
                       declare  xq_res any;
          declare res varchar;
          res := get_keyword('xddl_statements_area',params);
          if (res is not null and length(res) > 0) {
            declare exit handler for sqlstate '*'
        {
          err_msg := sprintf(' Execution Error: %s', __SQL_MESSAGE);

          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=xddl_execute_error&error=%s&sid=%s&realm=%s\r\n',err_msg, self.sid ,self.realm));
                return;
        };
        err_sqlstate := '00000';
        exec (res, err_sqlstate, err_msg, vector(),100, m_dta, xq_res);
        if ('00000' <> err_sqlstate)    {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=xddl_execute_error&error=%s&sid=%s&realm=%s\r\n',err_msg, self.sid ,self.realm));
          return;
        }

         }
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n', self.sid ,self.realm));
          return;
          }
        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http(sprintf('You are about to execute the following statements against current database. This may damage database structure and destroy data. Are you sure?' ));
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:control name="xddl_statements_area" type="textarea">
              <vm:attrs xhtml_style="height:600px; width:100%"/>
              <vm:caption value="SQL statements" pos="top"/>
              <vm:events>
                <v:after-data-bind>
                  <script><![CDATA[
      if (get_keyword('mode', control.vc_page.vc_event.ve_params) = 'exec_xddl') {
        control.ufl_value := self.statements;
      }
        ]]></script>
                </v:after-data-bind>
              </vm:events>

      </vm:control>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="xddl_execute_apply_command" value="Apply"/>
              <v:button action="submit" name="xddl_execute_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template16" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'xddl_execute_error' )">
        <vm:form name="xddl_execute_error_form" type="simple" method="POST" action="">
    <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n', self.sid ,self.realm));
        return;
        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http(sprintf('Error appeared at statements execution. %s', get_keyword('error', control.vc_page.vc_event.ve_params)) );
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="xddl_execute_error_command" value="Ok" xhtml_style="width: 56px;"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template17" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'table_remove' )">
        <vm:form name="xddl_table_remove_form" type="simple" method="POST" action="">
          <input type="hidden" name="table_name" value="<?= get_keyword('table_name', control.vc_page.vc_event.ve_params)?>" />
          <input type="hidden" name="mode" value="<?= get_keyword('mode', control.vc_page.vc_event.ve_params)?>" />
          <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[

       declare path, table_name  varchar;
      table_name := get_keyword('table_name', params);

          if (get_keyword('table_remove_cancel_command',params) is not null) {
          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n', self.sid ,self.realm));
          return;
          }
          if (get_keyword('table_remove_apply_command',params) is not null) {

         path := sprintf('/tables/table[@name=\'%s\']', table_name);
         self.objects := XMLUpdate(self.objects,path, NULL);

          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n', self.sid ,self.realm));
          return;
          }
        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http(sprintf('You are about to remove <b>%s</b> table. Are you sure?',
      get_keyword('table_name', control.vc_page.vc_event.ve_params)  ));
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="table_remove_apply_command" value="Apply"/>
              <v:button action="submit" name="table_remove_cancel_command" value="Cancel"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template20" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'xddl_save' )">
        <vm:form name="xddl_save_form" type="simple" method="POST" action="">
    <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[

                  declare ctx_value, user_perm, save_path  varchar;
                  declare result, xq_res any;
                  declare doc, doc_base,xq, res_string  varchar;
                  declare cnt, num integer;
                  declare err_sqlstate, err_msg, rel_path varchar;
                  declare m_dta any;
                  declare n, len  integer;
                  declare tmp varchar;
            if (get_keyword('xddl_cancel_command',params) is not null) {
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
        return;
       }
      if (get_keyword('xddl_save_command',params) is not null) {

      save_path := get_keyword('save_path',params);


      if (save_path = '' or exists(select 1 from WS.WS.SYS_DAV_RES where RES_FULL_PATH = save_path)) {
          self.wrong_entry := 'Path to save result is incorrect. Enter a  correct path.';
                            http_request_status ('HTTP/1.1 302 Found');
                      http_header (sprintf('Location: xddl-tables.vspx?mode=xddl_save&sid=%s&realm=%s\r\n',self.sid ,self.realm));
                            return;
      }
      user_perm:='';
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_r') as vspx_field).ufl_selected + 48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_w') as vspx_field).ufl_selected+48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_own_x') as vspx_field).ufl_selected+48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_r') as vspx_field).ufl_selected+48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_w') as vspx_field).ufl_selected+48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_group_x') as vspx_field).ufl_selected+48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_r') as vspx_field).ufl_selected+48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_w') as vspx_field).ufl_selected+48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_other_x') as vspx_field).ufl_selected+48));
      user_perm:=concat(user_perm, chr((control.vc_find_control('user_permitions_4_index') as vspx_field).ufl_selected+48));
      result := string_output();
      http_value( self.objects, 0, result);
      DAV_RES_UPLOAD (get_keyword('save_path',params),  string_output_string (result ) , 'text/xml',user_perm, 'dav', 'dav','dav','dav');

        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n', self.sid ,self.realm));
        return;

       }

        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http('Specify a path and permissions for xddl file. ' );
           if (self.wrong_entry is not null)
       http(sprintf('<br><b>%s</b></br>', self.wrong_entry));
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:raw>
              <td> Store into<span class="attention_marker">*</span>
              </td>
              <td>
                <v:text name="save_path" xhtml_size="40"/>
                <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="" path="DAV" browse_type="res" style_css="test.css" w_title="DAV Browser" title="DAV Browser" advisory="mega advisory text" lang="en" return_box="save_path"/>
              </td>
            </vm:raw>
            <vm:control name="user_permitions" type="checkbox" dir="horiz">
              <vm:attrs width="0" class="SubData" border="0"/>
              <vm:caption value="Permissions" align="left"/>
              <vm:items left-margin="12" right-margin="12" >
                <vm:group name="own" label="Owner">
                  <vm:item name="r" value="1" label="r" initial-checked="1">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[

                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                  <vm:item name="w" value="1" label="w" initial-checked="1">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                  <vm:item name="x" value="1" label="x" initial-checked="1">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                </vm:group>
                <vm:group name="group" label="Group">
                  <vm:item name="r" value="1" label="r">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                  <vm:item name="w" value="1" label="w">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                  <vm:item name="x" value="1" label="x">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                </vm:group>
                <vm:group name="other" label="Users">
                  <vm:item name="r" value="1" label="r">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                  <vm:item name="w" value="1" label="w">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                  <vm:item name="x" value="1" label="x">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                </vm:group>
                <vm:group label="Index">
                  <vm:item name="index" value="1" label="t">
                    <vm:events>
                      <v:after-data-bind>
                        <v:script><![CDATA[
                      control.vc_data_bound := 1;
              ]]></v:script>
                      </v:after-data-bind>
                    </vm:events>
                  </vm:item>
                </vm:group>
              </vm:items>
            </vm:control>
          </vm:row>


          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="xddl_save_command" value="Save" xhtml_style="width: 56px;"/>
        <v:button action="submit" name="xddl_cancel_command" value="Cancel" xhtml_style="width: 56px;"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

      <v:template name="template21" type="simple" condition="( get_keyword('mode', control.vc_page.vc_event.ve_params) = 'xddl_load' )">
        <vm:form name="xddl_load_form" type="simple" method="POST" action="">
    <vm:attrs border="0" class="MainSubData" width="100%" cellspacing="0" cellpadding="5" align="center"/>
          <vm:events>
            <v:on-post>
              <script><![CDATA[
      declare load_path, xml_file varchar;

            if (get_keyword('xddl_load_cancel_command',params) is not null) {
        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
        return;
       }

      if (get_keyword('xddl_load_apply_command',params) is not null) {
       load_path := get_keyword('load_path',params);
       select blob_to_string (RES_CONTENT) into xml_file from WS.WS.SYS_DAV_RES where RES_FULL_PATH = load_path;
      {
        declare exit handler for sqlstate '*'
        {
          self.wrong_entry := sprintf(' Error. DAV resource %s has  no valid  xml  format.', load_path);

          http_request_status ('HTTP/1.1 302 Found');
          http_header (sprintf('Location: xddl-tables.vspx?mode=xddl_load&sid=%s&realm=%s\r\n',self.sid ,self.realm));
          return;
        };



      }
        self.objects := xml_tree_doc (xml_file );

        http_request_status ('HTTP/1.1 302 Found');
        http_header (sprintf('Location: xddl-tables.vspx?sid=%s&realm=%s\r\n',self.sid ,self.realm));
        return;
       }


        ]]></script>
            </v:on-post>
          </vm:events>
          <vm:row>
          <vm:raw>
      <td colspan="6">
        <?vsp http('Specify a path of xddl file to load from.' );
        ?>
      </td>
    </vm:raw>
    </vm:row>
          <vm:row>
            <vm:raw>
              <td> Load From<span class="attention_marker">*</span>
              </td>
              <td>
                <v:text name="load_path" xhtml_size="40"/>
                <vm:dav_browser ses_type="yacutia" render="popup" list_type="details" flt="yes" flt_pat="" path="DAV" browse_type="res" style_css="test.css" w_title="DAV Browser" title="DAV Browser" advisory="mega advisory text" lang="en" return_box="load_path"/>
              </td>
            </vm:raw>
          </vm:row>


          <vm:row>
            <vm:bgroup colspan="6" align="center">
        <v:button action="submit" name="xddl_load_apply_command" value="Load" xhtml_style="width: 56px;"/>
        <v:button action="submit" name="xddl_load_cancel_command" value="Cancel" xhtml_style="width: 56px;"/>
            </vm:bgroup>
          </vm:row>
        </vm:form>
      </v:template>

    </vm:pagebody>
  </vm:pagewrapper>
</v:page>


