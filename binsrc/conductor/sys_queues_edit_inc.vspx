<?xml version="1.0" encoding="UTF-8" ?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<table border="0" cellspacing="0" cellpadding="3" class="MainData">
  <v:variable persist="0" name="ename" type="varchar" default="''"/>
  <v:variable persist="1" name="error_str1" type="varchar" default="''"/>
  <v:form name="event_form" type="simple" method="POST" action="sys_queues_edit.vspx">
    <input type="hidden" name="name" value="<?= get_keyword('name', self.vc_page.vc_event.ve_params) ?>"/>
    <input type="hidden" name="mode" value="<?= get_keyword('mode', self.vc_page.vc_event.ve_params) ?>"/>
    <v:on-post>
      <v:script>
        <![CDATA[
          declare i, cnt, exist, u_ident, g_name, inter integer;
          declare tmp, val, name, start_str, sql_str varchar;
          if (get_keyword('cancel', params) <> '' or self.vc_is_valid = 0)
          {
            success:
            http_request_status ('HTTP/1.1 302 Found');
            http_header(sprintf('Location: sys_queues.vspx?sid=%s&realm=%s\r\n', self.sid, self.realm));
            return;
          }
          name := '';
          sql_str := '';
          inter := 0;
          name := (control.vc_find_control ('name1') as vspx_field).ufl_value;

          if ((control.vc_find_control('start_time') as vspx_field).ufl_value <> '')
          {
            declare state, msg, m_dta, res varchar;
            state := '00000';
            exec('stringdate(?)', state, msg, vector((control.vc_find_control('start_time') as vspx_field).ufl_value), m_dta, res);
            if (state <> '00000')
              start_str := cast(now() as varchar);
            else
              start_str := stringdate((control.vc_find_control('start_time') as vspx_field).ufl_value);
          }
          else
            start_str := cast(now() as varchar);
          sql_str := cast((control.vc_find_control('sql_value') as vspx_field).ufl_value as varchar);
          inter := atoi((control.vc_find_control('interval_value') as vspx_field).ufl_value);
          if (name = '' or sql_str = '')
            goto success;
          if (get_keyword('mode', params) = 'create')
            insert into DB.DBA.SYS_SCHEDULED_EVENT (SE_NAME, SE_START, SE_SQL, SE_INTERVAL) values(name, start_str, sql_str, inter);
          else if(get_keyword('mode', params) = 'edit')
          {
            if (exists(select 1 from DB.DBA.SYS_SCHEDULED_EVENT where SE_NAME = name))
              update DB.DBA.SYS_SCHEDULED_EVENT set SE_START = start_str, SE_SQL = sql_str, SE_INTERVAL = inter where SE_NAME = name;
            else
              insert into DB.DBA.SYS_SCHEDULED_EVENT (SE_NAME, SE_START, SE_SQL, SE_INTERVAL) values(name, start_str, sql_str, inter);
          }
          goto success;
        ]]>
      </v:script>
    </v:on-post>
   <tr align="left">
     <td width="20%" align="left" valign="left">Event Name</td>
     <td valign="left">
       <v:text name="name1" xhtml_style="width:400">
         <v:before-data-bind>
           <v:script>
             <![CDATA[
               if (get_keyword('mode', params) = 'edit')
               {
                 self.ename := cast(deserialize(decode_base64(get_keyword('name', params))) as varchar);
                 control.ufl_value := self.ename;
                 control.tf_style :=3;
                 control.vc_data_bound := 1;
               }
               else
               {
                 declare ufn varchar;
                 ufn := get_keyword('name', params);
                 if (ufn is not NULL)
                 {
                   control.ufl_value:= ufn;
                   control.vc_data_bound := 1;
                 }
               }
             ]]>
           </v:script>
         </v:before-data-bind>
       </v:text>
     </td>
   </tr>
   <tr align="left">
     <td width="20%" align="left" valign="top">Start Time</td>
     <td valign="top">
       <v:text name="start_time" xhtml_style="width:400">
         <v:before-data-bind>
           <v:script><![CDATA[
             declare start_time varchar;
             if (get_keyword('mode', params) = 'edit')
             {
               select adm_date_fmt(se_start) into start_time from sys_scheduled_event where se_name = self.ename;
               control.ufl_value := start_time;
               control.vc_data_bound := 1;
             }
             else
             {
               start_time := cast(now() as varchar);
               if (start_time is not NULL)
               {
                 control.ufl_value:= start_time;
                 control.vc_data_bound := 1;
               }
             }
           ]]></v:script>
         </v:before-data-bind>
       </v:text>
     </td>
   </tr>
   <tr align="left">
     <td width="20%" align="left" valign="top">Interval (minutes)</td>
     <td valign="top">
       <v:text name="interval_value" xhtml_style="width:400">
         <v:validator name="interval_value_val1" min="1" max="999999999" empty-allowed="1" test="value" regexp="" message="Wrong value! " />
         <v:validator name="interval_value_val2" min="0" max="0" empty-allowed="0" test="regexp" regexp="^[0-9]+$" message="Wrong value! must be a number" />
         <v:before-data-bind>
           <v:script>
             <![CDATA[
               declare ufn integer;
               if (get_keyword('mode', params) = 'edit')
               {
                 select se_interval into ufn from SYS_SCHEDULED_EVENT where SE_NAME = self.ename;
                 control.ufl_value := cast(ufn as varchar);
                 control.vc_data_bound := 1;
               }
               else
               {
                 declare pwd varchar;
                 pwd := get_keyword('interval', params);
                 if (pwd is not NULL)
                 {
                   control.ufl_value:= pwd;
                   control.vc_data_bound := 1;
                 }
               }
             ]]>
           </v:script>
         </v:before-data-bind>
       </v:text>
     </td>
   </tr>
   <tr align="left">
     <td width="20%" align="left" valign="top">SQL</td>
     <td valign="top">
       <v:textarea name="sql_value" xhtml_rows="7" xhtml_style="width:400">
         <v:before-data-bind>
           <v:script>
             <![CDATA[
               declare ufn varchar;
               if (get_keyword('mode', params) = 'edit')
               {
                 select se_sql into ufn from SYS_SCHEDULED_EVENT where SE_NAME = self.ename;
                 control.ufl_value := ufn;
                 control.vc_data_bound := 1;
               }
               else
               {
                 ufn := get_keyword('interval', params);
                 if (ufn is not NULL)
                 {
                   control.ufl_value:= ufn;
                   control.vc_data_bound := 1;
                 }
               }
             ]]>
           </v:script>
         </v:before-data-bind>
       </v:textarea>
     </td>
   </tr>
   <tr align="left">
     <td/>
     <td colspan="3">
       <v:button action="submit" name="cancel" value="Cancel" />
       <?vsp
         if (get_keyword('mode', self.vc_page.vc_event.ve_params) is NULL or get_keyword('mode', self.vc_page.vc_event.ve_params) <> 'edit')
         {
       ?>
       <input type="reset" name="Submit2" value="Reset"/>
       <?vsp
         }
       ?>
       <v:button action="submit" name="save" value="Save"/>
     </td>
   </tr>
   <?vsp
     if (self.error_str1 <> '')
     {
       http(sprintf('<tr><td colspan="3"></td>%s</tr>', self.error_str1));
       self.error_str1 := '';
     }
   ?>
 </v:form>
</table>
