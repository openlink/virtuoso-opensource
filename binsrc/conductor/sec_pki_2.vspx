<?xml version="1.0"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
 -
-->
<v:page name="pki_1" decor="yacutia_decor.vspx" style="yacutia_style.xsl"
        doctype="-//W3C//DTD XHTML 1.0 Transitional//EN"
	fast-render="1" 
	xmlns:v="http://www.openlinksw.com/vspx/" 
	xmlns:vm="http://www.openlinksw.com/vspx/macro">
  <vm:pagetitle>Public Key Infrastructure</vm:pagetitle>
  <vm:pagewrapper>
    <vm:variables>
      <v:variable name="vhost" persist="0" type="varchar" default="null" param-name="vhost"/>
      <v:variable name="lhost" persist="0" type="varchar" default="null" param-name="lhost"/>
      <v:variable name="vhosto" persist="0" type="varchar" default="null" param-name="vhost"/>
      <v:variable name="lhosto" persist="0" type="varchar" default="null" param-name="lhost"/>
      <v:variable name="lhost1" persist="0" type="varchar" default="null"/>
      <v:variable name="vhost1" persist="0" type="varchar" default="null"/>
      <v:variable name="key1" persist="0" type="varchar" default="'none'"/>
      <v:variable name="extra_cert" persist="0" type="varchar" default="null"/>
      <v:variable name="verify1" persist="0" type="varchar" default="0"/>
      <v:variable name="port1" persist="0" type="varchar" default="'443'"/>
      <v:variable name="stopit" persist="0" type="int" default="1"/>
    </vm:variables>
    <vm:menu>
      <vm:menuitem name="PKI" value="Public Key Infrastructure"/>
    </vm:menu>
    <vm:header caption="Public Key Infrastructure">
    </vm:header>
    <vm:pagebody>
        <v:on-init>
	  declare pos int;
	  if (self.vhost is null or self.lhost is null)
	    return;
	  for select top 1 HP_AUTH_OPTIONS from HTTP_PATH where HP_HOST = self.vhost and HP_LISTEN_HOST = self.lhost do
	    {
	      declare cert, opts varchar;
	      opts := deserialize (HP_AUTH_OPTIONS);
	      if (isarray (opts))
	        {
		  cert := get_keyword ('https_key', opts, 'none');
		  if (cert like 'db:%')
		    cert := subseq (cert, 3);
		  self.key1 := cert;
		  self.verify1 := cast (get_keyword ('https_verify', opts, 0) as varchar);
		  self.extra_cert := get_keyword ('https_extra_chain_certificates', opts, null);
	        }
	    }
	  if (self.stopit and 1 = http_listen_host (self.lhost, 2))
	    http_listen_host (self.lhost, 1);
	  if (self.lhost = '*ini*')
            {
	      self.lhost := server_http_port ();
              if (strrchr (self.lhost, ':') is null)
	        self.lhost := ':' || self.lhost;
	    }
	  else if (self.lhost = '*ini*')
            {
              self.lhost := coalesce (server_https_port (), '');
              if (strrchr (self.lhost, ':') is null)
	        self.lhost := ':' || self.lhost;
	    }

	  pos := strrchr (self.lhost, ':');
	  if (pos is not null)
	    {
	      self.lhost1 := substring (self.lhost, 1, pos);
	      self.port1 := substring (self.lhost, pos + 2, length (self.lhost));
	    }
	  else
	    self.lhost1 := self.lhost;

	  if (length (self.lhost1) = 0)
	    self.lhost1 := '0.0.0.0';

	  pos := strrchr (self.vhost, ':');
	  if (pos is not null)
	    self.vhost1 := substring (self.vhost, 1, pos);
	  else
	    self.vhost1 := self.vhost;

	</v:on-init>
    <vm:help id="sec_pki" sect=""/>
    <v:form name="form1" type="simple" method="POST">
	<!-- top of security layout -->
      <table border="0" width="100%" height="100%" cellpadding="0" cellspacing="0">
        <tr valign='top'>
          <td>
            <table cellpadding='10' cellspacing='0' border='0' width='100%'>
              <tr>
                <td>
                  <table cellpadding="0" cellspacing="0" border="0">
                    <tr>
		      <td class="page_tab_selected" align="center">
			  Public Key Infrastructure	
		      </td>
		      <td class="page_tab" align="center">
			<v:url xhtml_style="page_tab" url="sec_auth_serv.vspx" value="Access Control" render-only="1"/>
		      </td>
			<td class="page_tab_empty" align="right" width="100%">
                        </td>
                    </tr>
                  </table>
                  <table class="tab_page">
                    <tr>
			<td valign="top">
		   <!-- end of top security layout -->
		   <h3>Configure HTTPS listener</h3>
        <v:form name="frm_add_templ" method="POST" type="simple">
        <table class="listing">
	  <tr class="listing_header_row">
	    <th>
	      <v:button name="refresh1" style="image" action="simple"
		value="images/icons/ref_16.png"
		xhtml_alt="Refresh page"
		xhtml_title="Refresh page"
		url="--http_path ()">
	      </v:button>&nbsp;
	    Interface</th>
	    <th>Port</th>
	    <th><label class="req">HTTP Host</label></th>
	    <th>Action</th>
	  </tr>
	    <?vsp 
	      for select * from www_listeners () (VHOST varchar, PORT varchar, INTF varchar, NO_EDIT int, HOST varchar, LHOST varchar, NO_CTRL int) x do
	         {
		 ?>
		 <tr>
		     <td><?V INTF  ?></td>
		     <td><?V PORT  ?></td>
		     <td><?V VHOST  ?></td>
		     <td>
			 <?vsp 
			   if (NO_CTRL) 
			     {
                               if (http_listen_host (LHOST, 2))
			         http ('<span>Started</span>'); 
                               else
			         http ('<span>Stopped</span>'); 
			 ?>
			 <v:url render-only="1" url="--sprintf ('sec_pki_2.vspx?vhost=%U&lhost=%U', HOST, LHOST)" value="Edit" />
			 <v:url render-only="1" url="--sprintf ('sec_pki_2_conf.vspx?vhost=%U&lhost=%U', HOST, LHOST)" value="Delete" />
			 <?vsp
			     }
			 ?>
		     </td>
		 </tr>
		  <?vsp  
		 }
	    ?>
	     </table>
          <table class='ctl_grp'>
            <tr>
              <td>Host &amp; Domain Name</td>
	      <td>
		<v:text name="vhost_nam" value="--self.vhost1" xhtml_size="40" error-glyph="*">
		  <v:validator test="regexp" regexp="^[\.0-9A-Za-z-]+$" empty-allowed="1"
		    message="You should provide a valid host name" />
		</v:text>
              </td>
            </tr>
            <tr>
              <td>Listening Interface</td>
              <td id="if_opt">
		  <![CDATA[
		  <script type="text/javascript">
	           function init () {
		      var sr_cl = new OAT.Combolist([],"<?V self.lhost1 ?>");
		      sr_cl.input.name = "lhost_if";
		      sr_cl.input.id = "lhost_if";
		      $("if_opt").appendChild(sr_cl.div);
		      sr_cl.addOption("0.0.0.0");
		      <?vsp
		        declare arr any;
			arr := tcpip_local_interfaces ();
			foreach (any elm in arr) do
			  http (sprintf ('sr_cl.addOption("%s");', elm));
                        http (sprintf ('sr_cl.input.value = "%s";', get_keyword ('lhost_if', self.vc_event.ve_params, ''))); 
		      ?>
		     }
		  </script>
		  ]]>
		<!--v:text name="lhost_if" value="-#-self.lhost1" xhtml_size="20" error-glyph="*">
		  <v:validator test="regexp" regexp="^[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?\.[0-9][0-9]?[0-9]?$"
		    message="You should provide a valid IP address" />
		</v:text-->
              </td>
            </tr>
            <tr>
              <td>TCP Port</td>
              <td>
		<v:text name="lhost_port" value="--self.port1" xhtml_size="5" error-glyph="*">
		  <v:validator test="regexp" regexp="^[0-9]+$"
		    message="You should provide a valid TCP port" />
		</v:text>
              </td>
            </tr>
            <tr>
              <td>SSL Key</td>
	      <td>
		  <v:data-list name="key_list" value="--self.key1"
		      sql="select top 1 'none' as xenc_key from sys_keys union all
		      select xenc_key from yac_list_keys (username) (xenc_key varchar, xenc_type varchar) x where username = 'dba'"
		      key-column="xenc_key"
		      value-column="xenc_key"
		      />
		  &nbsp;
		  <v:button action="simple" name="gen_key" value="Generate New" enabled="--xenc_key_exists ('id_rsa')">
		      <v:on-post><![CDATA[
			  declare k varchar;
			  declare subj, host varchar;
			  declare arr any;

			  if (length (self.vhost_nam.ufl_value) = 0)
			    {
			      self.vc_is_valid := 0;
			      self.vc_error_message := 'You should provide a valid host name';
			      return;
			     }

			  if (length (self.vhost_nam.ufl_value))
			    {
			      k := 'https_key_' || replace (self.vhost_nam.ufl_value, '.', '_');
			      host := self.vhost_nam.ufl_value;
			    }
			  else
			    {
			      k := 'https_key_' || cast (sequence_next ('https_key') as varchar);
			      host := sys_stat ('st_host_name');
			    }
			  subj := get_certificate_info (2, decode_base64 (xenc_X509_certificate_serialize ('id_rsa')), 1);
			  arr := split_and_decode (ltrim (subj, '/'), 0, '\0\0/=');
			  xenc_key_RSA_create (k, 2048);
			  xenc_x509_generate ('id_rsa', k, sequence_next ('ca_id_rsa'), 365,
			    vector (
			      'C', get_keyword ('C', arr),
			      'ST',  get_keyword ('ST', arr),
			      'O',  get_keyword ('O', arr),
			      'OU',  get_keyword ('OU', arr),
			      'CN',  host,
			      'emailAddress',  get_keyword ('emailAddress', arr)),
			      vector ('basicConstraints', 'critical,CA:FALSE',
			        --'authorityKeyIdentifier', 'keyid,issuer:always',
                                'extendedKeyUsage', 'critical,serverAuth',
			        'nsComment', 'Virtuoso Generated Certificate'));
			  USER_KEY_STORE (user, k, 'X.509', 2, '', cast (xenc_pkcs12_export (k, 'HTTPS Certificate', '') as varchar));
			  self.key_list.vc_data_bind (e);
			  self.key_list.ufl_value := k;
			  self.key_list.vs_set_selected ();
			  ]]></v:on-post>
		  </v:button>
              </td>
            </tr>
            <tr>
              <td>Extra Chain Certificates</td>
              <td>
		<v:text name="extra_cert1" value="--self.extra_cert" xhtml_size="50">
		</v:text>
              </td>
            </tr>
            <tr>
              <td>HTTPS verify</td>
              <td>
		  <v:select-list name="verify" value="--self.verify1">
		      <v:item name="none" value="0"/>
		      <v:item name="required" value="1"/>
		      <v:item name="optional" value="2"/>
		      <v:item name="optional no ca" value="3"/>
		      <v:after-data-bind>
			  if (self.vhost1 is null and not e.ve_is_post)
			    {
			      control.ufl_value := '3'; 
                              control.vs_set_selected (); 
			    }
		      </v:after-data-bind>
		</v:select-list>
              </td>
            </tr>
            <tr>
              <td colspan="2" align="center">
                <v:button action="simple" name="cancelbtn" value="Cancel">
                  <v:on-post>
                      <![CDATA[
		      self.vc_redirect (sprintf ('sec_pki_2.vspx'));
                      ]]>
                  </v:on-post>
                </v:button>
                <v:button action="simple" name="save_btn" value="--case when self.vhost is not null then 'Save' else 'Save' end">
                  <v:on-post>
                      <![CDATA[

           if (not self.vc_is_valid)
             return;

           declare vhost_o, lhost_o, vhost, lhost, st, msg, lhost_if, ssl_opts, tmp, arr any;
           vhost_o := self.vhosto;
	   lhost_o := self.lhosto;

	   declare exit handler for sqlstate '*'
	   {
	     self.vc_is_valid := 0;
	     self.vc_error_message := __SQL_MESSAGE;
	     rollback work;
	     return;
	   };

	   if (length (self.vhost_nam.ufl_value) = 0)
	     {
	       self.vc_is_valid := 0;
	       self.vc_error_message := 'You should provide a valid host name';
	       return;
	     }

           lhost_if := get_keyword ('lhost_if', e.ve_params, '');

	   y_check_host (self.vhost_nam.ufl_value, lhost_if, self.lhost_port.ufl_value);

	   if (server_https_port () is not null and server_https_port () = self.lhost_port.ufl_value)
	     {
	       self.vc_is_valid := 0;
	       self.vc_error_message := 'The default HTTPS listener configuration is not allowed. To configure default HTTPS you must edit the INI file and re-start the server.';
	       return;
	     }
	   if (not xenc_key_exists (self.key_list.ufl_value))
	     {
	       self.vc_is_valid := 0;
	       self.vc_error_message := 'Key is required to setup HTTPS listener';
	       return;
	     }
	     tmp := get_certificate_info (2, decode_base64 (xenc_X509_certificate_serialize (self.key_list.ufl_value)), 1);
	     if (tmp is not null) 
	       {
	         arr := split_and_decode (tmp, 0, '\0\0/=');
		 if (matches_like (self.vhost_nam.ufl_value, get_keyword ('CN', arr, '')) = 0)
		   {
		     self.vc_is_valid := 0;
		     self.vc_error_message := 'The certificate common name do not match host name, please generate new or select appropriate key.';
		     return;
		   }
	       }
	     else
	       {
		  self.vc_is_valid := 0;
		  self.vc_error_message := 'Can not get certificate from key, please generate new or use key with certificate assigned.';
		  return;
	       }    

	   vhost := self.vhost_nam.ufl_value;
	   lhost := concat (lhost_if, ':', self.lhost_port.ufl_value);
	   lhost := replace (lhost, '0.0.0.0', '');

	   if (self.vhost is null) -- new listener
	     {
               declare opts varchar;
	       opts := vector ();
	       yac_set_ssl_key (self.key_list.ufl_value, self.verify.ufl_value, self.extra_cert1.ufl_value, opts);
	       VHOST_DEFINE (vhost=>vhost, lhost=>lhost, lpath=>'/', ppath=>'/', sec=>'SSL', auth_opts=>opts);
	       goto same_host;
	     }

	   if (self.vhost = vhost and lhost = self.lhost and self.key_list.ufl_value = self.key1 and self.verify1 = self.verify.ufl_value and self.extra_cert1.ufl_value = self.extra_cert)
             {  
               declare opts varchar;
	       opts := vector ();
	       yac_set_ssl_key (self.key_list.ufl_value, self.verify.ufl_value, self.extra_cert1.ufl_value, opts);
	       http_listen_host (lhost, 0, opts);
	     goto same_host;
	     }
           ssl_opts := null;
	   for select
	       HP_HOST, HP_LISTEN_HOST, HP_PPATH, HP_LPATH,
	       HP_AUTH_FUNC, HP_AUTH_OPTIONS, HP_DEFAULT, HP_STORE_AS_DAV,
	       HP_DIR_BROWSEABLE, HP_PERSIST_SES_VARS, HP_POSTPROCESS_FUNC,
	       HP_REALM, HP_RUN_SOAP_AS, HP_RUN_VSP_AS, HP_SECURITY, HP_SOAP_OPTIONS,
	       HP_OPTIONS, HP_IS_DEFAULT_HOST
	       from DB.DBA.HTTP_PATH where HP_HOST = vhost_o and HP_LISTEN_HOST = lhost_o do
	     {
	        declare opts any;
      	        st := '00000';
	        msg := '';
		VHOST_REMOVE (vhost_o, lhost_o, HP_LPATH, 0);
		opts := deserialize (HP_AUTH_OPTIONS);
		yac_set_ssl_key (self.key_list.ufl_value, self.verify.ufl_value, self.extra_cert1.ufl_value, opts);
		HP_AUTH_OPTIONS := serialize (opts);
		if (self.key_list.ufl_value <> 'none')
		  {
		    HP_SECURITY := 'SSL';
		    if (ssl_opts is null)
		      ssl_opts := opts;
		  }
		else
                  {
                    HP_SECURITY := null;
		  }
		exec('VHOST_DEFINE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', st, msg,
		     vector (vhost, lhost, HP_LPATH, HP_PPATH, HP_STORE_AS_DAV, HP_DIR_BROWSEABLE,
		             HP_DEFAULT, HP_AUTH_FUNC, HP_REALM, HP_POSTPROCESS_FUNC, HP_RUN_VSP_AS,
			     HP_RUN_SOAP_AS, HP_SECURITY, HP_PERSIST_SES_VARS,
			     deserialize (HP_SOAP_OPTIONS),
			     deserialize (HP_AUTH_OPTIONS), deserialize(HP_OPTIONS), HP_IS_DEFAULT_HOST));
                if (st <> '00000')
                  {
		    rollback work;
		    self.vc_is_valid := 0;
		    self.vc_error_message := msg;
		    return;
                  }
		commit work;  
	     }
	    http_listen_host (lhost, 0, ssl_opts);
	    self.stopit := 0;
	    commit work;
	    same_host:
            self.vc_redirect (sprintf ('sec_pki_2.vspx'));
                      ]]>
                  </v:on-post>
                </v:button>
              </td>
            </tr>
	</table>
	<br/>
                <v:button action="simple" name="backbtn" value="Back">
                  <v:on-post>
                      <![CDATA[
		      self.vc_redirect (sprintf ('sec_pki_1.vspx'));
                      ]]>
                  </v:on-post>
                </v:button>
	<?vsp 
	  if (exists (select 1 from DB.DBA.HTTP_PATH where HP_HOST not like '*ini*'and HP_HOST not like '*sslini*')) {
	?>
		<v:button action="simple" name="val" value="Configure VAL Endpoints" enabled="--case when __proc_exists ('VAL.DBA.setup_val_host') is null then 0 else 1 end">
		    <v:on-post><![CDATA[
			self.vc_redirect ('sec_pki_val.vspx');
       ]]></v:on-post>
		</v:button>

		<v:button action="simple" name="nxt" value="Configure ODS Endpoints" enabled="--check_package ('Framework')">
		    <v:on-post><![CDATA[
			self.vc_redirect ('sec_pki_3.vspx');
       ]]></v:on-post>
		</v:button>
		<?vsp 
		}
	?>
        </v:form>
		   <!-- bottom of security layout -->
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
	<!-- end of bottom security layout -->
    </v:form>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>

