<?vsp 
--  
--  $Id: vspsoap_mod.vsp,v 1.4.10.1 2013/01/02 16:15:39 source Exp $
--  
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--  
--  Copyright (C) 1998-2019 OpenLink Software
--  
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--  
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--  
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--  
--  

        dbg_obj_print ('vspsoap module called');
	declare content_type, soap_method, soap_xml varchar;
	declare payloads any;

        content_type := http_request_header (lines, 'Content-Type');
        soap_method := http_request_header (lines, 'SOAPAction');
        soap_xml := NULL;
        payloads := NULL;
	if (isstring (content_type))
           content_type := lower (content_type);

	-- get the message
        if (content_type = 'multipart/related')
	  {
	    declare attrs any;
	    declare inx integer;
	    declare start_req varchar;

            start_req := http_request_header (lines, 'Content-Type', 'start');
	    inx := 1;
	    soap_xml := null;
	    attrs := vector (1);
	    while (isarray (attrs))
	     {
	       declare content_id varchar;
	       attrs := get_keyword (sprintf ('attr-mime_part%d', inx), params);
	       if (isarray (attrs))
		 {
		   content_id := get_keyword ('Content-ID', attrs);
		   dbg_obj_print ('cont-id', content_id);

		   if (isstring (content_id))
		     {
		       if (content_id = start_req)
			 soap_xml := xml_tree_doc (xml_tree (get_keyword (sprintf ('mime_part%d', inx), params)));
		       else
			 {
			   if (payloads is null)
			     payloads := vector (vector (content_id, inx));
			   else
			     payloads := vector_concat (payloads, vector (content_id, inx));
			 }
		     }
		 }
	       inx := inx + 1;
	     }
	  }
	else if (content_type = 'text/xml')
          {
	    soap_xml := xml_tree_doc (xml_tree (http_body_read ()));
	  }
        else
	  signal ('42000', 'unsupported encoding');

	dbg_obj_print ('vspsoap message', soap_xml);
	dbg_obj_print ('vspsoap payloads', payloads);

	-- execute the message
	declare exit handler for SQLSTATE '*' {
	  dbg_obj_print ('vspsoap in error handler for ', __SQL_MESSAGE);
	  declare err_msg varchar;
	  err_msg := soap_make_error ('300', __SQL_STATE, __SQL_MESSAGE);
	  dbg_obj_print ('vspsoap error', err_msg);
	  http (err_msg);
	  resignal 'VSPRT';
	};

        if (soap_method = 'ebXML')
          {
	    signal ('42000', 'ebXML not implemented yet');
	  }
        else if (soap_method in ('fake#SOAPMOD3'))
          {
	    declare res any;
	    res := soap_server (soap_xml, soap_method, lines, 11, 'DB.DBA.SOAPMOD');
	    dbg_obj_print ('vspsoap result', res);
	    http (res);
	  }
        else
	  signal ('42000', concat ('Procedure ', soap_method, ' not defined'));
?>
