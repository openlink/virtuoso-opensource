<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="forms" decor="template/template.vspx" style="template/template.xsl" fast-render="1" button-anchors="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <v:method name="sortChange" arglist="in columnName varchar">
    <![CDATA[
      if (columnName = '')
        return;
      self.ds.vc_reset ();
      if (self.n_order = columnName)
      {
        self.n_direction := either (equ (self.n_direction, 'asc'), 'desc', 'asc');
      } else {
        self.n_direction := 'asc';
      }
      self.n_order := columnName;
    ]]>
  </v:method>

  <v:method name="shareSelect" arglist="in node any">
    <![CDATA[
      declare grants any;

      grants := '';
      for (select U_ID, U_NAME from BMK.WA.GRANTS, DB.DBA.SYS_USERS where G_GRANTER_ID = self.account_id and G_GRANTEE_ID = U_ID and lcase(G_OBJECT_TYPE) = lcase(BMK.WA.node_type (node)) and G_OBJECT_ID = BMK.WA.node_id (node)) do
        grants := grants || cast (U_NAME as varchar) || ',';
      return trim (grants, ',');
    ]]>
  </v:method>

  <v:method name="linkClass" arglist="inout node any">
    <![CDATA[
      if (lcase (BMK.WA.node_type (node)) <> 'b')
        return 'visited';

      if (self.person_rights <> 'W')
        return 'unvisited';

      return either (isnull (BMK.WA.bookmark_visited (self.domain_id, BMK.WA.node_id (node))), 'unvisited', 'visited');
    ]]>
  </v:method>

  <v:method name="myTags" arglist="in fieldName varchar">
    <![CDATA[
      if ((select count (*) from BMK.WA.TAGS where T_DOMAIN_ID = self.domain_id and T_COUNT > 0 and T_TAG <> '' order by T_TAG))
      {
        http ('<tr>');
        http ('<th>My Tags</th>');
          http ('<td>');
            for (select T_TAG from BMK.WA.TAGS where T_DOMAIN_ID = self.domain_id and T_COUNT > 0 and T_TAG <> '' order by T_TAG) do
            {
              http (sprintf ('<a href="#" onclick="javascript: addTag(\'%s\', \'%s\'); return false;">%s</a> ', T_TAG, fieldName, T_TAG));
            }
          http ('</td>');
        http ('</tr>');
      }
    ]]>
  </v:method>

  <v:method name="viewField" arglist="inout fValue any">
    <![CDATA[
      if (self.v_form like '%/View')
      {
        if (is_empty_or_null (fValue))
        {
          http ('-');
        } else {
          if (internal_type (fValue) = 211)
          {
            http (left (cast (fValue as varchar), 10));
          } else {
            http (fValue);
          }
        }
      }
    ]]>
  </v:method>

  <v:method name="viewTags" arglist="inout fValue any">
    <![CDATA[
      if (self.v_form like '%/View')
      {
        if (is_empty_or_null (fValue))
        {
          http ('-');
        } else {
          declare N integer;
          declare delimiter varchar;
          declare tags any;

          delimiter := '';
          tags := BMK.WA.tags2vector (fValue);
          for (N := 0; N < length (tags); N := N + 1)
          {
            http (delimiter);
            http (sprintf ('<a href="%s">%s</a>', SIOC..tag_iri (BMK.WA.forum_iri (self.domain_id), tags[N]), tags[N]));
            delimiter := ', ';
          }
        }
      }
    ]]>
  </v:method>

  <v:method name="windowOpen" arglist="in p_url varchar, in p_name varchar, in p_title varchar">
    <![CDATA[
      return sprintf ('<span onclick="javascript: windowShow(\'%s\', \'bookmarks_%s_window\'); return false;" title="%s %s" class="link">%s</span>', BMK.WA.page_url (self.domain_id, p_url, self.sid, self.realm), p_name, p_name, p_title, p_name);
    ]]>
  </v:method>

  <vm:pagetitle>Forms</vm:pagetitle>
  <vm:popup_pagewrapper clean="yes">
    <vm:variables>
      <v:variable name="v_form" param-name="sa" type="varchar" default="''"/>

      <v:variable name="n_order" type="varchar" default="'_NAME'" />
      <v:variable name="n_direction" type="varchar" default="'asc'" />

      <v:variable name="chars" type="integer" default="60" />

      <v:variable name="bNode" type="varchar" param-name="node" default="''"/>
      <v:variable name="bNodePath" type="varchar" param-name="path" default="''"/>
      <v:variable name="bStep" type="varchar" default="'1'"/>

      <v:variable name="v_id" type="integer" param-name="id" default="-1"/>
      <v:variable name="v_parent_id" type="varchar" default="'0'"/>
      <v:variable name="v_uri" type="varchar" param-name="URI" default="'http://'"/>
      <v:variable name="v_name" type="varchar" param-name="TITLE" default="''"/>
      <v:variable name="v_oldName" type="varchar" default="''"/>
      <v:variable name="v_description" type="varchar" default="''"/>
      <v:variable name="v_keywords" type="varchar" default="''"/>
      <v:variable name="v_expression" type="varchar" default="''"/>
      <v:variable name="v_tag" type="varchar" default="''"/>
      <v:variable name="v_tags" type="varchar" default="''"/>
      <v:variable name="v_folder_name" type="varchar" default="''"/>
      <v:variable name="v_own" type="integer" default="0"/>
      <v:variable name="v_folder_id" type="integer" default="0"/>
      <v:variable name="v_shared" type="integer" default="0"/>
      <v:variable name="v_grants" type="any" default="null"/>
      <v:variable name="v_acl" type="any" default="null"/>

      <v:variable name="v_override" type="integer" default="1"/>
      <v:variable name="v_source" type="any" default="-1"/>
      <v:variable name="v_sourceParam_1" type="any" default="''"/>
      <v:variable name="v_sourceParam_2" type="any" default="''"/>
      <v:variable name="v_sourceParam_3" type="any" default="''"/>
      <v:variable name="v_sourceParam_4" type="any" default="''"/>

      <v:variable name="vm_folder_name" type="varchar" default="''"/>
      <v:variable name="vm_folder_id" type="varchar" default="'0'"/>

      <v:variable name="vs_share" type="any" default="null"/>
      <v:variable name="vs_override" type="integer" default="1"/>
    </vm:variables>
    <vm:pagebody>
      <v:before-data-bind>
        <![CDATA[
          declare tmp, params any;

          params := self.vc_page.vc_event.ve_params;

          self.sid := get_keyword('sid', params);
          self.realm := get_keyword('realm', params);
          if (self.bNode = self.bNodePath)
          {
            tmp := split_and_decode (trim (self.bNodePath, '/'), 0, '\0\0/');
            if (length (tmp))
              self.bNode := tmp [length(tmp)-1];
          }
          if (isnull (connection_get ('vspx_user')))
            connection_set ('vspx_user', (select U_NAME from DB.DBA.SYS_USERS, DB.DBA.VSPX_SESSION where U_NAME = VS_UID and VS_SID = self.sid));
        ]]>
      </v:before-data-bind>
      <?vsp
        http (sprintf ('<input type="hidden" name="node"  id="node"  value="%s" />', self.bNode));
      ?>
      <input type="hidden" name="sa" value="<?V self.v_form ?>"/>
      <v:template type="simple" enabled="-- case when self.v_form = 'browse' then 1 else 0 end">
        <?vsp
          declare i integer;
          declare params, flag  any;

          params := self.vc_page.vc_event.ve_params;

          declare node_type, node_id any;
          declare nodeName, imageName, mt, st, sv any;

          node_id := BMK.WA.node_id (self.bNode);
          node_type := BMK.WA.node_type (self.bNode);

          flag := get_keyword('mark', params, '');
          if (flag <> '')
          {
            flag := case when flag = 'visited' then now () else null end;
            for (i := 0; i < length(params); i := i + 2)
            {
              if (params[i] = 'cb_item')
              {
                declare exit handler for sqlstate '*'
                {
                  rollback work;
                  goto _next;
                };
                commit work;
                if (lcase (BMK.WA.node_type (params[i+1])) = 'f')
                  BMK.WA.folder_visited_set (self.domain_id, BMK.WA.node_id (params[i+1]), flag);
                if (lcase (BMK.WA.node_type (params[i+1])) = 'b')
                  BMK.WA.bookmark_visited_set (self.domain_id, BMK.WA.node_id (params[i+1]), flag);
              }
              _next:;
            }
          }

          mt := '';
          st := '';
          if ((self.person_rights = 'W') and (not (((node_type = 's') and (node_id = -1)) or (node_type = 'u') or (node_type = 'F'))))
          {
            mt := sprintf('Selected as <select name="mark" onchange="javascript: if (anySelected(this.form, \'cb_item\', \'No posts were selected to mark as \'+this.options[this.selectedIndex].text+\'.\')) {this.form.submit();} else {this.selectedIndex = 0}"><option/><option>visited</option><option>unvisited</option></select>');
            st := sprintf('View <select name="show" onchange="javascript: this.form.submit();"><option value="">all</option><option value="visited">visited</option><option value="unvisited">unvisited</option></select>');
            sv := get_keyword('show', params, '');
            st := replace(st, sprintf('value="%s"', sv), sprintf('value="%s" selected="selected"', sv));
          }
          imageName := '/ods/images/oat/Tree_node-collapsed.png';
          nodeName := null;
          if (lcase (node_type) = 'f')
          {
            if (node_id >= 0)
            {
              nodeName := BMK.WA.folder_name (node_id);
            } else {
              nodeName := 'Bookmarks';
            }
          }
          else if (node_type = 's')
          {
            if (node_id >= 0)
            {
              imageName := 'image/sfolder_16.jpg';
              nodeName := BMK.WA.sfolder_name (node_id);
            } else {
              nodeName := 'Smart Folders';
            }
          }
          else if (node_type = 't')
          {
            if (BMK.WA.node_suffix (self.bNode) <> '')
            {
              imageName := 'image/tag_16.png';
              nodeName := 'Tag: ' || BMK.WA.node_suffix (self.bNode);
            } else {
              nodeName := 'Tags';
            }
          }
          else if (node_type = 'u')
          {
            if (node_id >= 0)
            {
              imageName := 'image/user_16.png';
              nodeName := BMK.WA.account_fullName (node_id);
            } else {
              imageName := 'image/group_16.png';
              nodeName := 'Shared Bookmarks By';
            }
          }

          nodeName := BMK.WA.stringCut (coalesce (nodeName, ''), self.chars);
          if (not is_empty_or_null(nodeName))
          {
            http('<div id="channel_header">');
            http(sprintf('<div id="channel_header_left"><img src="%s" border="0" alt="" /> %s</div>', imageName, nodeName));
            http(sprintf('<div id="channel_header_right">%s %s</div>', mt, st));
            http('<br style="clear: both;"/>');
            http('</div>');
          }
        ?>
        <v:data-source name="dsrc" expression-type="sql" nrows="0" initial-offset="0">
          <v:before-data-bind>
            <![CDATA[
              declare data, node_type, node_id any;
              declare flag, tmp, sql varchar;

              node_id := BMK.WA.node_id (self.bNode);
              node_type := BMK.WA.node_type (self.bNode);

              control.ds_parameters := null;
              if (node_type = 'f')
              {
                if (self.domain_id >= 0)
                {
                  sql := 'select *
                                       from (select 0                                _TYPE,
                                                    F_ID                             _ID,
                                                    BMK.WA.make_node(\'f\', F_ID)    _NODE,
                                                    F_NAME                           _NAME,
                                                    \'\'                             _URI,
                                                    null                             _VISITED,
                                                    null                             _UPDATED,
                                         null                             _CREATED,
                                         null                             _FOLDER_ID,
                                         null                             _FOLDER_NAME,
                                         null                             _GRANT_ID
                                               from BMK.WA.FOLDER
                                              where F_DOMAIN_ID = <DOMAIN_ID>
                                                and coalesce(F_PARENT_ID, -1) = <ID>

                                              union

                                  <BOOKMARKS>
                                 ) x
                                      where 1 = 1';
                  BMK.WA.xml_set('folderID', data, BMK.WA.node_suffix(self.bNode));
                  tmp := BMK.WA.sfolder_sql (self.domain_id, self.account_id, self.person_rights, data);
                  sql := replace(sql, '<BOOKMARKS>', tmp);
                  sql := replace(sql, '<ID>', BMK.WA.node_suffix(self.bNode));
                }
                else
                {
                  sql := 'select *
                                       from (select TOP 100
                                                    1                              _TYPE,
                                                    BD_ID                          _ID,
                                                    BMK.WA.make_node(\'b\', BD_ID) _NODE,
                                                    BD_NAME                        _NAME,
                                                    B_URI                          _URI,
                                                    BD_VISITED                     _VISITED,
                                                    BD_UPDATED                     _UPDATED,
                                                    BD_CREATED                     _CREATED
                                               from BMK.WA.BOOKMARK_DOMAIN,
                                                    BMK.WA.BOOKMARK,
                                                    DB.DBA.WA_INSTANCE
                                              where BD_BOOKMARK_ID = B_ID
                                                and WAI_ID = BD_DOMAIN_ID
                                                and WAI_IS_PUBLIC = 1
                                   order by BD_UPDATED desc
                                 ) x
                                      where 1 = 1';
                }
              }
              else if ((node_type = 's') and (node_id = -1))
              {
                sql := 'select *
                                     from (select 1                              _TYPE,
                                                  SF_ID                          _ID,
                                                  BMK.WA.make_node(\'s\', SF_ID) _NODE,
                                                  SF_NAME                        _NAME,
                                                  \'\'                           _URI,
                                                  null                           _VISITED,
                                                  null                           _UPDATED,
                                                  null                           _CREATED
                                             from BMK.WA.SFOLDER
                                            where SF_DOMAIN_ID = <DOMAIN_ID>) x
                                      where 1 = 1';
                sql := replace(sql, '<DOMAIN_ID>', cast (self.domain_id as varchar));
              }
              else if ((node_type = 's') and (node_id >= 0))
              {
                data := (select SF_DATA from BMK.WA.SFOLDER where SF_DOMAIN_ID = self.domain_id and SF_ID = node_id);
                sql := 'select distinct rs.* from BMK.WA.shared_sql (rs0, rs1, rs2, rs3)(_TYPE integer, _ID integer, _NODE varchar, _NAME varchar, _URI varchar, _VISITED datetime, _UPDATED datetime, _CREATED datetime, _FOLDER_ID integer, _FOLDER_NAME varchar, _GRANT_ID integer) rs where rs0 = ? and rs1 = ? and rs2 = ? and rs3 = ?';
                control.add_parameter (self.domain_id);
                control.add_parameter (self.account_id);
                control.add_parameter (self.person_rights);
                control.add_parameter (data);

              }
              else if ((node_type = 't') and not is_empty_or_null (BMK.WA.node_suffix (self.bNode)))
              {
                BMK.WA.xml_set('tags', data, BMK.WA.node_suffix(self.bNode));
                sql := BMK.WA.sfolder_sql (self.domain_id, self.account_id, self.person_rights, data);
              }
              else if ((node_type = 'u') and (node_id = -1))
              {
                sql := 'select *
                                     from (select distinct
                                                  1                              _TYPE,
                                                  U_ID                           _ID,
                                                  BMK.WA.make_node(\'u\', U_ID)  _NODE,
                                                  U_NAME                         _NAME,
                                                  \'\'                           _URI,
                                                  null                           _VISITED,
                                                  null                           _UPDATED,
                                                  null                           _CREATED
                                  from BMK..GRANTS_VIEW
                                 where GW_ID = <USER_ID>
                               ) x
                                      where 1 = 1';
                sql := replace(sql, '<USER_ID>', cast (self.account_id as varchar));
              }
              else if ((node_type = 'u') and (node_id >= 0))
              {
                sql := 'select *
                                     from (select 0                              _TYPE,
                                                  F_ID                           _ID,
                                                  BMK.WA.make_node(\'F\', F_ID)  _NODE,
                                                  F_NAME                         _NAME,
                                                  \'\'                           _URI,
                                                  null                           _VISITED,
                                                  null                           _UPDATED,
                                                  null                           _CREATED
                                             from BMK.WA.FOLDER,
                                      BMK..GRANTS_OBJECT_VIEW
                                where GOW_TYPE = \'F\'
                                              and G_OBJECT_ID = F_ID
                                  and GOW_FROM = <ID>
                                  and GOW_TO = <USER_ID>

                                            union

                                           select 1                                _TYPE,
                                                  a.BD_ID                          _ID,
                                                  BMK.WA.make_node(\'B\', a.BD_ID) _NODE,
                                                  a.BD_NAME                        _NAME,
                                                  b.B_URI                          _URI,
                                                  a.BD_VISITED                     _VISITED,
                                                  a.BD_UPDATED                     _UPDATED,
                                                  a.BD_CREATED                     _CREATED
                                 from BMK..GRANTS_OBJECT_VIEW d,
                                                  BMK.WA.BOOKMARK_DOMAIN a
                                                    join BMK.WA.BOOKMARK b on b.B_ID = a.BD_BOOKMARK_ID
                                where d.GOW_TYPE = \'B\'
                                              and d.G_OBJECT_ID = a.BD_ID
                                  and GOW_FROM = <ID>
                                  and GOW_TO = <USER_ID>
                              ) x
                                      where 1 = 1';
                sql := replace(sql, '<ID>', BMK.WA.node_suffix(self.bNode));
              }
              else if (node_type = 'F')
              {
                sql := 'select *
                                     from (select 0                              _TYPE,
                                                  F_ID                           _ID,
                                                  BMK.WA.make_node(\'F\', F_ID)  _NODE,
                                                  F_NAME                         _NAME,
                                                  \'\'                           _URI,
                                                  null                           _VISITED,
                                                  null                           _UPDATED,
                                                  null                           _CREATED
                                             from BMK.WA.FOLDER
                                            where coalesce(F_PARENT_ID, -1) = <ID>

                                            union

                                           select 1                                _TYPE,
                                                  a.BD_ID                          _ID,
                                                  BMK.WA.make_node(\'B\', a.BD_ID) _NODE,
                                                  a.BD_NAME                        _NAME,
                                                  b.B_URI                          _URI,
                                                  a.BD_VISITED                     _VISITED,
                                                  a.BD_UPDATED                     _UPDATED,
                                                  a.BD_CREATED                     _CREATED
                                             from BMK.WA.BOOKMARK_DOMAIN a
                                                    join BMK.WA.BOOKMARK b on b.B_ID = a.BD_BOOKMARK_ID
                                where coalesce(a.BD_FOLDER_ID, -1) = <ID>
                              ) x
                                      where 1 = 1';
                sql := replace(sql, '<ID>', BMK.WA.node_suffix(self.bNode));
              }
              else
              {
                control.ds_sql := 'select 0 _TYPE, F_ID _ID, \'\' _NODE, F_NAME _NAME, null _URI, null _VISITED, null _UPDATED, null _CREATED from BMK.WA.FOLDER where 1=0';
                goto _end;
              }
              sql := replace(sql, '<DOMAIN_ID>', cast (self.domain_id as varchar));
              sql := replace(sql, '<USER_ID>', cast (self.account_id as varchar));
              flag := get_keyword('show', params, '');
              if (flag = 'visited')
                sql := concat (sql, ' and (_VISITED is not null)');
              else if (flag = 'unvisited')
                sql := concat (sql, ' and (_VISITED is null)');

              self.sortChange(get_keyword ('sortColumn', params, ''));
              control.ds_sql := concat (sql, ' order by _TYPE, ', self.n_order, ' ', self.n_direction, ', _ID');

            _end:;
            ]]>
          </v:before-data-bind>
        </v:data-source>

        <v:data-set name="ds" data-source="self.dsrc" scrollable="1">

          <v:template name="ds_header" type="simple" name-to-remove="table" set-to-remove="bottom">
            <table id="bookmarks" class="ODS_grid" style="border: 0px; clear: left;">
              <thead>
              <tr>
                  <th class="checkbox">
                    <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')"/>
                  </th>
                <th width="1%" style="border-width: 0px 0px 1px 0px;">
                  <img src="image/c.gif" border="0" alt="" />
                </th>
                  <?vsp http (DB.DBA.wa_show_column_header ('Name', '_NAME', self.n_order, self.n_direction, 'width="80%"')); ?>
                <vm:if test="cast(get_keyword('column_#2', self.settings, '0') as integer) = 1">
                    <?vsp http (DB.DBA.wa_show_column_header ('Date Created', '_CREATED', self.n_order, self.n_direction)); ?>
                </vm:if>
                <vm:if test="cast(get_keyword('column_#3', self.settings, '1') as integer) = 1">
                    <?vsp http (DB.DBA.wa_show_column_header ('Last Update', '_UPDATED', self.n_order, self.n_direction)); ?>
                </vm:if>
                  <th class="action">Action</th>
              </tr>
            </thead>
          </table>
        </v:template>

        <v:template name="ds_repeat" type="repeat" name-to-remove="" set-to-remove="">

          <v:template name="ds_browse" type="browse" name-to-remove="table" set-to-remove="both">
            <table>
              <tr>
                    <?vsp
                    declare node, node_type, node_id, permissions any;

                    node := (control as vspx_row_template).te_column_value('_NODE');
                      node_type := BMK.WA.node_type (node);
                    node_id := BMK.WA.node_id (node);
                    permissions := self.person_rights;
                    if (node_type = 'b')
                      permissions := BMK.WA.bookmark_rights (self.domain_id, node_id, self.person_rights, self.account_rights);

                  ?>
                  <td class="checkbox">
                    <?vsp
                      if ((permissions = 'W') and (node_type in ('f', 's', 'b')))
                      {
                        http (sprintf ('<input type="checkbox" name="cb_item" value="%s" onclick="selectCheck(this, \'cb_item\')"/>', node));
                      }
                    ?>
                  </td>
                  <td valign="top">
                    <?vsp
                      declare image, alt any;

                      if      (lcase (node_type) = 'f')
                      {
                        image := '/ods/images/oat/Tree_node-collapsed.png';
                        alt := 'Folder';
                      }
                      else if (lcase (node_type) = 'b')
                      {
                        image := 'image/web_16.png';
                        alt := 'Bookmark';
                      }
                      else if (lcase (node_type) = 's')
                      {
                        image := 'image/sfolder_16.jpg';
                        alt := 'Smart Folder';
                      }
                      else if (lcase (node_type) = 'u')
                      {
                        image := 'image/user_16.png';
                        alt := 'User';
                      }
                      http(sprintf('<img style="padding: 0 2px 0 0;" src="%s" border="0" alt="%s"/>', image, alt));
                    ?>
                  </td>
                  <td valign="top">
                    <?vsp
                      declare N, domain_id integer;
                      declare target, uri, onclick, title, title2, tags varchar;

                      title := BMK.WA.utf2wide ((control as vspx_row_template).te_column_value('_NAME'));
                      if (lcase (node_type) = 'b')
                      {
                        domain_id := (select BD_DOMAIN_ID from BMK.WA.BOOKMARK_DOMAIN where BD_ID = node_id);
                        uri := (control as vspx_row_template).te_column_value('_URI');
                        title2 := BMK.WA.rdfa_value (sprintf ('%V', title), 'dc:title');
                        onclick := '';
                        if (self.account_id > 0)
                          onclick := sprintf ('onclick="javascript: openBookmark (\'%d\');"', node_id);
                        if (cast(get_keyword ('panes', self.settings, '0') as integer) = 0)
                        {
                          target := case when (cast(get_keyword ('bookmarkOpen', self.settings, '0') as integer) = 0) then '_blank' else '_self' end;
                          http (sprintf ('<a id="bookmark_%d" href="%s" target="%s" %s class="%s %s" title="Full window view of \'%s\'" about="%U">%s</a>', node_id, uri, target, onclick, 'app', self.linkClass(node), title, SIOC..bmk_post_iri(domain_id, node_id), title2));
                        } else {
                          http (sprintf ('<a id="bookmark_%d" href="%s" onclick="javascript: parent.openIFrame (\'%d\', \'%d\', \'%s\'); return false;" class="%s %s" title="3-Pane view of \'%s\'" about="%U">%s</a>', node_id, uri, node_id, self.account_id, uri, 'app', self.linkClass(node), title, SIOC..bmk_post_iri(domain_id, node_id), title2));
                        }
                        if (self.domain_id = domain_id)
                        {
                          tags := BMK.WA.tags_select (domain_id, node_id);
                          if (not is_empty_or_null(tags))
                          {
                            http('<br /><i>Tags: ');
                            tags := split_and_decode (tags, 0, '\0\0,');
                            for (N := 0; N < length(tags); N := N + 1)
                            {
                              http(sprintf('<a id="tag_%d_%s" href="%s" onclick="javascript: parent.BMK.selectTag (\'%s\'); return false;">%s</a>', node_id, tags[N], SIOC..tag_iri (BMK.WA.forum_iri (self.domain_id), tags[N]), tags[N], tags[N]));
                              if (N <> length(tags)-1)
                                http(' | ');
                            }
                            http('</i>');
                          }
                        }
                      } else {
                        http (sprintf('<a href="#" onclick="javascript: parent.BMK.selectPath (\'%s\'); return false;" title="%s" class="noapp">%s</a>', self.bNodePath || '/' || node, title, title));
                      }
                    ?>
                  </td>
                  <vm:if test="cast(get_keyword('column_#2', self.settings, '0') as integer) = 1">
                    <td align="right" nowrap="nowrap" valign="top" style="padding-right: 5px;">
                      <?vsp http (BMK.WA.rdfa_value (BMK.WA.dt_value((control as vspx_row_template).te_column_value('_CREATED')), 'dct:created')); ?>
                    </td>
                  </vm:if>
                  <vm:if test="cast(get_keyword('column_#3', self.settings, '1') as integer) = 1">
                    <td align="right" nowrap="nowrap" valign="top" style="padding-right: 5px;">
                      <?vsp http (BMK.WA.rdfa_value (BMK.WA.dt_value((control as vspx_row_template).te_column_value('_UPDATED')), 'dct:modified')); ?>
                    </td>
                  </vm:if>
                  <td class="action">
                    <?vsp
                      declare N, domain_id integer;
                      declare actions, actionPrefix, uri, onclick, title, target, tags any;

                      actionPrefix := '';
                      if (lcase (node_type) = 'b')
                      {
                        domain_id := (select BD_DOMAIN_ID from BMK.WA.BOOKMARK_DOMAIN where BD_ID = node_id);
                        actionPrefix := 'Bookmark';
                      }
                      else if (lcase (node_type) = 'f')
                      {
                        domain_id := (select F_DOMAIN_ID from BMK.WA.FOLDER where F_ID = node_id);
                        actionPrefix := 'Folder';
                      }
                      else if (lcase (node_type) = 's')
                      {
                        domain_id := (select SF_DOMAIN_ID from BMK.WA.SFOLDER where SF_ID = node_id);
                        actionPrefix := 'Smart Folder';
                      }
                      if (self.domain_id = domain_id)
                      {
                        uri := (control as vspx_row_template).te_column_value('_URI');
                        title := '\'' || (control as vspx_row_template).te_column_value('_NAME') || '\'';

                        actions := '';
                        if ((node_type = 'b') and ((permissions <> 'W') or (self.bNodePath like '/u#-1%')))
                          actions := actions || either (equ (actions, ''), '', ' | ') || sprintf('<span onclick="javascript: parent.BMK.formShow(\'%s/View\', \'%d\'); return false;" title="View %s" class="link">view</span>', actionPrefix, node_id, title);

                        if ((permissions = 'W') and (self.bNodePath not like '/u#-1%'))
                          actions := actions || either (equ (actions, ''), '', ' | ') || sprintf('<span onclick="javascript: parent.BMK.formShow(\'%s/Edit\', \'%d\'); return false;" title="Edit %s" class="link">edit</span>', actionPrefix, node_id, title);

                        if ((node_type = 'b') and (cast (get_keyword ('panes', self.settings, '0') as integer) = 1))
                        {
                          onclick := case when (self.account_id > 0) then sprintf ('onclick="javascript: openBookmark (\'%d\');"', node_id) else '' end;
                          target := case when (cast(get_keyword ('bookmarkOpen', self.settings, '0') as integer) = 0) then '_blank' else '_self' end;
                          actions := actions || either (equ (actions, ''), '', ' | ') || sprintf('<a href="%s" target="%s" %s title="Full window view of %s" class="link">show</a>', uri, target, onclick, title);
                        }

                        if ((node_type = 'b') and (permissions = 'W') and (self.bNodePath not like '/u#-1%'))
                          actions := actions || either (equ (actions, ''), '', ' | ') || self.windowOpen (sprintf ('annotea.vspx?oid=%d', node_id), 'annotate', title);

                        if ((node_type = 'b') and BMK.WA.discussion_check () and BMK.WA.conversation_enable (self.domain_id))
                          actions := actions || either (equ(actions, ''), '', ' | ') || self.windowOpen (sprintf ('conversation.vspx?id=%d', node_id), 'discuss', title);

                        http (' ' || actions);
                      }
                    ?>
                  </td>
                </tr>
              </table>
            </v:template>

          </v:template>

          <v:template name="ds_footer" type="simple" name-to-remove="table" set-to-remove="top">
            <table>
            </table>
          </v:template>

        </v:data-set>
      </v:template>

      <v:template type="simple" enabled="--case when self.v_form = 'import' then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
           if (self.bStep = '1')
           {
             self.v_sourceParam_2 := get_keyword ('deliciousUser', self.settings, '');
             self.v_sourceParam_3 := get_keyword('deliciousPwd', self.settings, '');
             self.v_folder_id := 0;
             if (BMK.WA.node_type (self.bNode) = 'f')
               self.v_folder_id := BMK.WA.node_id (self.bNode);
           }
          ]]>
        </v:before-data-bind>

        <v:template type="simple" enabled="-- case when (self.bStep = '1') then 1 else 0 end">
          <div class="form-header">
            <v:label format="%s" value="Import: Step 1 - Select source type"/>
          </div>
          <div class="new-form-body">
            <table cellspacing="0">
              <tr>
                <th rowspan="4" valign="middle">
                  Source type
                </th>
                <td nowrap="nowarap">
                  <label>
                  <v:radio-button name="i_source_0" xhtml_id="i_source_0" group-name="i_source" value="0">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(lte(self.v_source, 0), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                    <b>File</b>
                  </label>
                </td>
              </tr>
              <tr>
                <td nowrap="nowarap">
                  <label>
                  <v:radio-button name="i_source_1" xhtml_id="i_source_1" group-name="i_source" value="1">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(equ(self.v_source, 1), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                    <b>WebDAV</b>
                  </label>
                </td>
              </tr>
              <tr>
                <td nowrap="nowarap">
                  <label>
                  <v:radio-button name="i_source_2" xhtml_id="i_source_2" group-name="i_source" value="2">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(equ(self.v_source, 2), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                    <b>URI</b>
                  </label>
                </td>
              </tr>
              <tr>
                <td nowrap="nowarap">
                  <label>
                  <v:radio-button name="i_source_3" xhtml_id="i_source_3" group-name="i_source" value="3">
                    <v:before-render>
                      <![CDATA[
                        control.ufl_selected := either(equ(self.v_source, 3), 1, 0);
                      ]]>
                    </v:before-render>
                  </v:radio-button>
                    <b>Delicious</b>
                  </label>
                </td>
              </tr>
            </table>
          </div>
          <div class="form-footer">
            <v:button action="simple" value="Next" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  if (self.i_source_0.ufl_selected)
                  {
                    self.v_source := 0;
                  } else if (self.i_source_1.ufl_selected) {
                    self.v_source := 1;
                  } else if (self.i_source_2.ufl_selected) {
                    self.v_source := 2;
                  } else if (self.i_source_3.ufl_selected) {
                    self.v_source := 3;
                  }
                  self.bStep := '2';
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
          </div>
        </v:template>

        <v:template type="simple" enabled="-- case when (self.bStep = '2') then 1 else 0 end">
          <div class="form-header">
            <v:label format="%s" value="Import: Step 2 - Source parameters"/>
          </div>
          <div class="new-form-body">
            <table cellspacing="0">
              <vm:if test="self.v_source = 0">
                <tr>
                  <th width="30%">
                    Select file
                  </th>
                  <td>
                    <input type="file" name="i_file" size="40"/>
                  </td>
                </tr>
              </vm:if>
              <vm:if test="self.v_source = 1">
                <tr>
                  <th width="30%">
                    Select WebDAV file
                  </th>
                  <td>
                    <v:text name="i_dav" xhtml_id="i_dav" value="" xhtml_size="40" />
                    <input type="button" value="Browse..." onclick="davBrowse ('i_dav');" />
                         <![CDATA[
              		    <script type="text/javascript">
                        OAT.Loader.load(['dav'], function(){OAT.WebDav.init(davOptions);});
              		    </script>
                        ]]>
                  </td>
                </tr>
              </vm:if>
              <vm:if test="self.v_source = 2">
                <tr>
                  <th width="30%">
                    Select URI
                  </th>
                  <td>
                    <v:text name="f_uri" value="--''" xhtml_size="40" />
                  </td>
                </tr>
              </vm:if>
              <vm:if test="self.v_source = 3">
                <tr>
                  <th width="30%">
                    <v:label for="i_deliciousUser" value="Delicious: User"/>
                  </th>
                  <td>
                    <v:text name="i_deliciousUser" null-value="--''" value="--self.v_sourceParam_2" />
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="i_deliciousPwd" value="Password"/>
                  </th>
                  <td>
                    <v:text name="i_deliciousPwd" type="password" null-value="--''" value="--self.v_sourceParam_3" />
                  </td>
                </tr>
                <tr>
                  <th />
                  <td>
                    <v:check-box name="i_deliciousReminder" xhtml_id="i_deliciousReminder" is-boolean="1" true-value="1" false-value="0" value="1" />
                    <vm:label for="i_deliciousReminder" value="Remember this login for future imports"/>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="i_deliciousTag" value="Tag"/>
                  </th>
                  <td>
                    <v:text name="i_deliciousTag" null-value="--''" value="--self.v_sourceParam_4" />
                  </td>
                </tr>
              </vm:if>
            </table>
          </div>
          <div class="form-footer">
            <v:button action="simple" value="Back" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.bStep := '1';
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <v:button action="simple" value="Next" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  declare params, S, V any;
                  params := self.vc_page.vc_event.ve_params;

                  if (self.v_source = 0)
                  {
                    S := trim (get_keyword ('i_file', params, ''));
                    if (is_empty_or_null (S))
                    {
                      self.vc_error_message := 'Please select file from your local file system!';
                      self.vc_is_valid := 0;
                      return;
                    }
                  }
                  else if (self.v_source = 1)
                  {
                    self.v_sourceParam_1 := trim (get_keyword ('i_dav', params, ''));
                    S := BMK.WA.dav_content (BMK.WA.host_url () || self.v_sourceParam_1, BMK.WA.account_name (self.account_id));
                    if (isnull(S))
                    {
                      self.vc_error_message := 'Bad import source!';
                      self.vc_is_valid := 0;
                      return;
                    }
                  }
                  else if (self.v_source = 2)
                  {
                    self.f_uri.ufl_value := trim (self.f_uri.ufl_value);
                    if (is_empty_or_null (self.f_uri.ufl_value))
                    {
                      self.vc_error_message := 'Please select correct URI address!';
                      self.vc_is_valid := 0;
                      return;
                    }
                    S := BMK.WA.dav_content (self.f_uri.ufl_value);
                    if (isnull(S))
                    {
                      self.vc_error_message := 'Bad import source!';
                      self.vc_is_valid := 0;
                      return;
                    } else {
                      V := BMK.WA.string2xml (S);
                      if (xpath_eval ('/html', V, 1) is not null)
                      {
                        -- HTML, do auto discovery of the feeds
                        declare url, T any;

                        T := xpath_eval('//head/link[ @rel="alternate" and @type="application/rss+xml" ]/@href', V, 0);
                        if (not length (T))
                          T := xpath_eval('//head/link[ @rel="alternate" and @type="application/atom+xml" ]/@href', V, 0);

                        if (length (T))
                        {
                          url := cast (T[0] as varchar);
                          url := WS.WS.EXPAND_URL (self.f_uri.ufl_value, url);
                          S := BMK.WA.dav_content (url);
                        }
                      }
                    }
                  }
                  else if (self.v_source = 3)
                  {
                    declare url, V any;

                    self.v_sourceParam_2 := trim (self.i_deliciousUser.ufl_value);
                    self.v_sourceParam_3 := trim (self.i_deliciousPwd.ufl_value);
                    self.v_sourceParam_4 := trim (self.i_deliciousTag.ufl_value);
                    if (self.i_deliciousReminder.ufl_selected)
                    {
                      self.settings := BMK.WA.set_keyword ('deliciousUser', self.settings, self.v_sourceParam_2);
                      self.settings := BMK.WA.set_keyword ('deliciousPwd', self.settings, self.v_sourceParam_3);
                      insert replacing BMK.WA.SETTINGS(S_DOMAIN_ID, S_DATA, S_ACCOUNT_ID)
                        values(self.domain_id, serialize (self.settings), self.account_id);
                    }

                    declare exit handler for sqlstate '*'
                    {
                      self.vc_error_message := 'Cannot connect to del.icio.us server!';
                      self.vc_is_valid := 0;
                      return;
                    };
                    commit work;

                    url := 'https://api.del.icio.us/v1/posts/all';
                    if (self.v_sourceParam_3 <> '')
                      url := url || '?tag=' || self.v_sourceParam_4;
                    S := http_client(url, self.v_sourceParam_2, self.v_sourceParam_3, 'GET', null, null, null, null);
                    V := xml_tree_doc (xml_tree (S, 2));
                    self.vc_error_message := xpath_eval('string(//title)', V);
                    if (not is_empty_or_null (self.vc_error_message))
                    {
                      self.vc_is_valid := 0;
                      return;
                    }
                  }

                  -- save content into DAV
                  --
                  DB.DBA.DAV_MAKE_DIR ('/DAV/VAD/Bookmarks/', http_dav_uid (), http_dav_uid () + 1, '110100100R');
                  DB.DBA.DAV_MAKE_DIR ('/DAV/VAD/Bookmarks/Import/', http_dav_uid (), http_dav_uid () + 1, '110100100R');
                  DB.DBA.DAV_RES_UPLOAD_STRSES_INT ('/DAV/VAD/Bookmarks/Import/' || self.sid, S, 'application/jpeg', '110100100R', http_dav_uid (), http_dav_uid () + 1, null, null, 0);

                  self.bStep := '3';
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
          </div>
        </v:template>

        <v:template type="simple" enabled="-- case when (self.bStep = '3') then 1 else 0 end">
          <div class="form-header">
            <v:label format="%s" value="Import: Step 3 - Options"/>
          </div>
          <div class="new-form-body">
            <table id="progressHide" cellspacing="0">
              <tr>
                <th width="30%">
                  <v:label for="i_folder_name" value="Folder"/>
                </th>
                <td colspan="2">
                  <v:text name="i_folder_name" null-value="''" value="--self.v_folder_name" fmt-function="BMK.WA.utf2wide" xhtml_class="textbox" xhtml_size="40%"/>
                  <v:data-list name="i_folder_id" value="--self.v_folder_id" sql="select 0 as F_ID, 'Select folder ...' as F_PATH2, '' as F_PATH from WS.WS.SYS_DAV_USER where U_NAME = 'dav' union all select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH" key-column="F_ID" value-column="F_PATH2" xhtml_class="select"/>
                </td>
              </tr>
              <tr>
                <th>
                  <v:label for="i_tag" value="Tags (comma-separated)"/>
                </th>
                <td>
                  <v:text name="i_tag" value="--self.v_tag" xhtml_class="textbox" xhtml_size="60"/>
                </td>
              </tr>
              <?vsp self.MyTags ('i_tag'); ?>
            </table>
            <span id="progressMax" style="display: none;">100</span>
            <table id="progressTable" cellspacing="0">
              <tr>
                <td>
                  <div id="progressText"></div>
                </td>
              </tr>
              <tr>
                <td>
                  <div id="progress"></div>
                </td>
              </tr>
            </table>
          </div>
          <div class="form-footer">
            <v:button action="simple" value="Back" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  self.bStep := '2';
                  self.vc_data_bind(e);
                ]]>
              </v:on-post>
            </v:button>
            <v:button action="simple" value="Import" xhtml_class="form-button">
              <v:on-post>
                <![CDATA[
                  -- check / create folder
                  self.v_folder_id := cast (self.i_folder_id.ufl_value as integer);
                  self.v_folder_name := trim (self.i_folder_name.ufl_value);
                  if ((self.v_folder_name <> '') and (not BMK.WA.folder_check_name(self.v_folder_name, 1)))
                  {
                    self.vc_error_message := 'Please, enter other folder name. This name contains bad characters.';
                    self.vc_is_valid := 0;
                    return;
                  }
                  self.v_folder_id := BMK.WA.folder_create(self.domain_id, self.v_folder_name, self.v_folder_id);

                  self.v_tag := BMK.WA.tag_prepare (self.i_tag.ufl_value);
                  if (not BMK.WA.validate_tags(self.v_tag))
                  {
                    self.vc_error_message := 'The expression is not valid tag(s).';
                    self.vc_is_valid := 0;
                    return;
                  }
                  self.bStep := '4';
                  self.vc_data_bind(e);
                 ]]>
               </v:on-post>
            </v:button>
            <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
          </div>
        </v:template>

        <v:template type="simple" enabled="-- case when (self.bStep = '4') then 1 else 0 end">
          <div class="form-header">
            <v:label format="%s" value="Import: Step 4 - Progress bar"/>
          </div>
          <div class="new-form-body">
            <input type="hidden" name="folder_id" value="<?V self.v_folder_id ?>"/>
            <input type="hidden" name="folder_name" value="<?V self.v_folder_name ?>"/>
            <input type="hidden" name="tags" value="<?V self.v_tag ?>"/>
            <span id="progressMax" style="display: none;">
              <?vsp
                 declare progressMax, S, T, R, V, V2 any;

                 progressMax := 0;
                 R := DAV_RES_CONTENT_INT (DAV_SEARCH_ID ('/DAV/VAD/Bookmarks/Import/' || self.sid, 'R'), S, T, 0, 0);
                 S := blob_to_string (S);

                 -- check netscape format
                 --
                 if (isnull(strcasestr(S, '<!doctype netscape-bookmark-file-1>')))
                   goto _xbel;
                 S := replace(S, '<p>', '');
                 S := replace(S, '<HR>', '');
                 S := replace(S, '<DD>', '');
                 S := replace(S, 'FOLDED', '');
                 S := replace(S, '  ', ' ');
                 S := replace(S, '&', '&amp;');

                 V := BMK.WA.string2xml (S, 2);
                 if (isnull (V))
                   goto _xbel;
                 V2 := xpath_eval ('//dl', V);
                 if (isnull (V2))
                   goto _xbel;
                 progressMax := xpath_eval('count (//a)', V2);
                 goto _end;

               _xbel:;
                 -- check XBEL format
                 --
                 V := BMK.WA.string2xml (S);
                 if (isnull (V))
                   goto _end;
                 V2 := xpath_eval('/xbel', V);
                 if (isnull (V2))
                   goto _rss;
                 progressMax := xpath_eval('count (//bookmark)', V2);
                 goto _end;

               _rss:;
                 -- check RSS format
                 --
                 V2 := xpath_eval ('/rss/channel/item|/rss/item|/RDF/item|/Channel/items/item', V);
                 if (isnull (V2))
                   goto _atom;
                 progressMax := xpath_eval('count (/rss/channel/item|/rss/item|/RDF/item|/Channel/items/item)', V2);
                 goto _end;

               _atom:;
                 -- check Atom format
                 --
                 V2 := xpath_eval ('/feed/entry', V);
                 if (isnull (V2))
                   goto _delicious;
                 progressMax := xpath_eval('count (/feed/entry)', V2);
                 goto _end;

              _delicious:;
                 -- check delicious format
                 --
                 V2 := xpath_eval('/posts', V);
                 if (isnull (V2))
                   goto _end;
                 progressMax := xpath_eval('count (//post)', V2);

              _end:;
                 http (cast (progressMax as varchar));
              ?>
            </span>
            <table id="progressTable" cellspacing="0">
              <tr>
                <td>
                  <div id="progressText"></div>
                </td>
              </tr>
              <tr>
                <td>
                  <div id="progressBar"></div>
                </td>
              </tr>
            </table>
          </div>
          <div class="form-footer">
            <input type="button" id="btn_Background" value="Background" onclick="javascript: parent.BMK.formPostAfter('import'); return false;"/>
            <input type="button" id="btn_Stop" value="Stop" onclick="javascript: stopState(); parent.BMK.formPostAfter('import'); return false;" class="form-button" />
          </div>
          <script type="text/javascript">
            <![CDATA[
              OAT.MSG.attach(OAT, "PAGE_LOADED", function(){initState();});
            ]]>
          </script>
        </v:template>
      </v:template>

      <v:template type="simple" enabled="-- case when self.v_form = 'export' then 1 else 0 end">
        <div class="form-header">
          Export
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th rowspan="2" valign="top">
                <v:label for="e_format" value="Format"/>
              </th>
              <td>
                <input type="radio" name="e_format" id="e_format_0" value="Netscape" checked="checked" onclick="changeExportName('e_file', '.xbel', '.html');"/>&nbsp;<label for="e_format_0">Netscape</label>
              </td>
            </tr>
            <tr>
              <td>
                <input type="radio" name="e_format" id="e_format_1" value="XBEL" onclick="changeExportName('e_file', '.html', '.xbel');"/>&nbsp;<label for="e_format_1">XBEL</label>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="e_file" value="File name"/>
              </th>
              <td>
                <input type="text" name="e_file" value="Bookmarks.html" size="40"/>
              </td>
            </tr>
          </table>
        </div>
        <div class="form-footer">
          <v:button action="simple" value="Export" xhtml_class="form-button">
            <v:on-post>
              <![CDATA[
                self.vc_redirect(sprintf('export.vspx?did=%d&output=BMK&file=%V&format=%s', self.domain_id, get_keyword ('e_file', e.ve_params), get_keyword ('e_format', e.ve_params)));
              ]]>
            </v:on-post>
          </v:button>
          <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
        </div>
      </v:template>

      <v:template type="simple" enabled="-- case when self.v_form in ('Bookmark/Create', 'Bookmark/Edit', 'Bookmark/View') then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            declare params any;
            params := self.vc_page.vc_event.ve_params;

            declare exit handler for not found goto _end1;


            if (isnull(get_keyword ('b_name', params)) and (self.v_form in ('Bookmark/Edit', 'Bookmark/View')))
            {
              select B_URI,
                     BD_NAME,
                     BD_DESCRIPTION,
                     BD_TAGS,
                     BD_FOLDER_ID,
                     BD_ACL
                into self.v_uri,
                     self.v_name,
                     self.v_description,
                     self.v_tags,
                     self.v_folder_id,
                     self.v_acl
                from BMK.WA.BOOKMARK_DOMAIN,
                     BMK.WA.BOOKMARK
               where BD_DOMAIN_ID = self.domain_id
                 and BD_ID = self.v_id
                 and BD_BOOKMARK_ID = B_ID;

              self.v_folder_name := '';
              self.v_grants := self.shareSelect (BMK.WA.make_node ('b', self.v_id));
              self.rdf_iri := SIOC..bmk_post_iri (self.domain_id, self.v_id);

              return;
            }

          _end1:
            self.v_uri := get_keyword ('b_uri', params, self.v_uri);
            self.v_name := get_keyword ('b_name', params, self.v_name);
            self.v_description := get_keyword ('b_description', params, '');
            self.v_grants := get_keyword ('b_grants', params, self.v_grants);
            self.v_tags := get_keyword ('b_tags', params, '');
            self.v_folder_id := 0;
            if (BMK.WA.node_type (self.bNode) = 'f')
              self.v_folder_id :=BMK.WA.node_id (self.bNode);
            self.v_folder_id := get_keyword ('b_folder_id', params, self.v_folder_id);
            self.v_folder_name := get_keyword ('b_folder_name', params, '');
          ]]>
        </v:before-data-bind>
        <?vsp
          http (sprintf ('<input type="hidden" name="b_id" value="%d" />', self.v_id));
        ?>
        <v:text name="tabNo" xhtml_id="tabNo" type="hidden" />
        <div class="form-header">
          <v:label format="%s" value="--self.v_form"/>
        </div>
        <div id="a" class="c1">
          <div class="tabs">
            &nbsp;<vm:tabCaption tab="a" tabsCount="2" tabNo="0" caption="Main" />
            &nbsp;<vm:tabCaption tab="a" tabsCount="2" tabNo="1" caption="Sharing" />
          </div>
          <div class="contents">
            <div id="a_content_0" class="tabContent">
              <table class="form-body" cellspacing="0">
            <tr>
              <th width="25%">
                    <v:label for="b_name" value="--case when self.v_form <> 'Bookmark/View' then 'Name (*)' else 'Name' end"/>
              </th>
              <td>
                <vm:if test="self.v_form <> 'Bookmark/View'">
                  <v:text name="b_name" value="--self.v_name" fmt-function="BMK.WA.utf2wide" xhtml_size="60" />
                </vm:if>
                <?vsp self.viewField (self.v_name); ?>
              </td>
            </tr>
            <tr>
              <th>
                    <v:label for="b_uri" value="--case when self.v_form <> 'Bookmark/View' then 'Link (*)' else 'Link' end"/>
              </th>
              <td>
                <vm:if test="self.v_form <> 'Bookmark/View'">
                  <v:text name="b_uri" value="--self.v_uri" xhtml_size="60"/>
                </vm:if>
                <?vsp self.viewField (self.v_uri); ?>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="b_description" value="Description"/>
              </th>
              <td>
                <vm:if test="self.v_form <> 'Bookmark/View'">
                  <v:textarea name="b_description" null-value="--''" value="--self.v_description" fmt-function="BMK.WA.utf2wide" xhtml_cols="45" xhtml_rows="6"/>
                </vm:if>
                <?vsp self.viewField (self.v_description); ?>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="b_folder_name" value="Folder"/>
              </th>
              <td>
                <vm:if test="self.v_form <> 'Bookmark/View'">
                  <v:text name="b_folder_name" null-value="''" value="--self.v_folder_name" fmt-function="BMK.WA.utf2wide" xhtml_class="textbox" xhtml_size="40%"/>
                  <v:data-list name="b_folder_id" value="--self.v_folder_id" sql="select 0 as F_ID, 'Select folder ...' as F_PATH2, '' as F_PATH from WS.WS.SYS_DAV_USER where U_NAME = 'dav' union all select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH" key-column="F_ID" value-column="F_PATH2" xhtml_class="select"/>
                </vm:if>
                <?vsp self.viewField (BMK.WA.folder_path (self.v_folder_id)); ?>
              </td>
            </tr>
            <tr>
              <script type="text/javascript">
                function suggestTags ()
                {
                      windowShow('<?V BMK.WA.page_url (self.domain_id, 'tags.vspx', self.sid, self.realm) ?>&amp;txt=' + escape (document.F1.elements['b_name'].value) + '&amp;txt2=' + escape (document.F1.elements['b_description'].value) + '&amp;fld=b_tags', 'bookmarks_suggest_window');
                }
              </script>
              <th>
                <v:label for="b_tags" value="Tags (comma-separated)"/>
              </th>
              <td>
                <vm:if test="self.v_form <> 'Bookmark/View'">
                  <v:text name="b_tags" null-value="''" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60"/>
                  <input type="button" value="Suggest" onClick="javascript: suggestTags();" class="button" />
                  <input type="button" value="Clear" onClick="javascript: document.F1.elements['b_tags'].value = ''" class="button" />
                </vm:if>
                <?vsp self.viewTags (self.v_tags); ?>
              </td>
            </tr>
            <vm:if test="self.v_form <> 'Bookmark/View'">
              <?vsp self.myTags ('b_tags'); ?>
            </vm:if>
          </table>
        </div>
            <div id="a_content_1" class="tabContent" style="display: none;">
              <fieldset>
                <legend><b>ODS users</b></legend>
                <table class="form-body" cellspacing="0">
                  <tr>
                    <td style="width: 90%; background-color: white;">
                      <table id="f_tbl" class="ODS_grid">
                        <thead>
                          <tr>
                            <th width="100%">Value</th>
                            <th class="action">Action</th>
                          </tr>
                        </thead>
                  		  <![CDATA[
                  		    <script type="text/javascript">
                          <?vsp
                            declare N, L integer;
                            declare acl_values any;

                            L := 0;
                            acl_values := split_and_decode (self.v_grants, 0, '\0\0,');
                            for (N := 0; N < length (acl_values); N := N + 1)
                            {
                              L := 1;
                              if (self.v_form <> 'Bookmark/View')
                              {
                                http (sprintf ('OAT.MSG.attach(OAT, "PAGE_LOADED", function(){TBL.createRow("f", null, {fld_1: {mode: 1, value: "%s", form: "F1"}});});', acl_values[N], 'U'));
                              } else {
                                http (sprintf ('OAT.MSG.attach(OAT, "PAGE_LOADED", function(){TBL.createViewRow("f", {fld_1: {value: "%s"}});});', acl_values[N]));
                              }
                            }
                          ?>
                  		    </script>
                  		  ]]>
                        <tr id="f_tr_no" style="display: <?V case when L=0 then '' else 'none' end ?>;"><td colspan="<?V case when self.v_form = 'Bookmark/View' then 1 else 2 end ?>"><b>No Shares</b></td></tr>
                  		</table>
                  	</td>
                    <vm:if test="self.v_form <> 'Bookmark/View'">
                      <td valign="top" nowrap="nowrap">
                        <img class="pointer" src="/ods/images/icons/add_16.png" border="0" alt="Add Share" title="Add Share" onclick="javascript: TBL.createRow('f', null, {fld_1: {mode: 1, form: 'F1'}});" />
                      </td>
                    </vm:if>
                  </tr>
                </table>
              </fieldset>
              <fieldset>
                <legend><b>WebID users</b></legend>
              <table class="form-body" cellspacing="0">
                <tr>
                    <td style="width: 90%; background-color: white;">
                      <table id="s_tbl" class="ODS_grid">
                        <thead>
                        <tr>
                          <th width="15%">Type</th>
                          <th>Value</th>
                          <th width="1%" nowrap="nowrap">ACL: (R)ead, (W)rite</th>
                            <th class="action">Action</th>
                        </tr>
                      </thead>
                        <tbody id="s_tbody">
                          <tr id="s_tr_no"><td colspan="4"><b>No Shares</b></td></tr>
                		  <![CDATA[
                		    <script type="text/javascript">
                      <?vsp
                              declare acl any;

                        acl := (select WAI_ACL from DB.DBA.WA_INSTANCE where WAI_ID = self.domain_id);
                        acl := case when isnull (acl) then vector () else deserialize (acl) end;
                              DB.DBA.wa_aci_lines (acl);

                        acl := deserialize (self.v_acl);
                              DB.DBA.wa_aci_lines (acl, case when self.v_form = 'Bookmark/View' then 'view' else '' end);
                     		    ?>
                     		    </script>
                     		  ]]>
                        </tbody>
                    </table>
                  </td>
                  <vm:if test="self.v_form <> 'Bookmark/View'">
                    <td valign="top" nowrap="nowrap">
                      <img class="pointer" src="/ods/images/icons/add_16.png" border="0" alt="Add Share" title="Add Share" onclick="javascript: TBL.createRow('s', null, {fld_1: {mode: 50, onchange: function(){TBL.changeCell50(this);}}, fld_2: {mode: 51, form: 'F1', tdCssText: 'white-space: nowrap;', className: '_validate_ _webid_'}, fld_3: {mode: 52, value: [1, 0, 0], tdCssText: 'width: 1%; white-space: nowrap; text-align: center;'}});" />
                    </td>
                  </vm:if>
                </tr>
              </table>
              </fieldset>
            </div>
          </div>
        </div>
        <div class="form-footer">
          <vm:if test="self.v_form <> 'Bookmark/View'">
          <input type="button" title="Save" value="Save" onclick="javascript: if (validateInputs(this)) {BMK.formPost('<?V self.v_form ?>');}; return false;"/>
          </vm:if>
          <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
        </div>
      </v:template>

      <v:template type="simple" enabled="-- case when self.v_form in ('Folder/Create', 'Folder/Edit') then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            if (self.v_form in ('Folder/Create', 'Folder/Edit'))
            {
              declare params any;
              params := self.vc_page.vc_event.ve_params;

              declare exit handler for not found goto _end2;

              if (isnull(get_keyword ('f_name', params)) and (self.v_form = 'Folder/Edit'))
              {
                select F_PARENT_ID,
                       F_NAME
                  into self.v_parent_id,
                       self.v_name
                  from BMK.WA.FOLDER
                 where F_DOMAIN_ID = self.domain_id
                   and F_ID = self.v_id;

                self.v_grants := self.shareSelect (BMK.WA.make_node('f', self.v_id));
                return;
              }

            _end2:
              self.v_parent_id := 0;
              if (BMK.WA.node_type (self.bNode) = 'f')
                self.v_parent_id := BMK.WA.node_id (self.bNode);
              self.v_parent_id := cast (get_keyword ('f_parent_id', params, self.v_parent_id) as integer);
              self.v_name := get_keyword ('f_name', params, '');
              self.v_grants := get_keyword ('f_grants', params, self.v_grants);
            }
          ]]>
        </v:before-data-bind>
        <?vsp
          http (sprintf ('<input type="hidden" name="f_id" id="f_id" value="%d" />', self.v_id));
        ?>
        <div class="form-header">
          <v:label format="%s" value="--self.v_form"/>
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th>
                <v:label for="f_parent" value="Parent folder"/>
              </th>
              <td>
                <v:select-list name="f_parent_id">
                  <v:before-data-bind>
                    <![CDATA[
                      declare S integer;

                      S := '!@#';
                      if (self.v_id >= 0)
                        S := BMK.WA.folder_path (self.v_id);
                      (control as vspx_select_list).vsl_items:= vector ();
                      (control as vspx_select_list).vsl_item_values:= vector ();
                      (control as vspx_select_list).vsl_selected_inx := 0;
                      (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector ('Select folder ...'));
                      (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector ('-1'));
                      for (select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH) do
                      {
                        if (F_PATH like concat (S, '%'))
                          goto _skip;
                        (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector (F_PATH2));
                        (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector (cast (F_ID as varchar)));
                      _skip:;
                      }
                    ]]>
                  </v:before-data-bind>
                  <v:after-data-bind>
                    <![CDATA[
                      declare N integer;

                      N := 0;
                      foreach (any item in (control as vspx_select_list).vsl_item_values) do
                      {
                        if (item = cast (self.v_parent_id as varchar))
                          (control as vspx_select_list).vsl_selected_inx := N;
                        N := N + 1;
                      }
                    ]]>
                  </v:after-data-bind>
                </v:select-list>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="f_name" value="Folder name"/>
              </th>
              <td>
                <v:text name="f_name" null-value="--''" value="--BMK.WA.utf2wide (self.v_name)" fmt-function="BMK.WA.utf2wide" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="f_grants" value="Share to user(s)" />
              </th>
              <td>
                <v:text name="f_grants" null-value="--''" value="--self.v_grants" xhtml_class="textbox" xhtml_size="60" xhtml_title="User names must be comma delimited!" />
                <input type="button" value="Select" onClick="javascript: windowShow('/ods/users_select.vspx?amp;dst=mc&amp;params=f_grants:s1;&nrows=<?V BMK.WA.settings_rows (self.settings) ?>')" class="button" />
                <input type="button" value="Clear" onClick="javascript: document.F1.elements['f_grants'].value = ''" class="button" />
              </td>
            </tr>
          </table>
        </div>
        <div class="form-footer">
          <input type="button" title="Save" value="Save" onclick="javascript: BMK.formPost('<?V self.v_form ?>'); return false;"/>
          <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
        </div>
      </v:template>

      <v:template type="simple" enabled="-- case when self.v_form in ('Smart Folder/Create', 'Smart Folder/Edit') then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            if (self.v_form in ('Smart Folder/Create', 'Smart Folder/Edit'))
            {
              declare params any;

              params := self.vc_page.vc_event.ve_params;

              declare exit handler for not found goto _end4;

              if (isnull(get_keyword ('s_name', params)))
              {
                declare data any;

                select SF_NAME,
                       SF_DATA
                  into self.v_name,
                       data
                  from BMK.WA.SFOLDER
                 where SF_DOMAIN_ID = self.domain_id
                   and SF_ID = self.v_id;

                self.v_keywords := BMK.WA.xml_get ('keywords', data);
                self.v_expression := BMK.WA.xml_get ('expression', data);
                self.v_tags := BMK.WA.xml_get ('tags', data);
                self.v_own := cast (BMK.WA.xml_get ('myBookmarks', data) as integer);
                self.v_folder_id := BMK.WA.xml_get ('folder', data);
                self.v_shared := cast (BMK.WA.xml_get ('mySharedBookmarks', data) as integer);
                self.v_grants := BMK.WA.xml_get ('grants', data);
                self.v_form := 'Smart Folder/Edit';
                return;
              }

            _end4:
              self.v_name := get_keyword ('s_name', params, self.v_name);
              self.v_keywords := trim (get_keyword ('s_keywords', params, self.v_keywords));
              self.v_expression := trim (get_keyword ('s_expression', params, self.v_expression));
              self.v_tags := trim (get_keyword ('s_tags', params, self.v_tags));
              self.v_own := cast (get_keyword ('s_own', params, self.v_own) as integer);
              self.v_folder_id := get_keyword ('s_folder', params, self.v_folder_id);
              self.v_shared := cast (get_keyword ('s_shared', params, self.v_shared) as integer);
              self.v_grants := trim (get_keyword ('s_grants', params, self.v_grants));
            }
          ]]>
        </v:before-data-bind>
        <?vsp
          http (sprintf ('<input type="hidden" name="s_id" id="s_id" value="%d" />', self.v_id));
        ?>
        <div class="form-header">
          <v:label format="%s" value="--self.v_form"/>
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th>
                <v:label for="s_name" value="Smart folder name" />
              </th>
              <td>
                <v:text name="s_name" null-value="--''" value="--self.v_name" fmt-function="BMK.WA.utf2wide" xhtml_class="textbox" xhtml_size="60" />
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="s_keywords" value="Space delimited keyword list" />
              </th>
              <td>
                <v:text name="s_keywords" value="--self.v_keywords" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="" value="or expression" />
              </th>
              <td>
                <v:textarea name="s_expression" value="--self.v_expression" xhtml_rows="2" xhtml_cols="50"/>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="s_tags" value="Tags (comma-separated)" />
              </th>
              <td>
                <v:text name="s_tags" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <tr>
              <th/>
              <td>
                <?vsp
                  http(sprintf('<input type="checkbox" name="s_own" id="s_own" value="1" onclick="javascript: changeState(this, \'s_folder\');" %s />', case when (self.v_own = 1) then 'checked="checked"' else '' end));
                ?>
                <b><vm:label for="s_own" value="Search in my own bookmarks"/></b>
              </td>
            </tr>
            <tr>
              <th>
                <v:label for="s_folder" value="Folder"/>
              </th>
              <td>
                <v:data-list name="s_folder" xhtml_id="s_folder" value="--self.v_folder_id" sql="select 0 as F_ID, 'Select folder ...' as F_PATH2, '' as F_PATH from WS.WS.SYS_DAV_USER where U_NAME = 'dav' union all select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH" key-column="F_ID" value-column="F_PATH2" xhtml_class="select"/>
              </td>
            </tr>
            <tr>
              <th/>
              <td>
                <?vsp
                  http(sprintf('<input type="checkbox" name="s_shared" id="s_shared" value="1" onclick="javascript: changeState(this, \'s_grants\');" %s />', case when (self.v_shared = 1) then 'checked="checked"' else '' end));
                ?>
                <b><vm:label for="s_shared" value="Search in my shared bookmarks"/></b>
              </td>
            </tr>
            <tr>
              <th>
                <vm:label for="s_grants" value="Search in users"/>
              </th>
              <td>
                <v:text name="s_grants" null-value="--''" value="--self.v_grants" xhtml_class="textbox" xhtml_size="60" xhtml_title="User names must be comma delimited!" />
                <input type="button" value="Select" onClick="javascript: windowShow('/ods/users_select.vspx?mode=s_bmk&amp;dst=mc&amp;params=s_grants:s1;&nrows=<?V BMK.WA.settings_rows (self.settings) ?>')" class="button" />
              </td>
            </tr>
          </table>
        </div>
        <div class="form-footer">
          <input type="button" title="Save" value="Save" onclick="javascript: BMK.formPost('<?V self.v_form ?>'); return false;"/>
          <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
        </div>
      </v:template>

      <v:template type="simple" enabled="-- case when self.v_form = 'tags' then 1 else 0 end">
        <div class="form-header">
          Tags
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th>
                <v:label for="t_tag" value="Tags (comma-separated)"/>
              </th>
              <td>
                <v:text name="t_tag" null-value="''" xhtml_class="textbox" xhtml_size="60"/>
              </td>
            </tr>
            <?vsp self.myTags ('b_tags'); ?>
          </table>
        </div>
        <div class="form-footer">
          <input type="button" title="Tag" value="Tag" onclick="javascript: BMK.formPost('<?V self.v_form ?>'); return false;"/>
          <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
        </div>
      </v:template>

      <v:template type="simple" enabled="-- case when self.v_form = 'move' then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            self.vm_folder_id := get_keyword ('m_folder_id', self.vc_page.vc_event.ve_params, '');
            self.vm_folder_name := get_keyword ('m_folder_name', self.vc_page.vc_event.ve_params, '');
          ]]>
        </v:before-data-bind>
        <div class="form-header">
          Move
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th>
                <v:label for="m_folder_name" value="Move to folder"/>
              </th>
              <td>
                <v:text name="m_folder_name" null-value="''" value="--self.vm_folder_name" fmt-function="BMK.WA.utf2wide" xhtml_class="textbox" xhtml_size="40"/>
                <v:select-list name="m_folder_id">
                  <v:before-data-bind>
                    <![CDATA[
                      declare N, node_id integer;
                      declare node_type varchar;
                      declare params any;

                      params := self.vc_page.vc_event.ve_params;

                      (control as vspx_select_list).vsl_items:= vector ();
                      (control as vspx_select_list).vsl_item_values:= vector ();
                      (control as vspx_select_list).vsl_selected_inx := 0;
                      (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector ('Select folder ...'));
                      (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector ('-1'));
                      for (select F_ID, BMK.WA.folder_path2(F_PATH) as F_PATH2, F_PATH from BMK.WA.FOLDER where F_DOMAIN_ID = self.domain_id order by F_PATH) do
                      {
                        for (N := 0; N < length(params); N := N + 2)
                        {
                          if (params[N] = 'cb_item')
                          {
                            if ((BMK.WA.node_type (params[N+1]) = 'f') and (F_PATH like concat(BMK.WA.folder_path (BMK.WA.node_id (params[N+1])), '%')))
                            {
                              goto _skip;
                            }
                          }
                        }
                        (control as vspx_select_list).vsl_items := vector_concat ((control as vspx_select_list).vsl_items, vector (F_PATH2));
                        (control as vspx_select_list).vsl_item_values := vector_concat ((control as vspx_select_list).vsl_item_values, vector (cast (F_ID as varchar)));
                      _skip:;
                      }
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
              </td>
            </tr>
          </table>
        </div>
        <div class="form-footer">
          <input type="button" title="Move" value="Move" onclick="javascript: BMK.formPost('move'); return false;"/>
          <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
        </div>
      </v:template>

      <v:template type="simple" enabled="-- case when self.v_form = 'share' then 1 else 0 end">
        <v:before-data-bind>
          <![CDATA[
            self.vs_share := get_keyword ('share', self.vc_page.vc_event.ve_params, self.vs_share);
          ]]>
        </v:before-data-bind>
        <div class="form-header">
          <v:label value="--''">
            <v:after-data-bind>
              <![CDATA[
                declare N integer;
                declare name, delimiter varchar;
                declare node_id, node_type, params any;

                params := self.vc_page.vc_event.ve_params;

                control.ufl_value := 'Shares for ';
                delimiter := '';
                for (N := 0; N < length (params); N := N + 2)
                {
                  if ((length(control.ufl_value) < 60) and (params[N] = 'cb_item'))
                  {
                    node_id := BMK.WA.node_id (params[N+1]);
                    node_type := BMK.WA.node_type (params[N+1]);
                    if (node_type = 'b')
                    {
                      name := (select BD_NAME from BMK.WA.BOOKMARK_DOMAIN where BD_ID = node_id);
                    }
                    else if (node_type = 'f')
                    {
                      name := (select F_NAME from BMK.WA.FOLDER where F_ID = node_id);
                    }
                    control.ufl_value := control.ufl_value || delimiter || '''' || name || '''';
                    delimiter := ', ';
                  }
                }
              ]]>
            </v:after-data-bind>
          </v:label>
        </div>
        <div class="new-form-body">
          <table cellspacing="0">
            <tr>
              <th>
                <v:label for="s_share" value="User(s)" />
              </th>
              <td>
                <v:text name="s_share" null-value="--''" value="--self.vs_share" xhtml_class="textbox" xhtml_size="60" xhtml_title="User names must be comma delimited!" />
                <input type="button" value="Select" onClick="javascript: windowShow('/ods/users_select.vspx?dst=mc&amp;params=s_share:s1;&nrows=<?V BMK.WA.settings_rows (self.settings) ?>')" class="button" />
                <input type="button" value="Clear" onClick="javascript: document.F1.elements['s_share'].value = ''" class="button" />
              </td>
            </tr>
            <tr>
              <th/>
              <td>
                <v:check-box name="s_override" initial-checked="self.vs_override" xhtml_id="s_override" value="1" />
                <b><vm:label for="s_override" value="Override current sharings"/></b>
              </td>
            </tr>
          </table>
        </div>
        <div class="form-footer">
          <input type="button" title="Share" value="Share" onclick="javascript: BMK.formPost('share'); return false;"/>
          <input type="button" title="Cancel" value="Cancel" onclick="javascript: BMK.formClose(); return false;"/>
        </div>
      </v:template>

    </vm:pagebody>
  </vm:popup_pagewrapper>
</v:page>
