<?xml version="1.0" encoding="UTF-8"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="ab" decor="template/template.vspx" style="template/template.xsl" fast-render="1" button-anchors="1" xmlns:v="http://www.openlinksw.com/vspx/" xmlns:vm="http://www.openlinksw.com/vspx/macro" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <v:method name="sortChange" arglist="in columnName varchar">
    <![CDATA[
      if (columnName = '')
        return;
      self.ds.vc_reset ();
      if (self.v_order = columnName)
      {
        self.v_direction := either (equ (self.v_direction, 'asc'), 'desc', 'asc');
      } else {
        self.v_direction := 'asc';
      }
      self.v_order := columnName;
    ]]>
  </v:method>

  <v:method name="mode_test" arglist="">
    <![CDATA[
      declare pos integer;
      declare params, names any;

      params := self.vc_page.vc_event.ve_params;
      self.abContact := get_keyword ('id', params, '');
      if (self.abContact <> '')
      {
        self.v_id := atoi(self.abContact);
        if (self.v_id = -1)
        {
          if (self.person_rights = 'W')
          {
            self.abAction := 'create';
            self.v_name := trim (get_keyword ('name', params, ''));
            self.v_mail := trim (get_keyword ('mail', params, ''));
            if ((self.v_name = '') and (self.v_mail <> ''))
            {
              pos := strchr (self.v_mail, '@');
              if (pos is not null)
                self.v_name := left (self.v_mail, pos);
            }
            self.v_fullName := self.v_name;
            names := split_and_decode (self.v_fullName, 0, '\0\0 ');
            if (length (names) >= 1)
              self.v_fName := names [0];
            if (length (names) > 1)
              self.v_lName := names [length (names) - 1];
          }
        } else {
          if (exists (select 1 from AB.WA.PERSONS where P_ID = self.v_id and P_DOMAIN_ID = self.domain_id))
          self.abAction := 'view';
      }
      }
      else if (get_keyword ('tag', params, '') <> '')
      {
        self.abAction := 'browse';
        self.abSubAction := 'tags';
        self.abValue := lcase (get_keyword ('tag', params));
      }
    ]]>
  </v:method>

  <v:method name="toolbarLabel" arglist="in cmd varchar">
    <![CDATA[
      if (self.abLabels = 0)
        return '';
      return sprintf ('<br /><span class="toolbarLabel">%s</span>', cmd);
    ]]>
  </v:method>

  <v:method name="toolbarEnable" arglist="in cmd varchar">
    <![CDATA[
      if ((cmd = 'create') and ((self.person_rights <> 'W') or (self.abScope = 'MySharedContacts')))
        return 0;
      if ((cmd = 'import') and ((self.person_rights <> 'W') or (self.abScope = 'MySharedContacts')))
        return 0;
      if ((cmd = 'export') and ((self.person_rights <> 'W') or (self.abScope = 'MySharedContacts')))
        return 0;
      return 1;
    ]]>
  </v:method>

  <v:method name="toolbarShow" arglist="in cmd varchar, in cmdLabel varchar, in cmdOnClick varchar, in cmdImageSrc varchar, in cmdImageGraySrc varchar">
    <![CDATA[
      declare imageSrc, onclickEvent, styleStr varchar;

      styleStr := '';
      onclickEvent := '';
      if (self.toolbarEnable(cmd))
      {
        onclickEvent := cmdOnClick;
        imageSrc := cmdImageSrc;
        styleStr := styleStr || 'cursor: pointer;';
      } else {
        imageSrc := cmdImageGraySrc;
      }
      styleStr := sprintf('style="%s"', styleStr);
      http (sprintf ('<span %s class="toolbar" %s title="%s">', onclickEvent, styleStr, cmdLabel));
        http (sprintf ('<img src="image/%s" border="0" alt="%s" />%s', imageSrc, cmdLabel, self.toolbarLabel(cmdLabel)));
      http ('</span>');
    ]]>
  </v:method>

  <v:method name="render_select" arglist="inout options any, inout name any">
    <![CDATA[
      declare N any;
      declare S, T any;

      T := '';
      if (not isnull (self.i_maps))
        for (N := 0; N < length (self.i_maps); N := N + 2)
          if (self.i_maps[N] = name)
            T := self.i_maps[N+1];

  	  http (sprintf ('<select name="sel_%s">', name));
  	  http ('<option value="skip">--</option>');
      for (N := 0; N < length (options); N := N + 2)
      {
        S := case when (options[N] = T) then ' selected="selected"' else '' end;
        http (sprintf ('<option value="%s"%s>%s</option>', options[N], S, options[N+1]));
      }
  	  http ('</select>');
	  ]]>
	</v:method>

  <v:method name="prepareTimeZone" arglist="inout x any, inout y any">
    <![CDATA[
      declare i,j int;

      x := make_array (25, 'any');
      y := make_array (25, 'any');
      i := -12;
      j := 0;
      while (i <= 12)
      {
        x[j] := cast (i as varchar);
        y[j] := self.viewTimeZone (i);
        i := i + 1;
        j := j + 1;
      }

    ]]>
  </v:method>

  <v:method name="prepareField" arglist="inout fValue any, in fProperty varchar, in fShowValue any">
    <![CDATA[
      declare N integer;
      declare fPropertyType, V, F, FT, FS, T, P varchar;

      -- value
         if (is_empty_or_null (fValue))
        return ' ';

      V := split_and_decode (fProperty, 0, '\0\0:');
      fProperty := case when length(V)>=1 then V[0] else fProperty end;
      fPropertyType := case when length(V)=2 then V[1] else null end;

      -- value
      if (fProperty = 'description')
         {
        F := '<pre style="margin: 0; white-space: pre-wrap;">' || AB.WA.utf2wide (cast (fValue as varchar)) || '</pre>';
      }
      else if (internal_type (fValue) = 211)
           {
        F := left (cast (fValue as varchar), 10);
           }
      else
      {
        F := cast (fValue as varchar);
      }
      if (is_empty_or_null (fProperty))
        return F;

      FT := '';
      if (not isnull (fPropertyType))
      {
        V := split_and_decode (fPropertyType, 0, '\0\0,');
        for (N := 0; N < length (V); N := N + 1)
          FT := sprintf ('%s<span class="type" style="display: none;">%s</span>', FT, V[N]);
         }

      FS := fShowValue;
      if (isnull (FS))
        FS := F;
      if (not isnull (fPropertyType))
        FS := sprintf ('<span class="value">%s</span>', FS);

      P := '';
      -- vcard class
      if (not is_empty_or_null (fProperty))
        P := P || sprintf (' class="%s"', fProperty);

      -- vcard special values
      if (fProperty in ('dtstart', 'dtend', 'completed', 'created', 'last-modified'))
        P := P || sprintf (' title="%s"', substring (cast (fValue as varchar), 1, 10));

      -- dc properties
      if (fProperty = 'summary')
        P := P || ' property="dc:title"';

      -- tag
      T := 'span';
      if (fProperty = 'dtstart')
        T := 'abbr';
      if (fProperty = 'dtend')
        T := 'abbr';
      return sprintf ('<%s%s>%s%s</%s>', T, P, FT, FS, T);
    ]]>
  </v:method>

  <v:method name="viewField" arglist="inout fValue any, in fProperty varchar, in fShowValue any">
    <![CDATA[
      if (self.abAction = 'view')
        http (self.prepareField(fValue, fProperty, fShowValue));
	  ]]>
	</v:method>

  <v:method name="viewImage" arglist="inout fValue any">
    <![CDATA[
      if (self.abAction <> 'view')
        return;

         if (is_empty_or_null (fValue))
         {
           http ('&nbsp;');
         } else {
        http (sprintf ('<img class="resize" src="%s" />', fValue));
         }
    ]]>
  </v:method>

  <v:method name="viewTags" arglist="inout fValue any">
    <![CDATA[
      if (self.abAction <> 'view')
        return;

        if (is_empty_or_null (fValue))
        {
          http ('&nbsp;');
        } else {
          declare N integer;
          declare delimiter varchar;
          declare tags any;

          delimiter := '';
          tags := AB.WA.tags2vector (fValue);
          for (N := 0; N < length (tags); N := N + 1)
          {
            http (delimiter);
            http (sprintf ('<a href="%s">%s</a>', SIOC..tag_iri (AB.WA.forum_iri (self.domain_id), tags[N]), tags[N]));
            delimiter := ', ';
          }
        }
    ]]>
  </v:method>

  <v:method name="viewTimeZone" arglist="inout fValue any">
    <![CDATA[
      return sprintf ('GMT %s%02d:00', case when cast (fValue as integer) < 0 then '-' else '+' end,  abs(cast (coalesce (fValue, 0) as integer)));
	  ]]>
	</v:method>

  <v:method name="validateNode" arglist="in domain_id integer">
    <![CDATA[
      declare N, node_type, node_id, nodes, tmp any;

      node_id := AB.WA.node_id (self.abNode);
      node_type := AB.WA.node_type (self.abNode);

      if ((node_type = 'u') and (exists (select 1 from DB.DBA.SYS_USERS where U_ID = node_id)))
        goto _next;

      if (self.abNode in (AB.WA.make_node ('u', -1)))
        goto _next;

      self.abNode := AB.WA.make_node ('u', -1);

    _next:;
      tmp := '';
      nodes := split_and_decode (trim(self.abPath, '/'), 0, '\0\0/');
      for (N := 0; N < length (nodes) - 1; N := N + 1)
      {
        tmp := concat(tmp, '/', nodes[N]);
        if (not AB.WA.vector_contains (self.abState, tmp))
          self.abState := vector_concat (self.abState, vector(tmp));
      }
    ]]>
  </v:method>

  <v:method name="showTree" arglist="in level integer, in domain_id integer, in user_id integer, in node varchar, in path varchar">
    <![CDATA[
      declare N, isOpen integer;
      declare nodes, image, image2, alt, class any;

      if (isnull(self.abState))
        self.abState := vector();
      nodes := AB.WA.ab_tree2 (domain_id, user_id, node, path);
      if (level = 1)
        self.validateNode (domain_id);
      for (N := 0; N < length(nodes); N := N + 3)
      {
        if (level = 1)
        {
          http ('<div style="margin-left:3px; margin-top:3px; white-space: nowrap;">');
        } else {
          http ('<div style="margin-left:12px; white-space: nowrap;">');
        }
        image := 'plus.gif';
        image2 := 'image/folder_16.png';
        alt := 'Open Node';
        if (not AB.WA.ab_node_has_childs (domain_id, user_id, nodes[N+1], nodes[N+2]))
        {
          image := 'c.gif';
          image2 := 'image/folder_16.png';
        }
        else if (AB.WA.vector_contains(self.abState, nodes[N+2]))
        {
          image := 'minus.gif';
          image2 := 'image/folder_open_16.png';
          alt := 'Close Node';
        }

        if ((AB.WA.node_type(nodes[N+1]) = 'u') and (AB.WA.node_id(nodes[N+1]) = -1))
          image2 := '/ods/images/icons/group_16.png';
        if ((AB.WA.node_type(nodes[N+1]) = 'u') and (AB.WA.node_id(nodes[N+1]) >= 0))
          image2 := '/ods/images/icons/user_16.png';

        class := 'nolink_b';
        if (nodes[N+2] = self.abPath)
        {
          class := 'nolink_a';
          self.abName := nodes[N];
        }
        if (image = 'c.gif')
        {
          http (sprintf ('<img src="image/%s" border="0" width="11px" />', image));
        } else {
          http(sprintf('<a href="#" name="pt_toggle_%s" onclick="javascript: vspxPost (\'pt_browse\', \'pt_toggle\', \'%s\', \'pt_path\', \'%s\'); return false"><img src="image/%s" border="0" class="nolink" alt="%s" title="%s" /></a>', nodes[N+2], nodes[N+1], nodes[N+2], image, alt, alt));
        }
        http(sprintf('<a href="#" name="pt_node_%s" onclick="javascript: vspxPost (\'pt_browse\', \'pt_node\', \'%s\', \'pt_path\', \'%s\'); return false" class="nolink3 %s" alt="%s" title="%s" > <img src="%s" border="0" alt="" /> %s</a>', nodes[N+2], nodes[N+1], nodes[N+2], class, nodes[N], nodes[N], image2, nodes[N]));
        if (image = 'minus.gif')
          self.showTree(level+1, domain_id, user_id, nodes[N+1], nodes[N+2]);

        http ('</div>');
      }
    ]]>
  </v:method>

  <v:method name="shareSelect" arglist="in person_id integer">
    <![CDATA[
      declare grants any;

      grants := '';
      for (select U_ID, U_NAME from AB.WA.GRANTS, DB.DBA.SYS_USERS where G_GRANTER_ID = AB.WA.domain_owner_id (self.domain_id) and G_GRANTEE_ID = U_ID and G_PERSON_ID = person_id) do
        grants := grants || cast (U_NAME as varchar) || ',';
      return trim (grants, ',');
    ]]>
  </v:method>

  <v:method name="contactUpdate" arglist="inout person_id integer, inout pFields any, inout pValues any">
    <![CDATA[
     if (self.v_tags <> '')
     {
       pFields := vector_concat (pFields, vector ('P_TAGS'));
       pValues := vector_concat (pValues, vector (self.v_tags));
     }
     if (length (pFields))
       AB.WA.contact_update3 ( person_id, self.domain_id, pFields, pValues);
    ]]>
  </v:method>

  <v:method name="resetImport" arglist="in mode integer">
    <![CDATA[
      if (not mode)
      AB.WA.ab_graph_delete (self.i_iri);

      self.i_source := -1;
      self.i_type := -1;
      self.i_uUser := '';
      self.i_uPassword := '';
      self.i_lName := '';
      self.i_lHost := '';
      self.i_lPort := '';
      self.i_lBase_dn := '';
      self.i_lBind_dn := '';
      self.i_lPassword := '';
      self.i_lMaps := null;
      self.i_maps := null;
      self.i_number := 0;
      self.i_iri := null;
      self.i_contentItems := null;
      self.i_contentPings := null;
      self.i_contentDepth := 0;
      self.i_contentLimit := 100;
      self.i_contentFollow := null;
      self.i_data := null;
      self.i_validation := null;
      self.i_validationMode := 'ask';
      self.v_grants := '';
      self.v_acl := '';

      self.abAction := 'browse';
    ]]>
  </v:method>

  <v:method name="myTags" arglist="in fieldName varchar">
    <![CDATA[
      if ((select count (*) from AB.WA.TAGS where T_DOMAIN_ID = self.domain_id and T_COUNT > 0 and T_TAG <> '' order by T_TAG))
      {
        http ('<tr>');
        http ('<th valign="top">My Tags</th>');
          http ('<td>');
            for (select T_TAG from AB.WA.TAGS where T_DOMAIN_ID = self.domain_id and T_COUNT > 0 and T_TAG <> '' order by T_TAG) do
            {
              http (sprintf ('<a href="#" onclick="javascript: return addTag(\'%s\', \'%s\');">%s</a> ', T_TAG, fieldName, T_TAG));
            }
          http ('</td>');
        http ('</tr>');
      }
    ]]>
  </v:method>

  <v:method name="windowOpen" arglist="in p_url varchar, in p_name varchar, in p_title varchar">
    <![CDATA[
      return  sprintf ('<span onclick="javascript: windowShow (\'%s\', \'addressbook_%s_window\'); return false;" title="%s %s" class="link">%s</span>', AB.WA.page_url (self.domain_id, p_url, self.sid, self.realm), p_name, p_name, p_title, p_name);
    ]]>
  </v:method>

  <v:method name="saveData" arglist="">
    <![CDATA[
      declare N, M integer;
      declare suffix, tmp, tmpValue, acl, acl_users, params any;

      params := self.vc_page.vc_event.ve_params;

      self.v_hState := get_keyword ('ab_hState', params, '');
      self.v_bState := get_keyword ('ab_bState', params, '');

      tmp := vector ();
      acl := vector ();
      self.v_interests := '';
      self.v_relationships := '';
      self.v_grants := '';
      for (N := 0; N < length (params); N := N + 4)
      {
        if ((params [N] like 'a_fld_1_%') and (trim (params [N+1]) <> ''))
        {
          suffix := replace (params [N], 'a_fld_1_', '');
          self.v_interests := self.v_interests || trim (params [N+1]) || ';' || trim (get_keyword ('a_fld_2_'||suffix, params, '')) || '\n';
        }
        else if ((params [N] like 'b_fld_1_%') and (trim (params [N+1]) <> ''))
        {
          suffix := replace (params [N], 'b_fld_1_', '');
          tmpValue := trim (params [N+1]) || ';' || trim (get_keyword ('b_fld_2_'||suffix, params, '')) || '\n';
          if (not AB.WA.vector_contains (tmp, tmpValue))
          {
            tmp := vector_concat (tmp, vector (tmpValue));
            self.v_relationships := self.v_relationships || tmpValue;
          }

        }
        else if ((params [N] like 'f_fld_1_%') and (trim (params [N+1]) <> ''))
        {
          acl_users := split_and_decode (trim (params[N+1]), 0, '\0\0,');
          for (M := 0; M < length (acl_users); M := M + 1)
          {
            if (not isnull (AB.WA.account_id (trim (acl_users[M]))))
              self.v_grants := self.v_grants || ',' || acl_users[M];
      }
        }
      }
      self.v_grants := trim (self.v_grants, ',');
      self.v_acl := serialize (DB.DBA.wa_aci_params (params));
    ]]>
  </v:method>

  <vm:pagetitle>AddressBook</vm:pagetitle>
  <vm:pagewrapper>
    <vm:header>
      AddressBook
    </vm:header>
    <vm:variables>
      <v:variable name="v_order" type="varchar" default="'P_NAME'" />
      <v:variable name="v_direction" type="varchar" default="'asc'" />

      <v:variable persist="0" name="abAction" type="varchar" param-name="action" default="'browse'" />
      <v:variable persist="0" name="abSubAction" type="varchar" default="''" />
      <v:variable persist="0" name="abSelected" type="any" default="null" />
      <v:variable persist="0" name="abScope" type="varchar" default="'MyContacts'" />
      <v:variable persist="0" name="abValue" type="varchar" default="null" />
      <v:variable persist="temp" name="abContact" type="any" default="''" />

      <v:variable persist="0" name="abName" type="varchar" default="''"/>
      <v:variable persist="0" name="abNode" type="varchar" default="'u#-1'"/>
      <v:variable persist="0" name="abPath" type="varchar" default="'/u#-1'"/>
      <v:variable persist="0" name="abState" type="any" default="null" />

      <v:variable name="abLabels" type="integer" default="1" />
      <v:variable name="abChars" type="integer" default="60" />
      <v:variable name="v_tabNo" param-name="tabNo" type="varchar" default="1"/>

      <v:variable persist="0" name="abStep" type="varchar" param-name="step" default="''" />
      <v:variable persist="0" name="abSteps" type="any" default="null" />
      <v:variable name="v_id" type="any" default="-1" />

      <v:variable name="v_kind" type="integer" default="0" />
      <v:variable name="v_name" type="varchar" default="''" />
      <v:variable name="v_title" type="varchar" default="''" />
      <v:variable name="v_fName" type="varchar" default="''" />
      <v:variable name="v_mName" type="varchar" default="''" />
      <v:variable name="v_lName" type="varchar" default="''" />
      <v:variable name="v_fullName" type="varchar" default="''" />
      <v:variable name="v_gender" type="varchar" default="''" />
      <v:variable name="v_birthday" type="date" default="null" />
      <v:variable name="v_iri" type="varchar" default="''" />
      <v:variable name="v_foaf" type="varchar" default="''" />

      <v:variable name="v_photo" type="varchar" default="''" />
      <v:variable name="v_interests" type="varchar" default="''" />
      <v:variable name="v_relationships" type="varchar" default="''" />
      <v:variable name="v_acl" type="any" default="null" />
      <v:variable name="v_certificate" type="any" default="null" />

      <v:variable name="v_mail" type="varchar" default="''" />
      <v:variable name="v_web" type="varchar" default="''" />
      <v:variable name="v_icq" type="varchar" default="''" />
      <v:variable name="v_skype" type="varchar" default="''" />
      <v:variable name="v_aim" type="varchar" default="''" />
      <v:variable name="v_yahoo" type="varchar" default="''" />
      <v:variable name="v_msn" type="varchar" default="''" />

      <v:variable name="v_hCountry" type="varchar" default="''" />
      <v:variable name="v_hCity" type="varchar" default="''" />
      <v:variable name="v_hState" type="varchar" default="''" />
      <v:variable name="v_hCode" type="varchar" default="''" />
      <v:variable name="v_hAddress1" type="varchar" default="''" />
      <v:variable name="v_hAddress2" type="varchar" default="''" />
      <v:variable name="v_hTzone" type="varchar" default="'0'" />
      <v:variable name="v_hLat" type="real" default="0.00"/>
      <v:variable name="v_hLng" type="real" default="0.00"/>
      <v:variable name="v_hPhone" type="varchar" default="''" />
      <v:variable name="v_hMobile" type="varchar" default="''"/>
      <v:variable name="v_hFax" type="varchar" default="''" />
      <v:variable name="v_hMail" type="varchar" default="''"/>
      <v:variable name="v_hWeb" type="varchar" default="''"/>

      <v:variable name="v_bCountry" type="varchar" default="''" />
      <v:variable name="v_bCity" type="varchar" default="''" />
      <v:variable name="v_bState" type="varchar" default="''" />
      <v:variable name="v_bCode" type="varchar" default="''" />
      <v:variable name="v_bAddress1" type="varchar" default="''" />
      <v:variable name="v_bAddress2" type="varchar" default="''" />
      <v:variable name="v_bTzone" type="varchar" default="'0'" />
      <v:variable name="v_bLat" type="real" default="0.00"/>
      <v:variable name="v_bLng" type="real" default="0.00"/>
      <v:variable name="v_bPhone" type="varchar" default="''" />
      <v:variable name="v_bMobile" type="varchar" default="''"/>
      <v:variable name="v_bFax" type="varchar" default="''" />
      <v:variable name="v_bMail" type="varchar" default="''"/>
      <v:variable name="v_bWeb" type="varchar" default="''"/>
      <v:variable name="v_bIndustry" type="varchar" default="''"/>
      <v:variable name="v_bOrganization" type="varchar" default="''"/>
      <v:variable name="v_bDepartment" type="varchar" default="''" />
      <v:variable name="v_bJob" type="varchar" default="''"/>

      <v:variable name="v_tag" type="varchar" default="''" />
      <v:variable name="v_tags" type="varchar" default="''" />

      <v:variable name="v_grants" type="any" default="null"/>
      <v:variable name="v_override" type="integer" default="1"/>

      <v:variable name="v_category_id" type="integer" default="null" />
      <v:variable name="v_category_name" type="integer" default="null" />

      <v:variable name="i_source" type="any" default="-1"/>
      <v:variable name="i_type" type="any" default="-1"/>
      <v:variable name="i_uUser" type="varchar" default="''" />
      <v:variable name="i_uPassword" type="varchar" default="''" />
      <v:variable name="i_lName" type="varchar" default="''"/>
      <v:variable name="i_lHost" type="varchar" default="''"/>
      <v:variable name="i_lPort" type="varchar" default="'389'"/>
      <v:variable name="i_lBase_dn" type="varchar" default="''"/>
      <v:variable name="i_lBind_dn" type="varchar" default="''"/>
      <v:variable name="i_lPassword" type="varchar" default="''"/>
      <v:variable name="i_lSearch" type="varchar" default="'(cn=*)'"/>
      <v:variable name="i_lMaps" type="any" default="null"/>
      <v:variable persist="temp" name="i_Items" type="any" default="null" />

      <v:variable name="i_data" type="varchar" default="null"/>
      <v:variable name="i_iri" type="varchar" default="null" />
      <v:variable name="i_contentItems" type="any" default="null" />
      <v:variable name="i_contentPings" type="any" default="null" />
      <v:variable name="i_contentDepth" type="integer" default="0" />
      <v:variable name="i_contentLimit" type="integer" default="100" />
      <v:variable name="i_contentFollow" type="any" default="null" />
      <v:variable name="i_validation" type="any" default="null" />
      <v:variable name="i_validationMode" type="varchar" default="'ask'" />
      <v:variable name="i_maps" type="any" default="null" />
      <v:variable name="i_number" type="integer" default="0" />

      <v:variable name="ve_id" type="any" default="-1" />
      <v:variable name="ve_name" type="varchar" default="''" />
      <v:variable name="ve_type" type="varchar" default="''" />
      <v:variable name="ve_update_type" type="integer" default="0" />
      <v:variable name="ve_update_period" type="varchar" default="''" />
      <v:variable name="ve_update_freq" type="integer" default="0" />
      <v:variable name="ve_options" type="any" default="null" />
      <v:variable name="ve_result" type="any" default="null" />

      <v:variable name="v_photo_preview_path" type="varchar" default="''" />
    </vm:variables>
    <vm:pagebody>
      <v:before-data-bind>
        <![CDATA[
          self.abLabels := cast (get_keyword ('tbLabels', self.settings, '1') as integer);
          self.abChars := cast (get_keyword ('chars', self.settings, '60') as integer);

          if (get_keyword ('tab', e.ve_params, '') = 'shared')
          {
            self.abScope := 'MySharedContacts';
            self.abAction := 'browse';
            self.abSubAction := '';
            self.abValue := '';
          }
          if ((self.person_rights <> 'W') and (self.abAction = 'settings'))
            self.abAction := 'browse';
            
          self.mode_test();
        ]]>
      </v:before-data-bind>
      <?vsp 
        declare sparqlUrl, graphIri any;
        
        sparqlUrl := 'http://' || SIOC..get_cname () || '/sparql';
        graphIri := SIOC..get_graph ();
        http (sprintf ('<input type="hidden" name="sparqlUrl" id="sparqlUrl" value="%s?default-graph-uri=%U&query=%U&format=%U"/>', sparqlUrl, graphIri, 'DESCRIBE <_RDF_>', 'application/sparql-results+xml'));
        http (         '<input type="hidden" name="tbHidden" id="tbHidden" value="" />');
        http (sprintf ('<input type="hidden" name="abSubAction" id="abSubAction" value="%s" />', self.abSubAction));
      ?>
        <?vsp
          if (0)
          {
        ?>
          <v:button name="command" action="simple" style="url" value="Submit">
              <v:on-post>
                <![CDATA[
                  declare N integer;
                declare params, cmd, mode any;

                params := e.ve_params;
                cmd := get_keyword ('select', params, '');
                if (cmd = 'MyContacts')
                {
                    self.abScope := cmd;
                    self.abAction := 'browse';
                  self.abSubAction := '';
                  self.abValue := '';
                  }
                else if (cmd = 'MySharedContacts')
                {
                    self.abScope := cmd;
                    self.abAction := 'browse';
                  self.abSubAction := '';
                  self.abValue := '';
                  }
                else if (cmd = 'create')
                {
                    self.abAction := cmd;

                    self.v_id := -1;
                  self.v_kind := 0;
                    self.v_tags := '';
                    self.v_name := '';
                    self.v_title := '';
                    self.v_fName := '';
                    self.v_mName := '';
                    self.v_lName := '';
                    self.v_fullName := '';
                    self.v_gender := '';
                    self.v_birthday := null;
                  self.v_iri := '';
                    self.v_foaf := '';
                  self.v_photo := '';
                  self.v_interests := '';
                  self.v_relationships := 'foaf:knows;' || AB.WA.account_sioc_url (self.domain_id);
                  self.v_acl := null;
                  self.v_certificate := null;
                  self.v_photo_preview_path := '';

                    self.v_mail := '';
                    self.v_web := '';
                    self.v_icq := '';
                    self.v_skype := '';
                    self.v_aim := '';
                    self.v_yahoo := '';
                    self.v_msn := '';
                    self.v_tags := '';

                    self.v_hCountry := '';
                    self.v_hCity := '';
                    self.v_hState := '';
                    self.v_hCode := '';
                    self.v_hAddress1 := '';
                    self.v_hAddress2 := '';
                  self.v_hTzone := '0';
                    self.v_hLat := null;
                    self.v_hLng := null;
                    self.v_hMail := '';
                    self.v_hWeb := '';
                    self.v_hPhone := '';
                    self.v_hMobile := '';
                    self.v_hFax := '';

                    self.v_bCountry := '';
                    self.v_bCity := '';
                    self.v_bState := '';
                    self.v_bCode := '';
                    self.v_bAddress1 := '';
                    self.v_bAddress2 := '';
                  self.v_bTzone := '0';
                    self.v_bLat := null;
                    self.v_bLng := null;
                    self.v_bMail := '';
                    self.v_bWeb := '';
                    self.v_bPhone := '';
                    self.v_bMobile := '';
                    self.v_bFax := '';
                    self.v_bIndustry := '';
                    self.v_bOrganization := '';
                    self.v_bDepartment := '';
                    self.v_bJob := '';
                    self.v_grants := '';

                  self.v_category_id := null;
                  self.v_category_name := null;
                }
                else if (cmd = 'tag')
                {
                    self.abAction := cmd;
                    self.abSelected := vector();
                  for (N := 0; N < length(params); N := N + 4)
                  {
                    if (params[N] = 'cb_item')
                      self.abSelected := vector_concat(self.abSelected, vector(params[N+1]));
                    }
                  }
                else if (cmd = 'grants')
                {
                    self.v_grants := '';
                    self.abAction := cmd;
                    self.abSelected := vector();
                  for (N := 0; N < length(params); N := N + 4)
                  {
                    if (params[N] = 'cb_item')
                      self.abSelected := vector_concat(self.abSelected, vector(params[N+1]));
                    }
                  }
                else if (cmd = 'delete')
                {
                    declare id integer;

                  for (N := 0; N < length(params); N := N + 4)
                  {
                    if (params[N] = 'cb_item')
                    {
                      id := cast(params[N+1] as integer);
                      AB.WA.contact_delete (id, self.domain_id);
                      }
                    }
                  }
                else if (cmd = 'import')
                {
                  self.resetImport (0);
                    self.abAction := cmd;
                    self.abStep := '1';
                  self.abSteps  := vector ();
                    self.v_tag := '';
                  }
                else if (cmd = 'export')
                {
                    self.abAction := cmd;
                    self.abSelected := vector();
                  for (N := 0; N < length(params); N := N + 4)
                  {
                    if (params[N] = 'cb_item')
                      self.abSelected := vector_concat (self.abSelected, vector(params[N+1]));
                    }
                  }
                else if (cmd = 'settings')
                {
                  self.abAction := cmd;
                  self.abSubAction := get_keyword ('mode', params, '');
                }
                else if (cmd = 'back')
                {
                  self.abAction := 'browse';
                  self.abSubAction := '';
                }

                _end:
                  self.vc_data_bind(e);
                 ]]>
               </v:on-post>
            </v:button>
        <?vsp
          }
        ?>
        <div class="toolbar">
        <?vsp
          declare toolbarWidth varchar;

          --toolbarWidth := case when (self.abLabels = 0) then ' width: 40px;' else '' end;
          toolbarWidth := '';
          self.toolbarShow ('', 'My Contacts', 'onclick="javascript: toolbarPost(\'MyContacts\');"', 'ab_32.png', '');
          self.toolbarShow ('', 'Shared Contacts', 'onclick="javascript: toolbarPost(\'MySharedContacts\');"', 'ab_shared_32.png', '');
        ?>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar" />

        <?vsp
          self.toolbarShow ('import', 'Import', 'onclick="javascript: toolbarPost(\'import\');"', 'impt_32.png', 'grey_impt_32.png');
          self.toolbarShow ('export', 'Export', 'onclick="javascript: toolbarPost(\'export\');"', 'exp_32.png', 'grey_exp_32.png');
        ?>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar" />

        <?vsp
          self.toolbarShow ('create', 'New Contact', 'onclick="javascript: toolbarPost(\'create\');"', 'ab_add_32.png', 'grey_ab_add_32.png');
        ?>

          <img src="image/c.gif" height="32" width="2" border="0" class="toolbar" />

        <vm:if test="self.toolbarEnable('tag')">
          <span id="tbTag" class="toolbar" style="display: none; cursor: pointer;<?V toolbarWidth ?>" onclick="javascript: toolbarPost('tag');" title="Tag">
            <img src="image/tag_32.png" border="0" alt="Tag" /><?vsp http (self.toolbarLabel('Tag'));?>
          </span>
        </vm:if>
        <span id="tbTag_gray" class="toolbar" style="<?V toolbarWidth ?>">
            <img src="image/grey_tag_32.png" border="0" alt="Tag" /><?vsp http (self.toolbarLabel('Tag'));?>
          </span>

        <vm:if test="self.toolbarEnable('grants')">
          <span id="tbSharing" class="toolbar" style="display: none; cursor: pointer;<?V toolbarWidth ?>" onclick="javascript: toolbarPost('grants');" title="Sharing">
            <img src="image/grey_grants_32.png" border="0" alt="Sharing"/><?vsp http (self.toolbarLabel('Sharing'));?>
          </span>
        </vm:if>
        <span id="tbSharing_gray" class="toolbar" style="<?V toolbarWidth ?>">
            <img src="image/grey_grants_32.png" border="0" alt="Sharing"/><?vsp http(self.toolbarLabel('Sharing'));?>
          </span>

        <vm:if test="self.toolbarEnable('delete')">
          <span id="tbDelete" class="toolbar" style="display: none; cursor: pointer;<?V toolbarWidth ?>" onclick="javascript: if (confirmAction('Are you sure that you want to delete selected items?', document.F1, 'cb_', 'No items were selected for deletion.')) toolbarPost('delete');" title="Delete">
            <img src="image/del_32.png" border="0" alt="Delete" /><?vsp http (self.toolbarLabel('Delete'));?>
            </span>
        </vm:if>
        <span id="tbDelete_gray" class="toolbar" style="<?V toolbarWidth ?>">
            <img src="image/grey_del_32.png" border="0" alt="Delete" /><?vsp http (self.toolbarLabel('Delete'));?>
            </span>

        </div>
      <br style="clear: both;" />

      <vm:if test="self.abAction <> 'settings'">
        <div id="ab_main" class="ab_main">
        <?vsp
          if (0)
          {
        ?>
            <v:button name="pt_browse" action="simple" style="url" value="Submit">
              <v:on-post>
                <![CDATA[
                  declare node, path, action any;

                  -- toggle
                  path := get_keyword ('pt_path', e.ve_params, '');
                  node := get_keyword ('pt_toggle', e.ve_params, get_keyword ('pt_node', e.ve_params, ''));
                  if (node <> '')
                  {
                    if (AB.WA.vector_contains (self.abState, path))
                    {
                      if (get_keyword ('pt_toggle', e.ve_params, '') <> '')
                        self.abState := AB.WA.vector_cut (self.abState, path);
                      if (self.abPath like concat (path, '%'))
                      {
                        self.abNode := node;
                        self.abPath := path;
                      }
                    } else {
                      self.abState := vector_concat (self.abState, vector(path));
                    }
                    self.abAction := 'browse';
                  }

                  -- node
                  node := get_keyword ('pt_node', e.ve_params, '');
                  if (node <> '')
                  {
                    self.abAction := 'browse';
                    self.abNode := node;
                    self.abPath := path;
                  }

                  -- action
                  action := get_keyword ('pt_action', e.ve_params, '');
                  if (action <> '')
                  {
                    if (action = 'delete')
                    {
                    self.v_id := cast(get_keyword ('pt_value', e.ve_params, '0') as integer);
                      AB.WA.contact_delete (self.v_id, self.domain_id);
                    }
                    if (action = 'edit')
                    {
                      self.v_id := cast(get_keyword ('pt_value', e.ve_params, '0') as integer);
                      self.abAction := action;
                    }
                    if (action = 'view')
                    {
                      self.v_id := cast(get_keyword ('pt_value', e.ve_params, '0') as integer);
                      self.abAction := action;
                    }
                    if (action = 'tags')
                    {
                      self.abAction := 'browse';
                      self.abSubAction := action;
                      self.abValue := lcase (get_keyword ('pt_value', e.ve_params, ''));
                    }
                    if (action = 'category')
                    {
                      self.abAction := 'browse';
                      self.abSubAction := action;
                      self.abValue := lcase (get_keyword ('pt_value', e.ve_params, ''));
                    }
                  }
                  self.vc_data_bind (e);
               ]]>
              </v:on-post>
            </v:button>
        <?vsp
          }
        ?>
        <div class="ab_left">
            <div id="panelbar" class="panelbar">
              <vm:if test="self.domain_id > 0">
                <div id="pb_1">Data Portability (Feeds)</div>
                <div id="pc_1">
                  <div class="left_container">
                    <?vsp
                      declare exit handler for not found;

                      declare S varchar;
                      declare lat, lng any;

                      select WAUI_LAT, WAUI_LNG into lat, lng from DB.DBA.WA_USER_INFO where WAUI_U_ID = self.account_id;
                      if (not is_empty_or_null(lat) and not is_empty_or_null (lng) and exists (select 1 from ODS..SVC_HOST, ODS..APP_PING_REG where SH_NAME = 'GeoURL' and AP_HOST_ID = SH_ID and AP_WAI_ID = self.domain_id))
                      {
                        http (sprintf('<a href="http://geourl.org/near?p=%U" title="GeoURL link" alt="GeoURL link" class="gems noapp"><img src="http://i.geourl.org/geourl.png" border="0"/></a>', AB.WA.ab_url (self.domain_id)));
                        http ('<div style="border-top: 1px solid #7f94a5;"></div>');
                      }

                      S := AB.WA.utf2wide (AB.WA.gems_url (self.domain_id));
                      http (sprintf ('<a href="%sAddressBook.%s" target="_blank" title="%s export" alt="%s export" class="gems noapp"><img src="image/rss-icon-16.gif" border="0" alt="%s export" /> %s</a>', S, 'rss', 'RSS', 'RSS', 'RSS', 'RSS'));
                      http (sprintf ('<a href="%sAddressBook.%s" target="_blank" title="%s export" alt="%s export" class="gems noapp"><img src="image/blue-icon-16.gif" border="0" alt="%s export" /> %s</a>', S, 'atom', 'ATOM', 'ATOM', 'ATOM', 'Atom'));
                      http (sprintf ('<a href="%sAddressBook.%s" target="_blank" title="%s export" alt="%s export" class="gems noapp"><img src="image/rdf-icon-16.gif" border="0" alt="%s export" /> %s</a>', S, 'rdf', 'RDF', 'RDF', 'RDF', 'RDF'));

                      http ('<div style="border-top: 1px solid #7f94a5;"></div>');
                      http (sprintf ('<a href="%s" target="_blank" title="FOAF export" alt="FOAF export" class="gems noapp"><img src="image/foaf.png" border="0" alt="FOAF export" /> FOAF</a>', AB.WA.foaf_url (self.domain_id)));

                      http ('<div style="border-top: 1px solid #7f94a5;"></div>');
                      S := sprintf ('http://%s/dataspace/%U/addressbook/%U/', DB.DBA.wa_cname (), AB.WA.domain_owner_name (self.domain_id), AB.WA.utf2wide (AB.WA.domain_name (self.domain_id)));
                      http (sprintf ('<a href="%ssioc.%s" title="%s" alt="%s" class="gems noapp"><img src="image/rdf-icon-16.gif" border="0" alt="%s export" /> %s</a>', S, 'rdf', 'SIOC (RDF/XML)', 'SIOC (RDF/XML)', 'SIOC (RDF/XML)', 'SIOC (RDF/XML)'));
                      http (sprintf ('<a href="%ssioc.%s" title="%s" alt="%s" class="gems noapp"><img src="image/rdf-icon-16.gif" border="0" alt="%s export" /> %s</a>', S, 'ttl', 'SIOC (N3/Turtle)', 'SIOC (N3/Turtle)', 'SIOC (N3/Turtle)', 'SIOC (N3/Turtle)'));
                    ?>
                  </div>
                </div>
                <vm:if test="self.abScope = 'MyContacts'">
                  <div id="pb_2">Categories</div>
                  <div id="pc_2">
                    <div class="left_container">
                      <?vsp
                        http ('<a id="c_0" href="javascript: myCategory(\'0\');" class="gems noapp">All Categories</a>');
                        for (select C_ID, C_NAME from AB.WA.CATEGORIES where C_DOMAIN_ID = self.domain_id order by C_NAME) do
                        {
                          http (sprintf ('<a id="c_%d" href="javascript: myCategory(\'%d\');" class="gems noapp">%s</a>', C_ID, C_ID, C_NAME));
                        }
                      ?>
                    </div>
                  </div>
                </vm:if>
              </vm:if>
              <div id="pb_3">
              <?vsp
                if (self.abScope = 'MyContacts')
                {
                  http ('Tags');
                } else {
                  http ('Shared Contacts');
                }
              ?>
              </div>
              <div id="pc_3">
            <?vsp
                if (self.abScope = 'MyContacts')
                {
                declare _done, tMin, tMax integer;
                declare tClass, tStyle varchar;

                  select max(T_COUNT), min(T_COUNT)
                  into tMax, tMin
                  from AB.WA.TAGS
                 where T_DOMAIN_ID = self.domain_id
                   and T_COUNT > 0;

                _done := 0;  
                for (select T_TAG, T_COUNT
                       from AB.WA.TAGS
                      where T_DOMAIN_ID = self.domain_id
                        and T_COUNT > 0
                      order by T_TAG) do
                {
                  _done := 1;  
                  tStyle := ODS.WA.tag_style(T_COUNT, tMin, tMax);
                  tClass := '';
                    if ((self.abSubaction = 'tags') and (self.abValue = T_TAG))
                    tClass := 'nolink_a';
                    http (sprintf ('<a id="t_tag_%s" name="pt_tag_%s" href="%s" onclick="javascript: myTags(\'%s\'); return false;" class="app"><span class="%s" style="%s">%s</span></a> ', AB.WA.tag_id(T_TAG), T_TAG, SIOC..tag_iri (AB.WA.forum_iri (self.domain_id), T_TAG), T_TAG, tClass, tStyle, T_TAG));
                }
              }
                else if (self.abScope = 'MySharedContacts')
                {
                self.showTree(1, self.domain_id, self.account_id, AB.WA.make_node('r', 2), '');
                }
            ?>
          </div>

            </div>

        </div>
        <div class="ab_right">
            <v:template name="t1" type="simple" enabled="--case when (self.abAction = 'browse') then 1 else 0 end">
            <?vsp
              declare nodeName, image any;

              self.mode_test();

              image := '';
                if (self.abScope = 'MyContacts')
                {
                nodeName := 'My Contacts';
                  if (self.abSubaction = 'tags')
                  {
                    if (not is_empty_or_null(self.abValue))
                    {
                      image := 'image/tag_16.png';
                      nodeName := nodeName || ', Tag: ' || self.abValue;
                    }
                  }
                  if (self.abSubaction = 'category')
                  {
                    if (is_empty_or_null (cast (self.abValue as integer)))
                    {
                      nodeName := nodeName || ': All categories';
                    } else {
                      nodeName := nodeName || ', Category: ' || (select C_NAME from AB.WA.CATEGORIES where C_ID = cast (self.abValue as integer));
                }
              }
                }
                if (self.abScope = 'MySharedContacts')
                {
                  image := '/ods/images/icons/group_16.png';
                if ((AB.WA.node_type (self.abNode) = 'u') and (AB.WA.node_id (self.abNode) >= 0))
                    image := '/ods/images/icons/user_16.png';
                nodeName := self.abName;
              }

              --nodeName := AB.WA.stringCut (coalesce(nodeName, ''), self.chars);
              if (image <> '')
                  image := sprintf ('<img src="%s" border="0" alt="" /> ', image);

                http('<div id="ab_header">');
                if (not is_empty_or_null(nodeName))
                {
                  http(sprintf('<div style="float: left">%s%s</div>', image, nodeName));
              }
                http ('<div style="float: right"><span id="navigation"></span></div>');
                http('</div>');
            ?>
              <div style="height: 477px; overflow-y: auto; overflow-x: hidden;">
            <v:data-source name="dsrc" expression-type="sql" nrows="0" initial-offset="0">
              <v:before-data-bind>
                <![CDATA[
                  declare data any;

                  self.mode_test();

                  if (self.abScope = 'MyContacts')
                  {
                    AB.WA.xml_set('MyContacts', data, 1);
                      if (self.abSubAction = 'tags')
                      {
                        if (not is_empty_or_null (self.abValue))
                          AB.WA.xml_set('tags', data, self.abValue);
                      }
                      if (self.abSubAction = 'category')
                      {
                        if (not is_empty_or_null (cast (self.abValue as integer)))
                          AB.WA.xml_set('category', data, self.abValue);
                      }
                        control.ds_sql := AB.WA.search_sql (self.domain_id, self.account_id, self.person_rights, data);
                    }
                    else if (self.abScope = 'MySharedContacts')
                    {
                      if ((AB.WA.node_type(self.abNode) = 'u') and (AB.WA.node_id(self.abNode) = -1))
                      {
                      control.ds_sql := 'select *
                                           from (select distinct
                                                        U_ID                           P_ID,
                                                        AB.WA.make_node(\'u\', U_ID)   P_NODE,
                                                        U_NAME                         P_NAME,
                                                        null                           P_TAGS,
                                                        null                           P_UPDATED,
                                                        null                           P_CREATED
                                                       from AB..GRANTS_VIEW
                                                      where id = <USER_ID>) x
                                            where 1 = 1';
                      control.ds_sql := replace(control.ds_sql, '<USER_ID>', cast (self.account_id as varchar));
                      }
                      else if ((AB.WA.node_type(self.abNode) = 'u') and (AB.WA.node_id(self.abNode) >= 0))
                      {
                      control.ds_sql := 'select *
                                           from (select a.P_ID                          P_ID,
                                                        AB.WA.make_node(\'p\', a.P_ID)  P_NODE,
                                                        a.P_NAME                        P_NAME,
                                                        a.P_TAGS                        P_TAGS,
                                                        a.P_UPDATED                     P_UPDATED,
                                                        a.P_CREATED                     P_CREATED
                                                   from AB.WA.PERSONS a,
                                                            AB..GRANTS_PERSON_VIEW b
                                                  where a.P_ID = b.G_PERSON_ID
                                                        and b.FROM_ID = <ID>
                                                        and b.TO_ID = <USER_ID>) x
                                            where 1 = 1';
                      control.ds_sql := replace(control.ds_sql, '<ID>', AB.WA.node_suffix(self.abNode));
                      control.ds_sql := replace(control.ds_sql, '<USER_ID>', cast (self.account_id as varchar));
                    }
                  }

                      self.sortChange (get_keyword ('sortColumn', params, ''));
                      control.ds_sql := concat (control.ds_sql, ' order by ', self.v_order, ' ', self.v_direction);
                  control.ds_nrows := AB.WA.settings_rows (self.settings);
                  control.ds_parameters := vector ();
                ]]>
              </v:before-data-bind>
                <v:after-data-bind>
                  control.ds_make_statistic ();
                </v:after-data-bind>
            </v:data-source>

            <v:data-set name="ds" data-source="self.dsrc" scrollable="1">

              <v:template name="ds_header" type="simple" name-to-remove="table" set-to-remove="bottom" >
                    <table class="ODS_grid" style="border: 0px;">
                      <thead>
                    <tr>
                          <v:template name="t2" type="simple" enabled="--case when ((self.person_rights <> 'W') or (self.abScope = 'MySharedContacts')) then 0 else 1 end">
                            <th class="checkbox">
                          <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')" />
                        </th>
                      </v:template>
                          <?vsp http (DB.DBA.wa_show_column_header ('Name', 'P_NAME', self.v_order, self.v_direction)); ?>
                    </tr>
                  </thead>
                </table>
              </v:template>

              <v:template name="ds_repeat" type="repeat" name-to-remove="" set-to-remove="">

                <v:template name="ds_browse" type="browse" name-to-remove="table" set-to-remove="both">
                      <?vsp
                        declare id integer;
                        declare permissions any;

                        id := (control as vspx_row_template).te_column_value('P_ID');
                        permissions := AB.WA.contact_rights (self.domain_id, id, self.account_rights, self.person_rights);
                      ?>
                  <table>
                    <tr>
                          <vm:if test="(self.person_rights = 'W') and (self.abScope <> 'MySharedContacts')">
                            <td class="checkbox" valign="top">
                          <?vsp
                                if (permissions = 'W')
                                  http (sprintf ('<input type="checkbox" name="cb_item" value="%d" %s onclick="selectCheck(this, \'cb_item\')" />', id, case when (self.abContact = id) then 'checked="checked"' else '' end));
                          ?>
                        </td>
                          </vm:if>
                          <td class="vcard" valign="top">
                        <?vsp
                              declare N integer;
                              declare tmp, title, title2, actions, tags any;

                            if ((self.abScope = 'MySharedContacts') and (AB.WA.node_type(self.abNode) = 'u') and (AB.WA.node_id(self.abNode) = -1))
                            {
                            http (sprintf ('<div style="float: left; font-weight: bold;">%s</div>', AB.WA.stringCut((control as vspx_row_template).te_column_value('P_NAME'), self.abChars)));
                            goto _skip;
                          }

                          title := (control as vspx_row_template).te_column_value('P_NAME');
                          tags := (control as vspx_row_template).te_column_value('P_TAGS');
                              title2 := self.prepareField (AB.WA.stringCut(title, self.abChars), 'nickname', null);

                              http (sprintf ('<div style="float: left; font-weight: bold;"><a id="ab_%d" href="%s" onclick="javascript: vspxPost (\'pt_browse\', \'pt_action\', \'view\', \'pt_value\', \'%d\'); return false;" title="View \'%s\'" class="app link">%s</a></div>', id, AB.WA.utf2wide (SIOC..addressbook_contact_iri (self.domain_id, id)), id, title, title2));
                          
                          actions := '';
                              if (permissions = 'W')
                                actions := actions || either (equ (actions, ''), '', ' | ') || sprintf ('<span onclick="javascript: vspxPost (\'pt_browse\', \'pt_action\', \'edit\', \'pt_value\', \'%d\'); return false;" class="link">edit</span>', id);
                              if (permissions = 'W')
                                actions := actions || either (equ (actions, ''), '', ' | ') || self.windowOpen (sprintf ('annotea.vspx?oid=%d', id), 'annotate', title);
                              if (AB.WA.discussion_check () and AB.WA.conversation_enable (self.domain_id))
                                actions := actions || either (equ(actions, ''), '', ' | ') || self.windowOpen (sprintf ('conversation.vspx?id=%d', id), 'discuss', title);
                              if (permissions = 'W')
                                actions := actions || either (equ (actions, ''), '', ' | ') || self.windowOpen (sprintf ('invite.vspx?0id=%d', id), 'invite', title);

                          http ('<div style="float: right; text-align: right; padding-right: 0.3em;">');
                          http (actions);
                          http ('</div>');

                            if (not is_empty_or_null(tags))
                            {
                            http ('<br style="clear: both;" /><i>Tags: ');
                            tags := split_and_decode (tags, 0, '\0\0,');
                              for (N := 0; N < length(tags); N := N + 1)
                              {
                                  http (sprintf ('<a id="tag_%d_%s" name="pt_tag_%s" href="%s" onclick="javascript: myTags(\'%s\'); return false;" class="app">%s</a> ', id, AB.WA.tag_id (tags[N]), tags[N], SIOC..tag_iri (AB.WA.forum_iri (self.domain_id), tags[N]), tags[N], tags[N]));
                              if (N <> length(tags)-1)
                                http (' | ');
                            }
                            http ('</i>');
                          }
                        _skip:;
                        ?>
                      </td>
                    </tr>
                  </table>
                </v:template>

              </v:template>

              <v:template name="ds_footer" type="simple" name-to-remove="table" set-to-remove="top">
                <table>
                </table>
              </v:template>

                <span id="ds_navigation">
                  <vm:ds-navigation data-set="ds" />
                </span>
            </v:data-set>
              </div>
            <script type="text/javascript">
              <![CDATA[
                  exchangeHTML();

                var objForm = document.forms['F1'];
                  for (var i = 0; i < objForm.elements.length; i++)
                  {
                  var o = objForm.elements[i];
                  if (o != null && o.type == 'checkbox' && !o.disabled && o.name.indexOf ('cb_item') != -1)
                    coloriseRow(getParent(o, 'tr'), o.checked);
                }
                enableToolbars (objForm, 'cb_item');
              ]]>
            </script>
          </v:template>

            <v:template  name="t4" type="simple" enabled="--case when (self.abAction = 'tag') then 1 else 0 end">
            <div class="new-form-header">
              <v:label format="%s" value="Tag contact(s)" />
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="t_tag" value="Tags (comma-separated)" />
                  </th>
                  <td>
                    <v:text name="t_tag" null-value="''" value="--self.v_tag" xhtml_class="textbox" xhtml_size="60" />
                  </td>
                </tr>
                  <?vsp self.myTags ('t_tag'); ?>
              </table>
            </div>
            <div class="new-form-footer">
                <v:button name="b1" action="simple" value="Tag" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.v_tag := AB.WA.tag_prepare(self.t_tag.ufl_value);
                      if (not AB.WA.validate_tags(self.v_tag))
                      {
                      self.vc_error_message := 'The expression is not valid tag(s).';
                        self.vc_is_valid := 0;
                      return;
                    }
                    declare N integer;

                      for (N := 0; N < length(self.abSelected); N := N + 1)
                      {
                      self.v_tags := AB.WA.contact_tags_select(self.abSelected[N], self.domain_id);
                      self.v_tags := AB.WA.tags_join(self.v_tags, self.v_tag);
                      AB.WA.contact_tags_update (self.abSelected[N], self.domain_id, self.v_tags);
                    }

                    self.v_tag := '';
                    self.abAction := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
                <v:button name="t_cancel" action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.v_tag := '';
                    self.abAction := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

            <v:template  name="t5" type="simple" enabled="--case when (self.abAction = 'grants') then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                self.v_grants := get_keyword ('grants', self.vc_page.vc_event.ve_params, self.v_grants);
              ]]>
            </v:before-data-bind>
            <div class="new-form-header">
              <v:label value="--''">
                <v:after-data-bind>
                  <![CDATA[
                    declare N integer;
                    declare name varchar;

                    control.ufl_value := 'Sharings for ';
                      for (N := 0; N < length(self.abSelected); N := N + 1)
                      {
                        if (length (control.ufl_value) < 60)
                        {
                        name := '''' || (select P_NAME from AB.WA.PERSONS where P_ID = self.abSelected[N]) || '''';
                        if (N <> 0)
                          name := ', ' || name;
                        control.ufl_value := control.ufl_value || name;
                      }
                    }
                  ]]>
                </v:after-data-bind>
              </v:label>
            </div>
            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th>
                    <v:label for="s_grants" value="User(s)" />
                  </th>
                  <td>
                    <v:text name="s_grants" null-value="--''" value="--self.v_grants" xhtml_class="textbox" xhtml_size="60" xhtml_title="User names must be comma delimited!" />
                      <input type="button" value="Select" onclick="javascript: windowShow('/ods/users_select.vspx?dst=mc&amp;params=s_grants:s1;&nrows=<?V AB.WA.settings_rows (self.settings) ?>')" class="button" />
                    <input type="button" value="Clear" onclick="javascript: document.F1.elements['s_grants'].value = ''" class="button" />
                  </td>
                </tr>
                <tr>
                  <th/>
                  <td>
                    <v:check-box name="s_override" initial-checked="self.v_override" xhtml_id="s_override" value="1" />
                    <b><vm:label for="s_override" value="Override current sharings"/></b>
                  </td>
                </tr>
              </table>
            </div>
            <div class="new-form-footer">
                <v:button name="s_save" action="simple" value="Share" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    declare N integer;

                    self.v_grants := trim(self.s_grants.ufl_value);
                    self.v_override := self.s_override.ufl_selected;

                    for (N := 0; N < length(self.abSelected); N := N + 1)
                         AB.WA.contact_share (self.account_id, self.abSelected[N], self.v_grants, self.v_override);

                    self.abAction := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
                <v:button name="s_cancel" action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.abAction := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
          </v:template>

            <v:template  name="t6" type="simple" enabled="--case when (self.abAction in ('create', 'edit', 'view')) then 1 else 0 end">
            <v:before-data-bind>
              <![CDATA[
                declare params any;

                  declare exit handler for not found goto _end;

                params := self.vc_page.vc_event.ve_params;
                  if (isnull (get_keyword ('ab_name', params)) or (self.abAction = 'view'))
                  self.v_tabNo := '1';
                  if ((self.abAction in ('edit', 'view')) and isnull (get_keyword ('ab_name', params)))
                  {
                  select coalesce (P_KIND, 0),
                         P_NAME,
                         P_TITLE,
                         P_FIRST_NAME,
                         P_MIDDLE_NAME,
                         P_LAST_NAME,
                         P_FULL_NAME,
                         P_GENDER,
                         P_BIRTHDAY,
                         P_IRI,
                         P_FOAF,
                           P_PHOTO,
                           P_INTERESTS,
                           P_RELATIONSHIPS,
                         P_MAIL,
                         P_WEB,
                         P_ICQ,
                         P_SKYPE,
                         P_AIM,
                         P_YAHOO,
                         P_MSN,
                         P_H_COUNTRY,
                         P_H_CITY,
                         P_H_STATE,
                         P_H_CODE,
                         P_H_ADDRESS1,
                         P_H_ADDRESS2,
                         P_H_TZONE,
                         P_H_LAT,
                         P_H_LNG,
                         P_H_PHONE,
                         P_H_MOBILE,
                         P_H_FAX,
                         P_H_MAIL,
                         P_H_WEB,
                         P_B_COUNTRY,
                         P_B_CITY,
                         P_B_STATE,
                         P_B_CODE,
                         P_B_ADDRESS1,
                         P_B_ADDRESS2,
                         P_B_TZONE,
                         P_B_LAT,
                         P_B_LNG,
                         P_B_PHONE,
                         P_B_MOBILE,
                         P_B_FAX,
                         P_B_INDUSTRY,
                         P_B_ORGANIZATION,
                         P_B_DEPARTMENT,
                         P_B_JOB,
                         P_B_MAIL,
                         P_B_WEB,
                           P_TAGS,
                           P_ACL,
                           P_CERTIFICATE,
                           C_ID,
                           C_NAME
                    into self.v_kind,
                         self.v_name,
                         self.v_title,
                         self.v_fName,
                         self.v_mName,
                         self.v_lName,
                         self.v_fullName,
                         self.v_gender,
                         self.v_birthday,
                         self.v_iri,
                         self.v_foaf,
                           self.v_photo,
                           self.v_interests,
                           self.v_relationships,
                         self.v_mail,
                         self.v_web,
                         self.v_icq,
                         self.v_skype,
                         self.v_aim,
                         self.v_yahoo,
                         self.v_msn,
                         self.v_hCountry,
                         self.v_hCity,
                         self.v_hState,
                         self.v_hCode,
                         self.v_hAddress1,
                         self.v_hAddress2,
                         self.v_hTzone,
                         self.v_hLat,
                         self.v_hLng,
                         self.v_hPhone,
                         self.v_hMobile,
                         self.v_hFax,
                         self.v_hMail,
                         self.v_hWeb,
                         self.v_bCountry,
                         self.v_bCity,
                         self.v_bState,
                         self.v_bCode,
                         self.v_bAddress1,
                         self.v_bAddress2,
                         self.v_bTzone,
                         self.v_bLat,
                         self.v_bLng,
                         self.v_bPhone,
                         self.v_bMobile,
                         self.v_bFax,
                         self.v_bIndustry,
                         self.v_bOrganization,
                         self.v_bDepartment,
                         self.v_bJob,
                         self.v_bMail,
                         self.v_bWeb,
                           self.v_tags,
                           self.v_acl,
                           self.v_certificate,
                           self.v_category_id,
                           self.v_category_name
                    from AB.WA.PERSONS
                             left join AB.WA.CATEGORIES on C_ID = P_CATEGORY_ID
                   where P_ID = self.v_id;
                  self.v_grants := self.shareSelect (self.v_id);
                    self.v_photo_preview_path := '';
                    self.rdf_iri := SIOC..addressbook_contact_iri (self.domain_id, self.v_id);
                }
                _end:;
              ]]>
            </v:before-data-bind>

            <div class="new-form-header">
              <div style="float: left; padding-top: 3px;">
                <v:label format="%s" value="--initcap(self.abAction) || case when (self.abAction = 'view') then case when (self.v_kind = 1) then ' Organization' else ' Person' end else ' Contact' end" />
              </div>
              <vm:if test="self.abAction <> 'view'">
                <div style="float: right;">
                  Type: 
                  <v:select-list name="ab_kind" xhtml_id="ab_kind" xhtml_onchange="javascript: changeType(this);">
                    <v:item value="0" name="Person" />
                    <v:item value="1" name="Organization" />
                    <v:before-data-bind>
                    <![CDATA[
                      control.ufl_value := self.v_kind;
                      control.vc_data_bound := 1;
                    ]]>
                  </v:before-data-bind>
                </v:select-list>
                </div>
              </vm:if>
              <vm:if test="self.abAction = 'view'">
                <?vsp http (sprintf ('<input type="hidden" name="ab_kind" id="ab_kind" value="%d" />', self.v_kind)); ?>
              </vm:if>
              <br style="clear: both;" />
            </div>
            <v:text name="tabNo" xhtml_id="tabNo" type="hidden" value="--self.v_tabNo"/>
            <v:text name="dirty_force_global" xhtml_id="dirty_force_global" type="hidden" value="--get_keyword ('dirty_force_global', self.vc_event.ve_params, 'false')"/>
            <div id="a" class="c1">
              <div class="tabs">
                  <vm:if test="self.abAction <> 'view'">
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="0" caption="Import" />
                  </vm:if>
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="1" caption="Main" />
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="2" caption="Contact" />
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="3" caption="Home" />
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="4" caption="Business" />
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="5" caption="Relationships" />
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="6" caption="Sharing" />
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="7" caption="X.509 Certificate" />
                  <vm:if test="(self.abAction = 'view') and (not isnull (__proc_exists ('QRcode encodeString8bit', 2)))">
                  &nbsp;<vm:tabCaption tab="a" tabsCount="9" tabNo="8" caption="QRCode" />
                  </vm:if>
              </div>
                <div class="contents vcard">
                  <vm:if test="self.abAction <> 'view'">
                <div id="a_content_0" class="tabContent" style="display: none;">
                    <table class="form-body n" cellspacing="0">
                      <tr>
                        <th>
                          <vm:label for="x_foaf" value="Profile Document URL" />
                        </th>
                        <td>
                          <vm:if test="self.abAction <> 'view'">
                            <v:text name="x_foaf" xhtml_id="x_foaf" value="" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                            <input type="button" value="Import" onclick="javascript: AB.getFOAFData($v('x_foaf')); return false;" class="button" />
                            <img id="ab_import_image" alt="Import FOAF Data" src="/ods/images/oat/Ajax_throbber.gif" style="display: none" />
                          </vm:if>
                        </td>
                      </tr>
                    </table>
                  </div>
                  </vm:if>
                  <div id="a_content_1" class="tabContent" style="display: none;">
                    <table class="form-body n" cellspacing="0">
                      <vm:if test="self.abAction in ('view', 'edit')">
                    <tr>
                        <th>
                          Contact URI
                        </th>
                        <td>
                          <?vsp http (self.prepareField(AB.WA.utf2wide (SIOC..addressbook_contact_iri (self.domain_id, self.v_id)), 'uid', null)); ?>
                        </td>
                      </tr>
                      </vm:if>
                      <tr>
                        <th>
                          <vm:label for="ab_foaf" value="Profile Document URL" />
                        </th>
                        <td>
                          <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_foaf" xhtml_id="ab_foaf" value="--self.v_foaf" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                          </vm:if>
                          <?vsp self.viewField (self.v_foaf, '', null); ?>
                        </td>
                      </tr>
                      <tr>
                        <th>
                          <vm:label for="ab_iri" value="WebID" />
                        </th>
                        <td>
                          <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_iri" xhtml_id="ab_iri" value="--self.v_iri" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                          </vm:if>
                          <?vsp self.viewField (self.v_iri, '', null); ?>
                        </td>
                      </tr>
                      <tr>
                      <th width="25%">
                          <vm:label for="ab_name" value="Name (*)" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_name" xhtml_id="ab_name" value="--self.v_name" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_name, 'nickname', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_title" value="Title" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:select-list name="ab_title" xhtml_id="ab_title">
                          <v:item name="" value=""/>
                          <v:item name="Mr" value="Mr"/>
                          <v:item name="Mrs" value="Mrs"/>
                          <v:item name="Ms" value="Ms"/>
                          <v:item name="Dr" value="Dr"/>
                            <v:item name="Sir" value="Sir" />
                          <v:before-data-bind>
                            <![CDATA[
                              control.ufl_value := self.v_title;
                              control.vc_data_bound := 1;
                            ]]>
                          </v:before-data-bind>
                        </v:select-list>
                        </vm:if>
                          <?vsp self.viewField (self.v_title, 'honorific-prefix', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_fName" value="First Name" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_fName" xhtml_id="ab_fName" value="--self.v_fName" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_fName, 'given-name', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_mName" value="Middle Name" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_mName" xhtml_id="ab_mName" value="--self.v_mName" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_mName, 'additional-name', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_lName" value="Last Name" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_lName" xhtml_id="ab_lName" value="--self.v_lName" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_lName, 'family-name', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_fullName" value="Full Name" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_fullName" xhtml_id="ab_fullName" value="--self.v_fullName" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_fullName, 'fn', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_gender" value="Gender" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:select-list name="ab_gender" xhtml_id="ab_gender">
                          <v:item name="" value=""/>
                          <v:item name="Male" value="male"/>
                          <v:item name="Female" value="female"/>
                          <v:before-data-bind>
                            <![CDATA[
                              control.ufl_value := self.v_gender;
                              control.vc_data_bound := 1;
                            ]]>
                          </v:before-data-bind>
                        </v:select-list>
                        </vm:if>
                          <?vsp self.viewField (self.v_gender, '', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_birthday" value="Birthday" />
                      </th>
                        <td nowrap="nowrap">
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_birthday" xhtml_id="ab_birthday" null-value="--''" value="--AB.WA.dt_format (self.v_birthday, 'Y-M-D')" xhtml_onclick="javascript: datePopup(\'ab_birthday\');" xhtml_class="textbox" xhtml_size="10" />
                            <a href="#" name="ab_birthday_select" id="ab_birthday_select" onclick="datePopup('ab_birthday'); return false;" class="noapp">
                            <img border="0" title="pick" alt="pick" src="image/pick_calendar.gif" />
                          </a>
                        </vm:if>
                          <?vsp self.viewField (self.v_birthday, 'bday', null); ?>
                      </td>
                    </tr>
                    <tr>
                        <th valign="top">
                          <label for="ab_interests">Topic of interest</label>
                        </th>
                        <td style="padding-left: 0;">
                          <table>
                            <tr>
                              <td style="padding: 0; width: 600px; background-color: white;">
                                <table id="a_tbl" class="ODS_grid">
                                  <thead>
                                    <tr>
                                      <th width="50%">URL</th>
                                      <th width="50%">Label</th>
                                      <vm:if test="self.abAction <> 'view'">
                                        <th class="action">Action</th>
                                      </vm:if>
                                    </tr>
                                  </thead>
                            		  <![CDATA[
                            		    <script type="text/javascript">
                                  <?vsp
                                      declare N integer;

                                    N := 0;
                                    for (select interest, label from DB.DBA.WA_USER_INTERESTS (txt) (interest varchar, label varchar) P where txt = self.v_interests) do
                                    {
                                      N := N + 1;
                                    if (self.abAction <> 'view')
                                        {
                                          http (sprintf ('OAT.MSG.attach(OAT, "PAGE_LOADED", function(){TBL.createRow("a", null, {fld_1: {value: "%s", className: "_validate_ _url_"}, fld_2: {value: "%s"}});});', interest, label));
                                        } else {
                                          http (sprintf ('OAT.MSG.attach(OAT, "PAGE_LOADED", function(){TBL.createViewRow("a", {fld_1: {value: "%s"}, fld_2: {value: "%s"}});});', interest, label));
                                        }
                                      }
                                  ?>
                            		    </script>
                            		  ]]>
                                  <tr id="a_tr_no" style="display: <?V case when N=0 then '' else 'none' end ?>;"><td colspan="<?V case when self.abAction='view' then 3 else 4 end ?>"><b>No Interests</b></td></tr>
                                </table>
                              </td>
                              <vm:if test="self.abAction <> 'view'">
                                <td valign="top" nowrap="nowrap">
                                  <img class="pointer" src="/ods/images/icons/add_16.png" border="0" alt="Add Interest" title="Add Interest" onclick="javascript: TBL.createRow('a', null, {fld_1: {className: '_validate_ _url_'}, fld_2: {}});" />
                                </td>
                              </vm:if>
                            </tr>
                          </table>
                        </td>
                      </tr>
                      <tr>
                        <th valign="top">
                          <label for="ab_photo">Photo</label>
                        </th>
                        <td class="listing_col" nowrap="nowrap">
                          <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_photo" xhtml_id="ab_photo" value="--self.v_photo" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                            <v:button name="ab_photo_preview" value="Preview" action="simple" xhtml_class="button">
                              <v:on-post>
                                <![CDATA[
                                  declare photo_content any;

                                  photo_content := null;
                                  if ((get_keyword ('ab_photo_source', e.ve_params) = '0') and (get_keyword ('ab_photo_file', e.ve_params, '') <> ''))
                                  {
                                    photo_content := get_keyword ('ab_photo_file', e.ve_params);
                                  }
                                  else if ((get_keyword ('ab_photo_source', e.ve_params) = '1') and (get_keyword ('ab_photo_url', e.ve_params, '') <> ''))
                                  {
                                    photo_content := AB.WA.dav_content (get_keyword ('ab_photo_url', e.ve_params));
                                  }
                                  if (photo_content is not null)
                                  {
                                    declare p_ext any;

                                    p_ext := split_and_decode (self.ab_photo.ufl_value, 0, '\0\0.');
                                    if (p_ext is not null and p_ext[length(p_ext)-1] is not null and lcase(p_ext[length(p_ext)-1]) not in ('jpg', 'png', 'gif'))
                                    {
                                      self.vc_error_message := 'Invalid image type. Please use jpg, png or gif for browser compatibility.';
                                      self.vc_is_valid := 0;
                                      self.v_photo_preview_path := '';
                                      return;
                                    }
                                    declare rc, dir, p_path, pwd1 any;

                                    dir := rtrim (DB.DBA.DAV_HOME_DIR (AB.WA.account_name (self.account_id)), '/') || '/Images/';
                                    p_path := dir || '__preview__.' || p_ext[length (p_ext)-1];

                                    pwd1 := (select pwd_magic_calc (U_NAME, U_PASSWORD, 1) from DB.DBA.SYS_USERS where U_NAME = 'dav');
                                    rc := DB.DBA.DAV_MAKE_DIR (dir, self.account_id, http_admin_gid (), '110100100N');
                                    rc := DB.DBA.DAV_RES_UPLOAD (p_path, photo_content, '', '110100100RR', self.account_id, http_nogroup_gid(), 'dav', pwd1);
                                    if (rc < 0)
                                    {
                                      self.vc_error_message := DB.DBA.DAV_PERROR (rc);
                                      self.vc_is_valid := 0;
                                    } else {
                                      self.v_photo_preview_path := p_path;
                                    }
                                  }
                                  else
                                  {
                                    self.v_photo_preview_path := DB.DBA.WA_LINK (1, get_keyword ('ab_photo', e.ve_params));
                                    photo_content := AB.WA.dav_content (self.v_photo_preview_path);
                                    if (photo_content is null)
                                      self.v_photo_preview_path := '';
                                  }
                                ]]>
                              </v:on-post>
                            </v:button>
                            <script type="text/javascript">
                              <![CDATA[
                                var previewImgPath = '<?Vself.v_photo_preview_path?>';
                                function previewImg()
                                {
                                  if (previewImgPath == '')
                                    return;
                                  var div = OAT.Dom.create('div', {position: 'relative', textAlign: 'center'});
                                  OAT.Event.attach(div, "click", OAT.Dimmer.hide);

                                  var img=OAT.Dom.create('img', {display:'block'});
                                  img.src = previewImgPath;
                                  OAT.Event.attach(div, "load", function(){OAT.Dom.center(div,1,1);});
                                  OAT.Dom.append([div, img]);
                                  OAT.Dimmer.show(div, {popup:true});
                                  function centerImg()
                                  {
                                    if(img.complete)
                                    {
                                      OAT.Dom.center(div, 1, 1);
                                      clearTimeout(centerImgE);
                                    }
                                  }
                                  var centerImgE = setInterval(centerImg, 50);
                                }
                                OAT.MSG.attach(OAT, 'PAGE_LOADED', previewImg);
                              ]]>
                            </script>
                            <v:button name="ab_photo_upload" xhtml_id="ab_photo_upload" value="Upload" action="simple" xhtml_onclick="javascript: OAT.Dom.show(\'tr_photo\'); return false;" xhtml_class="button" />
                          </vm:if>
                          <?vsp self.viewImage (self.v_photo); ?>
                        </td>
                      </tr>
                      <vm:if test="self.abAction <> 'view'">
                        <tr id="tr_photo" style="display: none;">
                          <th valign="top">
                            <label for="ab_photo_file">Photo Source</label>
                          </th>
                          <td>
                            <label>
                              <input type="radio" onchange="javascript: destinationChange(this, {show: ['ab_photo_file'], hide: ['ab_photo_url']});" id="ab_photo_source_0" checked="checked" value="0" name="ab_photo_source"/>
                              File
                            </label>
                            <br />
                            <label>
                              <input type="radio" onchange="javascript: destinationChange(this, {show: ['ab_photo_url'], hide: ['ab_photo_file']});" id="ab_photo_source_1" value="1" name="ab_photo_source"/>
                              Url
                            </label>
                            <br />
                            <input name="ab_photo_file" id="ab_photo_file" type="file" value="" size="60" onchange="AB.getFileName(this, this.form.ab_photo);" />
                            <input name="ab_photo_url" id="ab_photo_url" type="text" value="" size="60" onchange="AB.getFileName(this, this.form.ab_photo);" style="display: none;" />
                          </td>
                        </tr>
                      </vm:if>
                    <tr>
                        <th>
                          <vm:label for="ab_category_name" value="Category" />
                        </th>
                        <td id="td_cc">
                          <vm:if test="self.abAction <> 'view'">
                            <![CDATA[
                              <script type="text/javascript">
                                function categoryCombo ()
                                {
                                  var cc = new OAT.Combolist([], "<?V coalesce (self.v_category_name, '') ?>");
                                  cc.input.name = "ab_category_name";
                                  cc.input.id = "ab_category_name";
                                  cc.input.size = "60";
                                  $("td_cc").appendChild(cc.div);
                                  cc.addOption("");
                                  <?vsp
                                    for (select C_NAME from AB.WA.CATEGORIES where C_DOMAIN_ID = self.domain_id order by C_NAME) do
                                    {
                                      http (sprintf ('cc.addOption("%s");', C_NAME));
                                    }
                                  ?>
                                }
                                OAT.MSG.attach(OAT, 'PAGE_LOADED', categoryCombo);
                               </script>
                            ]]>
                          </vm:if>
                          <?vsp self.viewField (self.v_category_name, 'category', null); ?>
                        </td>
                      </tr>
                      <tr>
                      <script type="text/javascript">
                        function suggestTags ()
                        {
                          window.open ('tags.vspx?sid=<?V self.sid ?>&amp;realm=<?V self.realm ?>&amp;txt=' + escape (document.F1.elements['ab_name'].value) + '&amp;fld=ab_tags', 'bookmarks_suggest_window', 'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=420, width=500');
                        }
                      </script>
                      <th>
                          <vm:label for="ab_tags" value="Tags (comma-separated)" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_tags" xhtml_id="ab_tags" null-value="''" value="--self.v_tags" xhtml_class="textbox" xhtml_size="60" />
                          <input type="button" value="Suggest" onclick="javascript: suggestTags();" class="button" />
                          <input type="button" value="Clear" onclick="javascript: document.F1.elements['ab_tags'].value = ''" class="button" />
                        </vm:if>
                          <?vsp self.viewTags (self.v_tags); ?>
                      </td>
                    </tr>
                    <vm:if test="self.abAction <> 'view'">
                        <?vsp self.myTags ('ab_tags'); ?>
                    </vm:if>
                  </table>
                </div>
                  <div id="a_content_2" class="tabContent" style="display: none;">
                  <table class="form-body" cellspacing="0">
                    <tr>
                      <th width="25%">
                          <vm:label for="ab_mail" value="Mail" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_mail" xhtml_id="ab_mail" value="--self.v_mail" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_mail, 'email:internet, pref', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_web" value="Web" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_web" xhtml_id="ab_web" value="--self.v_web" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_web, 'url:pref', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_icq" value="Icq" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_icq" xhtml_id="ab_icq" value="--self.v_icq" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_icq, '', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_skype" value="Skype ID" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_skype" xhtml_id="ab_skype" value="--self.v_skype" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_skype, '', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_aim" value="AIM Name" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_aim" xhtml_id="ab_aim" value="--self.v_aim" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_aim, '', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_yahoo" value="Yahoo! ID" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_yahoo" xhtml_id="ab_yahoo" value="--self.v_yahoo" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_yahoo, '', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_msn" value="MSN Messenger" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_msn" xhtml_id="ab_msn" value="--self.v_msn" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_msn, '', null); ?>
                      </td>
                    </tr>
                  </table>
                </div>
                  <div id="a_content_3" class="tabContent" style="display: none;">
                    <span class="type" style="display: none;">HOME</span>
                  <table class="form-body" cellspacing="0">
                    <tr>
                      <th width="25%">
                          <vm:label for="ab_hCountry" value="Country" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:data-list name="ab_hCountry" xhtml_id="ab_hCountry" value="--self.v_hCountry" sql="select '' as WC_NAME from WA_COUNTRY union select WC_NAME from WA_COUNTRY" key-column="WC_NAME" value-column="WC_NAME" xhtml_onchange="javascript: updateState(\'ab_hCountry\', \'ab_hState\');" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hCountry, 'country-name', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hState" value="State/Province" />
                      </th>
      		            <td>
                        <vm:if test="self.abAction <> 'view'">
                            <span id="span_ab_hState">
                                <script type="text/javascript">
                                OAT.MSG.attach(OAT, 'PAGE_LOADED', function (){updateState("ab_hCountry", "ab_hState", "<?V self.v_hState ?>", true);});
                                 </script>
                            </span>
                        </vm:if>
                          <?vsp self.viewField (self.v_hState, 'region', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hCity" value="City/Town" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hCity" xhtml_id="ab_hCity" value="--self.v_hCity" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hCity, 'locality', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hCode" value="Zip/Postal Code" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hCode" xhtml_id="ab_hCode" value="--self.v_hCode" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hCode, 'postal-code', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hAddress1" value="Address1" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hAddress1" xhtml_id="ab_hAddress1" value="--self.v_hAddress1" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hAddress1, 'street-address', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hAddress2" value="Address2" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hAddress2" xhtml_id="ab_hAddress2" value="--self.v_hAddress2" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hAddress2, 'extended-address', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hTzone" value="Time Zone" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:select-list name="ab_hTzone" xhtml_id="ab_hTzone">
                          <v:on-init>
                            <![CDATA[
                              declare x,y any;

                                  self.prepareTimeZone (x, y);
                              control.vsl_item_values := x;
                              control.vsl_items := y;
                              control.ufl_value := '0';
                            ]]>
                          </v:on-init>
                          <v:before-data-bind>
                              control.ufl_value := coalesce (self.v_hTzone, '0');
                          </v:before-data-bind>
                        </v:select-list>
                        </vm:if>
                          <?vsp self.viewField (self.viewTimeZone (self.v_hTzone), 'tz', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hLat" value="Latitude" />
                      </th>
		                  <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hLat" xhtml_id="ab_hLat" value="--case when self.v_hLat is not null then sprintf ('%.6f', coalesce (self.v_hLat, 0.00)) else '' end" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (cast (self.v_hLat as varchar), '', null); ?>
		                  </td>
		                </tr>
		                <tr>
                      <th>
                          <vm:label for="ab_hLng" value="Longitude" />
                      </th>
		                  <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hLng" xhtml_id="ab_hLng" value="--case when self.v_hLng is not null then sprintf ('%.6f', coalesce (self.v_hLng, 0.00)) else '' end" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (cast (self.v_hLng as varchar), '', null); ?>
		                  </td>
		                </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hWeb" value="Web" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hWeb" xhtml_id="ab_hWeb" value="--self.v_hWeb" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hWeb, 'url:home', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hMail" value="Mail" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hMail" xhtml_id="ab_hMail" value="--self.v_hMail" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hMail, 'email:internet', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hPhone" value="Phone" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hPhone" xhtml_id="ab_hPhone" value="--self.v_hPhone" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hPhone, 'tel:home', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hMobile" value="Mobile" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hMobile" xhtml_id="ab_hMobile" value="--self.v_hMobile" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hMobile, 'tel:home,cell', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_hFax" value="Fax" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_hFax" xhtml_id="ab_hFax" value="--self.v_hFax" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_hFax, '', null); ?>
                      </td>
                    </tr>
                  </table>
                </div>
                  <div id="a_content_4" class="tabContent" style="display: none;">
                    <span class="type" style="display: none;">WORK</span>
                  <table class="form-body" cellspacing="0">
                    <tr>
                      <th width="25%">
                          <vm:label for="ab_bCountry" value="Country" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:data-list name="ab_bCountry" xhtml_id="ab_bCountry" value="--self.v_bCountry" sql="select '' as WC_NAME from WA_COUNTRY union select WC_NAME from WA_COUNTRY" key-column="WC_NAME" value-column="WC_NAME" xhtml_onchange="javascript: updateState(\'ab_bCountry\', \'ab_bState\');" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bCountry, 'country-name', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bState" value="State/Province" />
                      </th>
      		            <td>
                        <vm:if test="self.abAction <> 'view'">
                            <span id="span_ab_bState">
                                <script type="text/javascript">
                                OAT.MSG.attach(OAT, 'PAGE_LOADED', function (){updateState("ab_bCountry", "ab_bState", "<?V self.v_bState ?>", true);});
                                 </script>
                            </span>
                        </vm:if>
                          <?vsp self.viewField (self.v_bState, 'region', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bCity" value="City/Town" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bCity" xhtml_id="ab_bCity" value="--self.v_bCity" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bCity, 'locality', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bCode" value="Zip/Postal Code" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bCode" xhtml_id="ab_bCode" value="--self.v_bCode" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bCode, 'postal-code', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bAddress1" value="Address1" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bAddress1" xhtml_id="ab_bAddress1" value="--self.v_bAddress1" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bAddress1, 'street-address', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bAddress2" value="Address2" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bAddress2" xhtml_id="ab_bAddress2" value="--self.v_bAddress2" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bAddress2, 'extended-address', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bTzone" value="Time Zone" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:select-list name="ab_bTzone" xhtml_id="ab_bTzone">
                          <v:on-init>
                            <![CDATA[
                              declare x,y any;

                                  self.prepareTimeZone (x, y);
                              control.vsl_item_values := x;
                              control.vsl_items := y;
                              control.ufl_value := '0';
                            ]]>
                          </v:on-init>
                          <v:before-data-bind>
                              control.ufl_value := coalesce (self.v_bTzone, '0');
                          </v:before-data-bind>
                        </v:select-list>
                        </vm:if>
                          <?vsp self.viewField (self.viewTimeZone (self.v_bTzone), 'tz', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bLat" value="Latitude" />
                      </th>
		                  <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bLat" xhtml_id="ab_bLat" value="--case when self.v_bLat is not null then sprintf ('%.6f', coalesce (self.v_bLat, 0.00)) else '' end" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (cast (self.v_bLat as varchar), '', null); ?>
		                  </td>
		                </tr>
		                <tr>
                      <th>
                          <vm:label for="ab_bLng" value="Longitude" />
                      </th>
		                  <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bLng" xhtml_id="ab_bLng" value="--case when self.v_bLng is not null then sprintf ('%.6f', coalesce (self.v_bLng, 0.00)) else '' end" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (cast (self.v_bLng as varchar), '', null); ?>
		                  </td>
		                </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bIndustry" value="Industry" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:data-list name="ab_bIndustry" xhtml_id="ab_bIndustry" sql="select '' as WI_NAME from WA_INDUSTRY union select WI_NAME from WA_INDUSTRY" key-column="WI_NAME" value-column="WI_NAME">
		                      <v:before-data-bind>
			                      control.ufl_value := self.v_bIndustry;
		                      </v:before-data-bind>
		                    </v:data-list>
                        </vm:if>
                          <?vsp self.viewField (self.v_bIndustry, '', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_bOrganization" value="Organization" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bOrganization" xhtml_id="ab_bOrganization" value="--self.v_bOrganization" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bOrganization, 'org', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_bDepartment" value="Department" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bDepartment" xhtml_id="ab_bDepartment" value="--self.v_bDepartment" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bDepartment, '', null); ?>
                      </td>
                    </tr>
                    <tr class="contactType">
                      <th>
                          <vm:label for="ab_bJob" value="Job Title" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bJob" xhtml_id="ab_bJob" value="--self.v_bJob" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bJob, 'title', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bWeb" value="Web" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bWeb" xhtml_id="ab_bWeb" value="--self.v_bWeb" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bWeb, 'url:work', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bMail" value="Mail" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bMail" xhtml_id="ab_bMail" value="--self.v_bMail" fmt-function="AB.WA.utf2wide" xhtml_size="60" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bMail, 'email:internet', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bPhone" value="Phone" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bPhone" xhtml_id="ab_bPhone" value="--self.v_bPhone" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bPhone, 'tel:work', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bMobile" value="Mobile" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bMobile" xhtml_id="ab_bMobile" value="--self.v_bMobile" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bMobile, 'tel:work,cell', null); ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <vm:label for="ab_bFax" value="Fax" />
                      </th>
                      <td>
                        <vm:if test="self.abAction <> 'view'">
                            <v:text name="ab_bFax" xhtml_id="ab_bFax" value="--self.v_bFax" fmt-function="AB.WA.utf2wide" xhtml_size="30" />
                        </vm:if>
                          <?vsp self.viewField (self.v_bFax, '', null); ?>
                      </td>
                    </tr>
                  </table>
                </div>
                  <div id="a_content_5" class="tabContent" style="display: none;">
                    <table class="form-body" cellspacing="0">
                      <tr>
                        <td style="width: 60em; background-color: white;">
                          <table id="b_tbl" class="ODS_grid">
                            <thead>
                              <tr>
                                <th width="50%">Relationship</th>
                                <th width="50%">URI</th>
                                <vm:if test="self.abAction <> 'view'">
                                  <th class="action">Action</th>
                                </vm:if>
                              </tr>
                            </thead>
                      		  <![CDATA[
                      		    <script type="text/javascript">
                            <?vsp
                                declare owner_iri integer;

                                owner_iri := AB.WA.account_sioc_url (self.domain_id);
                                for (select fld1, fld2 from DB.DBA.WA_USER_INTERESTS (txt) (fld1 varchar, fld2 varchar) P where txt = self.v_relationships) do
                              {
                                  if (DB.DBA.is_empty_or_null (fld2))
                                    fld2 := owner_iri;
                              if (self.abAction <> 'view')
                                  {
                                    http (sprintf ('OAT.MSG.attach(OAT, "PAGE_LOADED", function(){TBL.createRow("b", null, {fld_1: {mode: 20, value: "%s", className: "_validate_"}, fld_2: {value: "%s", className: "_validate_ _uri_"}});});', fld1, fld2));
                                  } else {
                                    http (sprintf ('OAT.MSG.attach(OAT, "PAGE_LOADED", function(){TBL.createViewRow("b", {fld_1: {value: "%s"}, fld_2: {value: "%s"}});});', fld1, fld2));
                                  }
                                }
                            ?>
                      		    </script>
                      		  ]]>
                            <tr id="b_tr_no"><td colspan="<?V case when self.abAction='view' then 2 else 3 end ?>"><b>No Relationships</b></td></tr>
                          </table>
                        </td>
                        <vm:if test="self.abAction <> 'view'">
                          <td valign="top" nowrap="nowrap">
                            <img class="pointer" src="/ods/images/icons/add_16.png" border="0" alt="Add Relationship" title="Add Relationship" onclick="javascript: TBL.createRow('b', null, {fld_1: {mode: 20, className: '_validate_'}, fld_2: {className: '_validate_ _uri_'}});" />
                          </td>
                        </vm:if>
                      </tr>
                    </table>
                  </div>
                  <div id="a_content_6" class="tabContent" style="display: none;">
                    <fieldset>
                      <legend><b>ODS users</b></legend>
                      <table class="form-body" cellspacing="0">
                        <tr>
                          <td style="width: 90%; background-color: white;">
                            <table id="f_tbl" class="ODS_grid">
                              <thead>
                                <tr>
                                  <th width="100%">Value</th>
                                  <th class="action">Action</th>
                                </tr>
                              </thead>
                        		  <![CDATA[
                        		    <script type="text/javascript">
                                <?vsp
                                  declare N, L integer;
                                  declare acl_values any;

                                  L := 0;
                                  acl_values := split_and_decode (self.v_grants, 0, '\0\0,');
                                  for (N := 0; N < length (acl_values); N := N + 1)
                                  {
                                    L := 1;
                                    if (self.abAction <> 'view')
                                    {
                                      http (sprintf ('OAT.MSG.attach(OAT, "PAGE_LOADED", function(){TBL.createRow("f", null, {fld_1: {mode: 1, value: "%s", form: "F1"}});});', acl_values[N], 'U'));
                                    } else {
                                      http (sprintf ('OAT.MSG.attach(OAT, "PAGE_LOADED", function(){TBL.createViewRow("f", {fld_1: {value: "%s"}});});', acl_values[N]));
                                    }
                                  }
                                ?>
                        		    </script>
                        		  ]]>
                              <tr id="f_tr_no" style="display: <?V case when L=0 then '' else 'none' end ?>;"><td colspan="<?V case when self.abAction='view' then 1 else 2 end ?>"><b>No Shares</b></td></tr>
                        		</table>
                        	</td>
                          <vm:if test="self.abAction <> 'view'">
                            <td valign="top" nowrap="nowrap">
                              <img class="pointer" src="/ods/images/icons/add_16.png" border="0" alt="Add Share" title="Add Share" onclick="javascript: TBL.createRow('f', null, {fld_1: {mode: 1, form: 'F1'}});" />
                            </td>
                          </vm:if>
                        </tr>
                      </table>
                    </fieldset>
                    <fieldset>
                      <legend><b>WebID users</b></legend>
                    <table class="form-body" cellspacing="0">
                      <tr>
                        <td style="width: 90%; background-color: white;">
                            <table id="s_tbl" class="ODS_grid">
                              <thead>
                              <tr>
                                <th width="15%">Type</th>
                                <th>Value</th>
                                <th width="1%" nowrap="nowrap">ACL: (R)ead, (W)rite</th>
                                  <th class="action">Action</th>
                              </tr>
                            </thead>
                              <tbody id="s_tbody">
                                <tr id="s_tr_no"><td colspan="4"><b>No Shares</b></td></tr>
                      		  <![CDATA[
                      		    <script type="text/javascript">
                            <?vsp
                                    declare acl any;

                              acl := (select WAI_ACL from DB.DBA.WA_INSTANCE where WAI_ID = self.domain_id);
                              acl := case when isnull (acl) then vector () else deserialize (acl) end;
                                    DB.DBA.wa_aci_lines (acl);

                              acl := deserialize (self.v_acl);
                                    DB.DBA.wa_aci_lines (acl, self.abAction);
                           		    ?>
                           		    </script>
                           		  ]]>
                              </tbody>
                          </table>
                        </td>
                        <vm:if test="self.abAction <> 'view'">
                          <td valign="top" nowrap="nowrap">
                            <img class="pointer" src="/ods/images/icons/add_16.png" border="0" alt="Add Share" title="Add Share" onclick="javascript: TBL.createRow('s', null, {fld_1: {mode: 50, onchange: function(){TBL.changeCell50(this);}}, fld_2: {mode: 51, form: 'F1', tdCssText: 'white-space: nowrap;', className: '_validate_ _webid_'}, fld_3: {mode: 52, value: [1, 0, 0], tdCssText: 'width: 1%; white-space: nowrap; text-align: center;'}});" />
                          </td>
                        </vm:if>
                      </tr>
                    </table>
                    </fieldset>
                  </div>
                  <div id="a_content_7" class="tabContent" style="display: none;">
                    <table class="form-body" cellspacing="0">
              	      <?vsp if (length (self.v_certificate)) { ?>
                        <tr>
                          <th width="25%">
                            Subject
                          </th>
                          <td>
                      		  <?vsp
                		          http_value (get_certificate_info (2, cast(self.v_certificate as varchar), 0, ''));
                		        ?>
                          </td>
                        </tr>
                        <tr>
                          <th width="25%">
                            Agent ID
                          </th>
                          <td>
                      		  <?vsp
              		            http_value (ODS.ODS_API.SSL_WEBID_GET (cast(self.v_certificate as varchar)));
                		        ?>
                          </td>
                        </tr>
                        <tr>
                          <th width="25%">
                            Fingerprint
                          </th>
                          <td>
                      		  <?vsp
              		            http_value (get_certificate_info (6, cast(self.v_certificate as varchar), 0, ''));
                		        ?>
                          </td>
                        </tr>
             	        <?vsp } ?>
                      <tr>
                        <th width="25%" valign="top">
                          <vm:label for="ab_Certificate" value="Certificate" />
                        </th>
                        <td>
                          <vm:if test="self.abAction <> 'view'">
                            <v:textarea name="ab_Certificate" xhtml_id="ab_Certificate" null-value="" value="--self.v_certificate" xhtml_cols="70" xhtml_rows="20" />
                          </vm:if>
                          <?vsp self.viewField (self.v_certificate, null, null); ?>
                        </td>
                      </tr>
                    </table>
                  </div>
                  <div id="a_content_8" class="tabContent" style="display: none;">
              		  <?vsp
              		    declare vcard, qrcode any;

        		          vcard := AB.WA.export_vcard (self.domain_id, vector (self.v_id));
                      qrcode := ODS.ODS_API.qrcode (vcard, 120, 120, 3);
        		        ?>
                    <table class="form-body" cellspacing="0">
                      <tr>
                        <td align="center">
                    		  <?vsp
                            if (qrcode is not null)
	                            http (sprintf ('<img id="qrcode" src="data:image/jpg;base64,%s"/>', qrcode));
              		        ?>
                        </td>
                      </tr>
                      <tr>
                        <td align="center">
                          <b>vCard Contact Data</b>
                        </td>
                      </tr>
                    </table>
                  </div>
              </div>
            </div>
            <div class="new-form-footer">
                <v:button name="ab_save" action="simple" value="Save" enabled="--case when (self.abAction <> 'view') then 1 else 0 end" xhtml_class="form-button" xhtml_onclick="return validateInputs(this);">
                <v:on-post>
                  <![CDATA[
                      declare N, tmp any;

                      declare exit handler for SQLSTATE '*'
                      {
                        if (__SQL_STATE = 'TEST')
                        {
                        self.vc_error_message := AB.WA.test_clear (__SQL_MESSAGE);
                        self.vc_is_valid := 0;
                        return;
                      }
                      resignal;
                    };

                      self.saveData();

                    self.v_kind := cast (self.ab_kind.ufl_value as integer);
                    self.v_name := AB.WA.test (self.ab_name.ufl_value, vector('name', 'Name', 'class', 'varchar', 'type', 'varchar', 'minLength', 1, 'maxLength', 255));
                    self.v_tags := trim (self.ab_tags.ufl_value);
                    AB.WA.test (self.v_tags, vector ('name', 'Tags', 'class', 'tags'));
                    tmp := AB.WA.tags2vector (self.v_tags);
                    tmp := AB.WA.vector_unique (tmp);
                    self.v_tags := AB.WA.vector2tags (tmp);

                    declare dt datetime;

  	                dt := null;
                      if (not self.v_kind)
                      {
                        if (not is_empty_or_null (self.ab_birthday.ufl_value))
                        {
                          declare exit handler for sqlstate '*'
                          {
                          self.vc_error_message := sprintf ('An invalid birth date (%s) is specified', self.ab_birthday.ufl_value);
			                  self.vc_is_valid := 0;
           			        return;
			                };
                      dt := stringdate (self.ab_birthday.ufl_value);
			              }
                    }
                      DB.DBA.wa_aci_validate (DB.DBA.wa_aci_params (params));

                		self.v_hLat := null;
                		self.v_hLng := null;
                      if (not self.v_kind)
                      {
                        if (length (self.ab_hLat.ufl_value) and length (self.ab_hLng.ufl_value))
                        {
          			      self.v_hLat := atof (self.ab_hLat.ufl_value);
          			      self.v_hLng := atof (self.ab_hLng.ufl_value);
			              }
                    }
                		self.v_bLat := null;
                		self.v_bLng := null;
                      if (length (self.ab_bLat.ufl_value) and length (self.ab_bLng.ufl_value))
                      {
          			      self.v_bLat := atof (self.ab_bLat.ufl_value);
          			      self.v_bLng := atof (self.ab_bLng.ufl_value);
			              }

                      declare p_ext any;

                      p_ext := split_and_decode (self.ab_photo.ufl_value, 0, '\0\0.');
                      if (p_ext is not null and p_ext[length(p_ext)-1] is not null and lcase(p_ext[length(p_ext)-1]) not in ('jpg', 'png', 'gif'))
                      {
                        self.vc_error_message := 'Invalid image type. Please use jpg, png or gif for browser compatibility.';
                        self.vc_is_valid := 0;
                        self.v_photo_preview_path := '';
                        return;
                      }
                      if ((get_keyword ('ab_photo_file', e.ve_params, '') <> '') or
                          (get_keyword ('ab_photo_url', e.ve_params, '') <> '') or
                          ((self.v_photo_preview_path <> '') and (self.ab_photo.ufl_value <> ''))
                         )
                      {
                        declare rc, rc_org, pwd1 any;
                        declare dir, p_path, p_path_org, dotpos, up_cont any;
                        declare img, thumb any;

                        pwd1 := (select pwd_magic_calc (U_NAME, U_PASSWORD, 1) from DB.DBA.SYS_USERS where U_NAME = 'dav');
                        dir := rtrim (DB.DBA.DAV_HOME_DIR (AB.WA.account_name (self.account_id)), '/') || '/Images/';
                        up_cont := '';
                        if ((get_keyword ('ab_photo_source', e.ve_params) = '0') and (get_keyword ('ab_photo_file', e.ve_params, '') <> ''))
                        {
                          up_cont := get_keyword ('ab_photo_file', e.ve_params);
                        }
                        else if ((get_keyword ('ab_photo_source', e.ve_params) = '1') and (get_keyword ('ab_photo_url', e.ve_params, '') <> ''))
                        {
                          up_cont := AB.WA.dav_content (get_keyword ('ab_photo_url', e.ve_params));
                        }
                        p_path := self.ab_photo.ufl_value;
                        if (self.ab_photo.ufl_value not like '/%')
                          p_path := dir || p_path;

                        dotpos := REGEXP_INSTR (self.ab_photo.ufl_value, '\..{3}\$') - 1;
                        p_path_org := subseq (self.ab_photo.ufl_value, 0, dotpos) || '_org' || subseq (self.ab_photo.ufl_value, dotpos);
                        if (self.ab_photo.ufl_value not like '/%')
                          p_path_org := dir || p_path_org;

                        rc := DB.DBA.DAV_MAKE_DIR (dir, self.account_id, http_admin_gid (), '110100100N');
                        if (up_cont <> '')
                        {
                          rc_org := DB.DBA.DAV_RES_UPLOAD (p_path_org, up_cont, '', '110100100RR', self.account_id, http_nogroup_gid(), 'dav', pwd1);
                        }
                        else if (self.v_photo_preview_path <> '' and self.ab_photo.ufl_value <> '')
                        {
                          rc_org := DB.DBA.DAV_MOVE (self.v_photo_preview_path, p_path_org, 1, 'dav', pwd1);
                          self.v_photo_preview_path := '';
                        }
                        if (rc_org < 0)
                        {
                          self.vc_error_message := DAV_PERROR (rc_org);
                          self.vc_is_valid := 0;
                          return;
                        }
                        if (rc_org > 0)
                        {
                          declare exit handler for sqlstate '*'
                          {
                            sql_warning (__SQL_STATE, 'UIEP1', __SQL_MESSAGE);
                          };
                          img := null;
                          select blob_to_string (RES_CONTENT) into img from WS.WS.SYS_DAV_RES where RES_ID = DB.DBA.DAV_SEARCH_ID (p_path_org, 'R');
                          if (img is not null)
                          {
                            thumb := DB.DBA.WA_MAKE_THUMBNAIL_1 (img);
                            if (thumb is not null)
                              DAV_RES_UPLOAD (p_path, thumb, '', '110100100RR', self.account_id, http_nogroup_gid(), 'dav', pwd1);
                          }
                        }
                        if (p_path like '/DAV/%')
                          p_path := subseq (p_path, 4);
                        self.v_photo := p_path;
                      }
                      else
                      {
                        if (get_keyword ('ab_photo', e.ve_params, '') = '')
                          self.v_photo := '';
                      }

                    self.v_title         := trim (self.ab_title.ufl_value);
                    self.v_fName         := case when self.v_kind then '' else trim (self.ab_fName.ufl_value) end;
                    self.v_mName         := case when self.v_kind then '' else trim (self.ab_mName.ufl_value) end;
                    self.v_lName         := case when self.v_kind then '' else trim (self.ab_lName.ufl_value) end;
                    self.v_fullName      := trim (self.ab_fullName.ufl_value);
                    self.v_gender        := case when self.v_kind then '' else trim (self.ab_gender.ufl_value) end;
                    self.v_birthday      := dt;
                    self.v_iri           := trim (self.ab_iri.ufl_value);
                    self.v_foaf          := trim (self.ab_foaf.ufl_value);
                    self.v_mail          := case when self.v_kind then '' else trim (self.ab_mail.ufl_value) end;
                    self.v_web           := case when self.v_kind then '' else trim (self.ab_web.ufl_value) end;
                    self.v_icq           := case when self.v_kind then '' else trim (self.ab_icq.ufl_value) end;
                    self.v_skype         := case when self.v_kind then '' else trim (self.ab_skype.ufl_value) end;
                    self.v_aim           := case when self.v_kind then '' else trim (self.ab_aim.ufl_value) end;
                    self.v_yahoo         := case when self.v_kind then '' else trim (self.ab_yahoo.ufl_value) end;
                    self.v_msn           := case when self.v_kind then '' else trim (self.ab_msn.ufl_value) end;
                      self.v_hCountry      := case when self.v_kind then '' else trim (get_keyword ('ab_hCountry', e.ve_params)) end;
                      self.v_hState        := case when self.v_kind then '' else trim (self.v_hState) end;
                    self.v_hCity         := case when self.v_kind then '' else trim (self.ab_hCity.ufl_value) end;
                    self.v_hCode         := case when self.v_kind then '' else trim (self.ab_hCode.ufl_value) end;
                    self.v_hAddress1     := case when self.v_kind then '' else trim (self.ab_hAddress1.ufl_value) end;
                    self.v_hAddress2     := case when self.v_kind then '' else trim (self.ab_hAddress2.ufl_value) end;
                    self.v_hTzone        := case when self.v_kind then '' else trim (self.ab_hTzone.ufl_value) end;
                    self.v_hPhone        := case when self.v_kind then '' else trim (self.ab_hPhone.ufl_value) end;
                    self.v_hMobile       := case when self.v_kind then '' else trim (self.ab_hMobile.ufl_value) end;
                    self.v_hFax          := case when self.v_kind then '' else trim (self.ab_hFax.ufl_value) end;
                    self.v_hMail         := case when self.v_kind then '' else trim (self.ab_hMail.ufl_value) end;
                    self.v_hWeb          := case when self.v_kind then '' else trim (self.ab_hWeb.ufl_value) end;
                      self.v_bCountry      := trim (self.ab_bCountry.ufl_value);
                      self.v_bState        := trim (self.v_bState);
                    self.v_bCity         := trim (self.ab_bCity.ufl_value);
                    self.v_bCode         := trim (self.ab_bCode.ufl_value);
                    self.v_bAddress1     := trim (self.ab_bAddress1.ufl_value);
                    self.v_bAddress2     := trim (self.ab_bAddress2.ufl_value);
                    self.v_bTzone        := trim (self.ab_bTzone.ufl_value);
                    self.v_bPhone        := trim (self.ab_bPhone.ufl_value);
                    self.v_bMobile       := trim (self.ab_bMobile.ufl_value);
                    self.v_bFax          := trim (self.ab_bFax.ufl_value);
                    self.v_bIndustry     := trim (self.ab_bIndustry.ufl_value);
                    self.v_bOrganization := trim (self.ab_bOrganization.ufl_value);
                    self.v_bDepartment   := trim (self.ab_bDepartment.ufl_value);
                    self.v_bJob          := trim (self.ab_bJob.ufl_value);
                    self.v_bMail         := trim (self.ab_bMail.ufl_value);
                    self.v_bWeb          := trim (self.ab_bWeb.ufl_value);
                      self.v_certificate   := trim (self.ab_certificate.ufl_value);

                      self.v_category_id   := AB.WA.category_update (self.domain_id, get_keyword ('ab_category_name', e.ve_params));

                      self.v_id := AB.WA.contact_update
                      (
                      self.v_id,
                      self.domain_id,
                        self.v_category_id,
                      self.v_kind,
                      self.v_name,
                      self.v_title,
                      self.v_fName,
                      self.v_mName,
                      self.v_lName,
                      self.v_fullName,
                      self.v_gender,
                      self.v_birthday,
                      self.v_iri,
                      self.v_foaf,
                        self.v_photo,
                        self.v_interests,
                        self.v_relationships,
                      self.v_mail,
                      self.v_web,
                      self.v_icq,
                      self.v_skype,
                      self.v_aim,
                      self.v_yahoo,
                      self.v_msn,
                      self.v_hCountry,
                      self.v_hState,
                      self.v_hCity,
                      self.v_hCode,
                      self.v_hAddress1,
                      self.v_hAddress2,
                      self.v_hTzone,
                      self.v_hLat,
                      self.v_hLng,
                      self.v_hPhone,
                      self.v_hMobile,
                      self.v_hFax,
                      self.v_hMail,
                      self.v_hWeb,
                      self.v_bCountry,
                      self.v_bState,
                      self.v_bCity,
                      self.v_bCode,
                      self.v_bAddress1,
                      self.v_bAddress2,
                      self.v_bTzone,
                      self.v_bLat,
                      self.v_bLng,
                      self.v_bPhone,
                      self.v_bMobile,
                      self.v_bFax,
                      self.v_bIndustry,
                      self.v_bOrganization,
                      self.v_bDepartment,
                      self.v_bJob,
                      self.v_bMail,
                      self.v_bWeb,
                      self.v_tags
                    );
                      AB.WA.contact_update2 (self.v_id, self.domain_id, 'P_RELATIONSHIPS', self.v_relationships);
                      AB.WA.contact_update2 (self.v_id, self.domain_id, 'P_ACL', self.v_acl);
                      AB.WA.contact_update2 (self.v_id, self.domain_id, 'P_CERTIFICATE', self.v_certificate);
                      AB.WA.contact_share (self.account_id, self.v_id, self.v_grants, 1);

                    self.abAction := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
                <v:button action="simple" name="ab_edit" value="Edit" enabled="--case when (AB.WA.contact_rights (self.domain_id, self.v_id, self.account_rights, self.person_rights) = 'W') and (self.abAction = 'view') then 1 else 0 end" xhtml_class="form-button">
                  <v:on-post>
                    <![CDATA[
                      self.abAction := 'edit';
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                <v:button name="ab_cancel" action="simple" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.abAction := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>
            <script>
              <![CDATA[
                changeType($('ab_kind'));
              ]]>
            </script>
          </v:template>

            <v:template name="t7" type="simple" enabled="--case when (self.abAction = 'import') then 1 else 0 end">

              <v:template  name="t8" type="simple" enabled="-- case when (self.abStep = '1') then 1 else 0 end">
	            <div class="new-form-header">
	              <v:label format="%s" value="Import: Select source type"/>
	            </div>

	            <div class="new-form-body">
	              <table cellspacing="0">
	                <tr>
                      <th valign="top" width="45%">
	                    <v:label for="i_file" value="Source type"/>
	                  </th>
	                  <td nowrap="nowarap">
                        <label>
                          <v:radio-button name="i_source_0" xhtml_id="i_source_0" group-name="i_source" value="0" xhtml_onchange="javascript: destinationChange(this, {show: [\'imp_tr_0\', \'imp_tr_1\', \'imp_tr_2\'], exec: [iType]});">
	                      <v:before-render>
	                        <![CDATA[
	                          control.ufl_selected := either(lte(self.i_source, 0), 1, 0);
	                        ]]>
	                      </v:before-render>
	                    </v:radio-button>
                          <b>File</b>
                        </label>
                        <br />
                        <label>
                          <v:radio-button name="i_source_1" xhtml_id="i_source_1" group-name="i_source" value="1" xhtml_onchange="javascript: destinationChange(this, {show: [\'imp_tr_0\', \'imp_tr_1\', \'imp_tr_2\'], exec: [iType]});">
	                      <v:before-render>
	                        <![CDATA[
	                          control.ufl_selected := either(equ(self.i_source, 1), 1, 0);
	                        ]]>
	                      </v:before-render>
	                    </v:radio-button>
                          <b>WebDAV File Path</b>
                        </label>
                        <br />
                        <label>
                          <v:radio-button name="i_source_5" xhtml_id="i_source_5" group-name="i_source" value="5" xhtml_onchange="javascript: destinationChange(this, {hide: [\'imp_tr_0\', \'imp_tr_1\', \'imp_tr_2\']});">
                            <v:before-render>
                              <![CDATA[
                                control.ufl_selected := either (equ (self.i_source, 5), 1, 0);
                              ]]>
                            </v:before-render>
                          </v:radio-button>
                          <b>CardDAV Path</b>
                        </label>
                        <br />
                        <label>
                          <v:radio-button name="i_source_2" xhtml_id="i_source_2" group-name="i_source" value="2" xhtml_onchange="javascript: destinationChange(this, {show: [\'imp_tr_0\', \'imp_tr_1\', \'imp_tr_2\'], exec: [iType]});">
	                      <v:before-render>
	                        <![CDATA[
	                          control.ufl_selected := either(equ(self.i_source, 2), 1, 0);
	                        ]]>
	                      </v:before-render>
	                    </v:radio-button>
                          <b>URL</b>
                        </label>
                        <br />
                        <label>
                          <v:radio-button name="i_source_3" xhtml_id="i_source_3" group-name="i_source" value="3" xhtml_onchange="javascript: destinationChange(this, {hide: [\'imp_tr_0\', \'imp_tr_1\', \'imp_tr_2\']});">
                        <v:before-render>
                          <![CDATA[
                            control.ufl_selected := either(equ(self.i_source, 3), 1, 0);
                          ]]>
                        </v:before-render>
                      </v:radio-button>
                          <b>LDAP Server</b>
                        </label>
                        <br />
                        <vm:if test="not isnull (ODS.ODS_API.get_oauth_tok ('LinkedIn API'))">
                          <label>
                            <v:radio-button name="i_source_4" xhtml_id="i_source_4" group-name="i_source" value="4" xhtml_onchange="javascript: destinationChange(this, {hide: [\'imp_tr_0\', \'imp_tr_1\', \'imp_tr_2\']});">
                              <v:before-render>
                                <![CDATA[
                                  control.ufl_selected := either (equ (self.i_source, 4), 1, 0);
                                ]]>
                              </v:before-render>
                            </v:radio-button>
                            <b>LinkedIn Account</b>
                          </label>
                        </vm:if>
	                  </td>
	                </tr>
                    <tr id="imp_tr_0">
                      <th valign="top" width="45%">
	                    <v:label for="i_file" value="Content type"/>
	                  </th>
	                  <td nowrap="nowarap">
                        <label>
	                    <v:radio-button name="i_type_0" xhtml_id="i_type_0" group-name="i_type" value="0">
	                      <v:before-render>
	                        <![CDATA[
	                          control.ufl_selected := either(lte(self.i_type, 0), 1, 0);
	                        ]]>
	                      </v:before-render>
	                    </v:radio-button>
                          <b>vCard</b>
                        </label>
                        <br />
                        <label>
	                    <v:radio-button name="i_type_1" xhtml_id="i_type_1" group-name="i_type" value="1">
	                      <v:before-render>
	                        <![CDATA[
	                          control.ufl_selected := either(equ(self.i_type, 1), 1, 0);
	                        ]]>
	                      </v:before-render>
	                    </v:radio-button>
                          <b>FOAF</b>
                        </label>
                        <br />
                        <label>
	                    <v:radio-button name="i_type_2" xhtml_id="i_type_2" group-name="i_type" value="2">
	                      <v:before-render>
	                        <![CDATA[
	                          control.ufl_selected := either(equ(self.i_type, 2), 1, 0);
	                        ]]>
	                      </v:before-render>
	                    </v:radio-button>
                          <b>CSV</b>
                        </label>
	                  </td>
	                </tr>
	              </table>
                  <script type="text/javascript">
                    <![CDATA[
                      destinationChange($('i_source_0'), {show: ['imp_tr_0', 'imp_tr_1', 'imp_tr_2'], exec: [iType]});
                      destinationChange($('i_source_1'), {show: ['imp_tr_0', 'imp_tr_1', 'imp_tr_2'], exec: [iType]});
                      destinationChange($('i_source_5'), {hide: ['imp_tr_0', 'imp_tr_1', 'imp_tr_2']});
                      destinationChange($('i_source_2'), {show: ['imp_tr_0', 'imp_tr_1', 'imp_tr_2'], exec: [iType]});
                      destinationChange($('i_source_3'), {hide: ['imp_tr_0', 'imp_tr_1', 'imp_tr_2']});
                      destinationChange($('i_source_4'), {hide: ['imp_tr_0', 'imp_tr_1', 'imp_tr_2']});
                    ]]>
                  </script>
	            </div>

	            <div class="new-form-footer">
                  <v:button name="i1_next" action="simple" value="Next" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                        if (self.i_source_3.ufl_selected)
                        {
                          self.i_source := 3;
                          self.i_type   := 3;
                        }
                        else if (self.i_source_4.ufl_selected)
                        {
                          self.i_source := 4;
                          self.i_type   := 4;
                        }
                        else if (self.i_source_5.ufl_selected)
                        {
                          self.i_source := 5;
                          self.i_type   := 5;
                        }
                        else
                        {
                          if (self.i_source_0.ufl_selected)
                          {
                            self.i_source := 0;
                          }
                          else if (self.i_source_1.ufl_selected)
                          {
                            self.i_source := 1;
                          }
                          else if (self.i_source_2.ufl_selected)
                          {
                            self.i_source := 2;
                          }

                        if (self.i_type_0.ufl_selected)
                        {
	                      self.i_type := 0;
                        }
                        else if (self.i_type_1.ufl_selected)
                        {
	                      self.i_type := 1;
                        }
                        else if (self.i_type_2.ufl_selected)
                        {
	                      self.i_type := 2;
	                    }
                        }

                        self.abStep := '2';
                        AB.WA.push (self.abSteps, '1');
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
                  <v:button action="simple" name="i1_cancel" value="Cancel" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
	                    self.abAction := 'browse';
	                    self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	            </div>
	          </v:template>

              <v:template name="t10" type="simple" enabled="-- case when (self.abStep = '2') then 1 else 0 end">
                <v:after-data-bind>
                  <![CDATA[
                    declare params, names any;
                    declare token, result, url, my_sid, oauth_token, return_url any;

                    params := self.vc_page.vc_event.ve_params;
                    if (get_keyword ('oauth_verifier', params) is not null)
                    {
                      token := ODS.ODS_API.get_oauth_tok ('LinkedIn API');

                      my_sid := get_keyword ('my_sid', params);
                      url := OAUTH..sign_request ('GET', 'https://api.linkedin.com/uas/oauth/accessToken', sprintf ('oauth_token=%U&oauth_verifier=%U', get_keyword ('oauth_token', params), get_keyword ('oauth_verifier', params)), token, my_sid, 1);
                      result := http_get (url);
                      my_sid := OAUTH..parse_response (my_sid, token, result);

                      url := OAUTH..sign_request ('GET', 'https://api.linkedin.com/v1/people/~/connections', '', token, my_sid, 1);
                      result := http_get (url);
                      OAUTH..session_terminate (my_sid);

                      self.abStep := '5';
                      self.i_source := 4;
                      self.i_type   := 4;
                      self.i_data := result;
                      self.i_number := AB.WA.import_count (self.i_type, self.i_data);
                      AB.WA.push (self.abSteps, '1');

                      self.vc_data_bind(e);
                    }
                    else if (self.i_source = 4)
                    {
                      token := ODS.ODS_API.get_oauth_tok ('LinkedIn API');

                      my_sid := md5 (datestring (now ()));
                      return_url := sprintf ('%shome.vspx?my_sid=%U&sid=%s&realm=%s&action=%s&step=%s', AB.WA.ab_url (self.domain_id), my_sid, self.sid, self.realm, self.abAction, self.abStep);
                      url := OAUTH..sign_request ('GET', 'https://api.linkedin.com/uas/oauth/requestToken', sprintf ('oauth_callback=%U', return_url), token, null, 1);
                      result := http_get (url);
                      my_sid := OAUTH..parse_response (my_sid, token, result);

                      OAUTH..set_session_data (my_sid, vector ());
                      oauth_token := OAUTH..get_auth_token (my_sid);
                      url := sprintf ('https://www.linkedin.com/uas/oauth/authenticate?oauth_token=%U', oauth_token);
                      self.vc_redirect (url);
                    }
                  ]]>
                </v:after-data-bind>

	            <div class="new-form-header">
	              <v:label format="%s" value="Import: Source parameters"/>
	            </div>

	            <div class="new-form-body">
	              <table cellspacing="0">
                  <vm:if test="self.i_source = 0">
		                <tr>
		                  <th width="30%">
                          <label for="f_file">Select file <?V case when self.i_type = 0 then '(.vcf)' when self.i_type = 2 then '(.csv)' end ?></label>
		                  </th>
		                  <td>
                          <input type="file" name="f_file" size="60" />
		                  </td>
		                </tr>
                  </vm:if>
                  <vm:if test="self.i_source = 1">
		                <tr>
		                  <th width="30%">
                          <label for="f_dav">Select WebDAV file</label>
		                  </th>
		                  <td>
                          <v:text name="f_dav" xhtml_id="f_dav" value="" xhtml_size="60" />
                          <input type="button" value="Browse..." onclick="davBrowse ('f_dav');" />
                       		  <![CDATA[
                    		    <script type="text/javascript">
                              OAT.Loader.load(['dav'], function(){OAT.WebDav.init(davOptions);});
                    		    </script>
                  			    ]]>
		                  </td>
		                </tr>
                  </vm:if>
                    <vm:if test="self.i_source = 2 or self.i_source = 5">
                    <tr>
		                  <th width="30%">
                          <label for="f_uri" ><?V case when self.i_source = 2 then 'Select File URL ' else 'Select CalDAV Path' end ?><?V case when self.i_type = 0 then '(.vcf)' when self.i_type = 2 then '(.csv)' end ?></label>
                      </th>
                      <td>
                          <v:text name="f_uri" xhtml_id="f_uri" value="--''" xhtml_size="60" />
                      </td>
                    </tr>
                      <vm:if test="self.i_source = 5">
                        <tr>
                          <th>
                            <label for="f_uUser">User</label>
                          </th>
                          <td>
                            <v:text name="f_uUser" xhtml_id="f_uUser" null-value="--self.i_uUser" value="--''" xhtml_size="30">
                               <v:before-render>
                                <![CDATA[
                                  control.ufl_value := self.i_uUser;
                                ]]>
                              </v:before-render>
                            </v:text>
                          </td>
                        </tr>
                        <tr>
                          <th>
                            <label for="f_uPassword">Password</label>
                          </th>
                          <td>
                            <v:text name="f_uPassword" xhtml_id="f_uPassword" type="password" null-value="--self.i_uPassword" value="--''" xhtml_size="30">
                               <v:before-render>
                                <![CDATA[
                                  control.ufl_value := self.i_uPassword;
                                ]]>
                              </v:before-render>
                            </v:text>
                          </td>
                        </tr>
                      </vm:if>
                      <vm:if test="self.i_type = 1">
                        <tr>
                          <th>
                            <label for="i_depth">Grab Depth</label>
                          </th>
                          <td>
                            <v:select-list name="i_depth" xhtml_id="i_depth">
                              <v:item value="0" name="0" />
                              <v:item value="1" name="1" />
                              <v:item value="2" name="2" />
                              <v:before-data-bind>
                                <![CDATA[
                                  control.ufl_value := self.i_contentDepth;
                                  control.vc_data_bound := 1;
                                ]]>
                              </v:before-data-bind>
                            </v:select-list>
                          </td>
                        </tr>
                        <tr>
                          <th>
                            <label for="i_limit">Maximum Entity Count</label>
                          </th>
                          <td>
                            <v:text name="i_limit" xhtml_id="i_limit" value="--self.i_contentLimit" xhtml_size="3" />
                          </td>
                        </tr>
                        <tr>
                          <th>
                            <label for="i_follow">Follow Property</label>
                          </th>
                          <td>
                            <v:select-list name="i_follow" xhtml_id="i_follow">
                              <v:item value="http://xmlns.com/foaf/0.1/knows" name="foaf:knows" />
                              <v:item value="http://www.w3.org/2002/07/owl#sameAs" name="owl:sameAs" />
                              <v:item value="http://www.w3.org/2000/01/rdf-schema#seeAlso" name="rdfs:seeAlso" />
                              <v:item value="http://www.w3.org/2000/01/rdf-schema#isDefineBy" name="rdfs:isDefineBy" />
                              <v:before-data-bind>
                                <![CDATA[
                                  control.ufl_value := self.i_contentFollow;
                                  control.vc_data_bound := 1;
                                ]]>
                              </v:before-data-bind>
                            </v:select-list>
                          </td>
                        </tr>
                      </vm:if>
                  </vm:if>
                  <vm:if test="self.i_source = 3">
                      <vm:if test="exists (select 1 from LDAP..LDAP_SERVERS where LS_USER_ID = self.account_id)">
                    <tr>
                      <th width="30%">
                          <label for="f_lName">LDAP server</label>
                      </th>
              	      <td>
              	        <v:data-list name="f_lName"
                                       xhtml_id="f_lName"
              	                     value="--self.i_lName"
              	                     key-column="LS_NAME"
              	                     value-column="LS_NAME"
                                     sql="select '' as LS_NAME from SYS_USERS where U_ID = 0 union all select LS_NAME from LDAP..LDAP_SERVERS where LS_USER_ID = self.account_id"
              		                   auto-submit="1">
                   		    <v:after-data-bind>
      		                  <![CDATA[
                                if (e.ve_initiator = control)
                                {
                    		        self.i_lName := get_keyword (control.vc_get_name(), e.ve_params);
                    		        control.ufl_value := self.i_lName;
                                  if (self.i_lName <> '')
                                  {
                      		        select LS_HOST,
                                         LS_PORT,
                                         LS_BASE_DN,
                                         LS_BIND_DN,
                                         LS_PASSWORD,
                                         deserialize (LS_MAPS)
                      		          into self.i_lHost,
                      		               self.i_lPort,
                      		               self.i_lBase_dn,
                      		               self.i_lBind_dn,
                      		               self.i_lPassword,
                      		               self.i_lMaps
                                    from LDAP..LDAP_SERVERS
                      		         where LS_NAME = self.i_lName
                                     and LS_USER_ID = self.account_id;
                                  self.i_maps := self.i_lMaps;
                      		      }
                          		}
      		                    control.vs_set_selected ();
      		                  ]]>
      		                </v:after-data-bind>
              	        </v:data-list>
              	      </td>
              	    </tr>
                      </vm:if>
                    <tr>
		                  <th width="30%">
                          <label for="f_lHost">Host URL</label>
                      </th>
                      <td>
                          <v:text name="f_lHost" xhtml_id="f_lHost" null-value="--''" value="" xhtml_size="70">
                   		    <v:before-render>
      		                  <![CDATA[
                  		        control.ufl_value := self.i_lHost;
      		                  ]]>
      		                </v:before-render>
                        </v:text>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <label for="f_lPort">Host port</label>
                      </th>
                      <td>
                          <v:text name="f_lPort" xhtml_id="f_lPort" null-value="--''" value="" xhtml_size="10">
                   		    <v:before-render>
      		                  <![CDATA[
                  		        control.ufl_value := self.i_lPort;
      		                  ]]>
      		                </v:before-render>
                        </v:text>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <label for="f_lBase_dn">Base DN</label>
                      </th>
                      <td>
                          <v:text name="f_lBase_dn" xhtml_id="f_lBase_dn" null-value="--''" value="" xhtml_size="70">
                   		    <v:before-render>
      		                  <![CDATA[
                  		        control.ufl_value := self.i_lBase_dn;
      		                  ]]>
      		                </v:before-render>
                        </v:text>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <label for="f_lBind_dn">Bind DN</label>
                      </th>
                      <td>
                          <v:text name="f_lBind_dn" xhtml_id="f_lBind_dn" null-value="--''" value="" xhtml_size="70">
                   		    <v:before-render>
      		                  <![CDATA[
                  		        control.ufl_value := self.i_lBind_dn;
      		                  ]]>
      		                </v:before-render>
                        </v:text>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <label for="f_lPassword">Password</label>
                      </th>
                      <td>
                          <v:text name="f_lPassword" xhtml_id="f_lPassword" type="password" null-value="--self.i_lPassword" value="--''" xhtml_size="30">
                   		    <v:before-render>
      		                  <![CDATA[
                  		        control.ufl_value := self.i_lPassword;
      		                  ]]>
      		                </v:before-render>
                        </v:text>
                      </td>
                    </tr>
                    <tr>
                      <th>
                          <label for="f_lSearch">Search string</label>
                      </th>
                      <td>
                          <v:text name="f_lSearch" xhtml_id="f_lSearch" null-value="--''" value="--self.i_lSearch" xhtml_size="70" />
                      </td>
                    </tr>
                  </vm:if>
	              </table>
	            </div>

	            <div class="new-form-footer">
                  <v:button action="simple" name="i2_back" value="Back" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                      self.abStep := AB.WA.pop (self.abSteps);
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
                  <v:button action="simple" name="i2_next" value="Next" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                        declare tmp, host varchar;
                        declare params any;

                        declare exit handler for SQLSTATE '*'
                        {
                          if (__SQL_STATE = 'TEST')
                          {
                          self.vc_error_message := AB.WA.test_clear(__SQL_MESSAGE);
                          self.vc_is_valid := 0;
                          return;
                        }
                        resignal;
                      };

                        params := e.ve_params;
                        if (self.i_source = 0)
                        {
                          self.i_data := trim(get_keyword ('f_file', params, ''));
                          if (is_empty_or_null (self.i_data))
                            signal ('TEST', 'Please select file from your local file system!');
                        }
                        else if (self.i_source = 1)
                        {
	                      self.f_dav.ufl_value := trim(self.f_dav.ufl_value);
                          tmp := http_physical_path_resolve (replace (self.f_dav.ufl_value, ' ', '%20'));
                          self.i_data := AB.WA.dav_content (AB.WA.host_url () || tmp, AB.WA.account_name (self.account_id));
                          if (isnull(self.i_data))
                            signal ('TEST', 'Bad import source!');
                        }
                        else if (self.i_source = 2)
                        {
                        self.f_uri.ufl_value := trim(self.f_uri.ufl_value);
                          if (is_empty_or_null (self.f_uri.ufl_value))
                            signal ('TEST', 'Please select correct URL address!');

                          if (self.i_type = 1)
                          {
                            AB.WA.test (self.i_limit.ufl_value, vector('name', 'Grab Limit', 'class', 'integer', 'minValue', 1, 'maxValue', 100));
                            self.i_contentDepth := atoi (self.i_depth.ufl_value);
                            self.i_contentLimit := atoi (self.i_limit.ufl_value);
                            self.i_contentFollow := self.i_follow.ufl_value;
                          }
                        self.i_data := self.f_uri.ufl_value;
                        }
                        else if (self.i_source = 3)
                        {
                        self.i_lName := trim (self.f_lName.ufl_value);
                        self.i_lHost := trim (self.f_lHost.ufl_value);
                        self.i_lPort := trim (self.f_lPort.ufl_value);
                        self.i_lBase_dn := trim (self.f_lBase_dn.ufl_value);
                        self.i_lBind_dn := trim (self.f_lBind_dn.ufl_value);
                        self.i_lPassword := trim (self.f_lPassword.ufl_value);
                        self.i_lSearch := trim (self.f_lSearch.ufl_value);
                        AB.WA.test (self.i_lHost, vector('name', 'LDAP server host', 'class', 'varchar', 'canEmpty', 0));
                        AB.WA.test (self.i_lPort, vector('name', 'LDAP server port', 'class', 'varchar', 'canEmpty', 0));
                        AB.WA.test (self.i_lBase_dn, vector('name', 'Base DN', 'class', 'varchar', 'canEmpty', 0));
                        AB.WA.test (self.i_lBind_dn, vector('name', 'Bind DN', 'class', 'varchar', 'canEmpty', 0));

                      	declare exit handler for sqlstate '*'
                      	{
                            signal ('TEST', 'Unknown LDAP server. Please, check parameters!');
                      	};
                        connection_set ('LDAP_VERSION', 2);
                      	host := 'ldap://' || self.i_lHost || ':' || self.i_lPort;
                        self.i_data := ldap_search (host, 0, self.i_lBase_dn, self.i_lSearch, self.i_lBind_dn, self.i_lPassword);
	                    }
                        else if (self.i_source = 5)
                        {
                          self.i_uUser := trim (self.f_uUser.ufl_value);
                          self.i_uPassword := trim (self.f_uPassword.ufl_value);
                          self.f_uri.ufl_value := trim (self.f_uri.ufl_value);
                          if (is_empty_or_null (self.f_uri.ufl_value))
                            signal ('TEST', 'Please select correct URL address!');

                          if (not AB.WA.import_CardDAV_check (self.f_uri.ufl_value, vector ('user', self.i_uUser, 'password', self.i_uPassword), 1))
                            signal ('TEST', 'Bad CardDAV source!');

                          self.i_data := self.f_uri.ufl_value;
                        }

                        self.i_number := 0;
                        if (self.i_type = 1)
                        {
                          AB.WA.ab_graph_delete (self.i_iri);
                          self.i_iri := AB.WA.ab_graph_create ();
                          self.i_Items := AB.WA.import_foaf_content (self.i_data, vector ('contentType', case when (self.i_source = 2) then 1 else 0 end, 'contentIRI', self.i_iri, 'contentDepth', self.i_contentDepth, 'contentLimit', self.i_contentLimit, 'contentFollow', self.i_contentFollow));

                          self.i_number := length (self.i_Items);
                      }
                        else if (self.i_type = 2)
                        {
                        self.i_data := replace (self.i_data, '\015\012', '\012');
                        self.i_data := replace (self.i_data, '\012\015', '\012');
                        self.i_data := replace (self.i_data, '\015', '\012');
                        self.i_data := replace (self.i_data, '\012 ', '');
                        self.i_data := split_and_decode (self.i_data, 0, '\0\0\n');

                          self.i_number := AB.WA.import_count (self.i_type, self.i_data);
                      }
                        else if (self.i_type = 5)
                        {
                          self.i_number := AB.WA.import_CardDAV_count (self.f_uri.ufl_value, vector ('user', self.i_uUser, 'password', self.i_uPassword), 1);
                        }
                        else
                        {
                          self.i_number := AB.WA.import_count (self.i_type, self.i_data);
                        }
                        if (self.i_number = 0)
                          signal ('TEST', 'Import target data not found!<>');

                        -- next step
                        if ((self.i_type = 0) or (self.i_type = 5))
                        {
                          self.abStep := '5';
                        }
                        else if (self.i_type = 1)
                        {
                          self.abStep := '3';
                        }
                        else
                        {
                        self.abStep := '4';
                        }

                        AB.WA.push (self.abSteps, '2');
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
                  <v:button action="simple" name="i2_cancel" value="Cancel" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                        self.resetImport (0);
	                    self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	            </div>
	          </v:template>

              <v:template name="t11" type="simple" enabled="-- case when (self.abStep = '3') then 1 else 0 end">
	            <div class="new-form-header">
                  Import: Select persons
              </div>

              <div class="new-form-mapping">
                  <table class="ODS_grid" style="border: 0px">
                    <thead>
                    <tr>
                        <th class="checkbox">
                          <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item', true)" />
                      </th>
                      <th>Name</th>
                      <th>Mail</th>
                      <th>Comment</th>
                        <th class="checkbox last-child" style="border-width: 0px 0px 1px 0px;">
                          <input type="checkbox" name="cb_all_ping" value="Select All" onclick="selectAllCheckboxes(this, 'cb_ping')" />
                        </th>
                        <th class="action">Ping</th>
                        <th class="action">Action</th>
                    </tr>
                  </thead>
                <?vsp
                      foreach (any item in self.i_Items) do
                    {
                ?>
                    <tr class="<?V case when (item[0] = 1) then 'tr_select' else '' end ?>">
                      <td class="checkbox">
                      <?vsp
                          if (item[0] = 0)
                            http (sprintf ('<input type="checkbox" name="cb_item" value="%s" onclick="selectCheck(this, \'cb_item\', true)" />', item[1]));
                      ?>
              		  </td>
              		  <td>
                        <?V AB.WA.utf2wide (item[2]) ?>
              		  </td>
              		  <td>
                        <?V item[3] ?>
              		  </td>
              		  <td>
                      <?vsp
                          if (item[0] = 1)
                          {
                          http ('FOAF Owner');
                            http (sprintf ('<input type="hidden" name="cb_item" value="%s" />', item[1]));
                        }
                      ?>
              		  </td>
                      <td width="1%" colspan="2">
                        <?vsp
                          if (item[1] not like 'nodeID://%')
                            http (sprintf ('<input type="checkbox" name="cb_ping" value="%s" onclick="selectCheck(this, \'cb_ping\')" />', item[1]));
                        ?>
                      </td>
              		  <td>
                      <?vsp
                          if (not is_empty_or_null (item[3]))
                            http (self.windowOpen (sprintf ('invite.vspx?name=%U&mail=%U', item[2], item[3]), 'invite', item[2]));
                      ?>
              		  </td>
                  </tr>
                <?vsp
                    }
                ?>
                </table>
              </div>

              <div class="new-form-footer">
                  <v:button action="simple" name="i3_back" value="Back" xhtml_class="form-button">
                  <v:on-post>
                    <![CDATA[
                      self.abStep := AB.WA.pop (self.abSteps);
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                  <v:button action="simple" name="i3_next" value="Next" xhtml_class="form-button">
                  <v:on-post>
                    <![CDATA[
                      declare N integer;
                      declare params any;

                      params := e.ve_params;
                        self.i_contentItems := vector ();
                        self.i_contentPings := vector ();
                      for (N := 0; N < length (params); N := N + 4)
                      {
                        if (params[N] = 'cb_item')
                            self.i_contentItems := vector_concat (self.i_contentItems, vector (vector (params[N+1])));
                          else if (params[N] = 'cb_ping')
                            self.i_contentPings := vector_concat (self.i_contentPings, vector (params[N+1]));
                      }

                        self.i_number := length (self.i_contentItems);
                        if (self.i_number)
                        {
                          self.abStep := '5';
                          if ((self.i_type = 2) or (self.i_type = 3))
                            self.abStep := '4';

                          AB.WA.push (self.abSteps, '3');
                        }
                        else
                        {
                          self.resetImport (0);
                          self.abAction := 'import';
                      }
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                  <v:button action="simple" name="i3_cancel" value="Cancel" xhtml_class="form-button">
                  <v:on-post>
                    <![CDATA[
                        self.resetImport (0);
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
              </div>
            </v:template>

              <v:template name="t12" type="simple" enabled="-- case when (self.abStep = '4') then 1 else 0 end">
              <div class="new-form-header">
	              <v:label format="%s" value="Import: Mapping"/>
	            </div>
	            <div class="new-form-mapping">
              <vm:if test="self.i_type = 2">
                    <table class="ODS_grid" style="border: 0px">
                      <thead>
                    <tr>
                      <th>CSV Column</th>
                      <th>Contact Property</th>
                    </tr>
                  </thead>
                  <tr>
                  </tr>
                  <?vsp
                    declare N, M integer;
                        declare data, options any;

                        options := LDAP..contact_fields ();
                      for (N := 0; N < 1; N := N + 2)
                      {
                      data := split_and_decode (self.i_data [N], 0, '\0\0,');
                        for (M := 0; M < length (data); M := M + 1)
                        {
              	  ?>
              	  <tr>
              	    <td>
              		    <?V trim (data[M], '"') ?>
              		  </td>
                        <td nowrap="nowrap">
              		    <?vsp
                            self.render_select (options, cast (M as varchar));
              		    ?>
              		  </td>
                  </tr>
              	  <?vsp
              	      }
                    }
                  ?>
                </table>
              </vm:if>
              <vm:if test="self.i_type = 3">
                    <table id="ldap" class="ODS_grid" style="border: 0px">
                      <thead>
                    <tr>
                      <th>LDAP Property</th>
                      <th>Contact Property</th>
                      <th>Sample Data (based on first record)</th>
                    </tr>
                  </thead>
                  <tr>
                  </tr>
                  <?vsp
                      declare L, N, M integer;
                        declare data, options any;

                        options := LDAP..contact_fields ();
                      for (N := 0; N < length (self.i_data); N := N + 2)
                      {
                        if (self.i_data [N] = 'entry')
                        {
              	        data := self.i_data [N+1];
                            if (isnull (self.i_lMaps))
                            {
                            for (M := 0; M < length (data); M := M + 2)
                            {
              	  ?>
              	  <tr>
              	    <td>
              		    <?V data[M] ?>
              		  </td>
                        <td nowrap="nowrap">
              		    <?vsp
                            self.render_select (options, data[M]);
              		    ?>
              		  </td>
              		  <td>
              		    <?V substring (case when isstring (data[M+1]) then data[M+1] else data[M+1][0] end, 1, 50) ?>
              		  </td>
                  </tr>
              	  <?vsp
                        }
                        goto _end;
                          } else {
                            for (M := 0; M < length (self.i_lMaps); M := M + 2)
                            {
                    ?>
                    <tr>
                      <td>
                        <?V self.i_lMaps[M] ?>
                      </td>
                        <td nowrap="nowrap">
                        <?vsp
                            self.render_select (options, self.i_lMaps[M]);
                        ?>
                      </td>
                      <td>
                        <?vsp
                          for (L := 0; L < length (data); L := L + 2)
                          {
                            if (data[L] = self.i_lMaps[M])
                              http (substring (case when isstring (data[L+1]) then data[L+1] else data[L+1][0] end, 1, 50));
                          }
                        ?>
                      </td>
                    </tr>
                    <?vsp
                            }
                            goto _end;
                          }
              	      }
                    }
                  _end:;
                  ?>
                </table>
              </vm:if>
	            </div>
              <div class="new-form-mapping2">
                  <v:button action="simple" name="default" value="Default" xhtml_class="form-button" xhtml_style="margin: 5px 0px 0px 0px;">
                  <v:on-post>
                    <![CDATA[
                      if (self.i_type = 2) {
                        declare N, M integer;
                        declare tmp, data any;

                        tmp := vector (
                          'Title',                'P_TITLE',
                          'First Name',           'P_FIRST_NAME',
                          'Middle Name',          'P_MIDDLE_NAME',
                          'Last Name',            'P_LAST_NAME',
                          'Gender',               'P_GENDER',
                          'Birthday',             'P_BIRTHDAY',
                          'Company',              'P_B_ORGANIZATION',
                          'Job Title',            'P_B_JOB',
                          'Business Street',      'P_B_ADDRESS1',
                          'Business Street 2',    'P_B_ADDRESS2',
                          'Business City',        'P_B_CITY',
                          'Business State',       'P_B_STATE',
                          'Business Postal Code', 'P_B_CODE',
                          'Business Country',     'P_B_COUNTRY',
                          'Business Phone',       'P_B_PHONE',
                          'Business Fax',         'P_B_FAX',
                          'Home Street',          'P_H_ADDRESS1',
                          'Home Street 2',        'P_H_ADDRESS2',
                          'Home City',            'P_H_CITY',
                          'Home State',           'P_H_STATE',
                          'Home Postal Code',     'P_H_CODE',
                          'Home Country',         'P_H_COUNTRY',
                          'Home Phone',           'P_H_PHONE',
                          'Home Fax',             'P_H_FAX',
                          'E-mail Address',       'P_MAIL',
                          'E-mail 2 Address',     'P_H_MAIL',
                          'E-mail 3 Address',     'P_B_MAIL');

                          if (length (self.i_data))
                          {
                          self.i_maps := vector ();
                          data := split_and_decode (self.i_data [N], 0, '\0\0,');
                            for (N := 0; N < length (data); N := N + 1)
                            {
                            for (M := 0; M < length (tmp); M := M + 2)
                                if (trim (data[N], '"') = tmp[M])
                                {
                                self.i_maps := vector_concat (self.i_maps, vector (cast (N as varchar), tmp[M+1]));
                                goto _next;
                              }
                          _next:;
                          }
                        }
                      }

                      if (self.i_type = 3)
                          if (isnull (self.i_lMaps))
                          {
                          self.i_maps := vector (
                          'uid',  'P_NAME',
                          'cn',   'P_FULL_NAME',
                          'mail', 'P_MAIL');
                        } else {
                          self.i_maps := self.i_lMaps;
                        }

                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                  <v:button action="simple" name="reset" value="Reset" xhtml_class="form-button" xhtml_style="margin: 5px 5px 0px 0px;">
                  <v:on-post>
                    <![CDATA[
                      self.i_maps := null;
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
              </div>
	            <div class="new-form-footer">
                  <v:button action="simple" name="i4_back" value="Back" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                      self.abStep := AB.WA.pop (self.abSteps);
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
                  <v:button action="simple" name="i4_next" value="Next" xhtml_class="form-button">
                  <v:on-post>
                    <![CDATA[
                      declare N integer;
                      declare params any;

                      params := e.ve_params;
                      self.i_maps := vector ();
                      for (N := 0; N < length (params); N := N + 2)
                        {
                        if (params[N] like 'sel_%' and params[N+1] <> 'skip')
                          self.i_maps := vector_concat (self.i_maps, vector (substring (params[N], 5, length (params[N])), params[N+1]));
                        }
                        self.abStep := '5';
                        AB.WA.push (self.abSteps, '4');
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                  <v:button action="simple" name="i4_cancel" value="Cancel" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                        self.resetImport (0);
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
	            </div>
              <script>
                <![CDATA[
                  coloriseTable('ldap');
                ]]>
              </script>
	          </v:template>

              <v:template name="t14" type="simple" enabled="-- case when (self.abStep = '5') then 1 else 0 end">
	            <div class="new-form-header">
	              <v:label format="%s" value="Import: Options"/>
	            </div>

	            <div class="new-form-body">
	              <table id="progressHide" cellspacing="0">
	                <tr>
	                  <th>
                      <v:label for="i_tags" value="Tags (comma-separated)" />
	                  </th>
	                  <td>
                      <v:text name="i_tags" value="--self.v_tag" xhtml_class="textbox" xhtml_size="60" />
	                  </td>
	                </tr>
                    <?vsp self.myTags ('i_tags'); ?>
                  <tr>
                    <th valign="top">
                        Sharing
                      </th>
                      <td>
                        <fieldset>
                          <legend><b>ODS users</b></legend>
                          <table class="form-body" cellspacing="0">
                            <tr>
                              <td style="width: 90%; background-color: white;">
                                <table id="f_tbl" class="ODS_grid">
                                  <thead>
                                    <tr>
                                      <th width="100%">Value</th>
                                      <th class="action">Action</th>
                                    </tr>
                                  </thead>
                                  <tr id="f_tr_no"><td colspan="2"><b>No Shares</b></td></tr>
                            		</table>
                            	</td>
                              <td valign="top" nowrap="nowrap">
                                <img class="pointer" src="/ods/images/icons/add_16.png" border="0" alt="Add Share" title="Add Share" onclick="javascript: TBL.createRow('f', null, {fld_1: {mode: 1, form: 'F1', tdCssText: 'white-space: nowrap;'}});" />
                              </td>
                            </tr>
                          </table>
                        </fieldset>
                        <fieldset>
                          <legend><b>WebID users</b></legend>
                          <table class="form-body" cellspacing="0">
                            <tr>
                              <td style="width: 90%; background-color: white;">
                                <table class="ODS_grid">
                                  <thead>
                                    <tr>
                                      <th width="15%">Type</th>
                                      <th>Value</th>
                                      <th width="1%" nowrap="nowrap">ACL: (R)ead, (W)rite</th>
                                      <th class="action">Action</th>
                                    </tr>
                                  </thead>
                                  <tbody id="s_tbody">
                                    <tr id="s_tr_no"><td colspan="4"><b>No Shares</b></td></tr>
                            		  <![CDATA[
                            		    <script type="text/javascript">
                                    <?vsp
                                        declare acl any;

                                      acl := (select WAI_ACL from DB.DBA.WA_INSTANCE where WAI_ID = self.domain_id);
                                      acl := case when isnull (acl) then vector () else deserialize (acl) end;
                                        DB.DBA.wa_aci_lines (acl);
                                    ?>
                            		    </script>
                            		  ]]>
                                  </tbody>
                            		</table>
                            	</td>
                              <td valign="top" nowrap="nowrap">
                                <img class="pointer" src="/ods/images/icons/add_16.png" border="0" alt="Add Share" title="Add Share" onclick="javascript: TBL.createRow('s', null, {fld_1: {mode: 50, onchange: function(){TBL.changeCell50(this);}}, fld_2: {mode: 51, form: 'F1', tdCssText: 'white-space: nowrap;', className: '_validate_ _webid_'}, fld_3: {mode: 52, value: [1, 0, 0], tdCssText: 'width: 1%; white-space: nowrap; text-align: center;'}});" />
                              </td>
                            </tr>
                          </table>
                        </fieldset>
                      </td>
                    </tr>
                    <tr>
                      <th valign="top">
                        Duplicate entries mode
                      </th>
                      <td>
                        <label>
                          <?vsp http(sprintf('<input type="radio" name="i_validationMode" id="i_validationMode_0" value="merge" %s />', case when (self.i_validationMode = 'merge') then 'checked="checked"' else '' end)); ?> Merge
                        </label>
                        <br />
                        <label>
                          <?vsp http(sprintf('<input type="radio" name="i_validationMode" id="i_validationMode_1" value="override" %s />', case when (self.i_validationMode = 'override') then 'checked="checked"' else '' end)); ?>  Override
                        </label>
                        <br />
                        <label>
                          <?vsp http(sprintf('<input type="radio" name="i_validationMode" id="i_validationMode_2" value="skip" %s />', case when (self.i_validationMode = 'skip') then 'checked="checked"' else '' end)); ?>  Skip
                        </label>
                        <br />
                        <label>
                          <?vsp http(sprintf('<input type="radio" name="i_validationMode" id="i_validationMode_3" value="ask" %s />', case when (self.i_validationMode = 'ask') then 'checked="checked"' else '' end)); ?> Ask
                        </label>
                      </td>
                    </tr>
                    <tr>
                      <th valign="top">
                        Specify fields to identify entries
                    </th>
                    <td>
                        <div style="height: 250px; overflow: auto;">
                        <table cellspacing="0" style="background-color: #fff;">
                          <?vsp
                              declare N, M integer;
                            declare data, fields any;

                              data := coalesce ((select deserialize (LV_FIELDS) from LDAP..LDAP_VALIDATION where LV_USER_ID = self.account_id), vector('P_NAME', '1'));
                            fields := LDAP..contact_fields ();
                              M := length (fields) / 2;
                              for (N := 0; N < M; N := N + 2)
                              {
                      	  ?>
                      	  <tr>
                      	    <td width="1%">
        	                      <?vsp http (sprintf ('<input type="checkbox" %s name="cb_item" value="%s"', case when (get_keyword (fields[N], data, '') <> '') then 'checked="checked"' else '' end, fields[N])); ?>
                      		  </td>
                              <td width="50%">
                      		    <?V fields[N+1] ?>
                      		  </td>
                              <td width="1%">
        	                      <?vsp http (sprintf ('<input type="checkbox" %s name="cb_item" value="%s"', case when (get_keyword (fields[M+N], data, '') <> '') then 'checked="checked"' else '' end, fields[M+N])); ?>
                              </td>
                              <td width="50%">
                                <?V fields[M+N+1] ?>
                              </td>
                          </tr>
                      	  <?vsp
                            }
                          ?>
                        </table>
                      </div>
                    </td>
                  </tr>
	              </table>
	            </div>

	            <div class="new-form-footer">
                  <v:button action="simple" name="i5_back" value="Back" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                      self.abStep := AB.WA.pop (self.abSteps);
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
                  <v:button action="simple" name="i5_import" value="Import" xhtml_class="form-button">
			            <v:on-post>
			              <![CDATA[
                        declare N, M integer;
                      declare tmp, params any;

                        declare exit handler for SQLSTATE '*'
                        {
                          if ((__SQL_STATE = 'TEST') or (__SQL_STATE like 'AB%')) 
                          {
                          self.vc_error_message := AB.WA.test_clear (__SQL_MESSAGE);
                          self.vc_is_valid := 0;
                          return;
                        }
                        resignal;
                      };
                        params := e.ve_params;

                      -- test tags value
                      self.v_tags := trim (self.i_tags.ufl_value);
                      AB.WA.test (self.v_tags, vector ('name', 'Tags', 'class', 'tags'));
                      tmp := AB.WA.tags2vector (self.v_tags);
                      tmp := AB.WA.vector_unique (tmp);
                      self.v_tags := AB.WA.vector2tags (tmp);

                        self.i_validationMode := get_keyword ('i_validationMode', params, 'ask');
                      self.i_validation := vector ();
                        self.v_grants := '';
                        self.v_acl := '';
                        for (N := 0; N < length (params); N := N + 4)
                        {
                        if (params[N] = 'cb_item')
                          {
                          self.i_validation := vector_concat (self.i_validation, vector (params[N+1]));
                      }
                          else if ((params [N] like 'f_fld_1_%') and (trim (params [N+1]) <> ''))
                          {
                            tmp := split_and_decode (trim (params[N+1]), 0, '\0\0,');
                            for (M := 0; M < length (tmp); M := M + 1)
                            {
                              if (not isnull (AB.WA.account_id (trim (tmp[M]))))
                                self.v_grants := self.v_grants || ',' || tmp[M];
                            }
                          }
                        }
                        self.v_grants := trim (self.v_grants, ',');
                        tmp  := DB.DBA.wa_aci_params (params);
                        if (length (tmp))
                          self.v_acl := serialize (tmp);

                        DB.DBA.wa_aci_validate (tmp);

                        self.abStep := '6';
                        self.vc_data_bind(e);
                       ]]>
                     </v:on-post>
                  </v:button>
                  <v:button action="simple" name="i5_cancel" value="Cancel" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        self.resetImport (0);
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                </div>
              </v:template>

              <v:template name="t13" type="simple" enabled="-- case when (self.abStep = '6') then 1 else 0 end">
                <?vsp
                  declare options any;

                  options := vector ();
                      if (self.i_type = 0)
                  {
                    -- vCard
                          if (self.i_source = 2)
                          {
                      options := vector ('tags', self.v_tags, 'mode', 2);
                    }
                    else
                    {
                      options := vector ('tags', self.v_tags);
                          }
                  }
                  else if (self.i_type = 1)
                  {
			                -- FOAF
                    options := vector ('tags', self.v_tags, 'contentItems', self.i_contentItems, 'contentPings', self.i_contentPings, 'contentType', -1, 'contentIRI', self.i_iri, 'contentDepth', self.i_contentDepth, 'contentLimit', self.i_contentLimit, 'contentFollow', self.i_contentFollow);
                  }
                  else if (self.i_type = 2)
                  {
			                -- CSV
                    options := vector ('tags', self.v_tags, 'maps', self.i_maps);
                  }
                  else if (self.i_type = 3)
                  {
			                -- LDAP
                    options := vector ('tags', self.v_tags, 'maps', self.i_maps);
                  }
                  else if (self.i_type = 4)
                  {
                    -- LinkedIn
                    options := vector ('tags', self.v_tags);
                  }
                  else if (self.i_type = 5)
                  {
                    -- CalDAV
                    options := vector ('tags', self.v_tags, 'user', self.i_uUser, 'password', self.i_uPassword);
                  }

                  if (self.v_grants <> '')
                    options := vector_concat (options, vector ('grants', self.v_grants));

                  if (self.v_acl <> '')
                    options := vector_concat (options, vector ('acls', self.v_acl));

                  options := vector_concat (options, vector ('validationMode', self.i_validationMode));

                  http (sprintf ('<input type="hidden" name="i_type" id="i_type" value="%V" />', encode_base64 (serialize (self.i_type))));
                  http (sprintf ('<input type="hidden" name="i_data" id="i_data" value="%V" />', encode_base64 (serialize (self.i_data))));
                  http (sprintf ('<input type="hidden" name="i_options" id="i_options" value="%V" />', encode_base64 (serialize (options))));
                  http (sprintf ('<input type="hidden" name="i_validation" id="i_validation" value="%V" />', encode_base64 (serialize (self.i_validation))));
                ?>
                <div class="new-form-header">
                  Import contacts
                </div>
                <div class="new-form-body">
                  <span id="progressMax" style="display: none;"><?V self.i_number ?></span>
                  <table id="progressTable" cellspacing="0">
                    <tr>
                      <td>
                        <div id="progressText"></div>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <div id="progressBar"></div>
                      </td>
                    </tr>
                  </table>
                </div>
                <div class="form-footer">
                  <v:button action="simple" name="btn_Background" xhtml_id="btn_Background" value="Background" xhtml_class="form-button">
	                <v:on-post>
	                  <![CDATA[
                        self.resetImport (1);
                      self.vc_data_bind(e);
	                  ]]>
	                </v:on-post>
	              </v:button>
                  <input type="button" id="btn_Stop" value="Stop" onclick="javascript: stopState(); return false;" xhtml_class="form-button" />
	            </div>
                <div id="askDiv" style="display: none;">
                  <br />
                  <span style="margin-left: 50px;">Select action for duplicated contact "<span id="askDiv_data">XXL</span>":</span>
                  <br /><br />
                  <label><input type="radio" name="i_ask" id="i_ask_0" value="merge" checked="checked" style="margin-left: 110px;" />Merge</label><br />
                  <label><input type="radio" name="i_ask" id="i_ask_1" value="override" style="margin-left: 110px;" />Override</label><br />
                  <label><input type="radio" name="i_ask" id="i_ask_2" value="skip" style="margin-left: 110px;" />Skip</label><br />
                </div>
                <script type="text/javascript">
                  <![CDATA[
                    OAT.MSG.attach(OAT, "PAGE_LOADED", initState);
                  ]]>
                </script>
	          </v:template>

          </v:template>

            <v:template name="t17" type="simple" enabled="--case when (self.abAction = 'export') then 1 else 0 end">
            <div class="new-form-header">
              <v:label format="%s" value="-- case when (length (self.abSelected)) then 'Export selected contacts' else 'Export all contacts' end" />
            </div>

            <div class="new-form-body">
              <table cellspacing="0">
                <tr>
                  <th rowspan="3" valign="center">
                    <v:label for="e_format" value="Content type" />
                  </th>
                  <td>
                      <label>
                        <input type="radio" name="e_format" id="e_format_0" value="vCard" checked="checked" onclick="changeExportName('e_file', ['.foaf', '.csv'], '.vcf');" />
                        vCard
                      </label>
                  </td>
                </tr>
                <tr>
                  <td>
                      <label>
                        <input type="radio" name="e_format" id="e_format_1" value="FOAF" onclick="changeExportName('e_file', ['.vcf', '.csv'], '.foaf');" />
                        FOAF
                      </label>
                  </td>
                </tr>
                <tr>
                  <td>
                      <label>
                        <input type="radio" name="e_format" id="e_format_2" value="csv" onclick="changeExportName('e_file', ['.foaf', '.vcf'], '.csv');" />
                        CSV
                      </label>
                  </td>
                </tr>
                <tr>
                  <th>
                    <v:label for="e_file" value="File name"/>
                  </th>
                  <td>
                    <v:text name="e_file" value="--'contacts.vcf'" xhtml_class="textbox" xhtml_size="40" />
                  </td>
                </tr>
              </table>
            </div>

            <div class="new-form-footer">
                <v:button action="simple" name="e_export" value="Export" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                      declare params, entries any;

                    params := e.ve_params;

                    http_rewrite ();
                    http_request_status ('HTTP/1.1 200 OK');
                      http_header (sprintf ('Content-Type: application/x-download\r\nContent-Disposition: inline; filename="%s"\r\n', self.e_file.ufl_value));

                      entries := case when length (self.abSelected) then self.abSelected else null end;
                      if (get_keyword ('e_format', params) = 'vCard')
                      {
                        http (AB.WA.export_vcard (self.domain_id, entries));
                      }
                      else if (get_keyword ('e_format', params) = 'FOAF')
                      {
                        http (AB.WA.export_foaf (self.domain_id, entries));
                      }
                      else if (get_keyword ('e_format', params) = 'csv')
                      {
                      http (AB.WA.export_csv_head ());
                        http (AB.WA.export_csv (self.domain_id, entries));
                    }
                    http_flush ();

                    self.abAction := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
              <v:button action="simple" name="e_cancel" value="Cancel" xhtml_class="form-button">
                <v:on-post>
                  <![CDATA[
                    self.abAction := 'browse';
                    self.vc_data_bind(e);
                  ]]>
                </v:on-post>
              </v:button>
            </div>

          </v:template>
          </div>
        </div>
      </vm:if>

      <vm:if test="self.abAction = 'settings'">
        <table id="MTB">
          <tr>
            <td id="LC">
              <div class="lc lc_close">
                <span onclick="javascript: vspxPost('command', 'select', 'settings', 'mode', '');" title="Settings" class="gems gems2">Settings</span>
                <span onclick="javascript: vspxPost('command', 'select', 'settings', 'mode', 'categoryBrowse');" title="Categories" class="gems gems2">Categories</span>
                <span onclick="javascript: vspxPost('command', 'select', 'settings', 'mode', 'publishBrowse');" title="Publications" class="gems gems2">Publications</span>
                <span onclick="javascript: vspxPost('command', 'select', 'settings', 'mode', 'subscribeBrowse');" title="Subscriptions" class="gems gems2">Subscriptions</span>
                <?vsp if (AB.WA.syncml_check()) { ?>
                <span onclick="javascript: vspxPost('command', 'select', 'settings', 'mode', 'syncmlBrowse');" title="SyncML" class="gems gems2">SyncML</span>
                <?vsp } ?>
              <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
                <span onclick="javascript: vspxPost('command', 'select', 'back');" title="Back" class="gems gems2">Back</span>
              </div>
            </td>
            <td id="RC">
                <div class="new-form-header">
                <?vsp
                  declare S, T varchar;

                  S := 'Preferences: ';
                  T := '';
                  if (self.abSubAction = '')
                  {
                    T := 'Settings';
                  }
                  else if (self.abSubAction = 'categoryBrowse')
                  {
                    T := 'Categories';
                  }
                  else if (self.abSubAction = 'categoryCreate')
                  {
                    T := 'Categories/Create';
                  }
                  else if (self.abSubAction = 'categoryUpdate')
                  {
                    T := 'Categories/Update';
                  }
                  else if (self.abSubAction = 'publishBrowse')
                  {
                    T := 'Publications';
                  }
                  else if (self.abSubAction = 'publishCreate')
                  {
                    T := 'Publications/Create';
                  }
                  else if (self.abSubAction = 'publishUpdate')
                  {
                    T := 'Publications/Update';
                  }
                  else if (self.abSubAction = 'subscribeBrowse')
                  {
                    T := 'Subscriptions';
                  }
                  else if (self.abSubAction = 'subscribeCreate')
                  {
                    T := 'Subscriptions/Create';
                  }
                  else if (self.abSubAction = 'subscribeUpdate')
                  {
                    T := 'Subscriptions/Update';
                  }
                  else if (self.abSubAction = 'syncmlBrowse')
                  {
                    T := 'SyncML';
                  }
                  else if (self.abSubAction = 'syncmlCreate')
                  {
                    T := 'SyncML/Create';
                  }
                  else if (self.abSubAction = 'syncmlUpdate')
                  {
                    T := 'SyncML/Update';
                  }
                  else if (self.abSubAction = 'syncmlExec')
                  {
                    T := 'SyncML/Execute';
                  }
                  http (S || T);
                ?>
      </div>
              <vm:if test="self.abSubAction =''">
                <div id="s" class="c1">
                  <div class="tabs">
                    &nbsp;<vm:tabCaption tab="s" tabsCount="2" tabNo="0" caption="Main" />
                    &nbsp;<vm:tabCaption tab="s" tabsCount="2" tabNo="1" caption="Discussion" />
                  </div>
                  <div class="contents">
                    <div id="s_content_0" class="tabContent">
                      <table class="form-body" cellspacing="0">
                  <tr>
                    <th width="30%">
                      <v:label for="f_chars" value="Contact name display"/>
                    </th>
                    <td>
                            <?vsp http(sprintf('<input type="radio" name="r_chars" id="r_chars_0" value="0" %s />', case when (cast(get_keyword('chars', self.settings, '0') as integer) = 0) then 'checked="checked"' else '' end)); ?>
                      <xsl:call-template name="nbsp"/><vm:label for="r_chars_0" value="--'show everything'" />
                    </td>
                  </tr>
                  <tr>
                    <th />
                    <td>
                            <?vsp http(sprintf('<input type="radio" name="r_chars" id="r_chars_1" value="1" %s />', case when (cast(get_keyword('chars', self.settings, '0') as integer) = 0) then '' else 'checked="checked"' end)); ?>
                      <xsl:call-template name="nbsp"/><vm:label for="r_chars_1" value="--'show no more than'" /><xsl:call-template name="nbsp"/>
                      <v:text name="f_chars" null-value="--''" value="--get_keyword('chars', self.settings, '60')" xhtml_size="3"/>
                      <xsl:call-template name="nbsp"/><vm:label for="r_chars_1" value="--'characters'" /><xsl:call-template name="nbsp"/>
                    </td>
                  </tr>
                  <tr>
                    <th width="30%"/>
                    <td>
                      <v:check-box name="f_tbLabels" xhtml_id="f_tbLabels" is-boolean="1" true-value="1" false-value="0" value="--cast(get_keyword('tbLabels', self.settings, '1') as integer)" />
                      <vm:label for="f_tbLabels" value="Show toolbar labels"/>
                    </td>
                  </tr>
                  <tr>
                    <th>
                      <v:label for="f_rows" value="Rows per page"/>
                    </th>
                    <td>
                      <v:text name="f_rows" value="--get_keyword('rows', self.settings, '10')" xhtml_size="3"/>
                    </td>
                  </tr>
                  <tr>
                    <th>
                      Atom File Version
                    </th>
                    <td>
                      <v:select-list name="f_atomVersion">
                        <v:item value="0.3" name="0.3"/>
                        <v:item value="1.0" name="1.0"/>
                        <v:before-data-bind>
                          <![CDATA[
                            control.ufl_value := get_keyword('atomVersion', self.settings, '1.0');
                          ]]>
                        </v:before-data-bind>
                      </v:select-list>
                    </td>
                  </tr>
                </table>
                </div>
                    <div id="s_content_1" class="tabContent" style="display: none;">
                      <table class="form-body" cellspacing="0">
                        <v:template name="t16" type="simple" enabled="--either (equ (AB.WA.discussion_check (), 1), 0, 1)">
                          <tr>
                            <td class="error_text" colspan="2">
                              <b>The Discussion feature is disabled. You need to install the ODS Discussion package in order to use it.</b>
                            </td>
                          </tr>
                        </v:template>
                        <tr>
                          <th width="30%">&nbsp;</th>
                          <td>
                            <?vsp
                              declare S, T varchar;

                              S := '';
                    				  if (not AB.WA.discussion_check ())
                    				    S := 'disabled="disabled"';
                              T := '';
                    				  if (cast(get_keyword ('conv', self.settings, '0') as integer) = 1)
                    				    T := 'checked';
                              http (sprintf ('<input type="checkbox" name="f_conv" value="1" %s %s />', T, S));
                            ?>
                    				<vm:label for="f_conv" value="Enable discussions on this instance" />
                          </td>
                        </tr>
                        <tr>
                          <th width="30%">&nbsp;</th>
                          <td>
                            <?vsp
                              declare S, T varchar;

                              S := '';
                    				  if (not AB.WA.discussion_check ())
                    				    S := 'disabled="disabled"';
                              T := '';
                    				  if (cast(get_keyword ('conv_init', self.settings, '0') as integer) = 1)
                    				    T := 'checked';
                              http (sprintf ('<input type="checkbox" name="f_conv_init" value="1" %s %s />', T, S));
                            ?>
                    				<vm:label for="f_conv_init" value="Initialize the news group with existing posts" />
                          </td>
                        </tr>
                      </table>
                    </div>
                  </div>
                </div>
                <div class="new-form-footer">
                  <v:button action="simple" value="Save" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        declare rows, chars any;
                        declare conv, f_conv, f_conv_init, params any;

                        params := self.vc_page.vc_event.ve_params;

                        declare exit handler for SQLSTATE '*'
                        {
                          if (__SQL_STATE = 'TEST')
                          {
                            self.vc_error_message := AB.WA.test_clear(__SQL_MESSAGE);
                            self.vc_is_valid := 0;
                            return;
                          }
                          resignal;
                        };

                        rows := trim(self.f_rows.ufl_value);
                        chars := trim(self.f_chars.ufl_value);
                        if (get_keyword ('r_chars', self.vc_page.vc_event.ve_params, '-1') = '0')
                          chars := '0';

                        AB.WA.test (rows, vector('name', 'Rows per page', 'class', 'integer', 'type', 'integer', 'minValue', 5, 'maxValue', 1000));
                        AB.WA.test (chars, vector('name', 'Max name length', 'class', 'integer', 'type', 'integer', 'minValue', 0, 'maxValue', 1000));

                        conv := cast (get_keyword ('conv', self.settings, '0') as integer);
                        f_conv := cast (get_keyword ('f_conv', params, '0') as integer);
                        f_conv_init := cast (get_keyword ('f_conv_init', params, '0') as integer);

                        self.settings := AB.WA.set_keyword ('chars', self.settings, cast(cast(chars as integer) as varchar));
                        self.settings := AB.WA.set_keyword ('rows', self.settings, cast(cast(rows as integer) as varchar));
                        self.settings := AB.WA.set_keyword ('tbLabels', self.settings, self.f_tbLabels.ufl_selected);
                        self.settings := AB.WA.set_keyword ('atomVersion', self.settings, self.f_atomVersion.ufl_value);
                        self.settings := AB.WA.set_keyword ('conv', self.settings, f_conv);
                        self.settings := AB.WA.set_keyword ('conv_init', self.settings, f_conv_init);

                        insert replacing AB.WA.SETTINGS(S_DOMAIN_ID, S_DATA, S_ACCOUNT_ID) values(self.domain_id, serialize(self.settings), self.account_id);
                        commit work;

                        AB.WA.domain_gems_create(self.domain_id, self.account_id);

                    		if (AB.WA.discussion_check ())
                    		{
              					  AB.WA.nntp_update (self.domain_id, null, null, conv, f_conv);
                   				if (f_conv and f_conv_init)
              					    AB.WA.nntp_fill (self.domain_id);
              					}

                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                  <v:button action="simple" value="Clear" xhtml_onclick="javascript: return confirm (\'Do you want to reset settings to default?\');" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        delete from AB.WA.SETTINGS where S_ACCOUNT_ID = self.account_id;
                        AB.WA.nntp_update (self.domain_id, null, null, 1, 0);

                        self.settings := vector_concat (vector ('app', DB.DBA.WA_USER_APP_ENABLE (self.account_id)), AB.WA.settings (self.domain_id));
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                </div>
              </vm:if>

              <vm:if test="self.abSubAction = 'categoryBrowse'">
                <v:button value="--'New Category'" action="simple" xhtml_class="button">
                  <v:on-post>
                    <![CDATA[
                      self.abSubAction := 'categoryCreate';
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                <v:button value="Delete" action="simple" xhtml_onclick="--'javascript: return confirmAction(\'Are you sure that you want to delete this selected items?\', document.F1, \'cb_\', \'No items were selected for deletion.\');'" xhtml_class="button">
                  <v:on-post>
                    <![CDATA[
                      declare N integer;

                      for (N := 0; N < length(e.ve_params); N := N + 4)
                        if (e.ve_params[N] = 'cb_item')
                          delete from AB.WA.CATEGORIES where C_ID = cast (e.ve_params[N+1] as integer);

                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                <v:data-set name="ds_categories" sql="select * from AB.WA.CATEGORIES where C_DOMAIN_ID = :p0 order by C_NAME" nrows="0" scrollable="1">
                  <v:param name="p0" value="--self.domain_id" />

                  <v:template name="ds_categories_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                    <table id="categoriesTable" class="ODS_grid">
                      <thead>
                        <tr>
                          <th class="checkbox">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')" />
                          </th>
                          <th>Name</th>
                          <th class="action">Action</th>
                        </tr>
                      </thead>
                    </table>
                  </v:template>
                  <v:template name="ds_categories_repeat" type="repeat">

                    <v:template name="ds_categories_empty" type="if-not-exists" name-to-remove="table" set-to-remove="both">
                      <table>
                        <tr align="center">
                          <td colspan="3">No categories</td>
                        </tr>
                      </table>
                    </v:template>

                    <v:template name="ds_categories_browse" type="browse" name-to-remove="table" set-to-remove="both">
                      <table>
                        <tr>
                          <td class="checkbox">
                            <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('C_ID') ?>" onclick="selectCheck(this, 'cb_item')" />
                          </td>
                          <td nowrap="nowrap">
                            <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('C_NAME')" />
                          </td>
                          <td class="action">
                            <v:button value="Edit" action="simple" xhtml_class="button">
                              <v:on-post>
                                <![CDATA[
                                  self.v_id := (control.vc_parent as vspx_row_template).te_column_value('C_ID');
                                  self.abSubAction := 'categoryUpdate';
                                  self.vc_data_bind(e);
                                ]]>
                              </v:on-post>
                            </v:button>
                          </td>
                        </tr>
                      </table>
                    </v:template>

                  </v:template>

                  <v:template type="simple" name-to-remove="table" set-to-remove="top">
                    <table>
                    </table>
                  </v:template>

                </v:data-set>
                <script type="text/javascript">
                  <![CDATA[
                    coloriseTable('categoriesTable');
                  ]]>
                </script>
              </vm:if>
              <vm:if test="self.abSubAction in ('categoryCreate', 'categoryUpdate')">
                <v:before-data-bind>
                  <![CDATA[
                    declare params any;
                    params := self.vc_page.vc_event.ve_params;

                    if (isnull (get_keyword ('su_name', params)))
                    {
                      declare exit handler for not found goto _end;

                      if (self.abSubAction = 'categoryUpdate')
                      {
                        declare tmp any;

                        select C_NAME
                          into self.v_name
                          from AB.WA.CATEGORIES
                         where C_ID = self.v_id;

                         return;
                      }
                    _end:;

                      self.v_name := '';
                    }
                  ]]>
                </v:before-data-bind>
                <div class="new-form-body">
                  <table class="form-body" cellspacing="0">
                  <tr>
                    <th width="30%">
                        <label for="c_name">Name</label>
                    </th>
                    <td>
                        <v:text name="c_name" xhtml_id="c_name" value="--self.v_name" xhtml_size="60" />
                    </td>
                  </tr>
                </table>
                </div>
                <div class="new-form-footer">
                  <v:button action="simple" value="--case when self.abSubAction = 'categoryCreate' then 'Create' else 'Update' end" name="s1u_save" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        declare exit handler for SQLSTATE '*'
                        {
                          if (__SQL_STATE = 'TEST')
                          {
                            self.vc_error_message := AB.WA.test_clear(__SQL_MESSAGE);
                            self.vc_is_valid := 0;
                            return;
                          }
                          if (__SQL_STATE = '23000')
                          {
                            rollback work;
                            self.vc_error_message := 'A category with same name already exists, please specify unique category name.';
                            self.vc_is_valid := 0;
                            return;
                          }
                          resignal;
                        };

                        self.v_name := trim (self.c_name.ufl_value);
                        AB.WA.test (self.v_name, vector('name', 'Category Name', 'class', 'varchar', 'minLength', 1, 'maxLength', 50));

                        if (self.abSubAction = 'categoryCreate')
                        {
                          self.v_id := sequence_next ('AB.WA.category_id');
                          insert into AB.WA.CATEGORIES (C_ID, C_DOMAIN_ID, C_NAME, C_CREATED, C_UPDATED)
                            values (self.v_id, self.domain_id, self.v_name, now (), now ());
                        } else {
                          update AB.WA.CATEGORIES
                             set C_NAME = self.v_name,
                                 C_UPDATED = now ()
                           where C_ID = self.v_id
                             and C_DOMAIN_ID = self.domain_id;
                        }

                        self.abSubAction := 'categoryBrowse';
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                  <v:button action="simple" value="Cancel" name="s1u_cancel" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        self.abSubAction := 'categoryBrowse';
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                </div>
              </vm:if>

              <vm:if test="self.abSubAction in ('publishBrowse', 'subscribeBrowse', 'syncmlBrowse')">
                <v:button value="--'New'" action="simple" xhtml_class="button">
                  <v:after-data-bind>
                    <![CDATA[
                      if (self.abSubAction = 'publishBrowse')
                      {
                        control.ufl_value := 'New Publication';
                      }
                      else if (self.abSubAction = 'subscribeBrowse')
                      {
                        control.ufl_value := 'New Subscription';
                      }
                      else
                      {
                        control.ufl_value := 'New SyncML';
                      }
                    ]]>
                  </v:after-data-bind>
                  <v:on-post>
                    <![CDATA[
                      if (self.abSubAction = 'publishBrowse')
                      {
                        self.abSubAction := 'publishCreate';
                      }
                      else if (self.abSubAction = 'subscribeBrowse')
                      {
                        self.abSubAction := 'subscribeCreate';
                      }
                      else
                      {
                        self.abSubAction := 'syncmlCreate';
                      }
                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                <v:button value="Delete" action="simple" xhtml_onclick="--'javascript: return confirmAction(\'Are you sure that you want to delete the selected item(s)?\', document.F1, \'cb_item\', \'No items were selected for deletion.\');'" xhtml_class="button">
                  <v:on-post>
                    <![CDATA[
                      declare N integer;

                      for (N := 0; N < length(e.ve_params); N := N + 4)
                        if (e.ve_params[N] = 'cb_item')
                          delete from AB.WA.EXCHANGE where EX_ID = cast (e.ve_params[N+1] as integer);

                      self.vc_data_bind(e);
                    ]]>
                  </v:on-post>
                </v:button>
                <v:data-source name="dsrc_exchanges" expression-type="sql" nrows="0" initial-offset="0">
                  <v:before-data-bind>
                    <![CDATA[
                      control.ds_sql := sprintf ('select * from AB.WA.EXCHANGE where EX_DOMAIN_ID = %d and EX_TYPE = %d order by EX_NAME', self.domain_id, case when self.abSubAction = 'publishBrowse' then 0 else case when self.abSubAction = 'subscribeBrowse' then 1 else 2 end end);
                    ]]>
                  </v:before-data-bind>
                </v:data-source>

                <v:data-set name="ds_exchanges" data-source="self.dsrc_exchanges" scrollable="1">
                  <v:template name="ds_exchanges_header" type="simple" name-to-remove="table" set-to-remove="bottom">
                    <table id="preferences" class="ODS_grid">
                      <thead>
                        <tr>
                          <th class="checkbox">
                            <input type="checkbox" name="cb_all" value="Select All" onclick="selectAllCheckboxes(this, 'cb_item')" />
                          </th>
                          <th>Name</th>
                          <th width="5%" nowrap="nowrap">Executed On</th>
                          <th width="5%" nowrap="nowrap">Status</th>
                          <th class="action">Action</th>
                        </tr>
                      </thead>
                    </table>
                  </v:template>
                  <v:template name="ds_exchanges_repeat" type="repeat">

                    <v:template name="ds_exchanges_empty" type="if-not-exists" name-to-remove="table" set-to-remove="both">
                      <table>
                        <tr align="center">
                          <td colspan="5">
                            <?vsp
                              if (self.abSubAction = 'publishBrowse')
                              {
                                http ('No publications');
                              }
                              else if (self.abSubAction = 'subscribeBrowse')
                              {
                                http ('No subscriptions');
                              }
                              else
                              {
                                http ('No SyncMLs');
                              }
                            ?>
                          </td>
                        </tr>
                      </table>
                    </v:template>

                    <v:template name="ds_exchanges_browse" type="browse" name-to-remove="table" set-to-remove="both">
                      <table>
                        <tr>
                          <td align="center" valign="top">
                            <input type="checkbox" name="cb_item" value="<?V (control as vspx_row_template).te_column_value('EX_ID') ?>" onclick="selectCheck(this, 'cb_item')" />
                          </td>
                          <td nowrap="nowrap">
                            <v:label value="--(control.vc_parent as vspx_row_template).te_column_value('EX_NAME')" />
                          </td>
                          <td nowrap="nowrap">
                            <v:label value="--AB.WA.dt_format ((control.vc_parent as vspx_row_template).te_column_value('EX_EXEC_TIME'), 'Y-M-D H:N')" />
                          </td>
                          <td nowrap="nowrap">
                      		  <?vsp
                      		    if ((control as vspx_row_template).te_column_value('EX_EXEC_LOG') is not null)
                      		    {
                      		      http (sprintf ('<a href="#" onclick="javascript: window.open (\'message.vspx?msg=%U\', \'calendar_message\', \'top=100, left=100, scrollbars=yes, resize=yes, menubar=no, height=420, width=500\');"><img src="/ods/images/icons/stop_16.png" border="0"/></a>', (control as vspx_row_template).te_column_value('EX_EXEC_LOG')));
                      		    }
                      		    else
                      		    {
                      		      http ('OK');
                      		    }
                      		  ?>
                          </td>
                          <td nowrap="nowrap">
                            <v:button value="Edit" action="simple" xhtml_class="button">
                              <v:on-post>
                                <![CDATA[
                                  self.ve_id := (control.vc_parent as vspx_row_template).te_column_value('EX_ID');
                                  if (self.abSubAction = 'publishBrowse')
                                  {
                                    self.abSubAction := 'publishUpdate';
                                  }
                                  else if (self.abSubAction = 'subscribeBrowse')
                                  {
                                    self.abSubAction := 'subscribeUpdate';
                                  }
                                  else
                                  {
                                    self.abSubAction := 'syncmlUpdate';
                                  }
                                  self.vc_data_bind(e);
                                ]]>
                              </v:on-post>
                            </v:button>
                            <v:button value="Sync" action="simple" xhtml_class="button">
                              <v:on-post>
                                <![CDATA[
                                  declare exit handler for SQLSTATE '*'
                                  {
                                    if (__SQL_STATE like 'AB%')
                                    {
                                      self.vc_error_message := AB.WA.test_clear(__SQL_MESSAGE);
                                      self.vc_is_valid := 0;
                                      return;
                                    }
                                    resignal;
                                  };
                                  self.ve_id := (control.vc_parent as vspx_row_template).te_column_value('EX_ID');
                                  if (self.abSubAction = 'syncmlBrowse')
                                  {
                                    self.abSubAction := 'syncmlExec';
                                  } else {
                                  AB.WA.exchange_exec (self.ve_id);
                                  }
                                  self.vc_data_bind(e);
                                ]]>
                              </v:on-post>
                            </v:button>
                          </td>
                        </tr>
                      </table>
                    </v:template>

                  </v:template>

                  <v:template type="simple" name-to-remove="table" set-to-remove="top">
                    <table>
                    </table>
                  </v:template>

                </v:data-set>
              </vm:if>

              <v:template name="t20" type="simple" enabled="--case when self.abSubAction in ('publishCreate', 'publishUpdate', 'subscribeCreate', 'subscribeUpdate', 'syncmlCreate', 'syncmlUpdate') then 1 else 0 end">
                <v:before-data-bind>
                  <![CDATA[
                    declare params any;
                    params := self.vc_page.vc_event.ve_params;

                    if (isnull (get_keyword ('exc_name', params)))
                    {
                      declare exit handler for not found goto _end2;

                      if (self.abSubAction in  ('publishUpdate', 'subscribeUpdate', 'syncmlUpdate'))
                      {
                        select EX_TYPE,
                               EX_NAME,
                               EX_UPDATE_TYPE,
                               EX_UPDATE_PERIOD,
                               EX_UPDATE_FREQ,
                               deserialize (EX_OPTIONS)
                          into self.ve_type,
                               self.ve_name,
                               self.ve_update_type,
                               self.ve_update_period,
                               self.ve_update_freq,
                               self.ve_options
                          from AB.WA.EXCHANGE
                         where EX_ID = self.ve_id;

                         return;
                      }
                    _end2:;

                      self.ve_type := case when (self.abSubAction = 'publishCreate') then 0 else case when (self.abSubAction = 'subscribeCreate') then 1 else 2 end end;
                      self.ve_id := null;
                      self.ve_name := '';
                      self.ve_update_type := case when (self.abSubAction in ('publishCreate', 'syncmlCreate')) then 1 else 2 end;
                      self.ve_update_period := case when (self.abSubAction in ('publishCreate', 'syncmlCreate')) then null else 'hourly' end;
                      self.ve_update_freq := case when (self.abSubAction in ('publishCreate', 'syncmlCreate')) then null else 1 end;
                      self.ve_options := vector ();
                    }
                  ]]>
                </v:before-data-bind>
                <div class="new-form-body">
                  <table cellspacing="0">
                    <tr>
                      <th width="30%">
                        <vm:label for="exc_name" value="Name" />
                      </th>
                      <td>
                        <v:text name="exc_name" xhtml_id="exc_name" null-value="--''" value="--self.ve_name" xhtml_size="60" />
                      </td>
                    </tr>
                    <vm:if test="self.abSubAction not in ('syncmlCreate', 'syncmlUpdate')">
                    <tr>
                      <th rowspan="<?V case when (self.abSubAction in ('publishCreate', 'publishUpdate')) then 3 else 2 end ?>" valign="top">
                        Refresh type
                      </th>
                      <td nowrap="nowarap">
                        <label>
                          <v:radio-button name="exc_update_type_0" group-name="exc_update_type" value="0">
                            <v:before-render>
                              <![CDATA[
                                control.ufl_selected := either (lte (self.ve_update_type, 0), 1, 0);
                              ]]>
                            </v:before-render>
                          </v:radio-button>
                          <b>manually</b>
                        </label>
                      </td>
                    </tr>
                    <vm:if test="self.abSubAction in ('publishCreate', 'publishUpdate')">
                      <tr>
                        <td nowrap="nowarap">
                          <label>
                            <v:radio-button name="exc_update_type_1" group-name="exc_update_type" value="1">
                              <v:before-render>
                                <![CDATA[
                                  control.ufl_selected := either (equ (self.ve_update_type, 1), 1, 0);
                                ]]>
                              </v:before-render>
                            </v:radio-button>
                            <b>after any entry is changed</b>
                          </label>
                        </td>
                      </tr>
                    </vm:if>
                    <tr>
                      <td nowrap="nowarap">
                        <label>
                          <v:radio-button name="exc_update_type_2" group-name="exc_update_type" value="2">
                            <v:before-render>
                              <![CDATA[
                                control.ufl_selected := either (equ (self.ve_update_type, 2), 1, 0);
                              ]]>
                            </v:before-render>
                          </v:radio-button>
                          <b>every</b>
                        </label>
                        <v:text name="exc_update_freq" value="--self.ve_update_freq" xhtml_size="2" />
                        <v:select-list name="exc_update_period">
                          <v:item value="hourly" name="hour(s)" />
                          <v:item value="daily" name="day(s)" />
                          <v:before-data-bind>
                            <![CDATA[
                              control.ufl_value := self.ve_update_period;
                            ]]>
                          </v:before-data-bind>
                        </v:select-list>
                      </td>
                    </tr>
                    </vm:if>
                    <tr>
                      <td colspan="2" class="new-section">
                        <?V case when (self.abSubAction in ('publishCreate', 'publishUpdate')) then 'Destination' else  case when (self.abSubAction in ('subscribeCreate', 'subscribeUpdate')) then 'Source' else  'Exchange' end end ?>
                      </td>
                    </tr>
                    <vm:if test="self.abSubAction not in ('syncmlCreate', 'syncmlUpdate')">
                    <tr>
                        <th rowspan="<?V case when (self.abSubAction in ('subscribeCreate', 'subscribeUpdate')) then 3 else 2 end ?>" valign="top">
                        <?V case when (self.abSubAction in ('publishCreate', 'publishUpdate')) then 'Destination' else  'Source' end ?> type
                      </th>
                      <td nowrap="nowarap">
                        <label>
                            <v:radio-button name="exc_options_type_1" xhtml_id="exc_options_type_1" group-name="exc_options_type" value="1" xhtml_onchange="javascript: destinationChange(this, {show: [\'exc_options_name_button\'], clear: [\'exc_options_name\'], exec: [excLabel]});">
                            <v:before-render>
                              <![CDATA[
                                  control.ufl_selected := either (lte (get_keyword ('type', coalesce (self.ve_options, vector ()), 1), 1), 1, 0);
                              ]]>
                            </v:before-render>
                          </v:radio-button>
                            <b>WebDAV File Path</b>
                        </label>
                      </td>
                    </tr>
                      <vm:if test="self.abSubAction in ('subscribeCreate', 'subscribeUpdate')">
                    <tr>
                      <td nowrap="nowarap">
                        <label>
                              <v:radio-button name="exc_options_type_3" xhtml_id="exc_options_type_3" group-name="exc_options_type" value="3" xhtml_onchange="javascript: destinationChange(this, {hide: [\'exc_options_name_button\'], clear: [\'exc_options_name\'], exec: [excLabel]});">
                              <v:before-render>
                                <![CDATA[
                                  control.ufl_selected := either (equ (get_keyword ('type', coalesce (self.ve_options, vector ()), 1), 3), 1, 0);
                                ]]>
                              </v:before-render>
                            </v:radio-button>
                            <b>CardDAV Path</b>
                          </label>
                        </td>
                      </tr>
                      </vm:if>
                      <tr>
                        <td nowrap="nowarap">
                          <label>
                            <v:radio-button name="exc_options_type_2" xhtml_id="exc_options_type_2" group-name="exc_options_type" value="2" xhtml_onchange="javascript: destinationChange(this, {hide: [\'exc_options_name_button\'], clear: [\'exc_options_name\'], exec: [excLabel]});">
                            <v:before-render>
                              <![CDATA[
                                  control.ufl_selected := either (equ (get_keyword ('type', coalesce (self.ve_options, vector ()), 1), 2), 1, 0);
                              ]]>
                            </v:before-render>
                          </v:radio-button>
                          <b>URL</b>
                        </label>
                      </td>
                    </tr>
                    </vm:if>
                    <tr>
                      <th>
                        <vm:if test="self.abAction in ('syncmlCreate', 'syncmlUpdate')">
                          <label for="exc_options_name">WebDAV SyncML Path</label>
                        </vm:if>
                        <vm:if test="self.abAction not in ('syncmlCreate', 'syncmlUpdate')">
                          <label for="exc_options_name"><span id="excLabel">WebDAV File Name (.ics)</span></label>
                        </vm:if>
                      </th>
                      <td>
                        <v:text name="exc_options_name" xhtml_id="exc_options_name" value="--get_keyword ('name', self.ve_options)" xhtml_size="60" />
                        <input type="button" id="exc_options_name_button" value="Browse..." onclick="davBrowse ('exc_options_name', <?V case when (self.abSubAction in ('syncmlCreate', 'syncmlUpdate')) then 'true' else 'false' end ?>);" style="display: <?V case when (get_keyword ('type', self.ve_options, 1) <> 1) then 'none' else '' end ?>" />
                            <![CDATA[
                    		    <script type="text/javascript">
                              OAT.Loader.load(['dav'], function(){OAT.WebDav.init(davOptions);});
                    		    </script>
                            ]]>
                      </td>
                    </tr>
                    <tr>
                      <th>
                        <vm:label for="exc_options_user" value="User" />
                      </th>
                      <td>
                        <v:text name="exc_options_user" xhtml_id="exc_options_user" value="--get_keyword ('user', self.ve_options)" null-value="''" />
                      </td>
                    </tr>
                    <tr>
                      <th>
                        <vm:label for="exc_options_password" value="Password" />
                      </th>
                      <td>
                        <v:text name="exc_options_password" xhtml_id="exc_options_password" type="password"  value="--get_keyword ('password', self.ve_options)" null-value="''" />
                      </td>
                    </tr>
                    <tr>
                      <td colspan="2" class="new-section">
                        Options
                      </td>
                    </tr>
                    <vm:if test="self.abSubAction in ('syncmlCreate', 'syncmlUpdate')">
                      <tr>
                        <th>
                          <vm:label for="exc_options_mode" value="Sync mode" />
                        </th>
                        <td>
                          <v:select-list name="exc_options_mode" xhtml_id="exc_options_mode">
                            <v:item value="0" name="Update both" />
                            <v:item value="1" name="Update client" />
                            <v:item value="-1" name="Update SyncML server" />
                            <v:before-data-bind>
                              <![CDATA[
                                control.ufl_value := get_keyword ('mode', self.ve_options);
                                control.vc_data_bound := 1;
                              ]]>
                            </v:before-data-bind>
                          </v:select-list>
                        </td>
                      </tr>
                    </vm:if>
                    <tr>
                      <th>
                        <vm:label for="exc_tags_include" value="Include with tags (comma-separated)" />
                      </th>
                      <td>
                        <v:text name="exc_tags_include" xhtml_id="exc_tags_include" value="--get_keyword ('tagsInclude', self.ve_options)" xhtml_class="textbox" xhtml_size="60" />
                        <input type="button" value="Clear" onclick="javascript: document.F1.elements['exc_tags_include'].value = ''" class="button" />
                      </td>
                    </tr>
                    <?vsp self.myTags ('exc_tags_include'); ?>
                    <tr>
                      <th>
                        <vm:label for="exc_tags_exclude" value="Exclude with tags (comma-separated)" />
                      </th>
                      <td>
                        <v:text name="exc_tags_exclude" xhtml_id="exc_tags_exclude" value="--get_keyword ('tagsExclude', self.ve_options)" xhtml_class="textbox" xhtml_size="60" />
                        <input type="button" value="Clear" onclick="javascript: document.F1.elements['exc_tags_exclude'].value = ''" class="button" />
                      </td>
                    </tr>
                    <?vsp self.myTags ('exc_tags_exclude'); ?>
                    <vm:if test="self.abSubAction in ('syncmlCreate', 'syncmlUpdate')">
                      <tr>
                        <th>
                          <vm:label for="exc_tags" value="Tags for incoming entries (comma-separated)" />
                        </th>
                        <td>
                          <v:text name="exc_tags" xhtml_id="exc_tags" value="--get_keyword ('tags', self.ve_options)" xhtml_class="textbox" xhtml_size="60" />
                          <input type="button" value="Clear" onclick="javascript: document.F1.elements['exc_tags'].value = ''" class="button" />
                        </td>
                      </tr>
                      <?vsp self.myTags ('exc_tags'); ?>
                    </vm:if>
                  </table>
                  <script type="text/javascript">
                    <![CDATA[
                      destinationChange($('exc_options_type_1'), {show: ['exc_options_name_button'], clear: ['exc_options_name'], exec: [excLabel]});
                      destinationChange($('exc_options_type_3'), {hide: ['exc_options_name_button'], clear: ['exc_options_name'], exec: [excLabel]});
                      destinationChange($('exc_options_type_2'), {hide: ['exc_options_name_button'], clear: ['exc_options_name'], exec: [excLabel]});
                    ]]>
                  </script>
                </div>
                <div class="new-form-footer">
                  <v:button action="simple" value="--case when self.abSubAction in ('publishCreate', 'subscribeCreate', 'syncmlCreate') then 'Create' else 'Update' end" name="exc_save" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        declare _type, _name, _nameTest, _user, _password, _mode, _tagsInclude, _tagsExclude, _tags any;
                        declare tmp, params any;

                        declare exit handler for SQLSTATE '*'
                        {
                          if (__SQL_STATE = 'TEST')
                          {
                            self.vc_error_message := AB.WA.test_clear(__SQL_MESSAGE);
                            self.vc_is_valid := 0;
                            return;
                          }
                          resignal;
                        };
                        params := self.vc_page.vc_event.ve_params;


                        self.ve_name := trim (self.exc_name.ufl_value);
                        self.ve_update_freq := null;
                        self.ve_update_period := null;
                        if (self.exc_update_type_0.ufl_selected)
                        {
                          self.ve_update_type := 0;
                        }
                        else if (self.exc_update_type_1.ufl_selected)
                        {
                          self.ve_update_type := 1;
                        }
                        else if (self.exc_update_type_2.ufl_selected)
                        {
                          self.ve_update_type := 2;
                          self.ve_update_freq := self.exc_update_freq.ufl_value;
                          self.ve_update_period := self.exc_update_period.ufl_value;
                        }
                        if (self.abSubAction in ('syncmlCreate', 'syncmlUpdate'))
                        {
                          _type := 1;
                        } else {
                        _type := 0;
                        if (self.exc_options_type_1.ufl_selected)
                        {
                          _type := 1;
                        }
                        else if (self.exc_options_type_2.ufl_selected)
                        {
                          _type := 2;
                        }
                          else if (self.exc_options_type_3.ufl_selected)
                          {
                            _type := 3;
                          }
                        }
                        _name := trim (self.exc_options_name.ufl_value);
                        if (self.abSubAction in ('syncmlCreate', 'syncmlUpdate'))
                          _name := _name || '/';
                        if (_type = 1)
                        {
                          _name := '/' || _name;
                        _name := replace (_name, '//', '/');
                        }
                        _nameTest := ODS..dav_path_normalize(_name);
                        if (self.abSubAction in ('syncmlCreate', 'syncmlUpdate'))
                        {
                          if ((DB.DBA.yac_syncml_version_get (_nameTest) = 'N') or (DB.DBA.yac_syncml_type_get (_nameTest) not in ('vcard_11', 'vcard_12')))
                            signal ('TEST', 'Bad SyncML folder.<>');
                        }

                        _user := trim (self.exc_options_user.ufl_value);
                        _password := self.exc_options_password.ufl_value;
                        if (_type = 1)
                        {
                          tmp := '1__';
                          if ((self.ve_type = 0) or (self.ve_type = 2))
                          {
                            _nameTest := AB.WA.dav_parent (_nameTest);
                            tmp := '11_';
                          }
                          if (not AB.WA.dav_check_authenticate (_nameTest, _user, _password, tmp))
                          {
                            signal ('TEST', 'The user has no rights for this folder.<>');
                          }
                        }

                        _mode := cast (self.exc_options_mode.ufl_value as integer);

                        tmp := trim (self.exc_tags_include.ufl_value);
                        AB.WA.test (tmp, vector ('name', 'Include Tags', 'class', 'tags'));
                        tmp := AB.WA.tags2vector (tmp);
                        tmp := AB.WA.vector_unique (tmp);
                        _tagsInclude := AB.WA.vector2tags (tmp);

                        tmp := trim (self.exc_tags_exclude.ufl_value);
                        AB.WA.test (tmp, vector ('name', 'Exclude Tags', 'class', 'tags'));
                        tmp := AB.WA.tags2vector (tmp);
                        tmp := AB.WA.vector_unique (tmp);
                        _tagsExclude := AB.WA.vector2tags (tmp);

                        tmp := trim (self.exc_tags.ufl_value);
                        AB.WA.test (tmp, vector ('name', 'Tags', 'class', 'tags'));
                        tmp := AB.WA.tags2vector (tmp);
                        tmp := AB.WA.vector_unique (tmp);
                        _tags := AB.WA.vector2tags (tmp);

                        self.ve_options := vector ('type', _type, 'name', _name, 'user', _user, 'password', _password, 'mode', _mode, 'tagsInclude', _tagsInclude, 'tagsExclude', _tagsExclude, 'tags', _tags);

                        AB.WA.test (self.ve_name, vector('name', 'Name', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));
                        if (self.ve_update_type = 2)
                          AB.WA.test (self.ve_update_freq, vector ('name', 'Frequency', 'class', 'integer', 'minValue', 1, 'maxValue', 30));
                        AB.WA.test (_name, vector('name', 'Resource Name', 'class', 'varchar', 'minLength', 1, 'maxLength', 255));

                        self.ve_update_freq := cast (self.ve_update_freq as integer);
                        if (self.abSubAction in ('publishCreate', 'subscribeCreate', 'syncmlCreate'))
                        {
                          insert into AB.WA.EXCHANGE (EX_DOMAIN_ID, EX_TYPE, EX_NAME, EX_UPDATE_TYPE, EX_UPDATE_PERIOD, EX_UPDATE_FREQ, EX_OPTIONS)
                            values (self.domain_id, self.ve_type, self.ve_name, self.ve_update_type, self.ve_update_period, self.ve_update_freq, serialize (self.ve_options));
                        } else {
                          update AB.WA.EXCHANGE
                             set EX_NAME = self.ve_name,
                                 EX_UPDATE_TYPE = self.ve_update_type,
                                 EX_UPDATE_PERIOD = self.ve_update_period,
                                 EX_UPDATE_FREQ = self.ve_update_freq,
                                 EX_OPTIONS = serialize (self.ve_options)
                           where EX_ID = self.ve_id;
                        }

                        self.abSubAction := case when (self.abSubAction in ('publishCreate', 'publishUpdate')) then 'publishBrowse' else case when (self.abSubAction in ('subscribeCreate', 'subscribeUpdate')) then 'subscribeBrowse' else 'syncmlBrowse' end end;
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                  <v:button action="simple" value="Cancel" name="exc_cancel" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        self.abSubAction := case when (self.abSubAction in ('publishCreate', 'publishUpdate')) then 'publishBrowse' else case when (self.abSubAction in ('subscribeCreate', 'subscribeUpdate')) then 'subscribeBrowse' else 'syncmlBrowse' end end;
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                </div>
              </v:template>

              <v:template  name="t21" type="simple" enabled="--case when self.abSubAction in ('syncmlExec') then 1 else 0 end">
                <v:before-data-bind>
                  <![CDATA[
                    declare params any;
                    params := self.vc_page.vc_event.ve_params;

                    if (isnull (get_keyword ('exc_options_mode2', params)))
                    {
                      declare exit handler for not found goto _end3;
                      select EX_TYPE,
                             EX_NAME,
                             EX_UPDATE_TYPE,
                             EX_UPDATE_PERIOD,
                             EX_UPDATE_FREQ,
                             deserialize (EX_OPTIONS)
                        into self.ve_type,
                             self.ve_name,
                             self.ve_update_type,
                             self.ve_update_period,
                             self.ve_update_freq,
                             self.ve_options
                        from AB.WA.EXCHANGE
                       where EX_ID = self.ve_id;

                      self.ve_result := null;
                      self.exc_options_mode2.ufl_value := get_keyword ('mode', self.ve_options);
                    }

                   _end3:;
                  ]]>
                </v:before-data-bind>
                <div class="new-form-body">
                  <table cellspacing="0">
                    <tr>
                      <th width="30%">
                        Name
                      </th>
                      <td>
                        <?V self.ve_name ?>
                      </td>
                    </tr>
                    <tr>
                      <th>
                        <v:label for="exc_options_mode2" value="Sync mode" />
                      </th>
                      <td>
                        <v:select-list name="exc_options_mode2">
                          <v:item value="0" name="Update both" />
                          <v:item value="1" name="Update client" />
                          <v:item value="-1" name="Update SyncML server" />
                        </v:select-list>
                      </td>
                    </tr>
                    <?vsp
                      if (not isnull (self.ve_result))
                      {
                        http (sprintf ('<tr><th>Synced</th><td>In - %d, Out - %d</td></tr>', self.ve_result[0], self.ve_result[1]));
                      }
                    ?>
                  </table>
                </div>
                <div class="new-form-footer">
                  <v:button action="simple" value="--case when isnull (self.ve_result) then 'Sync' else 'New Sync' end" name="exc_sync_exec" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        declare _mode any;

                        _mode := cast (self.exc_options_mode2.ufl_value as integer);
                        self.ve_result := AB.WA.exchange_exec (self.ve_id, 0, _mode);

                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                  <v:button action="simple" value="--case when isnull (self.ve_result) then 'Cancel' else 'Exit' end" name="exc_sync_cancel" xhtml_class="form-button">
                    <v:on-post>
                      <![CDATA[
                        self.abSubAction := 'syncmlBrowse';
                        self.vc_data_bind(e);
                      ]]>
                    </v:on-post>
                  </v:button>
                </div>
              </v:template>

            </td>
          </tr>
        </table>
      </vm:if>
    </vm:pagebody>
  </vm:pagewrapper>
</v:page>
