<?xml version="1.0"?>
<!--
 -
 -  $Id$
 -
 -  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
 -  project.
 -
 -  Copyright (C) 1998-2019 OpenLink Software
 -
 -  This project is free software; you can redistribute it and/or modify it
 -  under the terms of the GNU General Public License as published by the
 -  Free Software Foundation; only version 2 of the License, dated June 1991.
 -
 -  This program is distributed in the hope that it will be useful, but
 -  WITHOUT ANY WARRANTY; without even the implied warranty of
 -  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 -  General Public License for more details.
 -
 -  You should have received a copy of the GNU General Public License along
 -  with this program; if not, write to the Free Software Foundation, Inc.,
 -  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 -
-->
<v:page name="export" xmlns:v="http://www.openlinksw.com/vspx/" doctype="-//W3C//DTD XHTML 1.0 Transitional//EN" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  <v:variable name="domain_id" type="integer" param-name="did" default="-1"/>
  <v:variable name="account_id" type="integer" param-name="aid" default="-1"/>
  <v:variable name="v_output" type="varchar" param-name="output" default="''"/>

  <v:variable name="v_max" type="varchar" default="'100'" param-name="max"/>
  <v:variable name="v_order" type="varchar" default="'c0'" param-name="order"/>
  <v:variable name="v_direction" type="varchar" default="'desc'" param-name="direction"/>

  <![CDATA[
    <?vsp
      declare N, M integer;
      declare f0, f1, f2, f3, f4 varchar;
      declare _params, tmp any;

      _params := self.vc_page.vc_event.ve_params;

      set http_charset = 'UTF-8';
      http_rewrite();
      http_request_status ('HTTP/1.1 200 OK');
      http_header ('Content-Type: text/xml; charset=UTF-8\r\n');

      if (self.v_output = 'about')
      {
        http ('<?xml version="1.0" encoding="UTF-8"?>\n');
        http ('<rss version="2.0">\n');
        http ('<channel>\n');
        for (select U_NAME, U_FULL_NAME, U_E_MAIL from DB.DBA.SYS_USERS where U_ID = self.account_id) do
        {
          http ('<title>');
            http_value (ODRIVE.WA.utf2wide(coalesce(U_FULL_NAME, U_NAME)));
          http ('</title>\n');
          http ('<description>');
            http_value (ODRIVE.WA.utf2wide(coalesce(U_FULL_NAME, U_NAME)));
          http ('</description>\n');
          http ('<managingEditor>');
            http_value (U_E_MAIL);
          http ('</managingEditor>\n');
          http ('<pubDate>');
            http_value (ODRIVE.WA.dt_rfc1123(now()));
          http ('</pubDate>\n');
          http ('<generator>');
            http_value ('Virtuoso Universal Server ' || sys_stat('st_dbms_ver'));
          http ('</generator>\n');
          http ('<webMaster>');
            http_value (U_E_MAIL);
          http ('</webMaster>\n');
          http ('<link>');
            http_value (ODRIVE.WA.odrive_url (self.domain_id));
          http ('</link>\n');
        }
        for select top 15 *
              from (select *
                      from (select top 15 RES_FULL_PATH, RES_MOD_TIME, RES_NAME, RES_OWNER
                              from WS.WS.SYS_DAV_RES
                                     join WS.WS.SYS_DAV_ACL_INVERSE on AI_PARENT_ID = RES_ID
                                       join WS.WS.SYS_DAV_ACL_GRANTS on GI_SUB = AI_GRANTEE_ID
                             where AI_PARENT_TYPE = 'R'
                               and GI_SUPER = self.account_id
                               and AI_FLAG = 'G'
                             order by RES_MOD_TIME desc
                           ) acl
                    union
                      select *
                        from (select top 15 RES_FULL_PATH, RES_MOD_TIME, RES_NAME, RES_OWNER
                                from WS.WS.SYS_DAV_RES
                               where RES_OWNER = self.account_id
                                 and RES_PERMS like '1%'
                               order by RES_MOD_TIME desc
                           ) own
                   ) sub
             order by RES_MOD_TIME desc do {

          http ('<item>\n');
            http ('<title>');
              http_value (ODRIVE.WA.utf2wide(RES_NAME));
            http ('</title>\n');
            http ('<description>');
              http_value (ODRIVE.WA.utf2wide(RES_FULL_PATH));
            http ('</description>\n');
            http ('<link>');
              http_value (concat(ODRIVE.WA.host_url(), ODRIVE.WA.utf2wide(RES_FULL_PATH)));
            http ('</link>\n');
            http ('<pubDate>');
              http_value (ODRIVE.WA.dt_rfc1123 (RES_MOD_TIME));
            http ('</pubDate>\n');
            http ('<ods:modified xmlns:ods="http://www.openlinksw.com/ods/">');
              http_value (ODRIVE.WA.dt_iso8601 (RES_MOD_TIME));
            http ('</ods:modified>\n');
          http ('</item>\n');
        }
        http ('</channel>\n');
        http ('</rss>');

   	    http_xslt (ODRIVE.WA.xslt_full ('rss2rdf.xsl'));
      }
      else if (self.v_output in ('rss', 'rdf', 'xbel', 'atom03', 'atom10'))
      {
        declare data, sql, params, state, msg, meta, result any;

        ODRIVE.WA.dc_set_base (data, 'path', get_keyword ('path', _params));
          for (N := 0; N < length (_params); N := N + 2)
        {
            if (_params[N] like 'f%_0')
            {
              M := replace (replace (_params[N], 'f', ''), '_0', '');
              f0 := get_keyword (sprintf ('f%s_0', M), _params);
              f1 := get_keyword (sprintf ('f%s_1', M), _params);
              f2 := get_keyword (sprintf ('f%s_2', M), _params);
              f3 := get_keyword (sprintf ('f%s_3', M), _params);
              f4 := get_keyword (sprintf ('f%s_4', M), _params);
            ODRIVE.WA.dc_set_criteria (data, M, f0, f3, f4, f1, f2);
          }
        }
        params := vector (get_keyword('path', _params, ''), 3, data, '', ODRIVE.WA.account_name (self.account_id));

        sql := 'select <MAX> rs.* from ODRIVE.WA.odrive_proc(rs0, rs1, rs2, rs3, rs4)(c0 varchar, c1 varchar, c2 integer, c3 varchar, c4 varchar, c5 varchar, c6 varchar, c7 varchar, c8 varchar, c9 varchar) rs where rs0 = ? and rs1 = ? and rs2 = ? and rs3 = ? and rs4 = ?';
        sql := replace(sql, '<MAX>', 'TOP ' || self.v_max);
        sql := concat(sql, ' order by c1, ', self.v_order, ' ', self.v_direction);

        state := '00000';
        exec(sql, state, msg, params, 0, meta, result);
        if (state <> '00000')
          goto _error;

        declare _header, _links varchar;

        _header := case when (self.v_output like '%atom%') then 'Content-Type: application/atom+xml\r\n' else 'Content-Type: text/xml\r\n' end;
        _links := ODS..PSH_HEADER_LINKS (self.domain_id);
        if (length (_links))
          _header := _header || sprintf ('Link: %s\r\n', _links);
        http_header (_header);

        http ('<?xml version ="1.0" encoding="UTF-8"?>\n');
          http ('<rss version="2.0">\n');
        http ('<channel>\n');
        for (select U_NAME, U_FULL_NAME, U_E_MAIL from DB.DBA.SYS_USERS where U_ID = self.account_id) do
        {
          http ('<title>');
            http_value (ODRIVE.WA.utf2wide(coalesce(U_FULL_NAME, U_NAME)));
          http ('</title>\n');
          http ('<description>');
            http_value (ODRIVE.WA.utf2wide(coalesce(U_FULL_NAME, U_NAME)));
          http ('</description>\n');
          http ('<managingEditor>');
            http_value (U_E_MAIL);
          http ('</managingEditor>\n');
          http ('<pubDate>');
            http_value (ODRIVE.WA.dt_rfc1123(now()));
          http ('</pubDate>\n');
          http ('<generator>');
            http_value ('Virtuoso Universal Server ' || sys_stat('st_dbms_ver'));
          http ('</generator>\n');
          http ('<webMaster>');
            http_value (U_E_MAIL);
          http ('</webMaster>\n');
          http ('<link>');
            http_value (ODRIVE.WA.odrive_url (self.domain_id));
          http ('</link>\n');
          if (self.v_output like '%atom%')
          {
            _links := ODS..PSH_ATOM_LINKS (self.domain_id);
            if (length (_links))
              http (_links);
          }
        }
        foreach (any row in result) do
        {
          http ('<item>\n');
            http ('<title>');
              http_value (ODRIVE.WA.utf2wide(row[8]));
            http ('</title>\n');
            http ('<description>');
              http_value (ODRIVE.WA.utf2wide(row[0]));
            http ('</description>\n');
            http ('<link>');
              http_value (concat(ODRIVE.WA.host_url (), ODRIVE.WA.utf2wide(row[0])));
            http ('</link>\n');
            http ('<pubDate>');
              http_value (ODRIVE.WA.dt_rfc1123 (stringdate(row[3])));
            http ('</pubDate>\n');
            if (self.v_output <> 'rss')
            {
              http ('<ods:modified xmlns:ods="http://www.openlinksw.com/ods/">');
                http_value (ODRIVE.WA.dt_iso8601 (stringdate(row[3])));
              http ('</ods:modified>\n');
            }
          http ('</item>\n');
        }
        http ('</channel>\n');
        http ('</rss>');
        if (self.v_output = 'rdf')
        {
     	    http_xslt (ODRIVE.WA.xslt_full ('rss2rdf.xsl'));
     	  }
        else if (self.v_output = 'xbel')
        {
    	    http_xslt (ODRIVE.WA.xslt_full ('rss2xbel.xsl'));
     	  }
        else if (self.v_output = 'atom03')
        {
    	    http_xslt (ODRIVE.WA.xslt_full ('rss2atom03.xsl'));
     	  }
        else if (self.v_output = 'atom10')
        {
    	    http_xslt (ODRIVE.WA.xslt_full ('rss2atom.xsl'));
      }
      }
      return;

    _error:
      http('<?xml version="1.0" ?><empty />');
    ?>
  ]]>
</v:page>
