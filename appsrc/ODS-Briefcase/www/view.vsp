<?vsp
--
--  $Id$
--
--  This file is part of the OpenLink Software Virtuoso Open-Source (VOS)
--  project.
--
--  Copyright (C) 1998-2019 OpenLink Software
--
--  This project is free software; you can redistribute it and/or modify it
--  under the terms of the GNU General Public License as published by the
--  Free Software Foundation; only version 2 of the License, dated June 1991.
--
--  This program is distributed in the hope that it will be useful, but
--  WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--  General Public License for more details.
--
--  You should have received a copy of the GNU General Public License along
--  with this program; if not, write to the Free Software Foundation, Inc.,
--  51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
--
  declare N integer;
  declare auth_uid, auth_pwd, mode, file, uri, saveUri, req_header, res_header, content, contentType varchar;

  mode := get_keyword('mode', params, '');
  file := get_keyword('file', params);
  auth_uid := ODRIVE.WA.session_user(params);
  auth_pwd := ODRIVE.WA.account_password (ODRIVE.WA.account_id (auth_uid));
  uri := ODRIVE.WA.http_escape (ODRIVE.WA.dav_url(file), 7);
  if (auth_uid = '')
  {
    http_rewrite ();
    http_request_status ('HTTP/1.1 302 Found');
    http_header (sprintf ('Location: %s\r\n', uri));
    return;
  }
  commit work;
  req_header :=
    'Accept-Charset: UTF-8,*\r\n'     ||
    'Keep-Alive: 300\r\n'             ||
    'Connection: keep-alive\r\n'      ||
    'Accept: image/png,*/*;q=0.5\r\n' ||
    sprintf('Authorization: Basic %s\r\n', encode_base64(concat(auth_uid, ':', auth_pwd)));
  content := http_client_ext (
    url=>uri,
                              http_method=>'GET',
                              http_headers=>req_header,
    headers=>res_header,
    n_redirects=>15
  );
  contentType := http_request_header (res_header, 'Content-Type');
  if (res_header[0] like 'HTTP/1._ 4__%' or res_header[0] like 'HTTP/1._ 5__%')
  {
    if (is_https_ctx ())
    {
      http_rewrite ();
      http_request_status ('HTTP/1.1 302 Found');
      http_header (sprintf ('Location: %s\r\n', uri));
      http_flush ();
      return;
    }
    content := res_header[0];
  }
  http_rewrite();
  if (length (content) = 0)
  {
    http_request_status ('HTTP/1.1 204 No Content');
  }
  else if ((contentType = 'text/plain') and (mode <> 'download'))
  {
    http_header (sprintf('Content-Type: %s\r\n', 'text/html'));
    http('<html><body><pre>\r\n');
    http(content);
    http('\r\n</pre></body></html>');
  }
  else if ((contentType in ('text/xml', 'text/html')) and (mode <> 'download'))
  {
    http_header (sprintf('Content-Type: %s\r\n', contentType));
    http(content);
  }
  else
  {
    declare pos integer;

    pos := strrchr (file, '/');
    if (pos is not null)
      file := subseq (file, pos + 1);
    http_header (sprintf ('Content-type: %s\r\nContent-Disposition: inline; filename="%s"\r\n', contentType, file));
    http(content);
  }
  http_flush();
?>
